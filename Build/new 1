    # script_decide_faction_ai
    # Input: arg1: faction_no
    # Output: none
    #called from triggers
  ("decide_faction_ai",
  #This handles political issues and faction issues
   [
    (store_script_param_1, ":faction_no"),


    (faction_get_slot, ":old_faction_ai_state", ":faction_no", slot_faction_ai_state),
    (faction_get_slot, ":old_faction_ai_object", ":faction_no", slot_faction_ai_object),
    (faction_get_slot, ":faction_marshal", ":faction_no", slot_faction_marshall),


    #Remove marshal if he has become too controversial,, or he has defected, or has been taken prisoner
    (try_begin),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        # (neq, ":faction_no", "fac_player_supporters_faction"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"), ########## NEW v3.5
        (ge, ":faction_marshal", "trp_player"),

        (store_faction_of_troop, ":marshal_faction", ":faction_marshal"),
        (try_begin),
            (eq, ":faction_marshal", "trp_player"),
            (assign, ":marshal_faction", "$players_kingdom"),
        (try_end),


        (assign, ":player_marshal_is_prisoner", 0),
        (try_begin),
            (eq, ":faction_marshal", "trp_player"),
            (eq, "$g_player_is_captive", 1),
            (assign, ":player_marshal_is_prisoner", 1),
        (try_end),


        #High controversy level, or marshal has defected, or is prisoner
        (this_or_next|neq, ":marshal_faction", ":faction_no"),
        (this_or_next|troop_slot_ge, ":faction_marshal", slot_troop_controversy, 80),
        (this_or_next|eq, ":player_marshal_is_prisoner", 1),
        (troop_slot_ge, ":faction_marshal", slot_troop_prisoner_of_party, 0),

        (assign, ":few_following_player_campaign", 0),
        (try_begin),
            (eq, ":faction_marshal", "trp_player"),
            (assign, ":vassals_following_player_campaign", 0),
            (gt, "$g_player_days_as_marshal", 1),
            (try_for_range, ":vassal", active_npcs_begin, active_npcs_end),
                (troop_slot_eq, ":vassal", slot_troop_occupation, slto_kingdom_hero),
                (store_faction_of_troop, ":vassal_faction", ":vassal"),
                (eq, ":vassal_faction", ":faction_no"),
                (call_script, "script_npc_decision_checklist_troop_follow_or_not", ":vassal"),
                (eq, reg0, 1),
                (val_add, ":vassals_following_player_campaign", 1),
            (try_end),
            (lt, ":vassals_following_player_campaign", 4),
            (assign, ":few_following_player_campaign", 1),
        (try_end),

        #Only remove marshal for controversy if offensive campaign in progress
        (this_or_next|neg|troop_slot_eq, ":marshal_faction", slot_troop_is_alive, 1),  ## he's alive/active  ######### NEW v3.6
        (this_or_next|eq, ":old_faction_ai_state", sfai_default),
        (this_or_next|eq, ":old_faction_ai_state", sfai_feast),
        (this_or_next|neq, ":marshal_faction", ":faction_no"),
        (this_or_next|eq, ":few_following_player_campaign", 1),
        (this_or_next|eq, ":player_marshal_is_prisoner", 1),
        (troop_slot_ge, ":faction_marshal", slot_troop_prisoner_of_party, 0),

        #No current issue on the agenda
        (this_or_next|faction_slot_eq, ":faction_no", slot_faction_political_issue, 0),
        (this_or_next|eq, ":player_marshal_is_prisoner", 1),
        (troop_slot_ge, ":faction_marshal", slot_troop_prisoner_of_party, 0),

        (faction_set_slot, ":faction_no", slot_faction_political_issue, 1), #Appointment of marshal
        (store_current_hours, ":hours"),
        (val_max, ":hours", 0),
        (faction_set_slot, ":faction_no", slot_faction_political_issue_time, ":hours"), #Appointment of marshal

        (faction_get_slot, ":old_marshall", ":faction_no", slot_faction_marshall),
        (try_begin),
          (ge, ":old_marshall", 0),
          (troop_get_slot, ":old_marshall_party", ":old_marshall", slot_troop_leaded_party),
          (party_is_active, ":old_marshall_party"),
          (party_set_marshal, ":old_marshall_party", 0),
        (try_end),

        (try_begin),
            (eq, "$players_kingdom", ":faction_no"),
            (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
            (call_script, "script_add_notification_menu", "mnu_notification_relieved_as_marshal", 0, 0),
            (call_script, "script_change_troop_renown", "trp_player", 15),   ####### NEW v3.5
        (else_try),
            (neq, ":old_marshall", "trp_player"),
            (call_script, "script_change_troop_renown", ":old_marshall", 15),
        (try_end),
        (faction_set_slot, ":faction_no", slot_faction_marshall, -1),
        (assign, ":faction_marshal", -1),


        ##diplomacy start+ add support for promoted kingdom ladies
        (try_for_range, ":active_npc", heroes_begin, heroes_end),#<- change active_npcs to heroes
        ##diplomacy end+
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", ":faction_no"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (try_begin),
            (eq, "$players_kingdom", ":faction_no"),
            (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
        (try_end),

    (else_try),     #If marshal not present, and not already on agenda, make political issue
        (eq, ":faction_marshal", -1),
        (neg|faction_slot_ge, ":faction_no", slot_faction_political_issue, 1), #This to avoid resetting votes every time
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neq, ":faction_no", "fac_player_supporters_faction"),

        (faction_set_slot, ":faction_no", slot_faction_political_issue, 1), #Appointment of marshal
        (store_current_hours, ":hours"),
        (val_max, ":hours", 0),
        (faction_set_slot, ":faction_no", slot_faction_political_issue_time, ":hours"), #Appointment of marshal

        ##diplomacy start+ add support for promoted kingdom ladies
        (try_for_range, ":active_npc", heroes_begin, heroes_end),#<- change active_npcs to heroes
        ##diplomacy end+
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", ":faction_no"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (try_begin),
            (eq, "$players_kingdom", ":faction_no"),
            (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
        (try_end),


    (else_try),    #If player is marshal, but not part of faction
        (eq, ":faction_marshal", "trp_player"),
        (neq, "$players_kingdom", ":faction_no"),

        (faction_set_slot, ":faction_no", slot_faction_political_issue, 1), #Appointment of marshal
        (store_current_hours, ":hours"),
        (val_max, ":hours", 0),
        (faction_set_slot, ":faction_no", slot_faction_political_issue_time, ":hours"), #Appointment of marshal

        (faction_get_slot, ":old_marshall", ":faction_no", slot_faction_marshall),
        (try_begin),
          (ge, ":old_marshall", 0),
          (troop_get_slot, ":old_marshall_party", ":old_marshall", slot_troop_leaded_party),
          (party_is_active, ":old_marshall_party"),
          (party_set_marshal, ":old_marshall_party", 0),
        (try_end),

        (faction_set_slot, ":faction_no", slot_faction_marshall, -1),
        (assign, ":faction_marshal", -1),

        ##diplomacy start+ add support for promoted kingdom ladies
        (try_for_range, ":active_npc", heroes_begin, heroes_end),#<- change active_npcs to heroes
        ##diplomacy end+
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", ":faction_no"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (try_begin),
            (eq, "$players_kingdom", ":faction_no"),
            (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
        (try_end),

    (try_end),

    #If the faction issue is a center no longer under faction control, remove and reset
    (try_begin),
        (faction_get_slot, ":faction_political_issue", ":faction_no", slot_faction_political_issue),
        (is_between, ":faction_political_issue", centers_begin, centers_end),
        (store_faction_of_party, ":disputed_center_faction", ":faction_political_issue"),
        (neq, ":disputed_center_faction", ":faction_no"),

        (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_faction_name, s4, ":faction_no"),
            (str_store_party_name, s5, ":disputed_center_faction"),
            (display_message, "@{!}DEBUG -- {s4} drops {s5} as issue as it has changed hands"),
        (try_end),

        #Reset political issue
        (faction_set_slot, ":faction_no", slot_faction_political_issue, 0),
        ##diplomacy start+ add support for promoted kingdom ladies
        (try_for_range, ":active_npc", heroes_begin, heroes_end),#<- change active_npcs to heroes
        ##diplomacy end+
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", ":faction_no"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (try_begin),
            (eq, "$players_kingdom", ":faction_no"),
            (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
        (try_end),

    (try_end),


    #Resolve the political issue on the agenda
    (try_begin),
        (faction_slot_ge, ":faction_no", slot_faction_political_issue, 1),
        # (neq, ":faction_no", "fac_player_supporters_faction"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"), ########## NEW v3.5

        #Do not switch marshals during a campaign
        (this_or_next|faction_slot_ge, ":faction_no", slot_faction_political_issue, centers_begin),
        # (display_message, "@line 27707"),
        (this_or_next|faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_feast),
        (faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_default),

        (faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),

        (assign, ":total_lords", 0),
        (assign, ":lords_who_have_voted", 0),
        (assign, ":popular_favorite", -1),

        #Reset number of votes
        (troop_set_slot, "trp_player", slot_troop_temp_slot, 0),
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
          (troop_set_slot, ":active_npc", slot_troop_temp_slot, 0),
        (try_end),

        #Tabulate votes

        ##diplomacy start+
        (try_begin),#count the player's vote
            (eq, "$players_kingdom", ":faction_no"),
            (ge, "$player_has_homage", 1),
            (troop_get_slot, ":lord_chosen_candidate", "trp_player", slot_troop_stance_on_faction_issue),
            (gt, ":lord_chosen_candidate", -1),
            #You may notice that I don't count the player for "total_lords" if he was undecided.
            #This is so faction behavior will not be changed from Native if the player did not
            #support anyone.
            (val_add, ":total_lords", 1),
            (val_add, ":lords_who_have_voted", 1),
            (troop_set_slot, ":lord_chosen_candidate", slot_troop_temp_slot, 1),
            (assign, ":popular_favorite", ":lord_chosen_candidate"),
        (try_end),
        (try_for_range, ":voting_lord", active_npcs_begin, active_npcs_end),#<- changed active_npcs_begin/end to heroes_begin/end
            (troop_slot_eq, ":voting_lord", slot_troop_is_alive, 1),  ######## NEW v3.5
            # (this_or_next|troop_slot_eq, ":voting_lord", slot_troop_occupation, slto_kingdom_hero),
            (troop_slot_eq, ":voting_lord", slot_troop_occupation, slto_kingdom_hero),
            # (is_between, ":voting_lord", active_npcs_begin, active_npcs_end),
            #the dead / retired / exiled do not vote
            (neg|troop_slot_ge, ":voting_lord", slot_troop_occupation, slto_retirement),
            (store_faction_of_troop, ":voting_lord_faction", ":voting_lord"),
            (eq, ":voting_lord_faction", ":faction_no"),
            (val_add, ":total_lords", 1),
            (troop_get_slot, ":lord_chosen_candidate", ":voting_lord", slot_troop_stance_on_faction_issue),
            (gt, ":lord_chosen_candidate", -1),
            (val_add, ":lords_who_have_voted", 1),
            (troop_get_slot, ":total_votes", ":lord_chosen_candidate", slot_troop_temp_slot),
            (val_add, ":total_votes", 1),
            (troop_set_slot, ":lord_chosen_candidate", slot_troop_temp_slot, ":total_votes"),
            (try_begin),
                (gt, ":popular_favorite", -1),
                (troop_get_slot, ":current_winner_votes", ":popular_favorite", slot_troop_temp_slot),
                (gt, ":total_votes", ":current_winner_votes"),
                (assign, ":popular_favorite", ":lord_chosen_candidate"),
            (else_try),
                (eq, ":popular_favorite", -1),
                (assign, ":popular_favorite", ":lord_chosen_candidate"),
            (try_end),
        (try_end),

        #Check to see if enough lords have voted
        (store_div, ":number_required_for_quorum", ":total_lords", 5),
        (val_mul, ":number_required_for_quorum", 4),

#        (gt, ":lords_who_have_voted", ":number_required_for_quorum"),

        (store_current_hours, ":hours_on_agenda"),
        (faction_get_slot, ":hours_when_put_on_agenda", ":faction_no", slot_faction_political_issue_time), #Appointment of marshal
        (val_sub, ":hours_on_agenda", ":hours_when_put_on_agenda"),

        ##diplomacy start+
        #Before, the maximum number of hours on the agenda for an issue before it became
        #eligible for resolution regardless of quorum was fixed at 120 (five days).
        #Modify this by 16 hours for every point of centralization, for a minimum
        #of 3 days and a maximum of 7 days.
        # (assign, ":hours_on_agenda_threshold", 120),
        # (assign, ":hours_on_agenda_threshold", 48),
        (assign, ":hours_on_agenda_threshold", 2),
        #(this_or_next|gt, ":lords_who_have_voted", ":number_required_for_quorum"),
        #    (ge, ":hours_on_agenda", 120),
        (this_or_next|gt, ":lords_who_have_voted", ":number_required_for_quorum"),
        (ge, ":hours_on_agenda", ":hours_on_agenda_threshold"),
        ##diplomacy end+

        (try_begin),
            (eq, "$cheat_mode", 1),
            (assign, reg4, ":lords_who_have_voted"),
            (assign, reg5, ":number_required_for_quorum"),
            (assign, reg7, ":hours_on_agenda"),
            (str_store_faction_name, s4, ":faction_no"),
            (display_message, "@{!}DEBUG -- Issue resolution for {s4}: {reg4} votes for a quorum of {reg5}, {reg7} hours on agenda"),
        (try_end),

        (try_begin),
          (eq, "$cheat_mode", 1),
          (display_message, "@{!}DEBUG -- Faction resolves political issue"),
        (try_end),

        #Resolve faction political issue
        (assign, ":winning_candidate", -1),
#
#      NEW BEHAVIOR
        (troop_get_slot, ":liege_choice", ":faction_leader", slot_troop_stance_on_faction_issue),
        (assign, ":min_liege_relation", 10),#<-- Same as in default
        (faction_get_slot, ":issue_on_table", ":faction_no", slot_faction_political_issue),
        #New override check
        (try_begin),
            #When the player is co-ruler of the kingdom, his/her support for the popular
            #candidate can be sufficient to guarantee success over the opposition of the
            #king/queen.
            (ge, ":faction_leader", 1),
            (eq, "$players_kingdom", ":faction_no"),
            (this_or_next|troop_slot_eq, ":faction_leader", slot_troop_spouse, "trp_player"),
                (troop_slot_eq, "trp_player", slot_troop_spouse, ":faction_leader"),
            (troop_slot_eq, "trp_player", slot_troop_stance_on_faction_issue, ":popular_favorite"),
            (assign, ":winning_candidate", ":popular_favorite"),
            (else_try),
                #The leader may overrule a choice he disagrees with, if he dislikes the candidate
                #sufficiently and has someone else in mind.
                (ge, ":faction_leader", 1),
            (neq, ":liege_choice", ":popular_favorite"),
            (gt, ":liege_choice", -1),
            (call_script, "script_troop_get_relation_with_troop", ":faction_leader", ":liege_choice"),
            (val_min, ":min_liege_relation", reg0),
                (call_script, "script_troop_get_relation_with_troop", ":faction_leader", ":popular_favorite"),
            (gt, ":min_liege_relation", reg0),
            (assign, reg0, 0),
                (try_begin),
               (troop_slot_ge, ":faction_leader", slot_troop_prisoner_of_party, 0),
               (store_random_in_range, reg0, 0, 2),
            (try_end),
            (try_begin),
                #The leader would have overruled the choice, but cannot because he is a prisoner.
                    #Print a message letting people know when this happens.
                (eq, reg0, 1),
                (gt, ":popular_favorite", -1),
                    (this_or_next|eq, "$players_kingdom", ":faction_no"),
                    (ge, "$cheat_mode", 1),
                    (str_store_faction_name, s4, ":faction_no"),
                    (str_store_troop_name, s5, ":popular_favorite"),
                    (str_store_troop_name, s0, ":faction_leader"),
                    (try_begin),
                        (eq, ":issue_on_table", 1),
                    (display_message, "@{s5} has the greatest support among the lords of the {s4} to be the next marshall.  {s0} is indisposed and cannot overrule their choice."),
                    (else_try),
                        (is_between, ":issue_on_table", centers_begin, centers_end),
                        (str_store_party_name, s1, ":issue_on_table"),
                    (display_message, "@{s5} has the greatest support among the lords of the {s4} to receive {s1}.  {s0} is indisposed and cannot overrule their choice."),
                    (try_end),
                (try_end),
            (eq, reg0, 0),
            (assign, ":winning_candidate", ":liege_choice"),
            (try_begin),
                #Print a message letting people know when this happens.
                (gt, ":popular_favorite", -1),
                (this_or_next|eq, "$players_kingdom", ":faction_no"),
                    (ge, "$cheat_mode", 1),
                (str_store_faction_name, s4, ":faction_no"),
                (str_store_troop_name, s5, ":popular_favorite"),
                (str_store_troop_name, s0, ":faction_leader"),
                (try_begin),
                    (eq, ":issue_on_table", 1),
                    (display_message, "@{s5} has the greatest support among the lords of the {s4} to be the next marshall, but {s0} overrules their choice."),
                (else_try),
                    (is_between, ":issue_on_table", centers_begin, centers_end),
                    (str_store_party_name, s1, ":issue_on_table"),
                    (display_message, "@{s5} has the greatest support among the lords of the {s4} to receive {s1}, but {s0} overrules their choice."),
                (try_end),
            (try_end),
        (else_try),
            #No override: use popular candidate
            (assign, ":winning_candidate", ":popular_favorite"),
        (try_end),
        ##diplomacy end+

        #Carry out faction decision
        (try_begin), #Nothing happens
            (eq, ":winning_candidate", -1),

        (else_try), #For player, create a menu to accept or refuse
            (eq, ":winning_candidate", "trp_player"),
            (eq, "$players_kingdom", ":faction_no"),
            (call_script, "script_add_notification_menu", "mnu_notification_player_faction_political_issue_resolved_for_player", 0, 0),
        (else_try),
            (eq, ":winning_candidate", "trp_player"),
            (neq, "$players_kingdom", ":faction_no"),

            (try_begin),
                (eq, "$cheat_mode", 1),
                (str_store_faction_name, s4, ":faction_no"),
                (str_store_party_name, s5, ":winning_candidate"),
                (display_message, "@{!}DEBUG -- {s4} drops {s5} as winner, for having changed sides"),
            (try_end),

            ##diplomacy start+ add support for promoted kingdom ladies
            (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),#<- change active_npcs to heroes
                (this_or_next|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
                    (is_between, ":active_npc", active_npcs_begin, active_npcs_end),
            ##diplomacy end+
                (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
                (eq, ":active_npc_faction", ":faction_no"),
                (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
            (try_end),
            (try_begin),
                (eq, "$players_kingdom", ":faction_no"),
                (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
            (try_end),

        (else_try),    #If candidate is not of winning faction, reset lrod votes
            (store_faction_of_troop, ":winning_candidate_faction", ":winning_candidate"),
            (neq, ":winning_candidate_faction", ":faction_no"),

            (try_begin),
                (eq, "$cheat_mode", 1),
                (str_store_faction_name, s4, ":faction_no"),
                (str_store_party_name, s5, ":winning_candidate"),
                (display_message, "@{!}DEBUG -- {s4} drops {s5} as winner, for having changed sides"),
            (try_end),
            ##diplomacy start+ add support for promoted kingdom ladies
            (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),#<- change active_npcs to heroes
                (this_or_next|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
                    (is_between, ":active_npc", active_npcs_begin, active_npcs_end),
            ##diplomacy end+
                (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
                (eq, ":active_npc_faction", ":faction_no"),
                (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
            (try_end),
            (try_begin),
                (eq, "$players_kingdom", ":faction_no"),
                (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
            (try_end),

        (else_try), #Honor awarded to another
            (faction_get_slot, ":issue_on_table", ":faction_no", slot_faction_political_issue),
            (try_begin), #A marshalship awarded to another
                (eq, ":issue_on_table", 1),
                (is_between, ":winning_candidate", active_npcs_begin, active_npcs_end),

                ##diplomacy start+ add support for promoted kingdom ladies
                (this_or_next|is_between, ":winning_candidate", active_npcs_begin, active_npcs_end),
                    (eq, "$players_kingdom", ":faction_no"),
                (this_or_next|troop_slot_eq, ":winning_candidate", slot_troop_occupation, slto_kingdom_hero),
                ##diplomacy end+
                (this_or_next|is_between, ":winning_candidate", active_npcs_begin, active_npcs_end), #Prevents bug in which player given marshaldom of kingdom of which he/she is not a member
                    (eq, "$players_kingdom", ":faction_no"),

                (assign, ":faction_marshal", ":winning_candidate"),
            (else_try), #A fief awarded to another
                (is_between, ":issue_on_table", centers_begin, centers_end),

                #If given to the player, resolved above
                (call_script, "script_give_center_to_lord", ":issue_on_table", ":winning_candidate", 0), #Zero means don't add garrison

                #If the player had requested a captured castle
                (try_begin),
                    (eq, ":issue_on_table", "$g_castle_requested_by_player"),
                    (party_slot_ge, ":issue_on_table", slot_town_lord, active_npcs_begin),
                    (store_faction_of_party, ":faction_of_issue", ":issue_on_table"),
                    (eq, ":faction_of_issue", "$players_kingdom"),
                    (assign, "$g_center_to_give_to_player", ":issue_on_table"),
                    (try_begin),
                        (troop_get_slot, ":husband", "trp_player", slot_troop_spouse),
                        ##diplomacy start+ add support for promotede kingdom ladies
                        (is_between, ":husband", active_npcs_begin, active_npcs_end),
                        (this_or_next|troop_slot_eq, ":winning_candidate", slot_troop_occupation, slto_kingdom_hero),
                        ##diplomacy end+
                        (is_between, ":husband", active_npcs_begin, active_npcs_end),
                        (eq, "$g_castle_requested_for_troop", ":husband"),
                        (neq, ":winning_candidate", ":husband"),
                        (jump_to_menu, "mnu_requested_castle_granted_to_another_female"),
                    (else_try),
                        (jump_to_menu, "mnu_requested_castle_granted_to_another"),
                    (try_end),
                (try_end),

            (try_end),

            (try_begin),
                (eq, ":faction_no", "$players_kingdom"),
                (call_script, "script_add_notification_menu", "mnu_notification_player_faction_political_issue_resolved", ":issue_on_table", ":winning_candidate"),
            (try_end),

        #Reset political issue
            (faction_set_slot, ":faction_no", slot_faction_political_issue, 0),
            ##diplomacy start+ add support for promoted kingdom ladies
            (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),#<- change active_npcs to heroes
            ##diplomacy end+
                (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
                (eq, ":active_npc_faction", ":faction_no"),
                (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
            (try_end),
            (try_begin),
                (eq, "$players_kingdom", ":faction_no"),
                (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
            (try_end),
        (try_end),
    (try_end),

    #Add fief to faction issues
    (try_begin),
        (faction_get_slot, ":faction_issue", ":faction_no", slot_faction_political_issue),
        (le, ":faction_issue", 0),

        (assign, ":landless_lords", 0),
        (assign, ":unassigned_centers", 0),
        (assign, ":first_unassigned_center_found", 0),

        (troop_set_slot, "trp_player", slot_troop_temp_slot, 0),
        ##diplomacy start+ add support for promoted kingdom ladies
        (try_for_range, ":active_npc", heroes_begin, heroes_end),#<- change active_npcs to heroes
        ##diplomacy end+
            (troop_set_slot, ":active_npc", slot_troop_temp_slot, 0),
        (try_end),

        (try_for_range, ":center", centers_begin, centers_end),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", ":faction_no"),

            (party_get_slot, ":town_lord", ":center", slot_town_lord),

            (try_begin),
                (lt, ":town_lord", 0),
                (val_add, ":unassigned_centers", 1),
                (try_begin),
                    (eq, ":first_unassigned_center_found", 0),
                    (assign, ":first_unassigned_center_found", ":center"),
                (try_end),
            (else_try),
                (troop_set_slot, ":town_lord", slot_troop_temp_slot, 1),
            (try_end),
        (try_end),

        (store_add, ":landless_lords_plus_unassigned_centers", ":landless_lords", ":unassigned_centers"),
        (ge, ":landless_lords_plus_unassigned_centers", 2),

        (faction_set_slot, ":faction_no", slot_faction_political_issue, ":first_unassigned_center_found"),
        (store_current_hours, ":hours"),
        (faction_set_slot, ":faction_no", slot_faction_political_issue_time, ":hours"), #Fief put on agenda

        ##diplomacy start+ add support for promoted kingdom ladies
        (try_for_range, ":active_npc", heroes_begin, heroes_end),#<- change active_npcs to heroes
        ##diplomacy end+
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", ":faction_no"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (try_begin),
            (eq, "$players_kingdom", ":faction_no"),
            (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
        (try_end),
    (try_end),


    (try_begin), #If the marshal is changed
       (neg|faction_slot_eq, ":faction_no", slot_faction_marshall, ":faction_marshal"),
       #(assign, ":marshall_changed", 1),
       (eq, "$players_kingdom", ":faction_no"),
       (str_store_troop_name_link, s1, ":faction_marshal"),
       (str_store_faction_name_link, s2, ":faction_no"),
       (display_message, "@{s1} is the new marshal of {s2}."),
       (call_script, "script_check_and_finish_active_army_quests_for_faction", ":faction_no"),
    (try_end),

    (try_begin), #If the marshal is changed
       (neg|faction_slot_eq, ":faction_no", slot_faction_marshall, ":faction_marshal"),
       (gt, ":faction_marshal", -1),
       (call_script, "script_appoint_faction_marshall", ":faction_no", ":faction_marshal"),
    (try_end),

    #DO FACTION AI HERE
    (try_begin),
        (eq, ":faction_no", "$players_kingdom"),
        (eq, ":faction_marshal", "trp_player"),
        (assign, ":faction_ai_decider", "trp_player"),
    (else_try),
        ##diplomacy start+ add support for promoted kingdom ladies
        (is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
        #(this_or_next|troop_slot_eq, ":faction_marshal", slot_troop_occupation, slto_kingdom_hero),
        #(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
        ##diplomacy end+
        (assign, ":faction_ai_decider", ":faction_marshal"),
    (else_try),
        (faction_get_slot, ":faction_ai_decider", ":faction_no", slot_faction_leader),
    (try_end),

    (call_script, "script_npc_decision_checklist_faction_ai_alt",  ":faction_ai_decider"),
    (assign, ":new_strategy", reg0),
    (assign, ":new_object", reg1),

    #new ozan
    (try_begin),
       (neq, ":new_strategy", ":old_faction_ai_state"),
       (eq, ":new_strategy", sfai_gathering_army),
       (faction_get_slot, ":faction_marshal", ":faction_no", slot_faction_marshall),
       ##diplomacy begin
       #native script error bug fix when no marshal
       (gt, ":faction_marshal", -1),
       ##diplomacy end
       (troop_get_slot, ":marshal_party", ":faction_marshal", slot_troop_leaded_party),
       (party_set_slot, ":marshal_party", slot_party_ai_object, -1),
       (assign, "$g_gathering_new_started", 1),
       (call_script, "script_npc_decision_checklist_party_ai", ":faction_marshal"), #This handles AI for both marshal and other parties
       (call_script, "script_party_set_ai_state", ":marshal_party", reg0, reg1),
       (assign, "$g_gathering_new_started", 0),
    (else_try),
       #check if marshal arrived his target city during active gathering

       #for now i disabled below lines because after always/active gathering armies become very large.
       #in current style marshal makes active gathering only at first, it travels to a city and waits there.

       (eq, ":new_strategy", ":old_faction_ai_state"),
       (eq, ":new_strategy", sfai_gathering_army),
       (faction_get_slot, ":faction_marshal", ":faction_no", slot_faction_marshall),
       ##diplomacy begin
       #native script error bug fix when no marshal
       (gt, ":faction_marshal", -1),
       ##diplomacy end
       (troop_get_slot, ":marshal_party", ":faction_marshal", slot_troop_leaded_party),
       ##diplomacy start+ 2011-06-08 Fix bug when the marshall leaded party is set negative!
       (gt, ":marshal_party", -1),
       ##diplomacy end+
       (party_get_slot, ":party_ai_object", ":marshal_party", slot_party_ai_object),
       (ge, ":party_ai_object", 0),
       (ge, ":marshal_party", 0),
       (party_is_active, ":marshal_party"),
       (party_is_active, ":party_ai_object"),
       (store_distance_to_party_from_party, ":dist", ":marshal_party", ":party_ai_object"),
       (le, ":dist", 5),
       (party_set_slot, ":marshal_party", slot_party_ai_object, -1),
    (try_end),
     #end ozan

     #The following logic is mostly transplanted to the new decision_checklist
     #Decision_checklist is used because I want to be able to reproduce the logic for strings
     #(call_script, "script_old_faction_ai"),
     #ozan - I collected all comment-out lines in here (faction ai script) and placed most bottom of scripts.py to avoid confusing.

    (faction_set_slot, ":faction_no", slot_faction_ai_state, ":new_strategy"),
    (faction_set_slot, ":faction_no", slot_faction_ai_object, ":new_object"),

    (call_script, "script_update_report_to_army_quest_note", ":faction_no", ":new_strategy", ":old_faction_ai_state"),

    (try_begin),
       (eq, ":new_strategy", sfai_feast),

       (store_current_hours, ":hours"),
       (faction_set_slot, ":faction_no", slot_faction_last_feast_start_time, ":hours"), #new

       (try_begin),
         (eq, "$g_player_eligible_feast_center_no", ":new_object"),
         (assign, "$g_player_eligible_feast_center_no", -1), #reset needed
       (try_end),
       (try_begin),
         (is_between, ":new_object", towns_begin, towns_end),
         (party_set_slot, ":new_object", slot_town_has_tournament, 2),
       (try_end),
    (try_end),

     #Change of strategy
    (try_begin),
       (neq, ":new_strategy", ":old_faction_ai_state"),

       (try_begin),
         (ge, "$cheat_mode", 1),
         (str_store_faction_name, s5, ":faction_no"),
         (display_message, "str_s5_decides_s14"),
       (try_end),

       (store_current_hours, ":hours"),
       (faction_set_slot, ":faction_no", slot_faction_ai_current_state_started, ":hours"),

       #Feast ends
       (try_begin),
         (eq, ":old_faction_ai_state", sfai_feast),
         (call_script, "script_faction_conclude_feast", ":faction_no", ":old_faction_ai_object"),
       (try_end),


       #Feast begins
       (try_begin),
         (eq, ":new_strategy", sfai_feast),
         (faction_get_slot, ":faction_object", ":faction_no", slot_faction_ai_object),

##         (str_store_faction_name, s1, ":faction_no"),
##         (str_store_party_name, s2, ":faction_object"),
##         (display_message, "str_lords_of_the_s1_gather_for_a_feast_at_s2"),

         (party_get_slot, ":feast_host", ":faction_object", slot_town_lord),

         (try_begin),
           (check_quest_active, "qst_wed_betrothed"),

           (quest_slot_eq, "qst_wed_betrothed", slot_quest_giver_troop, ":feast_host"),
           (neg|quest_slot_ge, "qst_wed_betrothed", slot_quest_expiration_days, 362),
           (call_script, "script_add_notification_menu", "mnu_notification_player_wedding_day", ":feast_host", ":faction_object"),
         (else_try),
           (check_quest_active, "qst_wed_betrothed_female"),

           (quest_get_slot, ":player_betrothed", "qst_wed_betrothed", slot_quest_giver_troop),
           (store_faction_of_troop, ":player_betrothed_faction", ":player_betrothed"),
           (eq, ":player_betrothed_faction", ":faction_no"),
           (neg|quest_slot_ge, "qst_wed_betrothed", slot_quest_expiration_days, 362),
           (call_script, "script_add_notification_menu", "mnu_notification_player_kingdom_holds_feast", ":feast_host", ":faction_object"),
         (else_try),
           (eq, "$players_kingdom", ":faction_no"),
           # (troop_slot_ge, "trp_player", slot_troop_renown, dplmc_command_renown_limit / 2), #SB : const / 2


           (party_get_slot, ":feast_host", ":faction_object", slot_town_lord),
           (call_script, "script_add_notification_menu", "mnu_notification_player_kingdom_holds_feast", ":feast_host", ":faction_object"),
         (try_end),
       (try_end),


       #Offensive begins
       (try_begin),
         (eq, ":old_faction_ai_state", sfai_gathering_army),
         (is_between, ":new_strategy", sfai_attacking_center, sfai_feast),
         (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_faction_name, s5, ":faction_no"),
            (display_message, "str_s5_begins_offensive"),
         (try_end),

         #Appoint screening party
         (try_begin),
           (assign, ":total_lords_participating", 0),
           (assign, ":best_screening_party", -1),
           (assign, ":score_to_beat", 30), #closest in size to 50
           (troop_get_slot, ":faction_marshal_party", ":faction_marshal", slot_troop_leaded_party),
           (party_is_active, ":faction_marshal_party"),

           ##diplomacy start+
              (try_for_range, ":screen_leader", active_npcs_begin, active_npcs_end),##OLD
           # (try_for_range, ":screen_leader", heroes_begin, heroes_end),##NEW
           ##diplomacy end+
             (store_faction_of_troop, ":screen_leader_faction", ":screen_leader"),
             (eq, ":screen_leader_faction", ":faction_no"),

             (troop_get_slot, ":screening_party", ":screen_leader", slot_troop_leaded_party),
             ##diplomacy start+ Guard against things such as the party being 0 (p_main_party)
             (gt, ":screening_party", 0),
             ##diplomacy end+
             (party_is_active, ":screening_party"),
             (party_slot_eq, ":screening_party", slot_party_ai_state, spai_accompanying_army),
             (party_slot_eq, ":screening_party", slot_party_ai_object, ":faction_marshal_party"),
             (val_add, ":total_lords_participating", 1),

             (try_begin),
              (ge, "$cheat_mode", 1),
              (str_store_party_name, s4, ":screening_party"),
              (display_message, "@{!}DEBUG -- {s4} participates in offensive"),
             (try_end),


             (store_party_size_wo_prisoners, ":screening_party_score", ":screening_party"),
             (val_sub, ":screening_party_score", 50),
             (val_abs, ":screening_party_score"),


             (lt, ":screening_party_score", ":score_to_beat"),

             #set party and score
             (assign, ":best_screening_party", ":screening_party"),
             (assign, ":score_to_beat", ":screening_party_score"),
           (try_end),

           (gt, ":total_lords_participating", 2),
           (party_is_active, ":best_screening_party"),
           (party_is_active, ":faction_marshal_party"),
           (call_script, "script_party_set_ai_state", ":best_screening_party", spai_screening_army, ":faction_marshal_party"),
           (try_begin),
             (ge, "$cheat_mode", 1),
             (str_store_party_name, s4, ":best_screening_party"),
             (display_message, "@{!}DEBUG -- {s4} chosen as screen"),
           (try_end),
           #after this - dialogs on what doing, npc_decision_checklist
         (try_end),

       #Offensive concludes
       (else_try),
         (store_current_hours, ":hours"),
         (this_or_next|eq, ":old_faction_ai_state", sfai_gathering_army),
         (this_or_next|eq, ":old_faction_ai_state", sfai_attacking_center),
         (this_or_next|eq, ":old_faction_ai_state", sfai_raiding_village),
         #(this_or_next|eq, ":old_faction_ai_state", sfai_attacking_enemies_around_center),
            (eq, ":old_faction_ai_state", sfai_attacking_enemy_army),

         (this_or_next|eq, ":new_strategy", sfai_default),
            (eq, ":new_strategy", sfai_feast),

         (call_script, "script_check_and_finish_active_army_quests_for_faction", ":faction_no"),
         (faction_set_slot, ":faction_no", slot_faction_last_offensive_concluded, ":hours"),
        (try_end),
    (try_end),

    (try_begin),
       (eq, "$players_kingdom", ":faction_no"),
       (neg|faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_attacking_center),
       (check_quest_active, "qst_join_siege_with_army"),
       (call_script, "script_abort_quest", "qst_join_siege_with_army", 0),
    (try_end),

    (try_begin),
       #old condition to rest, I changed below part - ozan, to rest (a faction's old strategy should be feast or default) and (a faction's new strategy should be feast or default)
       #(this_or_next|eq, ":new_strategy", sfai_default),
       #(this_or_next|eq, ":new_strategy", sfai_feast),
       #(this_or_next|eq, ":old_faction_ai_state", sfai_default),
       #(eq, ":old_faction_ai_state", sfai_feast),

       #new condition to rest, (a faction's new strategy should be feast or default) and (":hours_at_current_state" > 20)
       (this_or_next|eq, ":new_strategy", sfai_default),
        (eq, ":new_strategy", sfai_feast),

       (store_current_hours, ":hours_at_current_state"),
       (faction_get_slot, ":current_state_started", ":faction_no", slot_faction_ai_current_state_started),
       (val_sub, ":hours_at_current_state", ":current_state_started"),
       (ge, ":hours_at_current_state", 18), #Must have at least 18 hours to reset

       (store_current_hours, ":hours"),
       (faction_set_slot, ":faction_no", slot_faction_ai_last_rest_time, ":hours"),
    (try_end),
  ]),
##############################