# -*- coding: utf-8 -*-
from header_common import *
from header_operations import *
from module_constants import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *
from ID_animations import *


## auto-sell
from header_operations import *
from module_items import *
from header_item_modifiers import *
## auto-sell


# KT0 resolve
import string
from process_common import *
from module_troops import *
from module_items import *

from header_presentations import * # add this at the beggining of module_scripts.py

scripts = [
  
  ("dplmc_send_patrol",
  [
    (store_script_param, ":start_party", 1),
    (store_script_param, ":target_party", 2),
    (store_script_param, ":size", 3), #0 small, 1 medium, 2, big, 3 elite
    (store_script_param, ":template_faction", 4),
    (store_script_param, ":order_troop", 5),

    (set_spawn_radius, 1),
    (spawn_around_party, ":start_party", "pt_patrol_party"),
    (assign, ":spawned_party",reg0),
    (party_set_faction, ":spawned_party", ":template_faction"),
    (party_set_slot, ":spawned_party", slot_party_type, spt_patrol),
    (party_set_slot, ":spawned_party", slot_party_home_center, ":start_party"),
    (party_set_slot, ":spawned_party", dplmc_slot_party_mission_diplomacy, ":order_troop"),
    (str_store_party_name, s5, ":target_party"),
    (party_set_name, ":spawned_party", "@{s5} patrol"),

    # (party_set_ai_behavior, ":spawned_party", ai_bhvr_travel_to_party),
    (party_set_ai_behavior, ":spawned_party", ai_bhvr_patrol_party),  ######## NEW 3.2 - fixes the patrol bug
    (party_set_ai_object, ":spawned_party", ":target_party"),
    (party_set_slot, ":spawned_party", slot_party_ai_object, ":target_party"),
    (party_set_slot, ":spawned_party", slot_party_ai_state, spai_patrolling_around_center),
    (party_set_ai_patrol_radius, ":spawned_party", 10),  ##### NEW v3.2

    (try_begin),
      (neg|is_between, ":template_faction", npc_kingdoms_begin, npc_kingdoms_end),

      (party_get_slot, ":template_faction", ":start_party", slot_center_original_faction),
      (try_begin),
        (is_between, "$g_player_culture", npc_kingdoms_begin, npc_kingdoms_end),
        (assign, ":template_faction", "$g_player_culture"),
      (else_try),
        (party_get_slot, ":town_lord", ":start_party", slot_town_lord),
        (gt, ":town_lord", 0),
        (troop_get_slot, ":template_faction", ":town_lord", slot_troop_original_faction),
      (try_end),

      (try_begin),
        (eq, ":size", 0),
        (call_script, "script_dplmc_withdraw_from_treasury", 1000),
      (else_try),
        (this_or_next|eq, ":size", 1),
        (eq, ":size", 3),
        (call_script, "script_dplmc_withdraw_from_treasury", 2000),
      (else_try),
        (eq, ":size", 2),
        (call_script, "script_dplmc_withdraw_from_treasury", 3000),
      (try_end),
    (try_end),

    (faction_get_slot, ":party_template_a", ":template_faction", slot_faction_reinforcements_a),
    (faction_get_slot, ":party_template_b", ":template_faction", slot_faction_reinforcements_b),
    (faction_get_slot, ":party_template_c", ":template_faction", slot_faction_reinforcements_c),

    (try_begin),
      (eq, ":size", 3),
      (party_add_template, ":spawned_party", ":party_template_c"),
      (party_add_template, ":spawned_party", ":party_template_c"),
      (party_add_template, ":spawned_party", ":party_template_c"),
      (party_add_template, ":spawned_party", ":party_template_c"),
      (party_add_template, ":spawned_party", ":party_template_c"),
    (else_try),
      (val_add, ":size", 1),
      (val_mul, ":size", 2),
      (try_for_range, ":cur_i", 0, ":size"),
        (store_random_in_range, ":random", 0, 3),
        (try_begin),
          (eq, ":random", 0),
          (party_add_template, ":spawned_party", ":party_template_a"),
          (party_add_template, ":spawned_party", ":party_template_a"),
        (else_try),
          (eq, ":random", 1),
          (party_add_template, ":spawned_party", ":party_template_b"),
          (party_add_template, ":spawned_party", ":party_template_b"),
        (else_try),
          (party_add_template, ":spawned_party", ":party_template_c"),
          (party_add_template, ":spawned_party", ":party_template_c"),
          (party_add_template, ":spawned_party", ":party_template_c"),
        (try_end),

        (try_begin), #debug
          (eq, "$cheat_mode", 1),
          (assign, reg0, ":cur_i"),
          (str_store_faction_name, s7, ":template_faction"),
          (display_message, "@{!}DEBUG - Added {reg0}.template of faction {s7} to patrol."),
        (try_end),
      (try_end),
    (try_end),


    (try_begin), #debug
      (eq, "$cheat_mode", 1),
      (str_store_party_name, s13, ":target_party"),
      (str_store_faction_name, s14, ":template_faction"),
      (str_store_party_name, s15, ":start_party"),
      (display_message, "@{!}DEBUG - Send {s14} patrol from {s15} to {s13}"),
    (try_end),
  ]),

  
  
  
  
  ("dplmc_send_patrol_party",
  [
   (store_script_param, ":start_party", 1),
   (store_script_param, ":target_party", 2),
   (store_script_param, ":party_no", 3),
   (store_script_param, ":template_faction", 4),
   (store_script_param, ":order_troop", 5), #FLORIS BUGFIX
   
   (set_spawn_radius, 1),
   (spawn_around_party, ":start_party", "pt_patrol_party"),
   (assign, ":spawned_party",reg0),
   (party_set_faction, ":spawned_party", ":template_faction"),
   (party_set_slot, ":spawned_party", slot_party_type, spt_patrol),
   (party_set_slot, ":spawned_party", slot_party_home_center, ":start_party"),
   (party_set_slot, ":spawned_party", dplmc_slot_party_mission_diplomacy, ":order_troop"), #FLORIS BUGFIX
   (str_store_party_name, s5, ":target_party"),
   (party_set_name, ":spawned_party", "@{s5} patrol"),
   
   (party_set_ai_behavior, ":spawned_party", ai_bhvr_patrol_party),  ######## NEW 3.3 - fixes the patrol bug
   (party_set_ai_object, ":spawned_party", ":target_party"),
   (party_set_slot, ":spawned_party", slot_party_ai_object, ":target_party"),
   (party_set_slot, ":spawned_party", slot_party_ai_state, spai_patrolling_around_center),
   (party_set_ai_patrol_radius, ":spawned_party", 10),  ##### NEW v3.3
   
   (call_script, "script_party_add_party", ":spawned_party", ":party_no"),
  ]),
  
  

    
# script_order_weapon_type_switch
# Input: Order Type   
# Output: Nothing
# On key depression, try to switch division to appropriate weapon
("order_weapon_type_switch", [ 
     (store_script_param_1, ":ordertype"),
     (get_player_agent_no, ":player"),
     (agent_get_team, ":playerteam", ":player"),
     (try_for_agents, ":agent"),
         (agent_is_alive, ":agent"),
         (agent_is_human, ":agent"),
         (agent_is_non_player, ":agent"),
         (agent_get_team, ":team", ":agent"),
         (eq, ":team", ":playerteam"), #On Player's side?
         (agent_get_division, ":class", ":agent"),
         (try_begin), #Mark class as in battle
             (eq, ":class", 0),
             (assign, ":group0_in_battle", 1),
         (else_try),
             (eq, ":class", 1),
             (assign, ":group1_in_battle", 1),   
         (else_try),
             (eq, ":class", 2),
             (assign, ":group2_in_battle", 1),         
         (else_try),
             (eq, ":class", 3),
             (assign, ":group3_in_battle", 1),         
         (else_try),
             (eq, ":class", 4),
             (assign, ":group4_in_battle", 1),         
         (else_try),
             (eq, ":class", 5),
             (assign, ":group5_in_battle", 1),   
         (else_try),
             (eq, ":class", 6),
             (assign, ":group6_in_battle", 1),         
         (else_try),
             (eq, ":class", 7),
             (assign, ":group7_in_battle", 1),         
         (else_try),
             (eq, ":class", 8),
             (assign, ":group8_in_battle", 1),                       
         (try_end),
         (class_is_listening_order, ":team", ":class"), #Is the agent's team selected?
         (try_begin), #Mark class as selected
             (eq, ":class", 0),
             (assign, ":group0_is_selected", 1),
         (else_try),
             (eq, ":class", 1),
             (assign, ":group1_is_selected", 1),   
         (else_try),
             (eq, ":class", 2),
             (assign, ":group2_is_selected", 1),         
         (else_try),
             (eq, ":class", 3),
             (assign, ":group3_is_selected", 1),         
         (else_try),
             (eq, ":class", 4),
             (assign, ":group4_is_selected", 1),         
         (else_try),
             (eq, ":class", 5),
             (assign, ":group5_is_selected", 1),   
         (else_try),
             (eq, ":class", 6),
             (assign, ":group6_is_selected", 1),         
         (else_try),
             (eq, ":class", 7),
             (assign, ":group7_is_selected", 1),         
         (else_try),
             (eq, ":class", 8),
             (assign, ":group8_is_selected", 1),                       
         (try_end),
         (agent_get_troop_id, ":troop", ":agent"),     
         (try_begin),
             (troop_is_hero, ":troop"),
             (assign, ":end", ek_head),
             (try_for_range, ":i", ek_item_0, ":end"),
                 (troop_get_inventory_slot, ":item", ":troop", ":i"),
                 (gt, ":item", 0),
                 (item_get_type, ":weapontype", ":item"),
                 (try_begin),
                     (eq, ":ordertype", ranged),
                     (str_store_string, s1, "@ready bows and missiles"),
                     (this_or_next|eq, ":weapontype", itp_type_bow),
                     (this_or_next|eq, ":weapontype", itp_type_crossbow),
                     (eq, ":weapontype", itp_type_thrown),
                     (agent_set_wielded_item, ":agent", ":item"),
                     (assign, ":end", ek_item_0),#loop breaker
                 (else_try),
                     (eq, ":ordertype", onehand),
                     (str_store_string, s1, "@ready side arms"),
                     (eq, ":weapontype", itp_type_one_handed_wpn),
                     (agent_set_wielded_item, ":agent", ":item"),
                     (assign, ":end", ek_item_0),#loop breaker
                 (else_try),
                     (eq, ":ordertype", bothhands),
                     (str_store_string, s1, "@ready two-handers and polearms"),
                     (this_or_next|eq, ":weapontype", itp_type_two_handed_wpn),
                     (eq, ":weapontype", itp_type_polearm),
                     (agent_set_wielded_item, ":agent", ":item"),
                     (assign, ":end", ek_item_0),#loop breaker
                 (else_try),
                     (eq, ":ordertype", shield),
                     (agent_get_wielded_item, ":shield", ":agent", 1),
                     (try_begin),
                         (gt, ":shield", 0),
                         (agent_unequip_item, ":agent", ":shield"),
                         (agent_equip_item, ":agent", ":shield"), #Moves shield to back
                         (str_store_string, s1, "@doff your shields"),
                         (assign, ":end", ek_item_0),#loop breaker
                     (else_try),
                         (eq, ":weapontype", itp_type_shield),
                         (agent_set_wielded_item, ":agent", ":item"), #Moves shield from back to hand
                         (str_store_string, s1, "@brandish shields"),
                         (assign, ":end", ek_item_0),#loop breaker
                     (try_end),       
                 (try_end),
             (try_end),
         (else_try),#regular troops
             (troop_get_inventory_capacity, ":cap", ":troop"),
             (try_for_range, ":i", 0, ":cap"),#(slots < 10)?
                 (troop_get_inventory_slot, ":item", ":troop", ":i"),
                 (gt, ":item", 0),
                 (item_get_type, ":weapontype", ":item"),
                 (try_begin),
                     (eq, ":ordertype", ranged),
                     (str_store_string, s1, "@ready bows and missiles"),
                     (this_or_next|eq, ":weapontype", itp_type_bow),
                     (this_or_next|eq, ":weapontype", itp_type_crossbow),
                     (eq, ":weapontype", itp_type_thrown),
                     (agent_has_item_equipped, ":agent", ":item"),
                     (agent_set_wielded_item, ":agent", ":item"),
                     (assign, ":cap", 0),#loop breaker
                 (else_try),
                     (eq, ":ordertype", onehand),
                     (str_store_string, s1, "@ready side arms"),
                     (eq, ":weapontype", itp_type_one_handed_wpn),
                     (agent_has_item_equipped, ":agent", ":item"),
                     (agent_set_wielded_item, ":agent", ":item"),
                     (assign, ":cap", 0),#loop breaker
                 (else_try),
                     (eq, ":ordertype", bothhands),
                     (str_store_string, s1, "@ready two-handers and polearms"),
                     (this_or_next|eq, ":weapontype", itp_type_two_handed_wpn),
                     (eq, ":weapontype", itp_type_polearm),
                     (agent_has_item_equipped, ":agent", ":item"),
                     (agent_set_wielded_item, ":agent", ":item"),
                     (assign, ":cap", 0),#loop breaker
                 (else_try),
                     (eq, ":ordertype", shield),
                     (agent_get_wielded_item, ":shield", ":agent", 1),
                     (try_begin),
                         (gt, ":shield", 0),
                         (agent_unequip_item, ":agent", ":shield"),
                         (agent_equip_item, ":agent", ":shield"), #Moves shield to back
                         (str_store_string, s1, "@doff your shields"),
                         (assign, ":cap", 0),#loop breaker
                     (else_try),
                         (eq, ":weapontype", itp_type_shield),
                         (agent_has_item_equipped, ":agent", ":item"),
                         (agent_set_wielded_item, ":agent", ":item"), #Moves shield from back to hand
                         (str_store_string, s1, "@brandish shields"),
                         (assign, ":cap", 0),#loop breaker
                     (try_end),
                 (try_end),
             (try_end),
         (try_end), #Hero v Regular Troop
     (try_end), #Agent Loop
     (str_clear, s2),
     (str_clear, s3),
     (assign, ":count_possible", 0),
     (assign, ":count_selected", 0),
     (try_begin),
         (eq, ":group0_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group0_is_selected", 1),
         (val_add, ":count_selected", 1),
         (str_store_class_name, s2, 0),
     (try_end),
     (try_begin),
          (eq, ":group1_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group1_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 1),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 1),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group2_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group2_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 2),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 2),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group3_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group3_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 3),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 3),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group4_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group4_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 4),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 4),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group5_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group5_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 5),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 5),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group6_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group6_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 6),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 6),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group7_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group7_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),   
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 7),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 7),
         (try_end),
     (try_end),
     (try_begin),
          (eq, ":group8_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group8_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 8),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 8),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":count_selected", ":count_possible"),
         (str_store_string, s2, "@Everyone"),
     (try_end),
     (try_begin),
         (gt, ":count_selected", 0),
         (display_message, "@{!}{s2}, {s1}!", 0xFFDDDD66),
     (try_end),
     (str_clear, s2),
     (str_clear, s3),
]),
    




#################################################################################################    
  # script_cf_order_volley_check
  # Input: Nothing
  # Output: Nothing   
  # Check for an active Volley Fire order
("cf_order_volley_check", [
    (assign, ":active", 0),
    (assign, ":end", 4),
    (assign, ":end2", slot_team_d0_order_volley + 9),
    (try_for_range, ":team", 0, ":end"),
        (try_for_range, ":i", slot_team_d0_order_volley, ":end2"),
            (team_slot_ge, ":team", ":i", 1),
            (assign, ":active", 1),
            (assign, ":end", 0),
            (assign, ":end2", slot_team_d0_order_volley),
        (try_end),
    (try_end),
    (eq, ":active", 1),
]),  
    
# script_order_volley_begin_end
# Input: Nothing
# Output: Nothing
# On key depression, determine if beginning or ending volley fire
# Display appropriate order text on screen.
("order_volley_begin_end", [
     (get_player_agent_no, ":player"),
     (agent_get_team, ":playerteam", ":player"),
     
     (assign, ":volley", 0),
     
     (try_for_range, ":class", 0, 8),
         (class_is_listening_order, ":playerteam", ":class"), #Listening to Order
         (store_add, ":class_ordered", slot_team_d0_order_volley, ":class"),
         (team_slot_eq, ":playerteam", ":class_ordered", 0),
         (team_set_slot, ":playerteam", ":class_ordered", 1),
         (assign, ":volley", 1),
         (str_store_string, s1, "@prepare to volley"),
         (try_begin), #Mark class as selected--used for display text
             (eq, ":class", 0),
             (assign, ":group0_is_selected", 1),
         (else_try),
             (eq, ":class", 1),
             (assign, ":group1_is_selected", 1),   
         (else_try),
             (eq, ":class", 2),
             (assign, ":group2_is_selected", 1),         
         (else_try),
             (eq, ":class", 3),
             (assign, ":group3_is_selected", 1),         
         (else_try),
             (eq, ":class", 4),
             (assign, ":group4_is_selected", 1),         
         (else_try),
             (eq, ":class", 5),
             (assign, ":group5_is_selected", 1),   
         (else_try),
             (eq, ":class", 6),
             (assign, ":group6_is_selected", 1),         
         (else_try),
             (eq, ":class", 7),
             (assign, ":group7_is_selected", 1),         
         (else_try),
             (eq, ":class", 8),
             (assign, ":group8_is_selected", 1),                       
         (try_end),
     (try_end), #Class Loop
       
     (try_for_agents, ":agent"),
         (agent_is_alive, ":agent"),
         (agent_is_human, ":agent"),
         (agent_is_non_player, ":agent"),
         (agent_get_team, ":team", ":agent"),
         (eq, ":team", ":playerteam"), #On Player's side?
         (agent_get_division, ":class", ":agent"),
         (try_begin), #Mark class as in battle--used for display text
             (eq, ":class", 0),
             (assign, ":group0_in_battle", 1),
         (else_try),
             (eq, ":class", 1),
             (assign, ":group1_in_battle", 1),   
         (else_try),
             (eq, ":class", 2),
             (assign, ":group2_in_battle", 1),         
         (else_try),
             (eq, ":class", 3),
             (assign, ":group3_in_battle", 1),         
         (else_try),
             (eq, ":class", 4),
             (assign, ":group4_in_battle", 1),         
         (else_try),
             (eq, ":class", 5),
             (assign, ":group5_in_battle", 1),   
         (else_try),
             (eq, ":class", 6),
             (assign, ":group6_in_battle", 1),         
         (else_try),
             (eq, ":class", 7),
             (assign, ":group7_in_battle", 1),         
         (else_try),
             (eq, ":class", 8),
             (assign, ":group8_in_battle", 1),                       
         (try_end),
         (class_is_listening_order, ":team", ":class"), #Is the agent's division selected?
         (try_begin),
             (eq, ":volley", 0),
             (store_add, ":class_ordered", slot_team_d0_order_volley, ":class"),
             (team_set_slot, ":team", ":class_ordered", 0),
             (try_begin),
                (agent_slot_ge, ":agent", slot_agent_volley_fire, 1),
                (agent_set_slot, ":agent", slot_agent_volley_fire, 0),
                (agent_set_attack_action, ":agent", 0, 0), #Release (if holding)
             (try_end),
             (str_store_string, s1, "@end volley"),
             (try_begin), #Mark class as selected--used for display text
                 (eq, ":class", 0),
                 (assign, ":group0_is_selected", 1),
             (else_try),
                 (eq, ":class", 1),
                 (assign, ":group1_is_selected", 1),   
             (else_try),
                 (eq, ":class", 2),
                 (assign, ":group2_is_selected", 1),         
             (else_try),
                 (eq, ":class", 3),
                 (assign, ":group3_is_selected", 1),         
             (else_try),
                 (eq, ":class", 4),
                 (assign, ":group4_is_selected", 1),         
             (else_try),
                 (eq, ":class", 5),
                 (assign, ":group5_is_selected", 1),   
             (else_try),
                 (eq, ":class", 6),
                 (assign, ":group6_is_selected", 1),         
             (else_try),
                 (eq, ":class", 7),
                 (assign, ":group7_is_selected", 1),         
             (else_try),
                 (eq, ":class", 8),
                 (assign, ":group8_is_selected", 1),                       
             (try_end),
         (else_try),
            (eq, ":volley", 1),
            (agent_get_horse, ":horse", ":agent"),
            (le, ":horse", 0), #Not Mounted
           
            (assign, ":volley_wpn_type", -1),
            (try_begin),
                (team_get_movement_order, ":mordr", ":team", ":class"),
                (this_or_next|eq, ":mordr", mordr_hold),
                (eq, ":mordr", mordr_stand_ground),
               
                (agent_get_wielded_item, ":wielded", ":agent", 0),
                (ge, ":wielded", 0),
                (item_get_type, ":type", ":wielded"),
                (try_begin),
                    (this_or_next|eq, ":type", itp_type_bow),
                    (eq, ":type", itp_type_crossbow),
                    (assign, ":volley_wpn_type", ":type"),
                (else_try),
                    (assign, ":end", ek_head),
                    (try_for_range, ":i_slot", ek_item_0, ":end"),
                        (agent_get_item_slot, ":item", ":agent", ":i_slot"),
                        (ge, ":item", 0),
                        (item_get_type, ":type", ":item"),
                        (this_or_next|eq, ":type", itp_type_bow),
                        (eq, ":type", itp_type_crossbow),
                        (agent_set_wielded_item, ":agent", ":item"),
                        (assign, ":volley_wpn_type", ":type"),
                        (assign, ":end", ek_item_0),
                    (try_end),
                (try_end),
            (try_end),
            (agent_set_slot, ":agent", slot_agent_volley_fire, ":volley_wpn_type"),         
         (try_end), #Volley End or Begin
     (try_end), #Agent loop
         
     (str_clear, s2),
     (str_clear, s3),
     (assign, ":count_possible", 0),
     (assign, ":count_selected", 0),
     (try_begin),
         (eq, ":group0_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group0_is_selected", 1),
         (val_add, ":count_selected", 1),
         (str_store_class_name, s2, 0),
     (try_end),
     (try_begin),
         (eq, ":group1_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group1_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 1),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 1),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group2_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group2_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 2),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 2),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group3_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group3_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 3),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 3),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group4_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group4_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 4),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 4),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group5_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group5_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 5),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 5),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group6_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group6_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 6),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 6),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group7_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group7_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),   
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 7),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 7),
         (try_end),
     (try_end),
     (try_begin),
         (eq, ":group8_in_battle", 1),
         (val_add, ":count_possible", 1),
         (eq, ":group8_is_selected", 1),
         (val_add, ":count_selected", 1),
         (try_begin),
             (neg|str_is_empty, s2),
             (str_store_class_name, s3, 8),
             (str_store_string, s2, "@{!}{s2}, {s3}"),
         (else_try),
             (str_store_class_name, s2, 8),
         (try_end),
     (try_end),   
     (try_begin),
         (eq, ":count_selected", ":count_possible"),
         (str_store_string, s2, "@Everyone"),
     (try_end),
     (try_begin),
         (gt, ":count_selected", 0),
         (display_message, "@{!}{s2}, {s1}!", 0xFFDDDD66),
     (try_end),
     (str_clear, s2),
     (str_clear, s3),
]),
#####################################################################################################    
    
    



##diplomacy start+
#Importing a script used in Custom Commander.  The inventory copying is used
#as a clever way to make "unmodifiable" views of others' equipment (both the
#PC and NPC have their inventory copied before viewing, and after the window
#closes the copies are written back over the originals).
  ("dplmc_copy_inventory",
    [
      (store_script_param_1, ":source"),
      (store_script_param_2, ":target"),

      (troop_clear_inventory, ":target"),
      (troop_get_inventory_capacity, ":inv_cap", ":source"),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":item", ":source", ":i_slot"),
        (troop_set_inventory_slot, ":target", ":i_slot", ":item"),
        (troop_get_inventory_slot_modifier, ":imod", ":source", ":i_slot"),
        (troop_set_inventory_slot_modifier, ":target", ":i_slot", ":imod"),
        (troop_inventory_slot_get_item_amount, ":amount", ":source", ":i_slot"),
        (gt, ":amount", 0),
        (troop_inventory_slot_set_item_amount, ":target", ":i_slot", ":amount"),
      (try_end),
    ]),






##################################################### KAOS PLAYER KINGDOM INIT
  ("set_player_kingdom_init",
  [
    (set_show_messages, 0),
    (store_script_param, ":fac_kingdom", 1),
    (store_script_param, ":player_capital", 2),
    (store_script_param, ":fac_culture", 3),
    (store_script_param, ":fac_lords_begin", 4),
    (store_script_param, ":fac_lords_end", 5),
    (store_script_param, ":fac_leader", 6),
    (store_script_param, ":fac_town_scene", 7),
    (remove_troop_from_site, ":fac_leader", ":fac_town_scene"),
    (str_store_troop_name, s10, "trp_player"),
    (call_script, "script_activate_player_faction", "trp_player"),
    (call_script, "script_give_center_to_faction_aux", ":player_capital", "fac_player_supporters_faction"),
    (call_script, "script_give_center_to_lord", ":player_capital", "trp_player", 1),
    (troop_set_slot, "trp_player", slot_troop_cur_center, ":player_capital"),
    (troop_set_slot, "trp_player", slot_troop_home, ":player_capital"),
    
    ############### kick king out 
    (troop_get_slot, ":var7", ":fac_leader", slot_troop_leaded_party),
    (remove_party, ":var7"),
    # (troop_set_slot, ":fac_leader", slot_troop_is_alive, 0), ####### NEW v3.8 - dead
    (troop_set_slot, ":fac_leader", slot_troop_leaded_party, -1),
    (troop_set_slot, ":fac_leader", slot_troop_occupation, 0),
    (troop_set_slot, ":fac_leader", slot_troop_cur_center, -1),
    (troop_set_slot, ":fac_leader", slot_troop_home, -1),
    (troop_set_note_available, ":fac_leader", 0),
    
    (try_for_range, ":var8", "p_town_1_1", "p_salt_mine"),
      (party_get_slot, ":town_orig_lord", ":var8", slot_town_lord),
      (try_begin),
        (eq, "$kaos_kings_kingdom", 1),
        (eq, ":town_orig_lord", "trp_kingdom_1_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 2),
        (eq, ":town_orig_lord", "trp_kingdom_2_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 3),
        (eq, ":town_orig_lord", "trp_kingdom_3_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 4),
        (eq, ":town_orig_lord", "trp_kingdom_4_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 5),
        (eq, ":town_orig_lord", "trp_kingdom_5_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 6),
        (eq, ":town_orig_lord", "trp_kingdom_6_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 7),
        (eq, ":town_orig_lord", "trp_kingdom_7_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 8),
        (eq, ":town_orig_lord", "trp_kingdom_8_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 9),
        (eq, ":town_orig_lord", "trp_kingdom_9_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 10),
        (eq, ":town_orig_lord", "trp_kingdom_10_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 11),
        (eq, ":town_orig_lord", "trp_kingdom_11_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 12),
        (eq, ":town_orig_lord", "trp_kingdom_12_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 13),
        (eq, ":town_orig_lord", "trp_kingdom_13_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 14),
        (eq, ":town_orig_lord", "trp_kingdom_14_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 15),
        (eq, ":town_orig_lord", "trp_kingdom_15_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 16),
        (eq, ":town_orig_lord", "trp_kingdom_16_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 17),
        (eq, ":town_orig_lord", "trp_kingdom_17_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 18),
        (eq, ":town_orig_lord", "trp_kingdom_18_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 19),
        (eq, ":town_orig_lord", "trp_kingdom_19_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 20),
        (eq, ":town_orig_lord", "trp_kingdom_20_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 21),
        (eq, ":town_orig_lord", "trp_pope"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 22),
        (eq, ":town_orig_lord", "trp_kingdom_22_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 23),
        (eq, ":town_orig_lord", "trp_kingdom_23_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 24),
        (eq, ":town_orig_lord", "trp_kingdom_24_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 25),
        (eq, ":town_orig_lord", "trp_kingdom_25_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 26),
        (eq, ":town_orig_lord", "trp_kingdom_26_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 27),
        (eq, ":town_orig_lord", "trp_kingdom_27_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 28),
        (eq, ":town_orig_lord", "trp_kingdom_28_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 29),
        (eq, ":town_orig_lord", "trp_kingdom_29_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 30),
        (eq, ":town_orig_lord", "trp_kingdom_30_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 31),
        (eq, ":town_orig_lord", "trp_kingdom_31_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 32),
        (eq, ":town_orig_lord", "trp_kingdom_32_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 33),
        (eq, ":town_orig_lord", "trp_kingdom_33_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 34),
        (eq, ":town_orig_lord", "trp_kingdom_34_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 35),
        (eq, ":town_orig_lord", "trp_kingdom_35_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 36),
        (eq, ":town_orig_lord", "trp_kingdom_36_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 37),
        (eq, ":town_orig_lord", "trp_kingdom_37_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 38),
        (eq, ":town_orig_lord", "trp_kingdom_38_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 39),
        (eq, ":town_orig_lord", "trp_kingdom_39_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 40),
        (eq, ":town_orig_lord", "trp_kingdom_40_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 41),
        (eq, ":town_orig_lord", "trp_kingdom_41_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (else_try),
        (eq, "$kaos_kings_kingdom", 42),
        (eq, ":town_orig_lord", "trp_kingdom_42_lord"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_neutral"),
        (call_script, "script_give_center_to_faction", ":var8", "fac_player_supporters_faction"),
        (call_script, "script_assign_lords_to_empty_centers_noplayer"),
      (try_end),
    (try_end),
    
    ############## give player capital bound villages
    (try_for_range, ":lord_village", "p_village_1_1", "p_salt_mine"),
      (party_slot_eq, ":lord_village", slot_village_bound_center, ":player_capital"),
      (party_set_faction, ":lord_village", "fac_player_supporters_faction"),
      (party_set_slot, ":lord_village", slot_town_lord, "trp_player"),
    (try_end),
    
    (assign, "$g_player_court", ":player_capital"),
    ######## gets original faction
    (store_troop_faction, ":orig_faction", ":town_orig_lord"),
    ######## gets faction culture slot
    (faction_get_slot, ":orig_faction_culture", ":orig_faction", slot_faction_culture),
    (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":orig_faction_culture"),
    (faction_set_slot, "fac_player_faction", slot_faction_culture, ":orig_faction_culture"),
    (assign, "$players_kingdom", "fac_player_supporters_faction"),
    
    # (call_script, "script_print_faction_lord_count", "fac_player_supporters_faction", 74959),   
    
    ################# give random relation between vassals and player
    (try_for_range, ":town_orig_lord", ":fac_lords_begin", ":fac_lords_end"),
      (troop_slot_eq, ":town_orig_lord", slot_troop_is_alive, 1),
      (call_script, "script_change_troop_faction_game_start", ":town_orig_lord", "fac_player_supporters_faction"),
      (troop_set_slot, ":town_orig_lord", slot_troop_occupation, 2),
      (store_random_in_range, ":random_relation", -10, 30),
      (call_script, "script_troop_change_relation_with_troop", "trp_player", ":town_orig_lord", ":random_relation"),
      (troop_set_slot, ":town_orig_lord", slot_troop_met, 1),
    (try_end),
    
    ####### NEW v2.2 - fixes bug where player fiefs had the foraging party culture at game start
    (party_get_slot, ":cur_center_culture", "$g_player_court", slot_center_culture), 
    (troop_set_slot, "trp_player", slot_troop_cur_culture, ":cur_center_culture"),  
    #######
    
    (call_script, "script_assign_lords_to_empty_centers_noplayer"),  ##### NEW v2.1 - moved this to here
    # (call_script, "script_enhanced_apply_lord_culture_to_fief"),   ##### NEW v2.1 - necessary to have correct center cultures
    
    # (call_script, "script_print_faction_lord_count", "fac_player_supporters_faction", 74985),   
    
    ################# change ladies to player faction
    (try_for_range, ":faction_lady", "trp_knight_1_1_wife", "trp_heroes_end"),
      (store_faction_of_troop, ":faction_lady_faction", ":faction_lady"),
      (eq, ":faction_lady_faction", ":fac_kingdom"),
      (call_script, "script_change_troop_faction_game_start", ":faction_lady", "fac_player_supporters_faction"),
    (try_end),
    
    (faction_set_note_available, "fac_player_supporters_faction", 1),
    (call_script, "script_update_faction_notes", "fac_player_supporters_faction"),
    (call_script, "script_change_player_right_to_rule", 50),
    (troop_set_slot, "trp_player", slot_troop_father, ":fac_leader"),
    (assign, "$players_kingdom_name_set", 1),
    (faction_set_slot, ":fac_kingdom", slot_troop_player_debt, 2),
    (store_random_in_range, ":var14", 0, 45),
    (troop_set_slot, "trp_player", slot_troop_controversy, ":var14"),
    
    ########## NEW v3.5
    (store_random_in_range, ":lower_bound_lord1", 800, 1000),
    (troop_set_slot, "trp_player", slot_troop_renown, ":lower_bound_lord1"),  
    ##############################
    
    ############# set slots to recognize player as king and marshall
    (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
    (faction_set_slot, "fac_player_supporters_faction", slot_faction_marshall, "trp_player"),####### NEW v3.0-KOMKE uncommented
    # (faction_set_slot, "fac_player_supporters_faction", slot_faction_marshall, -1),  ######### NEW v2.1 - No marshall set at beggining####### NEW v3.0-KOMKE commented out
    (call_script, "script_update_all_notes"),
    
    ################ give player party morale
    (party_set_morale, "p_main_party", 100),
    
    # (call_script, "script_print_faction_lord_count", "fac_player_supporters_faction", 75012),   
    ####################### NEW - GIVE TROOPS TO PLAYER BASED ON CULTURE
    (try_begin), 
      ####### NEW v2.1 - player receives reinforcements depending on the center's culture (except teutonic)
      (party_get_slot, ":capital_cur_culture", "$g_player_court", slot_center_culture),  
      (try_begin), 
        (eq, ":fac_kingdom", "fac_kingdom_1"),  
          (assign, ":capital_cur_culture", "fac_kingdom_1"),  
      (try_end), 

      ####### NEW v2.2 - just to be safe if the v2.2 bugfix above doesn't work
      (try_begin), 
        (neg|is_between, ":capital_cur_culture", cultures_begin, cultures_end),  
          (faction_get_slot, ":capital_cur_culture", ":fac_kingdom", slot_faction_culture),  
      (try_end), 
      #######
      
      # (faction_get_slot, ":orig_faction_culture2", ":orig_faction", slot_faction_culture),
      # (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":orig_faction_culture2"),
      # (faction_set_slot, "fac_player_faction", slot_faction_culture, ":orig_faction_culture2"),      
      (faction_get_slot, ":reinforcements_a", ":capital_cur_culture", slot_faction_reinforcements_a),
      (faction_get_slot, ":reinforcements_b", ":capital_cur_culture", slot_faction_reinforcements_b),
      (faction_get_slot, ":reinforcements_c", ":capital_cur_culture", slot_faction_reinforcements_c),
      
      #### 400-450
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
                  
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
            
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
            
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
            
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                        
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                        
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
            
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                  
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),     
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),      
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),    
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      
      (store_random_in_range, ":random_party_xp", 23000, 25000),
      (party_upgrade_with_xp, "p_main_party", ":random_party_xp", 0),
      (store_random_in_range, ":random_party_xp2", 18000, 22000),
      (party_upgrade_with_xp, "p_main_party", ":random_party_xp2", 0),
    (try_end),
########################################################################################
    
    
################################ RETRIEVE ORIGINAL FACTION RELATIONS AND SET THEM ON PLAYER FACTION
    (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
      (store_relation, ":cur_fac_relation", ":fac_kingdom", ":cur_faction"),
      (set_relation, "fac_player_supporters_faction", ":cur_faction", ":cur_fac_relation"),
      
      (store_relation, ":cur_fac_relation2", ":cur_faction", ":fac_kingdom"),
      (set_relation, ":cur_faction", "fac_player_supporters_faction", ":cur_fac_relation2"),
      ########### this should fix lords ignoring the player as member of faction they're at war with
      (call_script, "script_set_player_relation_with_faction", ":cur_faction", ":cur_fac_relation"),
    (try_end),
########################################################################################
    
    
    
################################ SET PLAYER RECOGNITION ON ALL FACTION SO TRADE AGREEMENTS ARE AVAILABLE AT START
    (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
      (faction_set_slot, ":cur_faction", slot_faction_recognized_player, 1),
    (try_end),
########################################################################################


    
    (try_begin),
      (eq, ":fac_kingdom", "fac_kingdom_1"),
      (assign, "$kaos_kings_kingdom", 1),
      (str_store_string, s1, "str_kaos_kingdom1_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_2"),
      (assign, "$kaos_kings_kingdom", 2),
      (str_store_string, s1, "str_kaos_kingdom2_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_3"),
      (assign, "$kaos_kings_kingdom", 3),
      (str_store_string, s1, "str_kaos_kingdom3_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_4"),
      (assign, "$kaos_kings_kingdom", 4),
      (str_store_string, s1, "str_kaos_kingdom4_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_5"),
      (assign, "$kaos_kings_kingdom", 5),
      (str_store_string, s1, "str_kaos_kingdom5_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_6"),
      (assign, "$kaos_kings_kingdom", 6),
      (str_store_string, s1, "str_kaos_kingdom6_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_7"),
      (assign, "$kaos_kings_kingdom", 7),
      (str_store_string, s1, "str_kaos_kingdom7_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_8"),
      (assign, "$kaos_kings_kingdom", 8),
      (str_store_string, s1, "str_kaos_kingdom8_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_9"),
      (assign, "$kaos_kings_kingdom", 9),
      (str_store_string, s1, "str_kaos_kingdom9_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_10"),
      (assign, "$kaos_kings_kingdom", 10),
      (str_store_string, s1, "str_kaos_kingdom10_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_11"),
      (assign, "$kaos_kings_kingdom", 11),
      (str_store_string, s1, "str_kaos_kingdom11_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_12"),
      (assign, "$kaos_kings_kingdom", 12),
      (str_store_string, s1, "str_kaos_kingdom12_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_13"),
      (assign, "$kaos_kings_kingdom", 13),
      (str_store_string, s1, "str_kaos_kingdom13_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_14"),
      (assign, "$kaos_kings_kingdom", 14),
      (str_store_string, s1, "str_kaos_kingdom14_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_15"),
      (assign, "$kaos_kings_kingdom", 15),
      (str_store_string, s1, "str_kaos_kingdom15_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_16"),
      (assign, "$kaos_kings_kingdom", 16),
      (str_store_string, s1, "str_kaos_kingdom16_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_17"),
      (assign, "$kaos_kings_kingdom", 17),
      (str_store_string, s1, "str_kaos_kingdom17_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_18"),
      (assign, "$kaos_kings_kingdom", 18),
      (str_store_string, s1, "str_kaos_kingdom18_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_19"),
      (assign, "$kaos_kings_kingdom", 19),
      (str_store_string, s1, "str_kaos_kingdom19_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_20"),
      (assign, "$kaos_kings_kingdom", 20),
      (str_store_string, s1, "str_kaos_kingdom20_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_papacy"),
      (assign, "$kaos_kings_kingdom", 21),
      (str_store_string, s1, "str_kaos_kingdom21_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_22"),
      (assign, "$kaos_kings_kingdom", 22),
      (str_store_string, s1, "str_kaos_kingdom22_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_23"),
      (assign, "$kaos_kings_kingdom", 23),
      (str_store_string, s1, "str_kaos_kingdom23_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_24"),
      (assign, "$kaos_kings_kingdom", 24),
      (str_store_string, s1, "str_kaos_kingdom24_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_25"),
      (assign, "$kaos_kings_kingdom", 25),
      (str_store_string, s1, "str_kaos_kingdom25_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_26"),
      (assign, "$kaos_kings_kingdom", 26),
      (str_store_string, s1, "str_kaos_kingdom26_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_27"),
      (assign, "$kaos_kings_kingdom", 27),
      (str_store_string, s1, "str_kaos_kingdom27_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_28"),
      (assign, "$kaos_kings_kingdom", 28),
      (str_store_string, s1, "str_kaos_kingdom28_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_29"),
      (assign, "$kaos_kings_kingdom", 29),
      (str_store_string, s1, "str_kaos_kingdom29_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_30"),
      (assign, "$kaos_kings_kingdom", 30),
      (str_store_string, s1, "str_kaos_kingdom30_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_31"),
      (assign, "$kaos_kings_kingdom", 31),
      (str_store_string, s1, "str_kaos_kingdom31_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_32"),
      (assign, "$kaos_kings_kingdom", 32),
      (str_store_string, s1, "str_kaos_kingdom32_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_33"),
      (assign, "$kaos_kings_kingdom", 33),
      (str_store_string, s1, "str_kaos_kingdom33_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_34"),
      (assign, "$kaos_kings_kingdom", 34),
      (str_store_string, s1, "str_kaos_kingdom34_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_35"),
      (assign, "$kaos_kings_kingdom", 35),
      (str_store_string, s1, "str_kaos_kingdom35_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_36"),
      (assign, "$kaos_kings_kingdom", 36),
      (str_store_string, s1, "str_kaos_kingdom36_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_37"),
      (assign, "$kaos_kings_kingdom", 37),
      (str_store_string, s1, "str_kaos_kingdom37_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_38"),
      (assign, "$kaos_kings_kingdom", 38),
      (str_store_string, s1, "str_kaos_kingdom38_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_39"),
      (assign, "$kaos_kings_kingdom", 39),
      (str_store_string, s1, "str_kaos_kingdom39_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_40"),
      (assign, "$kaos_kings_kingdom", 40),
      (str_store_string, s1, "str_kaos_kingdom40_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_41"),
      (assign, "$kaos_kings_kingdom", 41),
      (str_store_string, s1, "str_kaos_kingdom41_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (else_try),
      (eq, ":fac_kingdom", "fac_kingdom_42"),
      (assign, "$kaos_kings_kingdom", 42),
      (str_store_string, s1, "str_kaos_kingdom42_king"),
      (faction_set_name, "fac_player_supporters_faction", s1),
    (try_end),    
    (call_script, "script_initialize_faction_stats_player", ":fac_kingdom"),  ###### NEW v2.5 - copies all stuff from original faction and fixes religion bug  NEW v3.4 - this must come first or else player faction will start with player culture 
    (call_script, "script_initialize_faction_troop_types_player"),  ######## NEW v3.3 - moved this one line up
    (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
    (troop_set_name, "trp_player", s10),
    (troop_set_plural_name, "trp_player", s10),
    # (assign, "$kaos_title_run", 1),
    # (call_script, "script_troop_set_title_according_to_faction_gender_and_lands", "trp_player", "fac_player_supporters_faction"),

    ####### NEW v3.1-v3.3 - fixes noble start title bug 
    (try_begin),       
      (faction_get_slot, ":cur_language", ":fac_kingdom", slot_faction_language),  
      (call_script, "script_troop_set_title_according_to_culture_language_king", "trp_player", ":capital_cur_culture", ":cur_language"),
    (try_end), 
    #######
      
    (assign, "$players_kingdom", "fac_player_supporters_faction"),  ########### NEW v3.3
    (troop_set_faction, "trp_player", "fac_player_supporters_faction"),  ########### NEW v3.7
    
    (assign, "$g_player_minister", "trp_temporary_minister"),
    (troop_set_faction, "trp_temporary_minister", "fac_player_supporters_faction"),
    (assign, "$g_player_chamberlain", "trp_dplmc_chamberlain"),
    (troop_set_faction, "trp_dplmc_chamberlain", "fac_player_supporters_faction"),
    (assign, "$g_player_chancellor", "trp_dplmc_chancellor"),
    (troop_set_faction, "trp_dplmc_chancellor", "fac_player_supporters_faction"),
    (assign, "$g_player_constable", "trp_dplmc_constable"),
    (troop_set_faction, "trp_dplmc_constable", "fac_player_supporters_faction"),
    
   ########## NEW v3.10
   (try_begin),
     (faction_get_slot, ":cur_faction_culture", "$players_kingdom", slot_faction_culture),
     (try_begin),
       (eq, ":cur_faction_culture", "fac_culture_finnish"),
         (assign, "$g_player_know_culture_finnish", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mazovian"),
         (assign, "$g_player_know_culture_mazovian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_serbian"),
         (assign, "$g_player_know_culture_serbian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_welsh"),
         (assign, "$g_player_know_culture_welsh", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_teutonic"),
         (assign, "$g_player_know_culture_teutonic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_balkan"),
         (assign, "$g_player_know_culture_balkan", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_rus"),
         (assign, "$g_player_know_culture_rus", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_nordic"),
         (assign, "$g_player_know_culture_nordic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_baltic"),
         (assign, "$g_player_know_culture_baltic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_marinid"),
         (assign, "$g_player_know_culture_marinid", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mamluke"),
         (assign, "$g_player_know_culture_mamluke", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_byzantium"),
         (assign, "$g_player_know_culture_byzantium", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_iberian"),
         (assign, "$g_player_know_culture_iberian", 1), 
         (assign, "$g_ask_for_language", 1),     
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_italian"),
         (assign, "$g_player_know_culture_italian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_andalus"),
         (assign, "$g_player_know_culture_andalus", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_gaelic"),
         (assign, "$g_player_know_culture_gaelic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_anatolian_christian"),
         (assign, "$g_player_know_culture_anatolian_christian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_anatolian"),
         (assign, "$g_player_know_culture_anatolian", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_western"),
         (assign, "$g_player_know_culture_western", 1),
         (assign, "$g_ask_for_language", 1),    ########## NEW v3.3 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mongol"),
         (assign, "$g_player_know_culture_mongol", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_templar"),
         (assign, "$g_player_know_culture_templar", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_hospitaller"),
         (assign, "$g_player_know_culture_hospitaller", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_antioch"),
         (assign, "$g_player_know_culture_antiochian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_tripoli"),
         (assign, "$g_player_know_culture_tripoli", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_ibelin"),
         (assign, "$g_player_know_culture_ibelin", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_jerusalem"),
         (assign, "$g_player_know_culture_jerusalem", 1),
   ############### NEW v3.3 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_crusader"),
         (assign, "$g_player_know_culture_crusader", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_cuman"),
         (assign, "$g_player_know_culture_cuman", 1),
   ################# 
   ############## NEW v3.10
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_english"),
         (assign, "$g_player_know_culture_english", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_french"),
         (assign, "$g_player_know_culture_french", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_hungarian"),
         (assign, "$g_player_know_culture_hungarian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_polish"),
         (assign, "$g_player_know_culture_polish", 1),
############################
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_player"),
         (assign, "$g_player_know_culture_player", 1),      
     (try_end),
   (try_end),
   (troop_set_slot, "trp_player", slot_troop_cur_culture, ":cur_faction_culture"),  
   ######################################
   (set_show_messages, 1),
  ]),

#####################################################  
  
  
  
  
  
  
  
#####################################################
  ("set_player_prince_init",
  [
    (set_show_messages, 0),
    (store_script_param, ":var0", 1),
    (store_script_param, ":var1", 2),
    (store_script_param, ":var2", 3),
    (store_script_param, ":var3", 4),
    (assign, ":var4", 0),
    (assign, ":var5", 0),
    (str_store_troop_name, s10, "trp_player"),
    (call_script, "script_player_join_faction", ":var0"),
    (assign, "$player_has_homage", 1),
    (assign, "$g_player_banner_granted", 1),
    (assign, "$g_invite_faction", 1),
    (assign, "$g_invite_faction_lord", 1),
    (store_random_in_range, ":var6", 20, 45),
    (call_script, "script_troop_change_relation_with_troop", "trp_player", ":var3", ":var6"),
    (troop_set_slot, ":var3", slot_troop_met, 1),
    (try_for_range, ":var7", ":var1", ":var2"),
      (store_random_in_range, ":var6", -22, 39),
      (call_script, "script_troop_change_relation_with_troop", "trp_player", ":var7", ":var6"),
      (troop_set_slot, ":var7", slot_troop_met, 1),
    (try_end),
    (try_for_range, ":var8", "trp_knight_1_1_wife", "trp_heroes_end"),
      (store_faction_of_troop, ":town_orig_lord", ":var8"),
      (eq, ":town_orig_lord", ":var0"),
      (store_random_in_range, ":var6", -2, 18),
      (call_script, "script_troop_change_relation_with_troop", "trp_player", ":var8", ":var6"),
      (troop_set_slot, ":var8", slot_troop_met, 1),
    (try_end),
		
    (call_script, "script_change_player_right_to_rule", 25),
    (troop_set_slot, "trp_player", slot_troop_father, ":var3"),
    (store_random_in_range, ":var10", 10, 45),
    (troop_set_slot, "trp_player", slot_troop_controversy, ":var10"),
    (call_script, "script_kaos_get_lord_highest_controversy_in_faction", ":var0"),
    (assign, ":var11", reg0),
    (try_for_range, ":var12", "p_town_1_1", "p_village_1_1"),
      (party_get_slot, ":var4", ":var12", slot_town_lord),
      (eq, ":var4", ":var11"),
      (assign, ":var5", ":var12"),
    (try_end),
    (try_begin),
      (eq, ":var5", 0),
      (call_script, "script_kaos_get_lord_lowest_relation_in_faction", ":var0"),
      (assign, ":var11", reg0),
      (try_for_range, ":var12", "p_town_1_1", "p_village_1_1"),
        (party_get_slot, ":var4", ":var12", slot_town_lord),
        (eq, ":var4", ":var11"),
        (assign, ":var5", ":var12"),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":var5", 0),
      (try_begin),
        (eq, ":var0", "fac_kingdom_1"),
        (assign, ":var5", "p_castle_1_1"),
        (party_get_slot, ":var4", "p_castle_1_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_2"),
        (assign, ":var5", "p_castle_2_1"),
        (party_get_slot, ":var4", "p_castle_2_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_3"),
        (assign, ":var5", "p_castle_3_1"),
        (party_get_slot, ":var4", "p_castle_3_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_4"),
        (assign, ":var5", "p_castle_4_1"),
        (party_get_slot, ":var4", "p_castle_4_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_5"),
        (assign, ":var5", "p_castle_5_3"),
        (party_get_slot, ":var4", "p_castle_5_3", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_6"),
        (assign, ":var5", "p_castle_6_1"),
        (party_get_slot, ":var4", "p_castle_6_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_7"),
        (assign, ":var5", "p_castle_7_1"),
        (party_get_slot, ":var4", "p_castle_7_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_8"),
        (assign, ":var5", "p_castle_8_1"),
        (party_get_slot, ":var4", "p_castle_8_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_9"),
        (assign, ":var5", "p_castle_9_1"),
        (party_get_slot, ":var4", "p_castle_9_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_10"),
        (assign, ":var5", "p_castle_10_1"),
        (party_get_slot, ":var4", "p_castle_10_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_11"),
        (assign, ":var5", "p_castle_11_1"),
        (party_get_slot, ":var4", "p_castle_11_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_12"),
        (assign, ":var5", "p_castle_12_1"),
        (party_get_slot, ":var4", "p_castle_12_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_13"),
        (assign, ":var5", "p_castle_13_1"),
        (party_get_slot, ":var4", "p_castle_13_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_14"),
        (assign, ":var5", "p_castle_14_1"),
        (party_get_slot, ":var4", "p_castle_14_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_15"),
        (assign, ":var5", "p_castle_15_1"),
        (party_get_slot, ":var4", "p_castle_15_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_16"),
        (assign, ":var5", "p_castle_16_1"),
        (party_get_slot, ":var4", "p_castle_16_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_17"),
        (assign, ":var5", "p_castle_17_1"),
        (party_get_slot, ":var4", "p_castle_17_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_18"),
        (assign, ":var5", "p_castle_18_1"),
        (party_get_slot, ":var4", "p_castle_18_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_19"),
        (assign, ":var5", "p_castle_19_1"),
        (party_get_slot, ":var4", "p_castle_19_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_20"),
        (assign, ":var5", "p_castle_20_1"),
        (party_get_slot, ":var4", "p_castle_20_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_papacy"),
        (assign, ":var5", "p_town_21_1"),
        (party_get_slot, ":var4", "p_town_21_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_22"),
        (assign, ":var5", "p_castle_22_1"),
        (party_get_slot, ":var4", "p_castle_22_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_23"),
        (assign, ":var5", "p_castle_23_1"),
        (party_get_slot, ":var4", "p_castle_23_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_24"),
        (assign, ":var5", "p_castle_24_1"),
        (party_get_slot, ":var4", "p_castle_24_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_25"),
        (assign, ":var5", "p_castle_25_1"),
        (party_get_slot, ":var4", "p_castle_25_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_26"),
        (assign, ":var5", "p_castle_26_1"),
        (party_get_slot, ":var4", "p_castle_26_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_27"),
        (assign, ":var5", "p_castle_27_1"),
        (party_get_slot, ":var4", "p_castle_27_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_28"),
        (assign, ":var5", "p_castle_28_1"),
        (party_get_slot, ":var4", "p_castle_28_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_29"),
        (assign, ":var5", "p_castle_29_1"),
        (party_get_slot, ":var4", "p_castle_29_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_30"),
        (assign, ":var5", "p_castle_30_1"),
        (party_get_slot, ":var4", "p_castle_30_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_31"),
        (assign, ":var5", "p_castle_31_1"),
        (party_get_slot, ":var4", "p_castle_31_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_32"),
        (assign, ":var5", "p_castle_32_1"),
        (party_get_slot, ":var4", "p_castle_32_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_33"),
        (assign, ":var5", "p_castle_33_1"),
        (party_get_slot, ":var4", "p_castle_33_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_34"),
        (assign, ":var5", "p_castle_34_1"),
        (party_get_slot, ":var4", "p_castle_34_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_35"),
        (assign, ":var5", "p_castle_35_1"),
        (party_get_slot, ":var4", "p_castle_35_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_36"),
        (assign, ":var5", "p_castle_36_1"),
        (party_get_slot, ":var4", "p_castle_36_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_37"),
        (assign, ":var5", "p_castle_37_1"),
        (party_get_slot, ":var4", "p_castle_37_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_38"),
        (assign, ":var5", "p_castle_38_1"),
        (party_get_slot, ":var4", "p_castle_38_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_39"),
        (assign, ":var5", "p_castle_39_1"),
        (party_get_slot, ":var4", "p_castle_39_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_40"),
        (assign, ":var5", "p_town_40_1"),
        (party_get_slot, ":var4", "p_town_40_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_41"),
        (assign, ":var5", "p_town_41_1"),
        (party_get_slot, ":var4", "p_town_41_1", slot_town_lord),
      (else_try),
        (eq, ":var0", "fac_kingdom_42"),
        (assign, ":var5", "p_town_42_1"),
        (party_get_slot, ":var4", "p_town_42_1", slot_town_lord),
      (try_end),
    (try_end),
    (call_script, "script_troop_change_relation_with_troop", "trp_player", ":var4", -5),
    (call_script, "script_give_center_to_lord", ":var5", "trp_player", 0),
    (assign, "$g_invite_offered_center", ":var5"),
    (assign, "$kaos_prince_start", ":var5"),
    (assign, reg0, ":var5"),
    # (troop_set_name, "trp_player", s10),
    # (troop_set_plural_name, "trp_player", s10),
    # (assign, "$kaos_title_run", 1),
    # (call_script, "script_troop_set_title_according_to_faction_gender_and_lands", "trp_player", ":var0"),
    # (troop_get_slot, ":var13", "trp_player", slot_troop_leaded_party),
    # (str_store_troop_name, s5, "trp_player"),
    # (party_set_name, ":var13", "str_s5_s_party"),
    (call_script, "script_update_all_notes"),
    (assign, "$g_player_chamberlain", "trp_dplmc_chamberlain"),
    (troop_set_faction, "trp_dplmc_chamberlain", "fac_player_supporters_faction"),
    (assign, "$g_player_constable", "trp_dplmc_constable"),
    (troop_set_faction, "trp_dplmc_constable", "fac_player_supporters_faction"),
    
    ############ NEW v3.3 - player heir
    (try_begin), 
      (faction_slot_eq, ":var0", slot_faction_heir_1, -1), 
        (faction_set_slot, ":var0", slot_faction_heir_1, "trp_player"), 
    (else_try), 
      (faction_slot_eq, ":var0", slot_faction_heir_2, -1), 
        (faction_set_slot, ":var0", slot_faction_heir_2, "trp_player"), 
    (else_try), 
      (faction_slot_eq, ":var0", slot_faction_heir_3, -1), 
        (faction_set_slot, ":var0", slot_faction_heir_3, "trp_player"), 
    (try_end), 
    ########################
      
    (assign, "$players_kingdom", ":var0"),  ########### NEW v3.3
    (troop_set_faction, "trp_player", ":var0"),  ########### NEW v3.7
    
    ########## NEW v3.5
    (call_script, "script_change_player_right_to_rule", 35),
    (store_random_in_range, ":lower_bound_lord1", 20, 45),
    (troop_set_slot, "trp_player", slot_troop_controversy, ":lower_bound_lord1"),
    
    (store_random_in_range, ":lower_bound_lord1", 600, 800),
    (troop_set_slot, "trp_player", slot_troop_renown, ":lower_bound_lord1"),  
    ##############################
    
    ################ give player party morale
    (party_set_morale, "p_main_party", 100),
    
    ####################### NEW - GIVE TROOPS TO PLAYER BASED ON CULTURE
    (try_begin),
      ####### NEW v2.1 - player receives reinforcements depending on the center's culture (except teutonic)
      (party_get_slot, ":capital_cur_culture", "$g_player_court", slot_center_culture),  
      (try_begin), 
        (eq, ":var0", "fac_kingdom_1"),  
          (assign, ":capital_cur_culture", "fac_kingdom_1"),  
      (try_end), 
      
      ####### NEW v2.2 - fixes bug where player doesn't receive any troop at monarch start
      (try_begin), 
        (neg|is_between, ":capital_cur_culture", cultures_begin, cultures_end),  
          (faction_get_slot, ":capital_cur_culture", ":var0", slot_faction_culture),  
      (try_end), 
      #######

      ####### NEW v3.1 - fixes noble start title bug
      (try_begin),       
        # (faction_get_slot, ":cur_language", ":var0", slot_faction_language),  
        # (call_script, "script_troop_set_title_according_to_faction", "trp_player", ":capital_cur_culture", ":cur_language"),
        (call_script, "script_troop_set_title_according_to_faction", "trp_player", ":var0"),
      (try_end), 
      #######
      
      # (faction_get_slot, ":orig_faction_culture2", ":orig_faction", slot_faction_culture),
      # (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":orig_faction_culture2"),
      # (faction_set_slot, "fac_player_faction", slot_faction_culture, ":orig_faction_culture2"),      
      (faction_get_slot, ":reinforcements_a", ":capital_cur_culture", slot_faction_reinforcements_a),
      (faction_get_slot, ":reinforcements_b", ":capital_cur_culture", slot_faction_reinforcements_b),
      (faction_get_slot, ":reinforcements_c", ":capital_cur_culture", slot_faction_reinforcements_c),
      
      ### 280-350
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
                  
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      # (party_add_template, "p_main_party", ":reinforcements_a"),
      # (party_add_template, "p_main_party", ":reinforcements_a"),
            
          
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
            
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                        
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                        
      (party_add_template, "p_main_party", ":reinforcements_b"),
      # (party_add_template, "p_main_party", ":reinforcements_b"),
      # (party_add_template, "p_main_party", ":reinforcements_b"),
      # (party_add_template, "p_main_party", ":reinforcements_b"),
      # (party_add_template, "p_main_party", ":reinforcements_b"),
                        

      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),      
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),    
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      
      (store_random_in_range, ":random_party_xp", 18000, 20000),
      (party_upgrade_with_xp, "p_main_party", ":random_party_xp", 0),
      (store_random_in_range, ":random_party_xp", 14000, 15000),
      (party_upgrade_with_xp, "p_main_party", ":random_party_xp", 0),
    (try_end),
    
    (troop_set_slot, "trp_player", slot_troop_cur_culture, ":capital_cur_culture"),  ########### NEW v3.3
    
   ########## NEW v3.10
   (try_begin),
     (faction_get_slot, ":cur_faction_culture", "$players_kingdom", slot_faction_culture),
     (try_begin),
       (eq, ":cur_faction_culture", "fac_culture_finnish"),
         (assign, "$g_player_know_culture_finnish", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mazovian"),
         (assign, "$g_player_know_culture_mazovian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_serbian"),
         (assign, "$g_player_know_culture_serbian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_welsh"),
         (assign, "$g_player_know_culture_welsh", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_teutonic"),
         (assign, "$g_player_know_culture_teutonic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_balkan"),
         (assign, "$g_player_know_culture_balkan", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_rus"),
         (assign, "$g_player_know_culture_rus", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_nordic"),
         (assign, "$g_player_know_culture_nordic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_baltic"),
         (assign, "$g_player_know_culture_baltic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_marinid"),
         (assign, "$g_player_know_culture_marinid", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mamluke"),
         (assign, "$g_player_know_culture_mamluke", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_byzantium"),
         (assign, "$g_player_know_culture_byzantium", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_iberian"),
         (assign, "$g_player_know_culture_iberian", 1), 
         (assign, "$g_ask_for_language", 1),     
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_italian"),
         (assign, "$g_player_know_culture_italian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_andalus"),
         (assign, "$g_player_know_culture_andalus", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_gaelic"),
         (assign, "$g_player_know_culture_gaelic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_anatolian_christian"),
         (assign, "$g_player_know_culture_anatolian_christian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_anatolian"),
         (assign, "$g_player_know_culture_anatolian", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_western"),
         (assign, "$g_player_know_culture_western", 1),
         (assign, "$g_ask_for_language", 1),    ########## NEW v3.3 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mongol"),
         (assign, "$g_player_know_culture_mongol", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_templar"),
         (assign, "$g_player_know_culture_templar", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_hospitaller"),
         (assign, "$g_player_know_culture_hospitaller", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_antioch"),
         (assign, "$g_player_know_culture_antiochian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_tripoli"),
         (assign, "$g_player_know_culture_tripoli", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_ibelin"),
         (assign, "$g_player_know_culture_ibelin", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_jerusalem"),
         (assign, "$g_player_know_culture_jerusalem", 1),
   ############### NEW v3.3 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_crusader"),
         (assign, "$g_player_know_culture_crusader", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_cuman"),
         (assign, "$g_player_know_culture_cuman", 1),
   ################# 
   ############## NEW v3.10
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_english"),
         (assign, "$g_player_know_culture_english", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_french"),
         (assign, "$g_player_know_culture_french", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_hungarian"),
         (assign, "$g_player_know_culture_hungarian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_polish"),
         (assign, "$g_player_know_culture_polish", 1),
   ################# 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_player"),
         (assign, "$g_player_know_culture_player", 1),      
     (try_end),
   (try_end),
   (troop_set_slot, "trp_player", slot_troop_cur_culture, ":cur_faction_culture"),  
   ######################################
    (set_show_messages, 1),
  ]),
#################################################
  
  
  
  
  


  
  
#################################################
  ("set_player_vassal_init",
  [
    (set_show_messages, 0),
    (store_script_param, ":faction", 1),
    (store_script_param, ":lower_bound_lord", 2),
    (store_script_param, ":upper_bound_lord", 3),
    (store_script_param, ":faction_king", 4),
    (str_store_troop_name, s10, "trp_player"),
    (call_script, "script_player_join_faction", ":faction"),
    (assign, "$player_has_homage", 1),
    (assign, "$g_player_banner_granted", 1),
    (assign, "$g_invite_faction", 1),
    (assign, "$g_invite_faction_lord", 1),
	
    (try_begin),
      (eq, ":faction", "fac_kingdom_1"),
      (assign, ":fief", "p_village_1_1"),
      (party_get_slot, ":fief_lord", "p_village_1_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_2"),
      (assign, ":fief", "p_village_2_1"),
      (party_get_slot, ":fief_lord", "p_village_2_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_3"),
      (assign, ":fief", "p_village_3_1"),
      (party_get_slot, ":fief_lord", "p_village_3_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_4"),
      (assign, ":fief", "p_village_4_1"),
      (party_get_slot, ":fief_lord", "p_village_4_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_5"),
      (assign, ":fief", "p_village_5_3"),
      (party_get_slot, ":fief_lord", "p_village_5_3", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_6"),
      (assign, ":fief", "p_village_6_1"),
      (party_get_slot, ":fief_lord", "p_village_6_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_7"),
      (assign, ":fief", "p_village_7_1"),
      (party_get_slot, ":fief_lord", "p_village_7_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_8"),
      (assign, ":fief", "p_village_8_1"),
      (party_get_slot, ":fief_lord", "p_village_8_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_9"),
      (assign, ":fief", "p_village_9_1"),
      (party_get_slot, ":fief_lord", "p_village_9_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_10"),
      (assign, ":fief", "p_village_10_1"),
      (party_get_slot, ":fief_lord", "p_village_10_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_11"),
      (assign, ":fief", "p_village_11_1"),
      (party_get_slot, ":fief_lord", "p_village_11_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_12"),
      (assign, ":fief", "p_village_12_1"),
      (party_get_slot, ":fief_lord", "p_village_12_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_13"),
      (assign, ":fief", "p_village_13_1"),
      (party_get_slot, ":fief_lord", "p_village_13_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_14"),
      (assign, ":fief", "p_village_14_1"),
      (party_get_slot, ":fief_lord", "p_village_14_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_15"),
      (assign, ":fief", "p_village_15_1"),
      (party_get_slot, ":fief_lord", "p_village_15_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_16"),
      (assign, ":fief", "p_village_16_1"),
      (party_get_slot, ":fief_lord", "p_village_16_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_17"),
      (assign, ":fief", "p_village_17_1"),
      (party_get_slot, ":fief_lord", "p_village_17_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_18"),
      (assign, ":fief", "p_village_18_1"),
      (party_get_slot, ":fief_lord", "p_village_18_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_19"),
      (assign, ":fief", "p_village_19_1"),
      (party_get_slot, ":fief_lord", "p_village_19_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_20"),
      (assign, ":fief", "p_village_20_1"),
      (party_get_slot, ":fief_lord", "p_village_20_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_papacy"),
      (assign, ":fief", "p_town_21_1"),
      (party_get_slot, ":fief_lord", "p_town_21_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_22"),
      (assign, ":fief", "p_village_22_1"),
      (party_get_slot, ":fief_lord", "p_village_22_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_23"),
      (assign, ":fief", "p_village_23_1"),
      (party_get_slot, ":fief_lord", "p_village_23_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_24"),
      (assign, ":fief", "p_village_24_1"),
      (party_get_slot, ":fief_lord", "p_village_24_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_25"),
      (assign, ":fief", "p_village_25_1"),
      (party_get_slot, ":fief_lord", "p_village_25_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_26"),
      (assign, ":fief", "p_village_26_1"),
      (party_get_slot, ":fief_lord", "p_village_26_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_27"),
      (assign, ":fief", "p_village_27_1"),
      (party_get_slot, ":fief_lord", "p_village_27_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_28"),
      (assign, ":fief", "p_village_28_1"),
      (party_get_slot, ":fief_lord", "p_village_28_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_29"),
      (assign, ":fief", "p_village_29_1"),
      (party_get_slot, ":fief_lord", "p_village_29_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_30"),
      (assign, ":fief", "p_village_30_1"),
      (party_get_slot, ":fief_lord", "p_village_30_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_31"),
      (assign, ":fief", "p_village_31_1"),
      (party_get_slot, ":fief_lord", "p_village_31_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_32"),
      (assign, ":fief", "p_village_32_1"),
      (party_get_slot, ":fief_lord", "p_village_32_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_33"),
      (assign, ":fief", "p_village_33_1"),
      (party_get_slot, ":fief_lord", "p_village_33_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_34"),
      (assign, ":fief", "p_village_34_1"),
      (party_get_slot, ":fief_lord", "p_village_34_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_35"),
      (assign, ":fief", "p_village_35_1"),
      (party_get_slot, ":fief_lord", "p_village_35_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_36"),
      (assign, ":fief", "p_village_36_1"),
      (party_get_slot, ":fief_lord", "p_village_36_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_37"),
      (assign, ":fief", "p_village_37_1"),
      (party_get_slot, ":fief_lord", "p_village_37_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_38"),
      (assign, ":fief", "p_village_38_1"),
      (party_get_slot, ":fief_lord", "p_village_38_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_39"),
      (assign, ":fief", "p_village_39_1"),
      (party_get_slot, ":fief_lord", "p_village_39_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_40"),
      (assign, ":fief", "p_village_40_1"),
      (party_get_slot, ":fief_lord", "p_village_40_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_41"),
      (assign, ":fief", "p_village_41_1"),
      (party_get_slot, ":fief_lord", "p_village_41_1", slot_town_lord),
    (else_try),
      (eq, ":faction", "fac_kingdom_42"),
      (assign, ":fief", "p_village_42_1"),
      (party_get_slot, ":fief_lord", "p_village_42_1", slot_town_lord),
    (try_end),
    (call_script, "script_get_poorest_village_of_faction", ":faction"),
    (assign, ":var6", reg0),
    (call_script, "script_give_center_to_lord", ":var6", ":fief_lord", 0),
    # (call_script, "script_troop_change_relation_with_troop", "trp_player", ":fief_lord", -30),
    (call_script, "script_give_center_to_lord", ":fief", "trp_player", 0),
    (assign, "$g_invite_offered_center", ":fief"),
    (assign, "$kaos_vasal_start", ":fief"),
    (assign, ":fief", reg0),
    (store_random_in_range, ":var7", 15, 35),
    (call_script, "script_troop_change_relation_with_troop", "trp_player", ":faction_king", ":var7"),
    
    (try_for_range, ":var8", ":lower_bound_lord", ":upper_bound_lord"),
      (store_random_in_range, ":var7", -15, 35),
      (call_script, "script_troop_change_relation_with_troop", "trp_player", ":var8", ":var7"),
      (troop_set_slot, ":var8", slot_troop_met, 1),
    (try_end),
    
    (try_for_range, ":lady", "trp_knight_1_1_wife", "trp_heroes_end"),
      (store_faction_of_troop, ":lady_faction", ":lady"),
      (eq, ":lady_faction", ":faction"),
      (store_random_in_range, ":var7", -5, 15),
      (call_script, "script_troop_change_relation_with_troop", "trp_player", ":lady", ":var7"),
      (troop_set_slot, ":lady", slot_troop_met, 1),
    (try_end),
    
    (call_script, "script_change_player_right_to_rule", 15),
    (store_random_in_range, ":lower_bound_lord1", 20, 45),
    (troop_set_slot, "trp_player", slot_troop_controversy, ":lower_bound_lord1"),
    
    ########## NEW v3.5
    (store_random_in_range, ":lower_bound_lord1", 200, 400),
    (troop_set_slot, "trp_player", slot_troop_renown, ":lower_bound_lord1"),  
    ##############################
    # (troop_set_name, "trp_player", s10),
    # (troop_set_plural_name, "trp_player", s10),
    # (assign, "$kaos_title_run", 1),
    # (troop_get_slot, ":lower_bound_lord2", "trp_player", slot_troop_leaded_party),
    # (str_store_troop_name, s5, "trp_player"),
    # (party_set_name, ":lower_bound_lord2", "str_s5_s_party"),
    
    (assign, "$players_kingdom", ":faction"),  ########### NEW v3.3
    (troop_set_faction, "trp_player", ":faction"),  ########### NEW v3.7
    
    ################ give player party morale
    (party_set_morale, "p_main_party", 100),
    
    
    ####################### NEW - GIVE TROOPS TO PLAYER BASED ON CULTURE
    (try_begin),
      ####### NEW v2.1 - player receives reinforcements depending on the center's culture (except teutonic)
      (party_get_slot, ":capital_cur_culture", "$g_player_court", slot_center_culture),  
      (try_begin), 
        (eq, ":faction", "fac_kingdom_1"),  
          (assign, ":capital_cur_culture", "fac_kingdom_1"),  
      (try_end), 

      ####### NEW v2.2 - fixes bug where player doesn't receive any troop at monarch start
      (try_begin), 
        (neg|is_between, ":capital_cur_culture", cultures_begin, cultures_end),  
          (faction_get_slot, ":capital_cur_culture", ":faction", slot_faction_culture),  
      (try_end), 
      #######

      ####### NEW v3.1 - fixes noble start title bug
      (try_begin),       
        # (faction_get_slot, ":cur_language", ":var0", slot_faction_language),  
        # (call_script, "script_troop_set_title_according_to_faction", "trp_player", ":capital_cur_culture", ":cur_language"),
        (call_script, "script_troop_set_title_according_to_faction", "trp_player", ":faction"),
      (try_end), 
      #######
      
      # (faction_get_slot, ":orig_faction_culture2", ":orig_faction", slot_faction_culture),
      # (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":orig_faction_culture2"),
      # (faction_set_slot, "fac_player_faction", slot_faction_culture, ":orig_faction_culture2"),      
      (faction_get_slot, ":reinforcements_a", ":capital_cur_culture", slot_faction_reinforcements_a),
      (faction_get_slot, ":reinforcements_b", ":capital_cur_culture", slot_faction_reinforcements_b),
      (faction_get_slot, ":reinforcements_c", ":capital_cur_culture", slot_faction_reinforcements_c),
      
      ### 250-300
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
      (party_add_template, "p_main_party", ":reinforcements_a"),
                  
      (party_add_template, "p_main_party", ":reinforcements_a"),
      # (party_add_template, "p_main_party", ":reinforcements_a"),
      # (party_add_template, "p_main_party", ":reinforcements_a"),

      
      # (party_add_template, "p_main_party", ":reinforcements_b"),
      # (party_add_template, "p_main_party", ":reinforcements_b"),

      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
            
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                        
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
      (party_add_template, "p_main_party", ":reinforcements_b"),
                        

      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),      
      
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      (party_add_template, "p_main_party", ":reinforcements_c"),
      
      (store_random_in_range, ":random_party_xp", 18000, 20000),
      (party_upgrade_with_xp, "p_main_party", ":random_party_xp", 0),
      (store_random_in_range, ":random_party_xp", 14000, 15000),
      (party_upgrade_with_xp, "p_main_party", ":random_party_xp", 0),
    (try_end),
    
    (call_script, "script_update_all_notes"),
    
    (troop_set_slot, "trp_player", slot_troop_cur_culture, ":capital_cur_culture"),  ########### NEW v3.3
   ########## NEW v3.10
   (try_begin),
     (faction_get_slot, ":cur_faction_culture", "$players_kingdom", slot_faction_culture),
     (try_begin),
       (eq, ":cur_faction_culture", "fac_culture_finnish"),
         (assign, "$g_player_know_culture_finnish", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mazovian"),
         (assign, "$g_player_know_culture_mazovian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_serbian"),
         (assign, "$g_player_know_culture_serbian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_welsh"),
         (assign, "$g_player_know_culture_welsh", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_teutonic"),
         (assign, "$g_player_know_culture_teutonic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_balkan"),
         (assign, "$g_player_know_culture_balkan", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_rus"),
         (assign, "$g_player_know_culture_rus", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_nordic"),
         (assign, "$g_player_know_culture_nordic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_baltic"),
         (assign, "$g_player_know_culture_baltic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_marinid"),
         (assign, "$g_player_know_culture_marinid", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mamluke"),
         (assign, "$g_player_know_culture_mamluke", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_byzantium"),
         (assign, "$g_player_know_culture_byzantium", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_iberian"),
         (assign, "$g_player_know_culture_iberian", 1), 
         (assign, "$g_ask_for_language", 1),     
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_italian"),
         (assign, "$g_player_know_culture_italian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_andalus"),
         (assign, "$g_player_know_culture_andalus", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_gaelic"),
         (assign, "$g_player_know_culture_gaelic", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_anatolian_christian"),
         (assign, "$g_player_know_culture_anatolian_christian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_anatolian"),
         (assign, "$g_player_know_culture_anatolian", 1),
         
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_western"),
         (assign, "$g_player_know_culture_western", 1),
         (assign, "$g_ask_for_language", 1),    ########## NEW v3.3 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_mongol"),
         (assign, "$g_player_know_culture_mongol", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_templar"),
         (assign, "$g_player_know_culture_templar", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_hospitaller"),
         (assign, "$g_player_know_culture_hospitaller", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_antioch"),
         (assign, "$g_player_know_culture_antiochian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_tripoli"),
         (assign, "$g_player_know_culture_tripoli", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_ibelin"),
         (assign, "$g_player_know_culture_ibelin", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_jerusalem"),
         (assign, "$g_player_know_culture_jerusalem", 1),
   ############### NEW v3.3 
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_crusader"),
         (assign, "$g_player_know_culture_crusader", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_cuman"),
         (assign, "$g_player_know_culture_cuman", 1),
   ################# 
   ############## NEW v3.10
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_english"),
         (assign, "$g_player_know_culture_english", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_french"),
         (assign, "$g_player_know_culture_french", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_hungarian"),
         (assign, "$g_player_know_culture_hungarian", 1),
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_polish"),
         (assign, "$g_player_know_culture_polish", 1),
############################
     (else_try),
       (eq, ":cur_faction_culture", "fac_culture_player"),
         (assign, "$g_player_know_culture_player", 1),      
     (try_end),
   (try_end),
   (troop_set_slot, "trp_player", slot_troop_cur_culture, ":cur_faction_culture"),  
   ######################################
    (set_show_messages, 1),
  ]),
#################################################









  
    # script_change_troop_faction_game_start
    # Input: arg1 = troop_no, arg2 = faction
    ("change_troop_faction_game_start",
      [
        (store_script_param_1, ":troop_no"),
        (store_script_param_2, ":faction_no"),
        # (try_begin),
          ###########Reactivating inactive or defeated faction
          # (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
          # (neg|faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
          # (faction_set_slot, ":faction_no", slot_faction_state, sfs_active),
          ###########(call_script, "script_store_average_center_value_per_faction"),
        # (try_end),
        
        ############Political ramifications
        (store_faction_of_troop, ":orig_faction", ":troop_no"),
        ############remove if he is marshal
        (try_begin),
          (faction_slot_eq, ":orig_faction", slot_faction_marshall, ":troop_no"),
          (call_script, "script_check_and_finish_active_army_quests_for_faction", ":orig_faction"),
          ############No current issue on the agenda
          (try_begin),
            (faction_slot_eq, ":orig_faction", slot_faction_political_issue, 0),
            
            (faction_set_slot, ":orig_faction", slot_faction_political_issue, 1), #Appointment of marshal
            (store_current_hours, ":hours"),
            (val_max, ":hours", 0),
            (faction_set_slot, ":orig_faction", slot_faction_political_issue_time, ":hours"), #Appointment of marshal
            (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
              (troop_slot_eq, ":active_npc", slot_troop_is_alive, 1),  ## he's alive/active
              (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
              (eq, ":active_npc_faction", ":orig_faction"),
              (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
            (try_end),
            (try_begin),
              (eq, "$players_kingdom", ":orig_faction"),
              (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
            (try_end),
          (try_end),
          
          (try_begin),
            (troop_get_slot, ":old_marshall_party", ":troop_no", slot_troop_leaded_party),
            (party_is_active, ":old_marshall_party"),
            (party_set_marshall, ":old_marshall_party", 0),
          (try_end),
          
          (faction_set_slot, ":orig_faction", slot_faction_marshall, -1),
        (try_end),
        ###############Removal as marshal ends
        
        ###############Other political ramifications
        (troop_set_slot, ":troop_no", slot_troop_stance_on_faction_issue, -1),
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
          (troop_slot_eq, ":active_npc", slot_troop_is_alive, 1),  ## he's alive/active
          (troop_slot_eq, ":active_npc", slot_troop_stance_on_faction_issue, ":troop_no"),
          (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        ###############Political ramifications end
        
        
        (try_begin),
          (ge, "$cheat_mode", 1),
          (str_store_troop_name, s4, ":troop_no"),
          (display_message, "@{!}DEBUG - {s4} faction changed in normal faction change"),
        (try_end),
        
        (troop_set_faction, ":troop_no", ":faction_no"),
        (troop_set_slot, ":troop_no", slot_troop_recruitment_random, 0),
        (troop_set_slot, ":troop_no", slot_lord_recruitment_argument, 0),
        (troop_set_slot, ":troop_no", slot_lord_recruitment_candidate, 0),
        (troop_set_slot, ":troop_no", slot_troop_promised_fief, 0),
        
        ###############Give new title
        (call_script, "script_troop_set_title_according_to_faction", ":troop_no", ":faction_no"),
        
        (try_begin),
          (this_or_next|eq, ":faction_no", "$players_kingdom"),
          (eq, ":faction_no", "fac_player_supporters_faction"),
          (call_script, "script_check_concilio_calradi_achievement"),
        (try_end),
        
        ###############Takes walled centers and dependent villages with him
        (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
          (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
          (party_set_faction, ":center_no", ":faction_no"),
          (try_for_range, ":village_no", villages_begin, villages_end),
            (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
            (party_set_faction, ":village_no", ":faction_no"),
            (party_get_slot, ":farmer_party_no", ":village_no", slot_village_farmer_party),
            (try_begin),
              (gt, ":farmer_party_no", 0),
              (party_is_active, ":farmer_party_no"),
              (party_set_faction, ":farmer_party_no", ":faction_no"),
            (try_end),
            (try_begin),
              (party_get_slot, ":old_town_lord", ":village_no", slot_town_lord),
              (neq, ":old_town_lord", ":troop_no"),
              (party_set_slot, ":village_no", slot_town_lord, ":troop_no"), #### troop_no: i think this fix the bug described below
            (try_end),
          (try_end),
        (try_end),
        
        ###############Dependant kingdom ladies switch faction
        (try_for_range, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end),
          (call_script, "script_get_kingdom_lady_social_determinants", ":kingdom_lady"),
          (assign, ":closest_male_relative", reg0),
          (assign, ":new_center", reg1),
          
          (eq, ":closest_male_relative", ":troop_no"),
          
          (try_begin),
            (ge, "$cheat_mode", 1),
            (str_store_troop_name, s4, ":kingdom_lady"),
            (display_message, "@{!}DEBUG - {s4} faction changed by guardian moving"),
          (try_end),
          
          (troop_set_faction, ":kingdom_lady", ":faction_no"),
          (troop_slot_eq, ":kingdom_lady", slot_troop_prisoner_of_party, -1),
          (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, ":new_center"),
        (try_end),
        
        ############Remove his control over villages under another fortress
        ############ removed because of a bug: lords weren't getting their villages at monarch start option
        ########## NEW v2.1 - added it again
        (try_for_range, ":village_no", villages_begin, villages_end),
          (party_slot_eq, ":village_no", slot_town_lord, ":troop_no"),
          (store_faction_of_party, ":village_faction", ":village_no"),
          (try_begin),
            (neq, ":village_faction", ":faction_no"),
            (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
          (try_end),
        (try_end),
        
        ############Free prisoners
        (try_begin),
          (troop_get_slot, ":leaded_party", ":troop_no", slot_troop_leaded_party),
          (gt, ":leaded_party", 0),
          (party_set_faction, ":leaded_party", ":faction_no"),
          (party_get_num_prisoner_stacks, ":num_stacks", ":leaded_party"),
          (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":leaded_party", ":troop_iterator"),
            (store_troop_faction, ":cur_faction", ":cur_troop_id"),
            (troop_is_hero, ":cur_troop_id"),
            (eq, ":cur_faction", ":faction_no"),
            (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
            (party_remove_prisoners, ":leaded_party", ":cur_troop_id", 1),
          (try_end),
        (try_end),
        
        ############Annull all quests of which the lord is giver
        (try_for_range, ":quest", all_quests_begin, all_quests_end),
          (check_quest_active, ":quest"),
          (quest_slot_eq, ":quest", slot_quest_giver_troop, ":troop_no"),
          
          (str_store_troop_name, s4, ":troop_no"),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (display_message, "str_s4_changing_sides_aborts_quest"),
          (try_end),
          (call_script, "script_abort_quest", ":quest", 0),
        (try_end),
        
        ############Boot all lords out of centers whose faction has changed
        (try_for_range, ":lord_to_move", active_npcs_begin, active_npcs_end),
          (troop_slot_eq, ":lord_to_move", slot_troop_is_alive, 1),  ## he's alive/active
          (troop_get_slot, ":lord_led_party", ":lord_to_move", slot_troop_leaded_party),
          (party_is_active, ":lord_led_party"),
          (party_get_attached_to, ":led_party_attached", ":lord_led_party"),
          (is_between, ":led_party_attached", walled_centers_begin, walled_centers_end),
          (store_faction_of_party, ":led_party_faction", ":lord_led_party"),
          (store_faction_of_party, ":attached_party_faction", ":led_party_attached"),
          (neq, ":led_party_faction", ":attached_party_faction"),
          
          (party_detach, ":lord_led_party"),
        (try_end),
        
        ###########Increase relation with lord in new faction by 5
        ###########Or, if player kingdom, make inactive pending confirmation
        (faction_get_slot, ":faction_liege", ":faction_no", slot_faction_leader),
        (try_begin),
          (eq, ":faction_liege", "trp_player"),
          (neq, ":troop_no", "$g_talk_troop"),
          (troop_set_slot, ":troop_no", slot_troop_occupation, slto_inactive), #POSSIBLE REASON 1
        (else_try),
          (is_between, ":faction_liege", active_npcs_begin, active_npcs_end),
          (is_between, ":troop_no", active_npcs_begin, active_npcs_end),
          (call_script, "script_troop_change_relation_with_troop", ":faction_liege", ":troop_no", 5),
          (val_add, "$total_indictment_changes", 5),
        (try_end),
        
        ################Break courtship relations
        (try_begin),
          (troop_slot_ge, ":troop_no", slot_troop_spouse, 0),
          ################Already married, do nothing
        (else_try),
          (is_between, ":troop_no", active_npcs_begin, active_npcs_end),
          (try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
            (troop_get_slot, ":courted_lady", ":troop_no", ":love_interest_slot"),
            (call_script, "script_courtship_event_lady_break_relation_with_suitor", ":courted_lady", ":troop_no"),
          (try_end),
          (call_script, "script_assign_troop_love_interests", ":troop_no"),
        (else_try),
          (is_between, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
          (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
            (try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
              (troop_slot_eq, ":active_npc", ":love_interest_slot", ":troop_no"),
              (call_script, "script_courtship_event_lady_break_relation_with_suitor", ":troop_no", ":active_npc"),
            (try_end),
          (try_end),
        (try_end),
        
        ##############Stop raidings/sieges of new faction's fief if there is any
        (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (party_slot_eq, ":center_no", slot_party_type, spt_village),
          (party_get_slot, ":raided_by", ":center_no", slot_village_raided_by),
          (eq, ":raided_by", ":troop_party"),
          (party_set_slot, ":center_no", slot_village_raided_by, -1),
          (try_begin),
            (party_slot_eq, ":center_no", slot_village_state, svs_being_raided),
            (party_set_slot, ":center_no", slot_village_state, svs_normal),
            (party_set_extra_text, ":center_no", "str_empty_string"),
          (try_end),
        (else_try),
          (party_get_slot, ":besieged_by", ":center_no", slot_center_is_besieged_by),
          (eq, ":besieged_by", ":troop_party"),
          (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
          (try_begin),
            (party_slot_eq, ":center_no", slot_village_state, svs_under_siege),
            (party_set_slot, ":center_no", slot_village_state, svs_normal),
            (party_set_extra_text, ":center_no", "str_empty_string"),
          (try_end),
        (try_end),
        
        (call_script, "script_update_all_notes"),
        
        (call_script, "script_update_village_market_towns"),
        
        ############ (call_script, "script_raf_set_ai_recalculation_flags", ":orig_faction"),
        ############ (call_script, "script_raf_set_ai_recalculation_flags", ":faction_no"),
        # (assign, "$g_recalculate_ais", 1),
                             #####(display_debug_message, "@Line 73182"),
        # (call_script, "script_recalculate_ais_for_faction", ":orig_faction"), ###### NEW v3.8
        # (call_script, "script_recalculate_ais_for_faction", ":faction_no"), ###### NEW v3.8
    ]),
  
  
  
  
 ("assign_lords_to_empty_centers_noplayer",
  [
    (set_show_messages, 0),
    (try_for_range, ":cur_faction", "fac_player_supporters_faction", "fac_kingdoms_end"),
      (faction_set_slot, ":cur_faction", slot_troop_cur_center, 0),
    (try_end),
    (try_for_range, ":cur_lord", 0, "trp_knight_1_1_wife"),
      (troop_set_slot, ":cur_lord", slot_troop_temp_slot, 0),
    (try_end),
    (try_for_range, ":cur_fief", "p_town_1_1", "p_salt_mine"),
      (party_get_slot, ":orig_lord", ":cur_fief", slot_town_lord),
      (try_begin),
        (this_or_next|eq, ":orig_lord", -1),
        (eq, ":orig_lord", -3),
        (store_faction_of_party, ":orig_faction", ":cur_fief"),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_party_name, s4, ":cur_fief"),
          (str_store_faction_name, s5, ":orig_faction"),
          (display_message, "str_s4_of_the_s5_is_unassigned"),
        (try_end),
        (faction_get_slot, ":orig_faction_troop_cur_center_slot", ":orig_faction", slot_troop_cur_center),
        (val_add, ":orig_faction_troop_cur_center_slot", 1),
        (faction_set_slot, ":orig_faction", slot_troop_cur_center, ":orig_faction_troop_cur_center_slot"),
      (else_try),
        (eq, ":orig_lord", -2),
        (try_begin),
          (eq, "$cheat_mode", 1),
          (str_store_party_name, s4, ":cur_fief"),
          (str_store_faction_name, s5, ":orig_faction"),
          (display_message, "str_s4_of_the_s5_is_reserved_for_player"),
        (try_end),
      (else_try),
        (ge, ":orig_lord", 0),
        (troop_set_slot, ":orig_lord", slot_troop_temp_slot, 1),
      (try_end),
    (try_end),
    (try_for_range, ":cur_lord", 0, "trp_knight_1_1_wife"),
      (troop_slot_eq, ":cur_lord", slot_troop_occupation, 2),
      (this_or_next|gt, ":cur_lord", "trp_player"),
      (eq, "$player_has_homage", 1),
      (troop_slot_eq, ":cur_lord", slot_troop_temp_slot, 0),
      (store_faction_of_troop, ":troop_orig_faction", ":cur_lord"),
      (is_between, ":troop_orig_faction", "fac_player_supporters_faction", "fac_kingdoms_end"),
      (neq, "$players_kingdom", ":troop_orig_faction"),
      (try_begin),
        (eq, "$cheat_mode", 1),
        (str_store_troop_name, s4, ":cur_lord"),
        (str_store_faction_name, s5, ":troop_orig_faction"),
        (display_message, "str_s4_of_the_s5_has_no_fiefs"),
      (try_end),
      (faction_get_slot, ":orig_faction_troop_cur_center_slot", ":troop_orig_faction", slot_faction_temp_slot),
      (val_add, ":orig_faction_troop_cur_center_slot", 1),
      (faction_set_slot, ":troop_orig_faction", slot_faction_temp_slot, ":orig_faction_troop_cur_center_slot"),
    (try_end),
    (try_begin),
      (eq, "$cheat_mode", 1),
      (try_for_range, ":cur_faction", "fac_player_supporters_faction", "fac_kingdoms_end"),
        (faction_get_slot, reg4, ":cur_faction", slot_faction_temp_slot),
        (str_store_faction_name, s4, ":cur_faction"),
        (display_message, "str_s4_unassigned_centers_plus_landless_lords_=_reg4"),
      (try_end),
    (try_end),
    (try_for_range, ":cur_fief", "p_town_1_1", "p_salt_mine"),
      (party_get_slot, ":orig_lord", ":cur_fief", slot_town_lord),
      (this_or_next|eq, ":orig_lord", -1),
      (eq, ":orig_lord", -3),
      (store_faction_of_party, ":orig_faction", ":cur_fief"),
      (is_between, ":orig_faction", "fac_player_supporters_faction", "fac_kingdoms_end"),
      (neg|faction_slot_eq, ":orig_faction", slot_faction_leader, "trp_player"),
      (try_begin),
        (eq, "$cheat_mode", 1),
        (str_store_party_name, s5, ":cur_fief"),
        (try_begin),
          (neg|faction_slot_ge, ":orig_faction", slot_faction_temp_slot, 2),
          (str_store_faction_name, s4, ":orig_faction"),
          (display_message, "str_s4_holds_s5_in_reserve"),
        (try_end),
      (try_end),
      (faction_slot_ge, ":orig_faction", slot_faction_temp_slot, 2),
      (assign, ":cur_lord_1", -1),
      (assign, ":score", -1),
      (try_begin),
        (eq, ":orig_lord", -1),
        (try_begin),
          (eq, "$players_kingdom", ":orig_faction"),
          (eq, "$player_has_homage", 1),
          (assign, ":cur_lord_1", -2),
          (call_script, "script_calculate_troop_score_for_center", "trp_player", ":cur_fief"),
          (assign, ":score", reg0),
        (try_end),
      (try_end),
      (try_for_range, ":cur_npc", "trp_npc1", "trp_knight_1_1_wife"),
        (troop_slot_eq, ":cur_npc", slot_troop_occupation, 2),
        (store_faction_of_troop, ":cur_npc_faction", ":cur_npc"),
        (eq, ":cur_npc_faction", ":orig_faction"),
        (neq, "$players_kingdom", ":cur_npc_faction"),
        (call_script, "script_calculate_troop_score_for_center", ":cur_npc", ":cur_fief"),
        (assign, ":cur_score", reg0),
        (try_begin),
          (troop_slot_eq, ":cur_npc", slot_troop_temp_slot, 0),
          (is_between, ":cur_fief", "p_village_1_1", "p_salt_mine"),
          (val_mul, ":cur_score", 10),
        (try_end),
        (gt, ":cur_score", ":score"),
        (assign, ":score", ":cur_score"),
        (assign, ":cur_lord_1", ":cur_npc"),
      (try_end),
      (try_begin),
        (this_or_next|ge, ":cur_lord_1", 0),
        (eq, ":cur_lord_1", -2),
        (faction_get_slot, ":var12", ":orig_faction", slot_faction_temp_slot),
        (val_sub, ":var12", 1),
        (try_begin),
          (eq, ":cur_lord_1", -2),
          (troop_slot_eq, "trp_player", slot_troop_temp_slot, 0),
          (troop_set_slot, "trp_player", slot_troop_temp_slot, 1),
          (val_sub, ":var12", 1),
        (else_try),
          (troop_slot_eq, ":cur_lord_1", slot_troop_temp_slot, 0),
          (troop_set_slot, ":cur_lord_1", slot_troop_temp_slot, 1),
          (val_sub, ":var12", 1),
        (try_end),
        (faction_set_slot, ":orig_faction", slot_faction_temp_slot, ":var12"),
      (try_end),
      (try_begin),
        (ge, ":cur_lord_1", 0),
        (call_script, "script_give_center_to_lord", ":cur_fief", ":cur_lord_1", 1),
      (else_try),
        (eq, ":cur_lord_1", -2),
        (party_set_slot, ":cur_fief", slot_town_lord, -2),
        (try_begin),
          (party_slot_eq, ":cur_fief", slot_party_type, 2),
          (try_for_range, ":cur_village", "p_village_1_1", "p_salt_mine"),
            (party_slot_eq, ":cur_village", slot_village_bound_center, ":cur_fief"),
            (party_slot_eq, ":cur_village", slot_town_lord, -1),
            (party_set_slot, ":cur_village", slot_town_lord, -2),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
    (set_show_messages, 1),
  ]),
  
  
  
  
  
  
  ("initialize_faction_troop_types_player",
  [
    (faction_get_slot, ":culture", "$players_kingdom", slot_faction_culture),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_1_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_1_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_2_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_2_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_3_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_3_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_4_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_4_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_5_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_5_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_1_town_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_1_town_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_tier_1_castle_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_tier_1_castle_troop, ":cur_slot"),
    
################# NEW v1.8
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_deserter_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_deserter_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_guard_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_guard_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_messenger_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_messenger_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_prison_guard_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_prison_guard_troop, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_castle_guard_troop),
    (faction_set_slot, "$players_kingdom", slot_faction_castle_guard_troop, ":cur_slot"),
    
#################
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_reinforcements_a),
    (faction_set_slot, "$players_kingdom", slot_faction_reinforcements_a, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_reinforcements_b),
    (faction_set_slot, "$players_kingdom", slot_faction_reinforcements_b, ":cur_slot"),
    
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_reinforcements_c),
    (faction_set_slot, "$players_kingdom", slot_faction_reinforcements_c, ":cur_slot"),
    
################# NEW v2.7 - changes language too - NEW v3.3 - this caused the new player kingdom to get the culture language instead of the faction's (e.g. starting as hungary made it have mixed euro language which made random lords spawn without name nor culture)
    (faction_get_slot, ":cur_slot", ":culture", slot_faction_language),
    (faction_set_slot, "$players_kingdom", slot_faction_language, ":cur_slot"),
###################################################
    
################ PLAYER FACTION    
################################################################# 3 TIERS 
    (try_begin),
      (faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_player"),
      # (eq, "$cstm_num_tiers", 3),
      (faction_set_slot, "$players_kingdom", slot_faction_deserter_troop, "trp_cstm_custom_troop_3_tiers_0_1_1"),  ##B2
      (faction_set_slot, "$players_kingdom", slot_faction_guard_troop, "trp_cstm_custom_troop_3_tiers_0_2_3"),           ##C4
      (faction_set_slot, "$players_kingdom", slot_faction_messenger_troop, "trp_cstm_custom_troop_3_tiers_0_2_2"),     ##C3
      (faction_set_slot, "$players_kingdom", slot_faction_prison_guard_troop, "trp_cstm_custom_troop_3_tiers_0_1_2"),            ##B3
      (faction_set_slot, "$players_kingdom", slot_faction_castle_guard_troop, "trp_cstm_custom_troop_3_tiers_0_2_3"),     ##C4
      (faction_set_slot, "$players_kingdom", slot_faction_reinforcements_a, "pt_cstm_kingdom_player_3_tiers_0_reinforcements_a"),
      (faction_set_slot, "$players_kingdom", slot_faction_reinforcements_b, "pt_cstm_kingdom_player_3_tiers_0_reinforcements_b"),
      (faction_set_slot, "$players_kingdom", slot_faction_reinforcements_c, "pt_cstm_kingdom_player_3_tiers_0_reinforcements_c"),
################################################################# 2 TIERS
#############################################################################
    (try_end),
  ]),
  

 

  ("troop_set_title_according_to_faction_gender_and_lands",
  [
  (store_script_param, ":script_param_1", 1),
  (store_script_param, ":script_param_2", 2),
  (try_begin),
    (eq, "$kaos_title_run", 0),
    (eq, ":script_param_1", "trp_player"),
    (str_store_troop_name, s10, "trp_player"),
    (troop_set_plural_name, "trp_player", s10),
    (troop_set_plural_name, "trp_dummy_player", s10),
    (troop_set_name, "trp_dummy_player", s10),
    (assign, "$kaos_title_run", 1),
  (try_end),

  (try_begin),
    # (faction_get_slot, ":value", ":script_param_2", slot_kaoses_faction_title_type),
    (call_script, "script_cf_troop_set_title_according_to_faction_gender_and_lands_new", ":script_param_1", ":script_param_2", ":script_param_2"),
  (try_end),

  (try_begin),
    (store_faction_of_troop, ":plyr_faction", "trp_player"),
    (is_between, ":plyr_faction", kingdoms_begin, kingdoms_end),
    # (faction_get_slot, ":value", ":script_param_2", slot_kaoses_faction_title_type),
    (call_script, "script_cf_troop_set_title_according_to_faction_gender_and_lands_new", "trp_player", ":plyr_faction", ":script_param_2"),
  (try_end),
  ]),
#################################################

  
  

  
#################################################
  ("cf_troop_set_title_according_to_faction_gender_and_lands_new",
  [
      (store_script_param, ":script_param_1", 1),
      (store_script_param, ":script_param_2", 2),
      (store_script_param, ":value", 3),

      (neq, ":script_param_1", -1),
      (str_store_troop_name_plural, s0, ":script_param_1"),


      # Ensure we process only npcs member of a kingdom, including player
      (try_begin), # Npcs serving as lord and ladies
          # v0.1 change +
          (is_between, ":script_param_2", kingdoms_begin, kingdoms_end), # normaly this one should exclude companions that are not vassals
          (faction_slot_eq, ":script_param_2", slot_faction_state, 0),
          (neg|is_between, ":script_param_1", pretenders_begin, pretenders_end), # exclude pretenders
          (this_or_next|is_between, ":script_param_1", active_npcs_including_player_begin, kingdom_ladies_end), # v0.3.1 change to include player
          (eq, ":script_param_1", "trp_player"), # include player player # v0.3.1 change
#          (neq, ":script_param_1", "trp_player"), # exclude player # v0.3.1 commented, wasn't relevant anyway

          (faction_get_slot, ":script_param_1_leader", ":script_param_2", slot_faction_leader),

          # v0.1 change -
          # External computation blocks
          # Get Gender
          (troop_get_type, ":type_script_param_1", ":script_param_1"),
          # NPC's largest fief (works for male and female, compute spouse fief as well)
          # 1 no fief, 2 village, 3 castle, 4 town
          (assign, ":largest_fief", 0),
          (try_for_range, ":var_15", centers_begin, centers_end),
                (troop_get_slot, ":spouse_no", ":script_param_1", slot_troop_spouse),
                (neq, ":script_param_1", ":script_param_1_leader"), # exclude research for ruler
                (neq, ":spouse_no", ":script_param_1_leader"), # exclude research for ruler's wife
                (lt, ":largest_fief", 3),
                (party_slot_ge, ":var_15", slot_town_lord, 0),
                (this_or_next|party_slot_eq, ":var_15", slot_town_lord, ":spouse_no"),
                (party_slot_eq, ":var_15", slot_town_lord, ":script_param_1"),

                (try_begin),
                  (party_slot_eq, ":var_15", slot_party_type, spt_town),
                  (lt, ":largest_fief", 3),
                  (assign, ":largest_fief", 3),
                (else_try),
                  (party_slot_eq, ":var_15", slot_party_type, spt_castle),
                  (lt, ":largest_fief", 2),
                  (assign, ":largest_fief", 2),
                (else_try),
                  (party_slot_eq, ":var_15", slot_party_type, spt_village),
                  (lt, ":largest_fief", 1),
                  (assign, ":largest_fief", 1),
                (try_end),
          (try_end),

          # base title(s) computation blocks
          # Determine NPCs quality in order of importance
          # for male NPCs: 4 Ruler, 3 town, 2 castle, 1 village, 0 landless
          # for female NPCs: 5 unmarried (kingdom lady only), 4 queen, 3 wife or town, 2 wife or castle, 1 wife or village, 0 wife or landless
          (assign, ":quality", 0),
          (try_begin), # Male npcs

               (eq, ":type_script_param_1", 0),
               (try_begin),
                   (eq, ":script_param_1", ":script_param_1_leader"), # is king
                   (assign, ":quality", 4),
               (else_try),
                   (assign, ":quality", ":largest_fief"),
               (try_end),
          (else_try), # Female npcs, a bit more complex queen, landowner, companions without a fief,
               (try_begin), # wife of faction leader
                    # v0.3.3 change +
                    (this_or_next|troop_slot_eq, ":script_param_1", slot_troop_spouse, ":script_param_1_leader"),
                    (eq, ":script_param_1", ":script_param_1_leader"), # is queen
                    # v0.3.3 change -
                    (assign, ":quality", 4),
               (else_try), # is a landowner - index 1 to 3
                    (gt, ":largest_fief", 0),
                    (assign, ":quality", ":largest_fief"),
               (else_try), # a companion vassal without fief
                    (is_between, ":script_param_1", companions_begin, companions_end),
                    (assign, ":quality", 0),
               (else_try), # married lady whose husband has no fief
                    (troop_slot_ge, ":script_param_1", slot_troop_spouse, 0),
                    (assign, ":quality", 0),
               (else_try), # unmarried lady without fief
                    (assign, ":quality", 5),
               (try_end),
          (try_end),

          # v0.3 changes +
          # compute troop relation to ruler suffix
          (try_begin),
              (neq, ":script_param_1", ":script_param_1_leader"), # exclude from suffix if king v0.3.2 change
              (eq, "$kaos_use_suffixes", 1),
              (call_script, "script_troop_get_relation_with_troop", ":script_param_1", ":script_param_1_leader"),
              (assign, ":var_16", reg0),
              (str_clear, s61),
              (assign, reg10, 0),
              (try_begin), # update reg10
                (this_or_next|gt, ":var_16", 19),
                (lt, ":var_16", -19),
                (assign, reg10, ":var_16"),
                (store_add, ":value_3", ":var_16", 100),
                (store_div, ":value_4", ":value_3", 20),
                (val_clamp, ":value_4", 0, 10), # does 10 work ? only 10 strings in there
                (store_add, ":str_rel_id", "str_ruler_relation_mnus_100_ns",  ":value_4"),
                (str_store_string, s61, ":str_rel_id"),
              (try_end),
          (else_try), # clear register and string
              (str_clear, s61),
              (assign, reg10, 0),      
          (try_end),
          # v0.3 changes -

          # Find title index in strings block
          #(store_sub, ":title_index", ":script_param_2", kingdoms_begin), # 0 player, 1 swadian ...
          (store_sub, ":title_index", ":value", kingdoms_begin), # 0 player, 1 swadian ...
          #####Kaos begin add factions
          (try_begin), #male, 5 title entries
          
          #Backup begin
                (eq, ":type_script_param_1", 0), 
                (val_mul, ":title_index", 5),
                (val_add, ":title_index", kingdom_titles_male_begin),
          (else_try), # female, 6 title entries
                (val_mul, ":title_index", 6),
                (val_add, ":title_index", kingdom_titles_female_begin),
          (try_end),
          #Backup end
          
          (val_add, ":title_index", ":quality"),

          # Set title and party name block
          # assign title
          (str_store_string, s1, ":title_index"),

          (try_begin),
              (eq, "$kaos_royal_children", 1),
              (assign, ":script_param_1_leader", 0),
              (assign, ":mother", 0),
              (assign, ":g_wedding_bride_troop_father", 0),
              #(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
              (faction_get_slot, ":script_param_1_leader", ":script_param_2", slot_faction_leader),
              (troop_get_slot, ":mother", ":script_param_1", slot_troop_mother),
              (troop_get_slot, ":g_wedding_bride_troop_father", ":script_param_1", slot_troop_father),
              #(try_begin),
                (this_or_next|eq, ":mother",":script_param_1_leader"),   
                (eq, ":g_wedding_bride_troop_father", ":script_param_1_leader"),  
                (troop_get_type, ":type_script_param_1", ":script_param_1"),
                (try_begin),
                    (eq, ":type_script_param_1", 0), #male 
                    #(str_store_string, s1, "str_faction_title_male_heir"),   
                    (str_store_string, s1, "str_faction_title_male_heir"),
                (else_try),
                    #(str_store_string, s1, "str_faction_title_female_Heir"),
                    (str_store_string, s1, "str_faction_title_female_Heir"), 
                (try_end),   
              #(try_end),       
          (try_end),

          (troop_set_name, ":script_param_1", s1),

          (try_begin),
              (eq, ":value" , "fac_player_supporters_faction"),
              (eq , "$kaos_has_custom_title", 1),
              (eq, ":type_script_param_1", 0), 
              (try_begin),
                  (eq, ":quality", 4), 
                  (troop_slot_eq, "trp_dummy_5_king", 0, 1),
                  (str_store_troop_name, s0, "trp_dummy_5_king"),
                  (str_store_troop_name_plural, s1, ":script_param_1"),
                  (str_store_string, s1, "str_s0_s1"),
                  (troop_set_name, ":script_param_1", s1),
              (else_try),
                  (eq, ":quality", 3), 
                  (troop_slot_eq, "trp_dummy_4_town", 0, 1),
                  (str_store_troop_name, s0, "trp_dummy_4_town"),
                  (str_store_troop_name_plural, s1, ":script_param_1"),
                  (str_store_string, s1, "str_s0_s1"),
                  (troop_set_name, ":script_param_1", s1),
              (else_try),
                  (eq, ":quality", 2), 
                  (troop_slot_eq, "trp_dummy_3_castle", 0, 1),
                  (str_store_troop_name, s0, "trp_dummy_3_castle"),
                  (str_store_troop_name_plural, s1, ":script_param_1"),
                  (str_store_string, s1, "str_s0_s1"),
                  (troop_set_name, ":script_param_1", s1),
              (else_try),
                  (eq, ":quality", 1), 
                  (troop_slot_eq, "trp_dummy_2_village", 0, 1),
                  (str_store_troop_name, s0, "trp_dummy_2_village"),
                  (str_store_troop_name_plural, s1, ":script_param_1"),
                  (str_store_string, s1, "str_s0_s1"),
                  (troop_set_name, ":script_param_1", s1),
              (else_try),
                  (eq, ":quality", 0), 
                  (troop_slot_eq, "trp_dummy_1", 0, 1),
                  (str_store_troop_name, s0, "trp_dummy_1"),
                  (str_store_troop_name_plural, s1, ":script_param_1"),
                  (str_store_string, s1, "str_s0_s1"),
                  (troop_set_name, ":script_param_1", s1),
              (try_end),
          (try_end),

          # rename party
          (troop_get_slot, ":script_param_1_leaded_party_3", ":script_param_1", slot_troop_leaded_party),

          (try_begin), 
          # v0.2 change to prevent opcode error
            (gt, ":script_param_1_leaded_party_3", 0),
            (str_store_troop_name, s5, ":script_param_1"),
            (party_set_name, ":script_param_1_leaded_party_3", "str_s5_s_party"),
          (try_end), # v0.2 change
      (try_end),

      # Special titles for companions not used as vassals
      (try_begin),
          (eq, "$kaos_use_custom_name", 1),
          (neg|eq, ":script_param_2", "fac_player_supporters_faction"), # v0.2 change
          (neg|troop_slot_eq, ":script_param_1", slot_troop_occupation, 2), # v0.3 change, exclude companion if he became a kingdom lord
          (is_between, ":script_param_1", companions_begin, companions_end),
          # Store the plural name
          (str_store_troop_name_plural, s0, ":script_param_1"),
          # Set the title
          (try_begin), # Male npcs
               (troop_slot_eq, ":script_param_1", slot_troop_occupation, slto_player_companion),
               (str_store_string, s1, "str_hero_titles_party"),
          (else_try),
              (call_script, "script_get_troop_specialisation", ":script_param_1", ":script_param_2"),
              (assign, ":title_index", reg0),
              (val_add, ":title_index", hero_titles_begin),
              (str_store_string, s1, ":title_index"),
          (try_end),
          # assign title
          (troop_set_name, ":script_param_1", s1),
      (try_end),

      #(troop_set_plural_name, ":script_param_1", s0),
          (faction_get_slot, ":script_param_1_leader", ":script_param_2", slot_faction_leader),

      (try_begin),
          (eq, "$background_type", 8), ########### king
          #(eq, "trp_player", ":script_param_1"),
          (str_store_troop_name_plural, s22, "trp_player"),
          (call_script, "script_cf_kaos_update_king_titles","trp_player" , ":script_param_2"),
      (try_end),

      (try_begin),
          (faction_get_slot, ":script_param_1_leader", ":script_param_2", slot_faction_leader),
          (eq, ":script_param_1", ":script_param_1_leader"),
          (call_script, "script_cf_kaos_update_king_titles",":script_param_1" , ":script_param_2"),
      (try_end),

      (call_script, "script_update_all_notes"),
            (try_begin),
            (eq, "trp_player", ":script_param_1"),
            (this_or_next|gt, "$kaos_kings_kingdom", 0),
            (this_or_next|gt, "$kaos_kings_prince", 0),
            (gt, "$kaos_kings_vassal", 0),
              (str_store_troop_name, s5, "trp_player"),
            (party_set_name, "p_main_party", s5),
            (try_end),
  ]),


#################################################
  
  
  

  
  
  
  ("kaos_get_lord_highest_controversy_in_faction",
  [
    (store_script_param_1, ":var0"),
    (assign, ":var1", 0),
    (assign, ":var2", 0),
    (assign, ":var3", 0),
    (try_for_range, ":var3", "trp_knight_1_1", "trp_knight_1_1_wife"),
      (store_faction_of_troop, ":var4", ":var3"),
      (eq, ":var4", ":var0"),
      (troop_get_slot, ":var5", ":var3", 150),
      (try_begin),
        (gt, ":var5", ":var1"),
        (assign, ":var1", ":var5"),
        (assign, ":var2", ":var3"),
      (try_end),
    (try_end),
    (troop_set_slot, ":var2", 150, 15),
    (assign, reg0, ":var2"),
  ]),

  ("kaos_get_lord_lowest_relation_in_faction",
  [
    (store_script_param_1, ":var0"),
    (assign, ":var1", 100),
    (assign, ":var2", 0),
    (faction_get_slot, ":var3", ":var0", 11),
    (try_for_range, ":var2", "trp_knight_1_1", "trp_knight_1_1_wife"),
      (store_faction_of_troop, ":var4", ":var2"),
      (eq, ":var4", ":var0"),
      (call_script, "script_troop_get_relation_with_troop", ":var2", ":var3"),
      (assign, ":var5", reg0),
      (try_begin),
        (eq, ":var0", ":var4"),
        (le, ":var5", ":var1"),
        (assign, ":var1", ":var5"),
        (assign, ":var6", ":var2"),
      (try_end),
    (try_end),
    (assign, reg0, ":var6"),
  ]),
  
  
  
    ("get_troop_specialisation",
  [
    (store_script_param, ":var0", 1),
    (store_script_param, ":var1", 2),
    (assign, ":var2", 0),
    (assign, ":var3", 0),
    (assign, ":var4", 0),
    (try_begin),
      (neq, ":var1", "fac_player_supporters_faction"),
      (is_between, ":var0", "trp_npc1", "trp_kingdom_1_lord"),
      (store_skill_level, ":var5", "skl_spotting", ":var0"),
      (store_skill_level, ":var6", "skl_pathfinding", ":var0"),
      (val_add, ":var5", ":var6"),
      (store_skill_level, ":var6", "skl_tracking", ":var0"),
      (val_add, ":var5", ":var6"),
      (store_skill_level, ":var7", "skl_wound_treatment", ":var0"),
      (store_skill_level, ":var8", "skl_first_aid", ":var0"),
      (val_add, ":var7", ":var8"),
      (store_skill_level, ":var8", "skl_surgery", ":var0"),
      (val_add, ":var7", ":var8"),
      (store_skill_level, ":var9", "skl_tactics", ":var0"),
      (store_skill_level, ":var10", "skl_engineer", ":var0"),
      (val_add, ":var9", ":var10"),
      (store_skill_level, ":var10", "skl_trainer", ":var0"),
      (val_add, ":var9", ":var10"),
      (store_skill_level, ":var11", "skl_trade", ":var0"),
      (val_mul, ":var11", 3),
      (store_skill_level, ":var2", "skl_looting", ":var0"),
      (val_mul, ":var2", 3),
      (store_skill_level, ":var3", "skl_weapon_master", ":var0"),
      (store_skill_level, ":var12", "skl_power_strike", ":var0"),
      (val_add, ":var3", ":var12"),
      (store_skill_level, ":var12", "skl_power_draw", ":var0"),
      (val_add, ":var3", ":var12"),
      (val_div, ":var3", 2),
      (store_skill_level, ":var4", "skl_prisoner_management", ":var0"),
      (val_mul, ":var4", 3),
      (store_skill_level, ":var13", "skl_persuasion", ":var0"),
      (val_mul, ":var13", 3),
      (try_begin),
        (eq, ":var13", 0),
        (eq, ":var9", 0),
        (eq, ":var5", 0),
        (eq, ":var7", 0),
        (eq, ":var11", 0),
        (eq, ":var2", 0),
        (eq, ":var3", 0),
        (eq, ":var4", 0),
        (assign, reg0, 0),
      (else_try),
        (gt, ":var13", 0),
        (ge, ":var13", ":var9"),
        (ge, ":var13", ":var5"),
        (ge, ":var13", ":var7"),
        (ge, ":var13", ":var11"),
        (ge, ":var13", ":var2"),
        (ge, ":var13", ":var3"),
        (ge, ":var13", ":var4"),
        (assign, reg0, 1),
      (else_try),
        (gt, ":var9", 0),
        (ge, ":var9", ":var5"),
        (ge, ":var9", ":var7"),
        (ge, ":var9", ":var11"),
        (ge, ":var9", ":var2"),
        (ge, ":var9", ":var3"),
        (ge, ":var9", ":var4"),
        (assign, reg0, 2),
      (else_try),
        (gt, ":var5", 0),
        (ge, ":var5", ":var7"),
        (ge, ":var5", ":var11"),
        (ge, ":var5", ":var2"),
        (ge, ":var5", ":var3"),
        (ge, ":var5", ":var4"),
        (assign, reg0, 3),
      (else_try),
        (gt, ":var7", 0),
        (ge, ":var7", ":var11"),
        (ge, ":var7", ":var2"),
        (ge, ":var7", ":var3"),
        (ge, ":var7", ":var4"),
        (assign, reg0, 4),
      (else_try),
        (gt, ":var11", 0),
        (ge, ":var11", ":var2"),
        (ge, ":var11", ":var3"),
        (ge, ":var11", ":var4"),
        (assign, reg0, 5),
      (else_try),
        (gt, ":var2", 0),
        (ge, ":var2", ":var3"),
        (ge, ":var2", ":var4"),
        (assign, reg0, 6),
      (else_try),
        (gt, ":var3", 0),
        (ge, ":var3", ":var4"),
        (assign, reg0, 7),
      (else_try),
        (gt, ":var4", 0),
        (assign, reg0, 8),
      (try_end),
    (try_end),
  ]),
  
     # script_cf_kaos_update_king_titles
  # Script update kings titles to reflect the number of centers held
  # Input: 
  # Output: none
  ("cf_kaos_update_king_titles",
    [
         
        (store_script_param, ":script_param_1_leader", 1),
        (store_script_param, ":script_param_2", 2),

        (eq, "$kaos_king_titles", 1),
        (eq , "$kaos_has_custom_title", 0),
        (str_clear, s1),
        (str_clear, s0),
        (assign, ":rename", 0),
        (assign, ":imperial", 0),
        (assign, ":high", 0),

        (try_begin),
              (eq, ":script_param_1_leader", "trp_player"),
              (str_store_troop_name_plural, s0, "trp_dummy_player"),
        (else_try),
                (str_store_troop_name_plural, s0, ":script_param_1_leader"),
        (try_end),


        (assign, reg0, 0),
        (faction_slot_eq, ":script_param_2", slot_faction_state, 0),
        (neg|faction_slot_eq, ":script_param_2", slot_faction_state, 1),
        (try_for_range, ":var_15", centers_begin, centers_end),
            (store_faction_of_party, ":faction_of_troop_party_prisoner_stack_troop_id_script_param_1_leaded_party_2_var_18", ":var_15"),
            (try_begin),
                (eq, ":faction_of_troop_party_prisoner_stack_troop_id_script_param_1_leaded_party_2_var_18", ":script_param_2"),
                (val_add, reg0, 1),
            (try_end),
        (try_end),

        (troop_get_type, ":type_script_param_1", ":script_param_1_leader"),
        (try_begin),
            (ge, reg0, 120),
              (try_begin),
                  (eq, ":type_script_param_1", 0), #male 
                  (str_store_string, s3, "str_kings_rank_2_male"),   
              (else_try),
                  (str_store_string, s3, "str_kings_rank_2_female"),
              (try_end),
              (assign, ":rename", 1),
              (assign, ":imperial", 1),
        (else_try),
            (gt, reg0, 80),
              (try_begin),
                  (eq, ":type_script_param_1", 0), #male 
                  (str_store_string, s3, "str_kings_rank_1_male"),   
              (else_try),
                  (str_store_string, s3, "str_kings_rank_1_female"),
              (try_end),
              (assign, ":rename", 1),
              (assign, ":high", 1),
        (else_try),
            (lt, reg0, 20),
            (str_store_string, s3, "str_kings_rank_0"), 
            (assign, ":rename", 1),
        (try_end),

#####Kaos begin add factions
        (try_begin),
           (ge, reg0, 120),
           (try_begin),
              (eq, ":script_param_2", "fac_kingdom_1"),
              (str_store_string, s4, "str_kaos_kingdom1_empire"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_2"),
              (str_store_string, s4, "str_kaos_kingdom2_empire"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_3"),
              (str_store_string, s4, "str_kaos_kingdom3_empire"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_4"),
              (str_store_string, s4, "str_kaos_kingdom4_empire"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_5"),
              (str_store_string, s4, "str_kaos_kingdom5_empire"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_6"),
              (str_store_string, s4, "str_kaos_kingdom6_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_7"),
              (str_store_string, s4, "str_kaos_kingdom7_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_8"),
              (str_store_string, s4, "str_kaos_kingdom8_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_9"),
              (str_store_string, s4, "str_kaos_kingdom9_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_10"),
              (str_store_string, s4, "str_kaos_kingdom10_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_11"),
              (str_store_string, s4, "str_kaos_kingdom11_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_12"),
              (str_store_string, s4, "str_kaos_kingdom12_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_13"),
              (str_store_string, s4, "str_kaos_kingdom13_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_14"),
              (str_store_string, s4, "str_kaos_kingdom14_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_15"),
              (str_store_string, s4, "str_kaos_kingdom15_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_16"),
              (str_store_string, s4, "str_kaos_kingdom16_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_17"),
              (str_store_string, s4, "str_kaos_kingdom17_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_18"),
              (str_store_string, s4, "str_kaos_kingdom18_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_19"),
              (str_store_string, s4, "str_kaos_kingdom19_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_20"),
              (str_store_string, s4, "str_kaos_kingdom20_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_papacy"),
              (str_store_string, s4, "str_kaos_kingdom21_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_22"),
              (str_store_string, s4, "str_kaos_kingdom22_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_23"),
              (str_store_string, s4, "str_kaos_kingdom23_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_24"),
              (str_store_string, s4, "str_kaos_kingdom24_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_25"),
              (str_store_string, s4, "str_kaos_kingdom25_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_26"),
              (str_store_string, s4, "str_kaos_kingdom26_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_27"),
              (str_store_string, s4, "str_kaos_kingdom27_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_28"),
              (str_store_string, s4, "str_kaos_kingdom28_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_29"),
              (str_store_string, s4, "str_kaos_kingdom29_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_30"),
              (str_store_string, s4, "str_kaos_kingdom30_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_31"),
              (str_store_string, s4, "str_kaos_kingdom31_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_32"),
              (str_store_string, s4, "str_kaos_kingdom32_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_33"),
              (str_store_string, s4, "str_kaos_kingdom33_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_34"),
              (str_store_string, s4, "str_kaos_kingdom34_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_35"),
              (str_store_string, s4, "str_kaos_kingdom35_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_36"),
              (str_store_string, s4, "str_kaos_kingdom36_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_37"),
              (str_store_string, s4, "str_kaos_kingdom37_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_38"),
              (str_store_string, s4, "str_kaos_kingdom38_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_39"),
              (str_store_string, s4, "str_kaos_kingdom39_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_40"),
              (str_store_string, s4, "str_kaos_kingdom40_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_41"),
              (str_store_string, s4, "str_kaos_kingdom41_empire"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_42"),
              (str_store_string, s4, "str_kaos_kingdom42_empire"),
           (try_end),

            (try_begin),
                (eq, ":script_param_1_leader", "trp_player"), 
                (eq, "$background_type", 8),
                 (try_begin),
                      (eq, "$kaos_kings_kingdom", 1),
                      (str_store_string, s7, "str_kaos_kingdom1_empire"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 2),
                      (str_store_string, s7, "str_kaos_kingdom2_empire"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 3),
                      (str_store_string, s7, "str_kaos_kingdom3_empire"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 4),
                      (str_store_string, s7, "str_kaos_kingdom4_empire"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 5),
                      (str_store_string, s7, "str_kaos_kingdom5_empire"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 6),
                      (str_store_string, s7, "str_kaos_kingdom6_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 7),
                      (str_store_string, s7, "str_kaos_kingdom7_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 8),
                      (str_store_string, s7, "str_kaos_kingdom8_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 9),
                      (str_store_string, s7, "str_kaos_kingdom9_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 10),
                      (str_store_string, s7, "str_kaos_kingdom10_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 11),
                      (str_store_string, s7, "str_kaos_kingdom11_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 12),
                      (str_store_string, s7, "str_kaos_kingdom12_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 13),
                      (str_store_string, s7, "str_kaos_kingdom13_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 14),
                      (str_store_string, s7, "str_kaos_kingdom14_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 15),
                      (str_store_string, s7, "str_kaos_kingdom15_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 16),
                      (str_store_string, s7, "str_kaos_kingdom16_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 17),
                      (str_store_string, s7, "str_kaos_kingdom17_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 18),
                      (str_store_string, s7, "str_kaos_kingdom18_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 19),
                      (str_store_string, s7, "str_kaos_kingdom19_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 20),
                      (str_store_string, s7, "str_kaos_kingdom20_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 21),
                      (str_store_string, s7, "str_kaos_kingdom21_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 22),
                      (str_store_string, s7, "str_kaos_kingdom22_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 23),
                      (str_store_string, s7, "str_kaos_kingdom23_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 24),
                      (str_store_string, s7, "str_kaos_kingdom24_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 25),
                      (str_store_string, s7, "str_kaos_kingdom25_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 26),
                      (str_store_string, s7, "str_kaos_kingdom26_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 27),
                      (str_store_string, s7, "str_kaos_kingdom27_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 28),
                      (str_store_string, s7, "str_kaos_kingdom28_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 29),
                      (str_store_string, s7, "str_kaos_kingdom29_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 30),
                      (str_store_string, s7, "str_kaos_kingdom30_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 31),
                      (str_store_string, s7, "str_kaos_kingdom31_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 32),
                      (str_store_string, s7, "str_kaos_kingdom32_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 33),
                      (str_store_string, s7, "str_kaos_kingdom33_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 34),
                      (str_store_string, s7, "str_kaos_kingdom34_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 35),
                      (str_store_string, s7, "str_kaos_kingdom35_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 36),
                      (str_store_string, s7, "str_kaos_kingdom36_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 37),
                      (str_store_string, s7, "str_kaos_kingdom37_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 38),
                      (str_store_string, s7, "str_kaos_kingdom38_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 39),
                      (str_store_string, s7, "str_kaos_kingdom39_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 40),
                      (str_store_string, s7, "str_kaos_kingdom40_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 41),
                      (str_store_string, s7, "str_kaos_kingdom41_empire"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 42),
                      (str_store_string, s7, "str_kaos_kingdom42_empire"),
                 (try_end),
            (try_end),
        (else_try),
           (gt, reg0, 80),
           
           
                      (try_begin),
              (eq, ":script_param_2", "fac_kingdom_1"),
              (str_store_string, s4, "str_kaos_kingdom1_king"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_2"),
              (str_store_string, s4, "str_kaos_kingdom2_king"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_3"),
              (str_store_string, s4, "str_kaos_kingdom3_king"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_4"),
              (str_store_string, s4, "str_kaos_kingdom4_king"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_5"),
              (str_store_string, s4, "str_kaos_kingdom5_king"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_6"),
              (str_store_string, s4, "str_kaos_kingdom6_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_7"),
              (str_store_string, s4, "str_kaos_kingdom7_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_8"),
              (str_store_string, s4, "str_kaos_kingdom8_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_9"),
              (str_store_string, s4, "str_kaos_kingdom9_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_10"),
              (str_store_string, s4, "str_kaos_kingdom10_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_11"),
              (str_store_string, s4, "str_kaos_kingdom11_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_12"),
              (str_store_string, s4, "str_kaos_kingdom12_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_13"),
              (str_store_string, s4, "str_kaos_kingdom13_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_14"),
              (str_store_string, s4, "str_kaos_kingdom14_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_15"),
              (str_store_string, s4, "str_kaos_kingdom15_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_16"),
              (str_store_string, s4, "str_kaos_kingdom16_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_17"),
              (str_store_string, s4, "str_kaos_kingdom17_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_18"),
              (str_store_string, s4, "str_kaos_kingdom18_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_19"),
              (str_store_string, s4, "str_kaos_kingdom19_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_20"),
              (str_store_string, s4, "str_kaos_kingdom20_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_papacy"),
              (str_store_string, s4, "str_kaos_kingdom21_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_22"),
              (str_store_string, s4, "str_kaos_kingdom22_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_23"),
              (str_store_string, s4, "str_kaos_kingdom23_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_24"),
              (str_store_string, s4, "str_kaos_kingdom24_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_25"),
              (str_store_string, s4, "str_kaos_kingdom25_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_26"),
              (str_store_string, s4, "str_kaos_kingdom26_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_27"),
              (str_store_string, s4, "str_kaos_kingdom27_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_28"),
              (str_store_string, s4, "str_kaos_kingdom28_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_29"),
              (str_store_string, s4, "str_kaos_kingdom29_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_30"),
              (str_store_string, s4, "str_kaos_kingdom30_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_31"),
              (str_store_string, s4, "str_kaos_kingdom31_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_32"),
              (str_store_string, s4, "str_kaos_kingdom32_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_33"),
              (str_store_string, s4, "str_kaos_kingdom33_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_34"),
              (str_store_string, s4, "str_kaos_kingdom34_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_35"),
              (str_store_string, s4, "str_kaos_kingdom35_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_36"),
              (str_store_string, s4, "str_kaos_kingdom36_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_37"),
              (str_store_string, s4, "str_kaos_kingdom37_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_38"),
              (str_store_string, s4, "str_kaos_kingdom38_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_39"),
              (str_store_string, s4, "str_kaos_kingdom39_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_40"),
              (str_store_string, s4, "str_kaos_kingdom40_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_41"),
              (str_store_string, s4, "str_kaos_kingdom41_king"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_42"),
              (str_store_string, s4, "str_kaos_kingdom42_king"),
           (try_end),
           
      #    (try_begin),
      #       (eq, ":script_param_2", "fac_kingdom_1"),
      #       (str_store_string, s4, "str_kaos_swadia_king"),
      #    (else_try),
      #       (eq, ":script_param_2", "fac_kingdom_2"),
      #       (str_store_string, s4, "str_kaos_Vaegirs_king"),
      #    (else_try),
      #       (eq, ":script_param_2", "fac_kingdom_3"),
      #       (str_store_string, s4, "str_kaos_Khergit_king"),
      #    (else_try),
      #       (eq, ":script_param_2", "fac_kingdom_4"),
      #       (str_store_string, s4, "str_kaos_Nords_king"),
      #    (else_try),
      #       (eq, ":script_param_2", "fac_kingdom_5"),
      #       (str_store_string, s4, "str_kaos_Rhodoks_king"),
      #    (else_try),
      #       (eq, ":script_param_2", "fac_kingdom_6"),
      #       (str_store_string, s4, "str_kaos_Sarranid_king"),
      #    (try_end),

            (try_begin),
                (eq, ":script_param_1_leader", "trp_player"), 
                (eq, "$background_type", 8),
                                 (try_begin),
                      (eq, "$kaos_kings_kingdom", 1),
                      (str_store_string, s7, "str_kaos_kingdom1_king"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 2),
                      (str_store_string, s7, "str_kaos_kingdom2_king"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 3),
                      (str_store_string, s7, "str_kaos_kingdom3_king"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 4),
                      (str_store_string, s7, "str_kaos_kingdom4_king"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 5),
                      (str_store_string, s7, "str_kaos_kingdom5_king"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 6),
                      (str_store_string, s7, "str_kaos_kingdom6_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 7),
                      (str_store_string, s7, "str_kaos_kingdom7_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 8),
                      (str_store_string, s7, "str_kaos_kingdom8_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 9),
                      (str_store_string, s7, "str_kaos_kingdom9_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 10),
                      (str_store_string, s7, "str_kaos_kingdom10_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 11),
                      (str_store_string, s7, "str_kaos_kingdom11_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 12),
                      (str_store_string, s7, "str_kaos_kingdom12_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 13),
                      (str_store_string, s7, "str_kaos_kingdom13_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 14),
                      (str_store_string, s7, "str_kaos_kingdom14_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 15),
                      (str_store_string, s7, "str_kaos_kingdom15_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 16),
                      (str_store_string, s7, "str_kaos_kingdom16_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 17),
                      (str_store_string, s7, "str_kaos_kingdom17_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 18),
                      (str_store_string, s7, "str_kaos_kingdom18_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 19),
                      (str_store_string, s7, "str_kaos_kingdom19_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 20),
                      (str_store_string, s7, "str_kaos_kingdom20_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 21),
                      (str_store_string, s7, "str_kaos_kingdom21_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 22),
                      (str_store_string, s7, "str_kaos_kingdom22_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 23),
                      (str_store_string, s7, "str_kaos_kingdom23_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 24),
                      (str_store_string, s7, "str_kaos_kingdom24_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 25),
                      (str_store_string, s7, "str_kaos_kingdom25_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 26),
                      (str_store_string, s7, "str_kaos_kingdom26_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 27),
                      (str_store_string, s7, "str_kaos_kingdom27_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 28),
                      (str_store_string, s7, "str_kaos_kingdom28_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 29),
                      (str_store_string, s7, "str_kaos_kingdom29_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 30),
                      (str_store_string, s7, "str_kaos_kingdom30_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 31),
                      (str_store_string, s7, "str_kaos_kingdom31_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 32),
                      (str_store_string, s7, "str_kaos_kingdom32_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 33),
                      (str_store_string, s7, "str_kaos_kingdom33_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 34),
                      (str_store_string, s7, "str_kaos_kingdom34_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 35),
                      (str_store_string, s7, "str_kaos_kingdom35_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 36),
                      (str_store_string, s7, "str_kaos_kingdom36_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 37),
                      (str_store_string, s7, "str_kaos_kingdom37_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 38),
                      (str_store_string, s7, "str_kaos_kingdom38_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 39),
                      (str_store_string, s7, "str_kaos_kingdom39_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 40),
                      (str_store_string, s7, "str_kaos_kingdom40_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 41),
                      (str_store_string, s7, "str_kaos_kingdom41_king"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 42),
                      (str_store_string, s7, "str_kaos_kingdom42_king"),
                 (try_end),
          #    (try_begin),
          #         (eq, "$kaos_kings_kingdom", 1),
          #         (str_store_string, s7, "str_kaos_swadia_king"),
          #    (else_try),
          #         (eq, "$kaos_kings_kingdom", 2),
          #         (str_store_string, s7, "str_kaos_Vaegirs_king"),
          #    (else_try),
          #         (eq, "$kaos_kings_kingdom", 3),
          #         (str_store_string, s7, "str_kaos_Khergit_king"),
          #    (else_try),
          #         (eq, "$kaos_kings_kingdom", 4),
          #         (str_store_string, s7, "str_kaos_Nords_king"),
          #    (else_try),
          #         (eq, "$kaos_kings_kingdom", 5),
          #         (str_store_string, s7, "str_kaos_Rhodoks_king"),
          #    (else_try),
          #         (eq, "$kaos_kings_kingdom", 6),
          #         (str_store_string, s7, "str_kaos_Sarranid_king"),
          #    (try_end),
            (try_end),
        (else_try),
           (lt, reg0, 20),
           
                                 (try_begin),
              (eq, ":script_param_2", "fac_kingdom_1"),
              (str_store_string, s4, "str_kaos_kingdom1_king_20"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_2"),
              (str_store_string, s4, "str_kaos_kingdom2_king_20"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_3"),
              (str_store_string, s4, "str_kaos_kingdom3_king_20"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_4"),
              (str_store_string, s4, "str_kaos_kingdom4_king_20"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_5"),
              (str_store_string, s4, "str_kaos_kingdom5_king_20"),
           (else_try),
              (eq, ":script_param_2", "fac_kingdom_6"),
              (str_store_string, s4, "str_kaos_kingdom6_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_7"),
              (str_store_string, s4, "str_kaos_kingdom7_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_8"),
              (str_store_string, s4, "str_kaos_kingdom8_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_9"),
              (str_store_string, s4, "str_kaos_kingdom9_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_10"),
              (str_store_string, s4, "str_kaos_kingdom10_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_11"),
              (str_store_string, s4, "str_kaos_kingdom11_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_12"),
              (str_store_string, s4, "str_kaos_kingdom12_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_13"),
              (str_store_string, s4, "str_kaos_kingdom13_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_14"),
              (str_store_string, s4, "str_kaos_kingdom14_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_15"),
              (str_store_string, s4, "str_kaos_kingdom15_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_16"),
              (str_store_string, s4, "str_kaos_kingdom16_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_17"),
              (str_store_string, s4, "str_kaos_kingdom17_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_18"),
              (str_store_string, s4, "str_kaos_kingdom18_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_19"),
              (str_store_string, s4, "str_kaos_kingdom19_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_20"),
              (str_store_string, s4, "str_kaos_kingdom20_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_papacy"),
              (str_store_string, s4, "str_kaos_kingdom21_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_22"),
              (str_store_string, s4, "str_kaos_kingdom22_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_23"),
              (str_store_string, s4, "str_kaos_kingdom23_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_24"),
              (str_store_string, s4, "str_kaos_kingdom24_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_25"),
              (str_store_string, s4, "str_kaos_kingdom25_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_26"),
              (str_store_string, s4, "str_kaos_kingdom26_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_27"),
              (str_store_string, s4, "str_kaos_kingdom27_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_28"),
              (str_store_string, s4, "str_kaos_kingdom28_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_29"),
              (str_store_string, s4, "str_kaos_kingdom29_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_30"),
              (str_store_string, s4, "str_kaos_kingdom30_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_31"),
              (str_store_string, s4, "str_kaos_kingdom31_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_32"),
              (str_store_string, s4, "str_kaos_kingdom32_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_33"),
              (str_store_string, s4, "str_kaos_kingdom33_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_34"),
              (str_store_string, s4, "str_kaos_kingdom34_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_35"),
              (str_store_string, s4, "str_kaos_kingdom35_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_36"),
              (str_store_string, s4, "str_kaos_kingdom36_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_37"),
              (str_store_string, s4, "str_kaos_kingdom37_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_38"),
              (str_store_string, s4, "str_kaos_kingdom38_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_39"),
              (str_store_string, s4, "str_kaos_kingdom39_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_40"),
              (str_store_string, s4, "str_kaos_kingdom40_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_41"),
              (str_store_string, s4, "str_kaos_kingdom41_king_20"),
                         (else_try),
              (eq, ":script_param_2", "fac_kingdom_42"),
              (str_store_string, s4, "str_kaos_kingdom41_king_20"),
           (try_end),
           
        #   (try_begin),
        #      (eq, ":script_param_2", "fac_kingdom_1"),
        #      (str_store_string, s4, "str_kaos_swadia_king_20"),
        #   (else_try),
        #      (eq, ":script_param_2", "fac_kingdom_2"),
        #      (str_store_string, s4, "str_kaos_Vaegirs_king_20"),
        #   (else_try),
        #      (eq, ":script_param_2", "fac_kingdom_3"),
        #      (str_store_string, s4, "str_kaos_Khergit_king_20"),
        #   (else_try),
        #      (eq, ":script_param_2", "fac_kingdom_4"),
        #      (str_store_string, s4, "str_kaos_Nords_king_20"),
        #   (else_try),
        #      (eq, ":script_param_2", "fac_kingdom_5"),
        #      (str_store_string, s4, "str_kaos_Rhodoks_king_20"),
        #   (else_try),
        #      (eq, ":script_param_2", "fac_kingdom_6"),
        #      (str_store_string, s4, "str_kaos_Sarranid_king_20"),
        #   (try_end),

            (try_begin),
                (eq, ":script_param_1_leader", "trp_player"), 
                (eq, "$background_type", 8),
                
                                                 (try_begin),
                      (eq, "$kaos_kings_kingdom", 1),
                      (str_store_string, s7, "str_kaos_kingdom1_king_20"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 2),
                      (str_store_string, s7, "str_kaos_kingdom2_king_20"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 3),
                      (str_store_string, s7, "str_kaos_kingdom3_king_20"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 4),
                      (str_store_string, s7, "str_kaos_kingdom4_king_20"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 5),
                      (str_store_string, s7, "str_kaos_kingdom5_king_20"),
                 (else_try),
                      (eq, "$kaos_kings_kingdom", 6),
                      (str_store_string, s7, "str_kaos_kingdom6_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 7),
                      (str_store_string, s7, "str_kaos_kingdom7_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 8),
                      (str_store_string, s7, "str_kaos_kingdom8_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 9),
                      (str_store_string, s7, "str_kaos_kingdom9_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 10),
                      (str_store_string, s7, "str_kaos_kingdom10_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 11),
                      (str_store_string, s7, "str_kaos_kingdom11_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 12),
                      (str_store_string, s7, "str_kaos_kingdom12_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 13),
                      (str_store_string, s7, "str_kaos_kingdom13_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 14),
                      (str_store_string, s7, "str_kaos_kingdom14_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 15),
                      (str_store_string, s7, "str_kaos_kingdom15_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 16),
                      (str_store_string, s7, "str_kaos_kingdom16_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 17),
                      (str_store_string, s7, "str_kaos_kingdom17_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 18),
                      (str_store_string, s7, "str_kaos_kingdom18_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 19),
                      (str_store_string, s7, "str_kaos_kingdom19_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 20),
                      (str_store_string, s7, "str_kaos_kingdom20_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 21),
                      (str_store_string, s7, "str_kaos_kingdom21_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 22),
                      (str_store_string, s7, "str_kaos_kingdom22_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 23),
                      (str_store_string, s7, "str_kaos_kingdom23_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 24),
                      (str_store_string, s7, "str_kaos_kingdom24_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 25),
                      (str_store_string, s7, "str_kaos_kingdom25_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 26),
                      (str_store_string, s7, "str_kaos_kingdom26_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 27),
                      (str_store_string, s7, "str_kaos_kingdom27_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 28),
                      (str_store_string, s7, "str_kaos_kingdom28_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 29),
                      (str_store_string, s7, "str_kaos_kingdom29_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 30),
                      (str_store_string, s7, "str_kaos_kingdom30_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 31),
                      (str_store_string, s7, "str_kaos_kingdom31_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 32),
                      (str_store_string, s7, "str_kaos_kingdom32_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 33),
                      (str_store_string, s7, "str_kaos_kingdom33_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 34),
                      (str_store_string, s7, "str_kaos_kingdom34_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 35),
                      (str_store_string, s7, "str_kaos_kingdom35_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 36),
                      (str_store_string, s7, "str_kaos_kingdom36_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 37),
                      (str_store_string, s7, "str_kaos_kingdom37_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 38),
                      (str_store_string, s7, "str_kaos_kingdom38_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 39),
                      (str_store_string, s7, "str_kaos_kingdom39_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 40),
                      (str_store_string, s7, "str_kaos_kingdom40_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 41),
                      (str_store_string, s7, "str_kaos_kingdom41_king_20"),
                                       (else_try),
                      (eq, "$kaos_kings_kingdom", 42),
                      (str_store_string, s7, "str_kaos_kingdom42_king_20"),
                 (try_end),
                
         #        (try_begin),
         #             (eq, "$kaos_kings_kingdom", 1),
         #             (str_store_string, s7, "str_kaos_swadia_king_20"),
         #        (else_try),
         #             (eq, "$kaos_kings_kingdom", 2),
         #             (str_store_string, s7, "str_kaos_Vaegirs_king_20"),
         #        (else_try),
         #             (eq, "$kaos_kings_kingdom", 3),
         #             (str_store_string, s7, "str_kaos_Khergit_king_20"),
         #        (else_try),
         #             (eq, "$kaos_kings_kingdom", 4),
         #             (str_store_string, s7, "str_kaos_Nords_king_20"),
         #        (else_try),
         #             (eq, "$kaos_kings_kingdom", 5),
         #             (str_store_string, s7, "str_kaos_Rhodoks_king_20"),
         #        (else_try),
         #             (eq, "$kaos_kings_kingdom", 6),
         #             (str_store_string, s7, "str_kaos_Sarranid_king_20"),
         #        (try_end),
            (try_end),
        (try_end),
#####Kaos end add factions
        (try_begin),
                (eq, ":rename", 1), 
                (troop_set_name, ":script_param_1_leader", s3),
                # rename party
                (faction_set_name, ":script_param_2", s4),
                (troop_get_slot, ":script_param_1_leaded_party_3", ":script_param_1_leader", slot_troop_leaded_party),
                (try_begin), 
                # v0.2 change to prevent opcode error
                  (gt, ":script_param_1_leaded_party_3", 0),
                  (str_store_troop_name, s5, ":script_param_1_leader"),
                  (party_set_name, ":script_param_1_leaded_party_3", "str_s5_s_party"),
                (try_end), # v0.2 change
        (try_end),

        (try_begin),
              (eq, ":script_param_1_leader", "trp_player"), 
              (eq, ":rename", 1), 
              #(display_log_message, "@{!} DEBUG plyr - s1 {s1}", 0xFF0000),  
              (troop_set_name, ":script_param_1_leader", s3),
                (faction_set_name, "fac_player_supporters_faction", s7),
                # rename party
                (troop_get_slot, ":script_param_1_leaded_party_3", "trp_player", slot_troop_leaded_party),
                (try_begin), 
                # v0.2 change to prevent opcode error
                  (gt, ":script_param_1_leaded_party_3", 0),
                  (str_store_troop_name, s5, "trp_player"),
                  (party_set_name, ":script_param_1_leaded_party_3", "str_s5_s_party"),
                (try_end), # v0.2 change
        (try_end),



          (try_begin),
              (eq, "$kaos_royal_children", 1),
              (assign, ":script_param_1_leader", 0),
              (assign, ":mother", 0),
              (assign, ":g_wedding_bride_troop_father", 0),
              (try_for_range, ":npc_no", active_npcs_begin, kingdom_ladies_end),
                  (store_faction_of_troop, ":npc_faction", ":npc_no"),
                  (try_begin),
                      (eq, ":npc_faction", ":script_param_2"),
                      (troop_get_slot, ":mother", ":npc_no", slot_troop_mother),
                      (troop_get_slot, ":g_wedding_bride_troop_father", ":npc_no", slot_troop_father),
                      (this_or_next|eq, ":mother",":script_param_1_leader"),   
                      (eq, ":g_wedding_bride_troop_father", ":script_param_1_leader"),  
                      (str_store_troop_name_plural, s0, ":npc_no"),
                      (troop_get_type, ":type_script_param_1", ":npc_no"),
                      (try_begin),
                          (eq, ":imperial", 1),
                          (try_begin),
                              (eq, ":type_script_param_1", 0), #male 
                              (str_store_string, s11, "str_faction_title_male_heir_empire"),   
                          (else_try),
                              (str_store_string, s11, "str_faction_title_female_Heir_empire"),
                          (try_end),
                      (else_try),
                          (eq, ":high", 1),
                          (try_begin),
                              (eq, ":type_script_param_1", 0), #male 
                              (str_store_string, s11, "str_faction_title_male_heir_high"),   
                          (else_try),
                              (str_store_string, s11, "str_faction_title_female_Heir_high"),
                          (try_end),
                      (try_end),
                      (troop_set_name, ":npc_no", s11),
                      # rename party
                      (troop_get_slot, ":script_param_1_leaded_party_3", ":npc_no", slot_troop_leaded_party),
                      (try_begin), 
                      # v0.2 change to prevent opcode error
                        (gt, ":script_param_1_leaded_party_3", 0),
                        (str_store_troop_name, s5, ":npc_no"),
                        (party_set_name, ":script_param_1_leaded_party_3", "str_s5_s_party"),
                      (try_end), # v0.2 change
                  (try_end),
              (try_end),
          (try_end),


    ]
  ), 

  
  ("kaos_update_titles",
  [
  (try_for_range, ":troop_2", active_npcs_including_player_begin, kingdom_ladies_end),
    (this_or_next|troop_slot_eq, ":troop_2", slot_troop_occupation, 2),
    (this_or_next|troop_slot_eq, ":troop_2", slot_troop_occupation, slto_kingdom_lady),
    (eq, ),
    (store_faction_of_troop, ":faction_of_troop_party_prisoner_stack_troop_id_script_param_1_leaded_party_2_var_18", ":troop_2"),
    (is_between, ":faction_of_troop_party_prisoner_stack_troop_id_script_param_1_leaded_party_2_var_18", kingdoms_begin, kingdoms_end),
    (store_faction_of_troop, ":faction_of_troop_party_prisoner_stack_troop_id_script_param_1_leaded_party_2_var_18", ":troop_2"),
    (call_script, "script_troop_set_title_according_to_faction", ":troop_2", ":faction_of_troop_party_prisoner_stack_troop_id_script_param_1_leaded_party_2_var_18"), 
  (try_end),
  (call_script, "script_update_all_notes"),
  ]),
  

  
##################################################
### Test: Tavern Recruitment Begin ###############
##################################################
#no input/output
#could need a faction check
########### Modified by KratosMKII
   ("add_tavern_troops",
      [
         ##### get the town id. town_no = town ID
         (try_for_range, ":cur_mercs", merc_parties_begin, merc_parties_end),
            (store_party_size, ":cur_mercs_party_size", ":cur_mercs"),
            (lt, ":cur_mercs_party_size", 30), #never have many more than 30 troops in the tavern
            
              (store_sub, ":offset", ":cur_mercs", towns_begin),            
              (store_add, ":town_no", towns_begin, ":offset"),
              (store_faction_of_party, ":town_faction", ":town_no"),
              
              ### gets faction reinforcement slots
              (faction_get_slot, ":faction_roster_1", ":town_faction", slot_faction_reinforcements_a),
              (faction_get_slot, ":faction_roster_2", ":town_faction", slot_faction_reinforcements_b),
              (faction_get_slot, ":faction_roster_3", ":town_faction", slot_faction_reinforcements_c),
              (call_script, "script_get_random_merc_company_from_center", ":town_no"),
              (assign, ":reinforcements", reg0),
              
              (try_begin),
                ##### max_troops = current party size of ":cur_mercs"
                (store_random_in_range, ":random_chance_1", 0, 100),
                (lt, ":random_chance_1", 50), #### Higher for low quality troops
                  (party_add_template, ":cur_mercs", ":faction_roster_1"),
                
                (store_random_in_range, ":random_chance_2", 0, 100),
                (lt, ":random_chance_2", 35),  #### Medium for regular quality troops
                  (party_add_template, ":cur_mercs", ":faction_roster_2"),
                    
                (store_random_in_range, ":random_chance_3", 0, 100),
                (lt, ":random_chance_3", 20),  #### Low for high quality troops
                  (party_add_template, ":cur_mercs", ":faction_roster_3"),
                  
                (store_random_in_range, ":random_chance_4", 0, 100),
                (lt, ":random_chance_4", 30),  #### Mercs
                  (party_add_template, ":cur_mercs", ":reinforcements"), 
              (try_end),
         (try_end),
               
      ]),
##################################################
# Test: Tavern Recruitment END ###################
##################################################




##################################################
## -- Dunde's AI Party Daily Training BEGIN ######
##################################################
# To be called from simple Trigger to simulate Troop's Upgrading for Heroes Party
# and Garrison's Troop for daily training
# Input    : Party ID
# Features : Trainer Skill used as game describe it.
  ("party_daily_training", [
       (store_script_param_1, ":party_id"),
       (assign, ":total_xp", 0),
       (party_get_num_companion_stacks, ":num_stacks", ":party_id"),
       (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":trainer_id", ":party_id", ":i_stack"),
            (store_skill_level, ":trainer_skill", skl_trainer, ":trainer_id"),       
            (gt, ":trainer_skill", 0),   
            (try_begin),
                (eq, ":trainer_skill", 1),
                (assign, ":trainer_base", 4),
            (else_try),
                (eq, ":trainer_skill", 2),
                (assign, ":trainer_base", 10),
            (else_try),
                (eq, ":trainer_skill", 3),
                (assign, ":trainer_base", 16),
            (else_try),
                (eq, ":trainer_skill", 4),
                (assign, ":trainer_base", 23),
            (else_try),
                (eq, ":trainer_skill", 5),
                (assign, ":trainer_base", 30),
            (else_try),
                (eq, ":trainer_skill", 6),
                (assign, ":trainer_base", 38),
            (else_try),
                (eq, ":trainer_skill", 7),
                (assign, ":trainer_base", 46),
            (else_try),
                (eq, ":trainer_skill", 8),
                (assign, ":trainer_base", 55),
            (else_try),
                (eq, ":trainer_skill", 9),
                (assign, ":trainer_base", 65),
            (else_try),
                (eq, ":trainer_skill", 10),
                (assign, ":trainer_base", 80),       # XP from being trained by troops with some degrees of trainer skill
            (try_end),
            (store_character_level, ":trainer_level", ":trainer_id"),       
            (party_stack_get_size, ":trainer_size", ":party_id", ":i_stack"),
            (try_for_range, ":j_stack", 0, ":num_stacks"),
              (neq, ":i_stack", ":j_stack"),
              (party_stack_get_troop_id, ":trainee_id", ":party_id", ":j_stack"),
              (store_character_level, ":trainee_level", ":trainee_id"),
              (gt, ":trainer_level", ":trainee_level"),                # Do TRain lower level troops only
              (party_stack_get_size, ":trainee_size", ":party_id", ":j_stack"),
              (store_mul, ":xp_given", ":trainer_base", ":trainer_size"),       
              (val_mul, ":xp_given", ":trainee_size"),
#### TRIAL FIRST METHODS : FAILED ##########################################################
#              (try_begin),
#                 (is_between, ":party_id", walled_centers_begin, walled_centers_end),
#                 (val_div, ":xp_given", 2), # garrison training is slower
#              (try_end),
#              (party_add_xp_to_stack, ":party_id", ":j_stack", ":xp_given"),
###########################################################################################
              (val_add, ":total_xp", ":xp_given"),
            (try_end),           
       (try_end),
       (try_begin),
            (is_between, ":party_id", walled_centers_begin, walled_centers_end),
            (val_div, ":total_xp", 2), # garrison training is slower
       (try_end),
       (party_upgrade_with_xp, ":party_id", ":total_xp", 0),
# TEST ONLY
#       (assign, reg0, ":total_xp"),
#       (str_store_party_name, s1, ":party_id"),
#       (display_message, "@{s1} Training, {reg0} XP gained"),
   ]),   
##################################################
#### -- Dunde's AI Party Daily Training END ######
##################################################








#######################################################################################
              #SW - tavern brawl by HokieBT
              ("setup_tavern_brawl",
                [
                  
                  #(set_party_battle_mode),        #this is run in the trp_fugitive quests so may be necessary?  it appears to allow them to permanently hurt people?
                  (get_player_agent_no, ":player_agent"),
                  (try_for_agents, ":cur_agent"),
                    (neq, ":cur_agent", ":player_agent"),    #don't change the players team (default of 0)
                    (store_random_in_range, ":team", 2, 6),    #use team 1-5 for tavern brawlers (nevermind, don't use 2 since we use them for town walkers)
                    (agent_set_team, ":cur_agent", ":team"),
                    # (agent_clear_scripted_mode, ":cur_agent"),    #so town walkers won't try and continue to walk around town (may not be necessary for tavern?)
                    # (agent_set_speed_limit, ":cur_agent", 50),    #so they will run faster (may not be necessary for taverns?)
                  (try_end),
                  
                  #stop_all_sounds (ie. the cantina ambiance)
                  (stop_all_sounds,2),
                  #play a specific music track for the start of the fight
                  # (play_track, "track_cantina_fight", 2),    # 0 = default, 1 = fade out current track, 2 = stop current track
                  
                  #assign a flag to check if you defeated everybody
                  (assign, "$g_init_fight", 1),
                  
                  #switch the music situtation after the fight track finishes
                  # (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
                  
              ]),
#######################################################################################
              #SW - script_init_town_fight by HokieBT
              ("init_town_fight",
                [
                  (get_player_agent_no, ":player_agent"),
                  #(get_player_agent_own_troop_kill_count, "$player_current_friendly_kills"),            #only necessary when using the old code in common_check_town_fight
                  (try_for_agents, ":cur_agent"),
                    #(agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                    (neq, ":cur_agent", ":player_agent"),    #don't change the players team (default of 0)
                    (agent_get_entry_no, ":entry_no", ":cur_agent"),
                    (try_begin),
                      (this_or_next|eq, ":entry_no",48),    #players companion
                      (eq, ":entry_no",49),                #players companion
                      (agent_set_team, ":cur_agent", 0),    #set players companion to their team (team 0)
                    (else_try),
                      (agent_set_team, ":cur_agent", 2),    #set all other players to team 2 (don't use team 1 since that is used for fugitive, etc)
                      #store their hit points
                      # (store_agent_hit_points, ":agent_hp", ":cur_agent",1),    #set to 1 to retrieve actual hp
                      # (agent_set_slot, ":cur_agent", slot_agent_hit_points, ":agent_hp"),
                    (try_end),
                  (try_end),
                  #set the teams relationship
                  (team_set_relation, 0, 2, 1),    #set the player team 0 and town team 2 to be friendly to each other (-1 for enemy, 1 for friend, 0 for neutral)
              ]),
#######################################################################################
              #SW - script_start_town_fight by HokieBT
              ("start_town_fight",
                [
                  #(set_party_battle_mode),        #this is run in the trp_fugitive quests so may be necessary?  it appears to allow them to permanently hurt people?
                  (try_for_agents, ":cur_agent"),
                    (agent_get_team  , ":team", ":cur_agent"),
                    (eq, ":team", 2),    #agent is on the town team
                    (agent_clear_scripted_mode, ":cur_agent"),    #so town walkers won't try and continue to walk around town
                    (agent_set_speed_limit, ":cur_agent", 50),    #so they will run faster
                  (try_end),
                  (team_set_relation, 0, 2, -1),    #set the player team 0 and town team 2 to be enemy to each other (-1 for enemy, 1 for friend, 0 for neutral)
                  (set_show_messages, 0),        #0 disables window messages 1 re-enables them.
                  (team_give_order, 0, grc_everyone, mordr_charge),    #makes the other team charge
                  (team_give_order, 1, grc_everyone, mordr_charge),    #makes the other team charge
                  (team_give_order, 2, grc_everyone, mordr_charge),    #makes the other team charge
                  (set_show_messages, 1),        #0 disables window messages 1 re-enables them.
                  
                  #play a specific music track for the start of the fight
                  # (play_track, "track_town_battle", 2),    # 0 = default, 1 = fade out current track, 2 = stop current track
                  
                  #switch the music situtation after the fight track finishes
                  # (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
                  
              ]),
#######################################################################################
 

 
 
 
########################## NEW PARTY TRIGGERS ########################################
     #script_spawn_rebels
    # INPUT: none
    # OUTPUT: none
    ("spawn_rebels",
      [
        #TOM NEW
        (store_current_day, ":cur_day"),
        #(try_for_range, ":faction", kingdoms_begin, kingdoms_end),
        (store_num_parties_of_template, ":num_parties", "pt_rebels"), #limit how many rebels can be about
        (store_random_in_range, ":faction", kingdoms_begin, kingdoms_end),
        (try_begin),
          # (faction_get_slot, ":last_rebellion", ":faction", slot_faction_peasant_rebellion_last),
          # (store_sub, ":ok_to_rebel", ":cur_day", ":last_rebellion"),
          # (store_random_in_range, ":random_days", 1, 1),
          # (ge, ":ok_to_rebel", ":random_days"),
          (lt, ":num_parties", "$g_party_rebellion_strong_max"), # 6 rebellions!
          
          (assign, ":fac_towns", 0),
          (assign, ":fac_prosperity", 0),
          (assign, ":fac_average_prosperity", 0),
          (assign, ":lowest_prosperity", 100),
          (assign, ":lowest_prosperity_town", -1),
          (try_for_range, ":cur_town", towns_begin, towns_end),
            (store_faction_of_party, ":cur_fac", ":cur_town"),
            (eq, ":cur_fac", ":faction"),
            (val_add, ":fac_towns", 1),
            (party_get_slot, ":prosperity", ":cur_town", slot_town_prosperity),
            (val_add, ":fac_prosperity", ":prosperity"),
            (lt, ":prosperity", ":lowest_prosperity"),
            (assign, ":lowest_prosperity", ":prosperity"),
            (assign, ":lowest_prosperity_town", ":cur_town"),
          (try_end),
          (gt, ":fac_towns", 0),
          (gt, ":lowest_prosperity_town", 0),
          
          (store_div, ":fac_average_prosperity", ":fac_prosperity", ":fac_towns"),
          (le, ":fac_average_prosperity", 25),

          (set_spawn_radius,3),
          (store_random_in_range, ":random_party_numbers", 3, 5),
          (assign, ":parties_to_spawn", ":random_party_numbers"),
          (faction_get_slot, ":reinforcements_a", ":faction", slot_faction_reinforcements_a),
          (faction_get_slot, ":reinforcements_b", ":faction", slot_faction_reinforcements_b),
          (faction_get_slot, ":reinforcements_c", ":faction", slot_faction_reinforcements_c),
          (faction_get_slot, ":village", ":faction", slot_faction_tier_2_troop),  ### MORE EXPERIENCED TROOPS
          (faction_get_slot, ":town", ":faction", slot_faction_tier_3_troop),  ### 
          (faction_get_slot, ":castle", ":faction", slot_faction_tier_4_troop),  ### 
          # (faction_get_slot, ":castle_2", ":faction", slot_faction_tier_5_troop),  ### 
          (try_for_range, reg1, 0, ":parties_to_spawn"),
            (spawn_around_party, ":lowest_prosperity_town", "pt_rebels"),
            (assign, ":party_id", reg0),
            (party_set_ai_behavior, ":party_id", ai_bhvr_patrol_party),
            (party_set_ai_object, ":party_id", ":lowest_prosperity_town"),
            (party_set_ai_patrol_radius, ":party_id", 10),
            (str_store_faction_name, s25, ":faction"),
            (assign, ":party_name_str", "str_s25_rebels"),
            (party_set_slot, ":party_id", slot_party_ai_object, ":lowest_prosperity_town"),
            (store_random_in_range, ":random_troop_castle", 10, 20), ##### ELITE INFANTRY
            (store_random_in_range, ":random_troop_town", 30, 50), ##### VETERAN INFANTRY
            (store_random_in_range, ":random_troop_village", 50, 70),  ##### NORMAL INFANTRY
            (party_add_members, ":party_id", ":castle", ":random_troop_castle"),
            (party_add_members, ":party_id", ":town", ":random_troop_town"),
            (party_add_members, ":party_id", ":village", ":random_troop_village"),            
            (party_add_template, ":party_id", ":reinforcements_c"),
            (party_add_template, ":party_id", ":reinforcements_c"),
            (party_add_template, ":party_id", ":reinforcements_c"),
            (party_add_template, ":party_id", ":reinforcements_c"),
            (party_add_template, ":party_id", ":reinforcements_c"),
            (party_add_template, ":party_id", ":reinforcements_c"),
            (party_add_template, ":party_id", ":reinforcements_c"),
            
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
                        
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
                        
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            (party_add_template, ":party_id", ":reinforcements_b"),
            
            (party_add_template, ":party_id", ":reinforcements_a"),
            (party_add_template, ":party_id", ":reinforcements_a"),
            (party_add_template, ":party_id", ":reinforcements_a"),
            (party_add_template, ":party_id", ":reinforcements_a"),
            (party_add_template, ":party_id", ":reinforcements_a"),
            (store_random_in_range, ":random_party_xp", 8000, 12000),
            (party_upgrade_with_xp, ":party_id", ":random_party_xp", 2),
            (party_set_name, ":party_id", ":party_name_str"),
          (try_end),
          (try_begin),
            (call_script, "script_get_message_color_rebels", 10, ":faction"),
            (display_message, "@There was a massive revolt in areas controlled by the {s25}! Do not be fooled however. These aren't rabble! They're well trained and equipped, most likely funded by {s25}'s enemies.", reg20),
            # (faction_set_slot, ":faction", slot_faction_peasant_rebellion_last, ":cur_day"),
          (try_end),
        (try_end),        
    ]),


      

    
    
    #script_spawn_fugitive_serfs
    # INPUT: none
    # OUTPUT: none
    ("spawn_fugitive_serfs",
      [  
        (assign, ":fugitive_serfs_amount", "$g_party_fugitive_serf_max"),
        (store_num_parties_of_template, ":num_parties", "pt_fugitive_serfs"),
        (try_begin),
          (lt, ":num_parties", ":fugitive_serfs_amount"),
          (val_sub, ":fugitive_serfs_amount", ":num_parties"),
          (try_for_range, reg2, 0, ":fugitive_serfs_amount"),
            (store_random_in_range, ":random_village", villages_begin, villages_end),
            (spawn_around_party, ":random_village", "pt_fugitive_serfs"),
            # (str_store_party_name, s7, ":random_village"),
            # (display_message, "@Fugitive Serfs spawned in {s7}"),
          (try_end),
        (try_end),
    ]),      
    
    
    #script_spawn_rogue_mercenaries
    # INPUT: none
    # OUTPUT: none
    ("spawn_rogue_mercenaries",
      [  
        (assign, ":rogue_mercenaries_amount", "$g_party_mercenary_company_max"),
        (store_num_parties_of_template, ":num_parties", "pt_rogue_mercenaries"),
        (try_begin),
          (lt, ":num_parties", ":rogue_mercenaries_amount"),
          # (val_sub, ":rogue_mercenaries_amount", ":num_parties"),
          # (try_for_range, reg2, 0, ":rogue_mercenaries_amount"),
            (store_random_in_range, ":spawn_center", towns_begin, towns_end),
            (spawn_around_party, ":spawn_center", "pt_rogue_mercenaries"),
            (assign, ":party_name_str", "str_s7_rogue_mercenaries"),
            (str_store_party_name, s7, ":spawn_center"),
            (str_store_party_name_link, s8, ":spawn_center"),
            (display_message, "@A group of mercenaries in {s8} failed to find work. They formed a party and started ravaging the outskirts of the town!"),
            
            (assign, ":party_id", reg0),
          
            (call_script, "script_get_random_merc_company_from_center", ":spawn_center"),
            (assign, ":reinforcements", reg0),
            (party_add_template, ":party_id", ":reinforcements"),   ############ MERCENARIES
            (party_add_template, ":party_id", ":reinforcements"),   ############
            (party_add_template, ":party_id", ":reinforcements"),   ############
            (party_add_template, ":party_id", ":reinforcements"),   ############
            (party_add_template, ":party_id", ":reinforcements"),   ############
            (party_set_slot, ":party_id", slot_party_ai_object, ":spawn_center"),
            (party_set_name, ":party_id", ":party_name_str"),
            (store_random_in_range, ":random_party_xp", 16000, 20000),
            (party_upgrade_with_xp, ":party_id", ":random_party_xp", 0),
        (try_end),
    ]),  
      
    
#######################################################################################






################## KILL COUNT AFTER BATTLE
  ("print_kill_count_to_s0",
  [
    (assign, ":var0", 0),
    (str_clear, s0),
    (try_for_agents, ":cur_troop"),
      (agent_is_human, ":cur_troop"),
      (agent_get_troop_id, ":troop_id", ":cur_troop"),
      (troop_is_hero, ":troop_id"),
      (agent_get_kill_count, ":cur_troop_kill_count", ":cur_troop"),
      (agent_get_kill_count, ":cur_troop_wounded_count", ":cur_troop", 1),
      (troop_get_slot, ":cur_troop_kill_count_total", ":troop_id", slot_troop_kill_count),
      (troop_get_slot, ":cur_troop_wounded_count_total", ":troop_id", slot_troop_wounded_count),
      (val_add, ":cur_troop_kill_count_total", ":cur_troop_kill_count"),
      (val_add, ":cur_troop_wounded_count_total", ":cur_troop_wounded_count"),
      (troop_set_slot, ":troop_id", slot_troop_kill_count, ":cur_troop_kill_count_total"),
      (troop_set_slot, ":troop_id", slot_troop_wounded_count, ":cur_troop_wounded_count_total"),
      (this_or_next|gt, ":cur_troop_kill_count", 0),
      (gt, ":cur_troop_wounded_count", 0),
      (str_store_troop_name, s1, ":troop_id"),
      (store_add, reg3, ":cur_troop_kill_count", ":cur_troop_wounded_count"),
      (assign, reg4, ":cur_troop_kill_count"),
      (assign, reg5, ":cur_troop_wounded_count"),
      (str_store_string, s2, "@{reg4} killed, {reg5} wounded"),
      (try_begin),
        (this_or_next|eq, ":troop_id", "trp_player"),
        (is_between, ":troop_id", "trp_npc1", "trp_kingdom_1_lord"),
        (str_store_string, s0, "@{s0}^{s1}: {reg3} ({s2})"),
      (else_try),
        (agent_is_ally, ":cur_troop"),
        (str_store_string, s0, "@{s0}^{s1}(ally): {reg3} ({s2})"),
      (else_try),
        (str_store_string, s0, "@{s0}^{s1}(enemy): {reg3} ({s2})"),
      (try_end),
      (val_add, ":var0", 1),
      
      ############## Player gets renown for number of enemies killed by him
      (try_begin),
        (eq, ":troop_id", "trp_player"),
        (ge, ":cur_troop_kill_count", 3),
          (assign, reg6, ":cur_troop_kill_count"),
          (val_div, reg6, 3),  #### every 3 enemies = +1 renown
          (call_script, "script_change_troop_renown", "trp_player", reg6),
          # (str_store_string, s3, "@{reg4} killed, {reg5} wounded"),
          (display_message, "@You earned {reg6} renown as a result of your battle prowess.", 5308240), ####### GREEN
      (try_end),
      
      
    (try_end),
    (try_begin),
      (eq, ":var0", 0),
      (str_store_string, s0, "@^None"),
    (try_end),
  ]),
#######################################################################################











######################################### DICKPLOMACY CAMP SCRIPTS
  # script_setup_camp_scene
  # Input: arg1 = center_no, arg2 = mission_template_no
  # Output: none
  ("setup_camp_scene",
    [
      (party_get_current_terrain, ":terrain_type", "p_main_party"),
      (assign, ":scene_to_use", "scn_camp_scene_plain"),
      (try_begin),
        (this_or_next|eq, ":terrain_type", rt_steppe),
        (eq, ":terrain_type", rt_steppe_forest),
        (assign, ":scene_to_use", "scn_camp_scene_steppe"),
      (else_try),
        (this_or_next|eq, ":terrain_type", rt_plain),
        (eq, ":terrain_type", rt_forest),
        (assign, ":scene_to_use", "scn_camp_scene_plain"),
      (else_try),
        (this_or_next|eq, ":terrain_type", rt_snow),
        (eq, ":terrain_type", rt_snow_forest),
        (assign, ":scene_to_use", "scn_camp_scene_snow"),
      (else_try),
        (this_or_next|eq, ":terrain_type", rt_desert),
        (eq, ":terrain_type", rt_desert_forest),
        (assign, ":scene_to_use", "scn_camp_scene_desert"),
      # (else_try),
        # (eq, ":terrain_type", rt_water), #figure this out later
        # (assign, ":scene_to_use", "scn_camp_scene_plain"),
      (else_try),
        (eq, ":terrain_type", rt_bridge),
        (try_for_parties, ":party_no"),
            (is_between, ":party_no", "p_bridge_1", "p_looter_spawn_point"),
            (store_distance_to_party_from_party, ":distance", ":party_no", "p_main_party"),
            (lt, ":distance", 2),
            (party_get_icon, ":icon", ":party_no"),
            (try_begin),
                (eq, ":icon", "icon_bridge_snow_a"),
                (assign, ":scene_to_use", "scn_camp_scene_snow"),
            (else_try),
                (assign, ":scene_to_use", "scn_camp_scene_plain"),
            (try_end),
        (try_end),
      (try_end),
      (modify_visitors_at_site, ":scene_to_use"),
      (reset_visitors),
    # (set_visitor,1, "trp_follower_woman"),
      
    (assign, ":cur_entry", 2),
    
    (assign, ":entry_1_assigned", 0),
    
    (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
      
   (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
   (try_for_range, ":troop_iterator", 0, ":num_stacks"), #1st pass: grab all heroes
     (party_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":troop_iterator"),
     (troop_is_hero, ":cur_troop_id"),
     (neq, ":cur_troop_id", "trp_player"),
     (try_begin),
        (ge, ":cur_entry", 40),
        (assign, ":num_stacks", -1), #break the loop
     (else_try),
         (eq, ":cur_troop_id", ":spouse"), 
         (set_visitor, 1, ":cur_troop_id"), #is spouse
         (assign, ":entry_1_assigned", 1),
     (else_try),
         (set_visitor, ":cur_entry", ":cur_troop_id"),
         (val_add, ":cur_entry", 1),
     (try_end),
   (try_end),
   
   #2nd pass: get anyone else
   (try_for_range, ":troop_iterator", 0, ":num_stacks"), 
     (party_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":troop_iterator"),
     (neq, ":cur_troop_id", "trp_player"),
     (neg|troop_is_hero, ":cur_troop_id"),
     (try_begin),
        (ge, ":cur_entry", 40),
        (assign, ":num_stacks", -1), #break the loop
     (else_try),
         (party_stack_get_size, ":stack_size", "p_main_party", ":troop_iterator"),
         (party_stack_get_num_wounded, ":num_wounded", "p_main_party", ":troop_iterator"),
         (val_sub, ":stack_size", ":num_wounded"),
         (gt, ":stack_size", 0),
         (try_for_range, ":stack_iterator", 0, ":stack_size"), #nested loop ayy lmao
             (try_begin),
                (ge, ":cur_entry", 40),
                (assign, ":stack_size", -1), #break the loop
             # (else_try),
                 # (neq, ":entry_1_assigned", 1),
                 # (this_or_next|eq, ":cur_troop_id", "trp_prostitute"), 
                 # (eq, ":cur_troop_id", "trp_courtesan"), 
                 # (set_visitor, 1, ":cur_troop_id"),
                 # (assign, ":entry_1_assigned", 1),
             (else_try),
                 (store_random_in_range, ":troop_dna",0,1000),
                 (set_visitor, ":cur_entry", ":cur_troop_id", ":troop_dna"),
                 (troop_set_slot, "trp_temp_array_c", ":cur_entry", ":troop_dna"),
                 (val_add, ":cur_entry", 1),
             (try_end),
         (try_end),
      (try_end),
   (try_end),
    
    #prisoners
    (assign, ":cur_entry", 40),
    (party_get_num_prisoner_stacks, ":prisoner_stacks", "p_main_party"),
    (try_for_range, ":troop_iterator", 0, ":prisoner_stacks"), #1st pass: grab all heroes
     (party_prisoner_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":troop_iterator"),
     (troop_is_hero, ":cur_troop_id"),
     (neq, ":cur_troop_id", "trp_player"),
     (try_begin),
        (ge, ":cur_entry", 48),
        (assign, ":troop_iterator", ":prisoner_stacks"), #break the loop
     (else_try),
         (set_visitor, ":cur_entry", ":cur_troop_id"),
         (store_add, ":cur_entry", ":cur_entry", 1),
     (try_end),
   (try_end),
   
   #2nd pass: get anyone else
   (party_get_num_prisoner_stacks, ":prisoner_stacks", "p_main_party"),
   (try_for_range, ":troop_iterator", 0, ":prisoner_stacks"), 
     (party_prisoner_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":troop_iterator"),
     (neg|troop_is_hero, ":cur_troop_id"),
     (try_begin),
        (ge, ":cur_entry", 48),
        (assign, ":troop_iterator", ":num_stacks"), #break the loop
     (else_try),
         (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":troop_iterator"),
         (gt, ":stack_size", 0),
         (try_for_range, ":stack_iterator", 0, ":stack_size"), #nested loop ayy lmao
             (try_begin),
                (ge, ":cur_entry", 48),
                (assign, ":stack_size", -1), #break the loop
             (else_try),
                 (store_random_in_range, ":troop_dna",0,1000),
                 (set_visitor, ":cur_entry", ":cur_troop_id", ":troop_dna"),
                 (troop_set_slot, "trp_temp_array_c", ":cur_entry", ":troop_dna"),
                 (val_add, ":cur_entry", 1),
             (try_end),
         (try_end),
      (try_end),
   (try_end),
      
    (mission_tpl_entry_clear_override_items, "mt_camp",1),
    (store_random_in_range, ":r",0,2),
    (try_begin),
        (eq, ":r",0),
        (mission_tpl_entry_add_override_item, "mt_camp",1, "itm_lute"),
    (else_try),
        (mission_tpl_entry_add_override_item, "mt_camp",1, "itm_lyre"),
    (try_end),
      
      (assign, "$talk_context", tc_camp_talk),
      (jump_to_scene, ":scene_to_use"),
  ]),






  # script_change_banners_and_chest
  # Input: none
  # Output: none
  ("change_banners_and_chest",
    [(party_get_slot, ":cur_leader", "$g_encountered_party", slot_town_lord),
     (try_begin),
       (ge, ":cur_leader", 0),
#normal_banner_begin
       (troop_get_slot, ":troop_banner_object", ":cur_leader", slot_troop_banner_scene_prop),
       (try_begin),
           (gt, ":troop_banner_object", 0),
           (replace_scene_props, banner_scene_props_begin, ":troop_banner_object"),
       (else_try),
           (eq, ":troop_banner_object", -1),
           (troop_get_slot, ":troop_custom_banner_object", ":cur_leader", slot_troop_custom_banner_flag_type),
           (ge, ":troop_custom_banner_object", 0),
           (val_add, ":troop_custom_banner_object", "spr_custom_banner_01"),
           (replace_scene_props, "spr_banner_a", ":troop_custom_banner_object"),
       (try_end),
     (else_try),
       (replace_scene_props, banner_scene_props_begin, "spr_empty"),
     (try_end),
     (try_begin),
       (neq, ":cur_leader", "trp_player"),
       (replace_scene_props, "spr_player_chest", "spr_locked_player_chest"),
     (try_end),
     ]),






  # script_replace_scene_items_with_spawn_items_before_ms
  # Input: none
  # Output: none
  ("replace_scene_items_with_spawn_items_before_ms",
    [
      (try_for_range, ":item_no", all_items_begin, all_items_end),
        (item_get_type, ":item_type", ":item_no"),
        (neq, ":item_type", itp_type_goods),
        (neq, ":item_type", itp_type_book),
        (scene_item_get_num_instances, ":num_instances", ":item_no"),
        (item_set_slot, ":item_no", slot_item_num_positions, 0),
        (assign, ":num_positions", 0),
        (try_for_range, ":cur_instance", 0, ":num_instances"),
          (scene_item_get_instance, ":scene_item", ":item_no", ":cur_instance"),
          (prop_instance_get_position, "$g_position_to_use_for_replacing_scene_items", ":scene_item"),
          (store_add, ":cur_slot", slot_item_positions_begin, ":num_positions"),
          (item_set_slot, ":item_no", ":cur_slot", "$g_position_to_use_for_replacing_scene_items"),
          (val_add, ":num_positions", 1),
          (val_add, "$g_position_to_use_for_replacing_scene_items", 1),
          (item_set_slot, ":item_no", slot_item_num_positions, ":num_positions"),
        (try_end),
        (replace_scene_items_with_scene_props, ":item_no", "spr_empty"),
      (try_end),
     ]),

  # script_replace_scene_items_with_spawn_items_after_ms
  # Input: none
  # Output: none
  ("replace_scene_items_with_spawn_items_after_ms",
    [
      (try_for_range, ":item_no", all_items_begin, all_items_end),
        (item_get_slot,  ":num_positions", ":item_no", slot_item_num_positions),
        (item_get_type, ":item_type", ":item_no"),
        (try_for_range, ":cur_position", 0, ":num_positions"),
          (store_add, ":cur_slot", slot_item_positions_begin, ":cur_position"),
          (item_get_slot, ":pos_no", ":item_no", ":cur_slot"),
          (set_spawn_position, ":pos_no"),
          (try_begin),
            (eq, ":item_type", itp_type_horse),
            (spawn_horse, ":item_no"),
          (else_try),
            (spawn_item, ":item_no", 0),
          (try_end),
        (try_end),
      (try_end),
     ]),
#######################################################################################




################################## LORD RANDOM BUILD
  ("lord_random_build_script",
    [
       (try_for_range, ":cur_fief", villages_begin, villages_end),
          (store_random_in_range, ":random", 0, 100),
          (le, ":random", "$g_misc_lord_random_build_chance"),
            (party_get_slot, ":fief_lord", ":cur_fief", slot_town_lord),
            (store_random_in_range, ":random_building", village_improvements_begin, village_improvements_end),
            (party_slot_eq, ":random_building", 0),
              (party_set_slot, ":cur_fief", ":random_building", 1),
                (assign, reg6, ":cur_fief"),
                (assign, reg7, ":fief_lord"),
                (assign, reg8, ":random_building"),
              (display_message, "@{reg7} completed the building of {reg8} in {reg6}."),
        (try_end),
        
        (try_for_range, ":cur_fief2", walled_centers_begin, walled_centers_end),
          (store_random_in_range, ":random", 0, 100),
          (le, ":random", "$g_misc_lord_random_build_chance"),
            (party_get_slot, ":fief_lord", ":cur_fief2", slot_town_lord),
            (store_random_in_range, ":random_building", walled_center_improvements_begin, walled_center_improvements_end),
            (party_slot_eq, ":random_building", 0),
              (party_set_slot, ":cur_fief2", ":random_building", 1),
                (assign, reg9, ":cur_fief2"),
                (assign, reg10, ":fief_lord"),
                (assign, reg11, ":random_building"),
              (display_message, "@{reg10} completed the building of {reg11} in {reg9}."),
        (try_end),
  ]),
#######################################################################################







##################################### TOWN MERC RESPAWN 
("town_merc_respawn",
    [        
        #fortified manor!
        (try_for_parties, ":party_id"),
          (party_get_template_id, ":party_template", ":party_id"),
          (eq, ":party_template", "pt_manor"),
          (party_slot_ge, ":party_id", manor_slot_Monastery_upgrade, manor_Monastery_teutons),
          (party_set_slot, ":party_id", slot_spec_mercs2_number, 1),
        (try_end),
        
        (try_for_range, ":village_no", walled_centers_begin, walled_centers_end),
          #manor monastery crusaders
          (try_begin),
            (party_get_slot, ":manor", ":village_no", village_slot_manor),
            (ge, ":manor", 1),
            (party_get_template_id, ":manor_template", ":manor"),
            (eq, ":manor_template", "pt_monastery"),
            (party_slot_ge, ":manor", manor_slot_Monastery_upgrade, manor_Monastery_teutons),
            (party_set_slot, ":manor", slot_spec_mercs2_number, 1),
          (try_end),      
          
          (party_set_slot, ":village_no", slot_regional_mercs_number, 1), #":merc_regional"),
          (party_set_slot, ":village_no", slot_spec_mercs1_number, 1), #":merc_spec1"),
          (party_set_slot, ":village_no", slot_spec_mercs2_number, 1),  
################### NEW
          (party_set_slot, ":village_no", slot_spec_mercs_number_genoese, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_turkopole, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_georgian, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_cuman, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_brabantine, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_sicily_muslims, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_welsh_kern, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_kipchak, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_mordovians, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_kwarezmian, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_mongol, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_finnish, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_gaelic, 1),

          (party_set_slot, ":village_no", slot_spec_mercs_number_teutonic, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_templar, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_hospitaller, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_saint_lazarus, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_santiago, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_calatrava, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_saint_thomas, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_varangian, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_mamluk, 1),
          
################### NEW FOR NPCs 
          (party_set_slot, ":village_no", slot_spec_mercs_number_genoese_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_turkopole_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_georgian_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_cuman_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_brabantine_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_sicily_muslims_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_welsh_kern_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_kipchak_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_mordovians_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_kwarezmian_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_mongol_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_finnish_npc, 2),
          (party_set_slot, ":village_no", slot_spec_mercs_number_gaelic_npc, 2),
                             
          (party_set_slot, ":village_no", slot_spec_mercs_number_teutonic_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_templar_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_hospitaller_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_saint_lazarus_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_santiago_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_calatrava_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_saint_thomas_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_varangian_npc, 1),
          (party_set_slot, ":village_no", slot_spec_mercs_number_mamluk_npc, 1),
######################################

          (party_set_slot, ":village_no", slot_regional_mercs_number_npc, 3), #":merc_regional"),
          (party_set_slot, ":village_no", slot_spec_mercs1_number_npc, 2), #":merc_spec1"),
          (party_set_slot, ":village_no", slot_spec_mercs2_number_npc, 1),  
          (call_script, "script_update_npc_volunteer_troops_in_village", ":village_no"),
       (try_end),
  ]),
#######################################################################################






##################################### GIVE VILLAGE ELDERS RANDOM MONEY
("give_village_elders_random_money",
    [        
       (try_for_range, ":village_no", village_elders_begin, village_elders_end),
          (store_random_in_range, ":random_gold", 300, 800),
          (call_script, "script_troop_add_gold", ":village_no", ":random_gold"),
       (try_end),
  ]),
#######################################################################################








#################################### BRYTENWALDA TAVERN BOUNTY
 ("random_bounty",
    [
      (store_script_param_1, ":giver_troop"),
     
      (store_troop_faction, ":giver_faction_no", ":giver_troop"),
     
      (troop_get_slot, ":giver_party_no", ":giver_troop", slot_troop_leaded_party),
     
      (assign, ":giver_center_no", -1),
      (try_begin),
        (gt, ":giver_party_no", 0),
        (party_get_attached_to, ":giver_center_no", ":giver_party_no"),
      (else_try),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (assign, ":giver_center_no", "$g_encountered_party"),
      (try_end),

     (try_begin),
       (eq, ":giver_faction_no", "fac_commoners"),
      (store_faction_of_party, ":giver_faction_no", ":giver_center_no"),
     (try_end),
     
      (assign, ":result", -1),
      # (try_for_range, ":unused", 0, 20), #Repeat trial twenty times
      (try_begin), 
        (eq, ":result", -1),
        (assign, ":quest_target_troop", -1),
        (assign, ":quest_target_center", -1),
        (assign, ":quest_target_faction", -1),
        (assign, ":quest_object_faction", -1),
        (assign, ":quest_object_troop", -1),
        (assign, ":quest_object_center", -1),
        (assign, ":quest_target_party", -1),
        (assign, ":quest_target_party_template", -1),
        (assign, ":quest_target_amount", -1),
        (assign, ":quest_target_dna", -1),
        (assign, ":quest_target_item", -1),
        (assign, ":quest_importance", 1),
        (assign, ":quest_xp_reward", 0),
        (assign, ":quest_gold_reward", 0),
        (assign, ":quest_convince_value", 0),
        (assign, ":quest_expiration_days", 0),
        (assign, ":quest_dont_give_again_period", 0),
        ############## NEW v3.9 - 
        # (store_random_in_range, ":quest_no", bounties_begin, bounties_end),
        # (neg|check_quest_active, ":quest_no"),
        # (neg|quest_slot_ge, ":quest_no", slot_quest_dont_give_again_remaining_days, 1),
        (try_begin),
          (neg|check_quest_active, "qst_bounty_1"),
          (neg|quest_slot_ge, "qst_bounty_1", slot_quest_dont_give_again_remaining_days, 1),
		    (assign, ":quest_no", "qst_bounty_1"),
        (else_try),
          (neg|check_quest_active, "qst_bounty_2"),
          (neg|quest_slot_ge, "qst_bounty_2", slot_quest_dont_give_again_remaining_days, 1),
		    (assign, ":quest_no", "qst_bounty_2"),
        (else_try),
          (neg|check_quest_active, "qst_bounty_3"),
          (neg|quest_slot_ge, "qst_bounty_3", slot_quest_dont_give_again_remaining_days, 1),
		    (assign, ":quest_no", "qst_bounty_3"),
        (else_try),
          (neg|check_quest_active, "qst_bounty_4"),
          (neg|quest_slot_ge, "qst_bounty_4", slot_quest_dont_give_again_remaining_days, 1),
		    (assign, ":quest_no", "qst_bounty_5"),
        (else_try),
          (neg|check_quest_active, "qst_bounty_5"),
          (neg|quest_slot_ge, "qst_bounty_5", slot_quest_dont_give_again_remaining_days, 1),
		    (assign, ":quest_no", "qst_bounty_5"),
        (else_try),
          (neg|check_quest_active, "qst_bounty_6"),
          (neg|quest_slot_ge, "qst_bounty_6", slot_quest_dont_give_again_remaining_days, 1),
		    (assign, ":quest_no", "qst_bounty_6"),
        (try_end),
        ############################
      (try_begin),
          (eq, ":quest_no", "qst_bounty_1"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 20),
            (assign, ":quest_dont_give_again_period", 0),
          (try_end),
      (else_try),
          (eq, ":quest_no", "qst_bounty_2"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 20),
            (assign, ":quest_dont_give_again_period", 0),
          (try_end),
      (else_try),
          (eq, ":quest_no", "qst_bounty_3"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 20),
            (assign, ":quest_dont_give_again_period", 0),
          (try_end),
      (else_try),
          (eq, ":quest_no", "qst_bounty_4"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 20),
            (assign, ":quest_dont_give_again_period", 0),
          (try_end),
      (else_try),
          (eq, ":quest_no", "qst_bounty_5"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 20),
            (assign, ":quest_dont_give_again_period", 0),
          (try_end),
      (else_try),
          (eq, ":quest_no", "qst_bounty_6"),
          (try_begin),
            (ge, "$g_talk_troop_faction_relation", 0),
            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
            (assign, ":quest_target_center", reg0),
            (store_random_in_range, ":quest_target_dna", 0, 1000000),
            (assign, ":result", ":quest_no"),
            (assign, ":quest_expiration_days", 20),
            (assign, ":quest_dont_give_again_period", 0),
          (try_end),
      (try_end),
      (try_end),
      (try_begin),
        (neq, ":result", -1),
       
        (try_begin),
          (ge, ":quest_target_center", 0),
          (store_faction_of_party, ":quest_target_faction", ":quest_target_center"),
        (try_end),
       
        (quest_set_slot, ":result", slot_quest_target_troop, ":quest_target_troop"),
        (quest_set_slot, ":result", slot_quest_target_center, ":quest_target_center"),
        (quest_set_slot, ":result", slot_quest_object_troop, ":quest_object_troop"),
        (quest_set_slot, ":result", slot_quest_target_faction, ":quest_target_faction"),
        (quest_set_slot, ":result", slot_quest_object_faction, ":quest_object_faction"),
        (quest_set_slot, ":result", slot_quest_object_center, ":quest_object_center"),
        (quest_set_slot, ":result", slot_quest_target_party, ":quest_target_party"),
        (quest_set_slot, ":result", slot_quest_target_party_template, ":quest_target_party_template"),
        (quest_set_slot, ":result", slot_quest_target_amount, ":quest_target_amount"),
        (quest_set_slot, ":result", slot_quest_importance, ":quest_importance"),
        (quest_set_slot, ":result", slot_quest_xp_reward, ":quest_xp_reward"),
        (quest_set_slot, ":result", slot_quest_gold_reward, ":quest_gold_reward"),
        (quest_set_slot, ":result", slot_quest_convince_value, ":quest_convince_value"),
        (quest_set_slot, ":result", slot_quest_expiration_days, ":quest_expiration_days"),
        (quest_set_slot, ":result", slot_quest_dont_give_again_period, ":quest_dont_give_again_period"),
        (quest_set_slot, ":result", slot_quest_current_state, 0),
        (quest_set_slot, ":result", slot_quest_giver_troop, ":giver_troop"),
        (quest_set_slot, ":result", slot_quest_giver_center, ":giver_center_no"),
        (quest_set_slot, ":result", slot_quest_target_dna, ":quest_target_dna"),
        (quest_set_slot, ":result", slot_quest_target_item, ":quest_target_item"),
      (try_end),
     
      (assign, reg0, ":result"),
  ]),
  
  
################## those new scripts are needed to link to the town the quest was taken
    # INPUT: arg1 = quest_no
    # OUTPUT: none
    ("succeed_quest_bounty",
      [
        (store_script_param, ":quest_no", 1),
        (succeed_quest, ":quest_no"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (str_store_troop_name, s59, ":quest_giver_troop"),
        (try_begin),
          (eq, ":quest_no", "qst_bounty_1"),
          (str_store_party_name_link, s60, "$g_bounty_town_1"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_2"),
          (str_store_party_name_link, s60, "$g_bounty_town_2"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_3"),
          (str_store_party_name_link, s60, "$g_bounty_town_3"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_4"),
          (str_store_party_name_link, s60, "$g_bounty_town_4"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_5"),
          (str_store_party_name_link, s60, "$g_bounty_town_5"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_6"),
          (str_store_party_name_link, s60, "$g_bounty_town_6"),
        (try_end),
        (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has been successfully completed. Talk to {s59} in {s60} to claim your reward.", 0),
    ]),
    
    # INPUT: arg1 = quest_no
    # OUTPUT: none
    ("fail_quest_bounty",
      [
        (store_script_param, ":quest_no", 1),
        (fail_quest, ":quest_no"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (str_store_troop_name, s59, ":quest_giver_troop"),
        (try_begin),
          (eq, ":quest_no", "qst_bounty_1"),
          (str_store_party_name_link, s60, "$g_bounty_town_1"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_2"),
          (str_store_party_name_link, s60, "$g_bounty_town_2"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_3"),
          (str_store_party_name_link, s60, "$g_bounty_town_3"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_4"),
          (str_store_party_name_link, s60, "$g_bounty_town_4"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_5"),
          (str_store_party_name_link, s60, "$g_bounty_town_5"),
        (else_try),
          (eq, ":quest_no", "qst_bounty_6"),
          (str_store_party_name_link, s60, "$g_bounty_town_6"),
        (try_end),
        (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has failed. Talk to {s59} in {s60} to explain the situation.", 0),
    ]),
#######################################################################################







################################## USED TO GET A MERC USING NEW IMPROVEMENT SYSTEM
    ("fill_company_new",
      [
        (store_script_param, ":center", 1), #to recruit from
        (store_script_param, ":party", 2), #to add recruits to
        (store_script_param, ":current_mercs", 3), #NEW

        # (assign, ":company_template", "pt_generic_euro"),
        # (try_begin),
          # (eq, ":merc_slot", slot_regional_mercs),
          # (party_get_slot, ":company_template", ":center", slot_regional_party_template),                                                             
        # (else_try),
          # (eq, ":merc_slot", slot_spec_mercs1),
          # (party_get_slot, ":company_template", ":center", slot_spec_mercs1_party_template),
        # (else_try),
          # (eq, ":merc_slot", slot_spec_mercs2),
          # (party_get_slot, ":company_template", ":center", slot_spec_mercs2_party_template),
        # (try_end),
        
        (party_add_template, ":party", ":current_mercs"),
      ]
    ),
#######################################################################################




################################## NEW POPULATION SYSTEM
    ("population_init",
      [
      (try_for_range, ":town_no", towns_begin, towns_end),
          (try_begin),
            (store_random_in_range, ":random_pop", 15000, 30000),
            (party_set_slot, ":town_no", slot_center_population, ":random_pop"),
            (party_set_slot, ":town_no", slot_center_population_max, 30000),
          (try_end),      
      (try_end),    
      
      (try_for_range, ":castle_no", castles_begin, castles_end),
          (try_begin),
            (store_random_in_range, ":random_pop", 1500, 3000),
            (party_set_slot, ":castle_no", slot_center_population, ":random_pop"),
            (party_set_slot, ":castle_no", slot_center_population_max, 3000),
          (try_end),      
      (try_end),
      
      (try_for_range, ":village_no", villages_begin, villages_end),
          (try_begin),
            (store_random_in_range, ":random_pop", 600, 1000),
            (party_set_slot, ":village_no", slot_center_population, ":random_pop"),
            (party_set_slot, ":village_no", slot_center_population_max, 1000),
          (try_end),      
      (try_end),      
      ]
    ),
#######################################################################################






################################# POPULATION CALC
    # ("do_population_math",
      # [
      # (try_for_range, ":village_no", towns_begin, towns_end),
          # (try_begin),
            # (store_random_in_range, ":random_pop", 15000, 30000)
            # (party_set_slot, ":village_no", slot_center_population, ":random_pop"),
            # (party_set_slot, ":village_no", slot_center_population_max, 30000),
          # (try_end),      
      # (try_end),    
      
      # (try_for_range, ":village_no", castles_begin, castles_end),
          # (try_begin),
            # (store_random_in_range, ":random_pop", 1500, 3000)
            # (party_set_slot, ":village_no", slot_center_population, ":random_pop"),
            # (party_set_slot, ":village_no", slot_center_population_max, 3000),
          # (try_end),      
      # (try_end),
      
      # (try_for_range, ":village_no", villages_begin, villages_end),
          # (try_begin),
            # (store_random_in_range, ":random_pop", 600, 1000)
            # (party_set_slot, ":village_no", slot_center_population, ":random_pop"),
            # (party_set_slot, ":village_no", slot_center_population_max, 1000),
          # (try_end),      
      # (try_end),      
      # ]
    # ),
#######################################################################################




################################# MINE CALCULATE INCOME
    # ("mine_income_calc",
      # [
      # (store_script_param, ":fief_id", 1),
      
      # (try_begin),
        # (party_get_slot, ":pop_count" ":fief_id", slot_center_population),
        # (store_div, ":income_amount", ":pop_count", 50),
      # (try_end),    
      # ]
    # ),
#######################################################################################







#############################
 #############################
 ("get_message_color",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":troop_id", 2),      
    (gt, ":troop_id", 0),
    (assign, reg20, 4294967295),
    (assign, ":rgb_code", reg20),
    (try_begin),
      (gt, "$players_kingdom", 0),
      (assign, ":player_faction", "$players_kingdom"),
    (else_try),
      (store_faction_of_troop, ":player_faction", "trp_player"),
    (try_end),
    
    (try_begin),
    ############# THIS IS USED FOR LORD DEFEAT MESSAGES
      (eq, ":event_type", 1),
      (store_faction_of_troop, ":troop_faction", ":troop_id"),
      (try_begin),
        (eq, ":troop_faction", ":player_faction"),
        (assign, ":rgb_code", 16732240),  ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":troop_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 5308240), ########## GREEN
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
      
      
############# THIS IS USED FOR LORD CAPTURE MESSAGES
    (else_try),
      (eq, ":event_type", 2),
      (store_faction_of_troop, ":troop_faction", ":troop_id"),
      (try_begin),
        (eq, ":troop_faction", ":player_faction"),
        (assign, ":rgb_code", 16720418), ########## VERY RED
      (else_try),
        (store_relation, ":faction_relation", ":troop_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 65280), ########## VERY GREEN
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##########################

      
############### THIS IS USED FOR LORD FREED MESSAGES
    (else_try),
      (this_or_next|eq, ":event_type", 3),
      (eq, ":event_type", 4),
      (store_faction_of_troop, ":troop_faction", ":troop_id"),
      (try_begin),
        (eq, ":troop_faction", ":player_faction"),
        (assign, ":rgb_code", 65280), ########## VERY GREEN
      (else_try),
        (store_relation, ":faction_relation", ":troop_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 16720418), ########## VERY RED
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##########################
      
      
      
##########################
    (else_try),
      (eq, ":event_type", 5),
      (store_faction_of_troop, ":faction", ":troop_id"),
      (try_begin),
        (eq, ":faction", ":player_faction"),
        (assign, ":rgb_code", 16732240),   ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 5308240), ########## GREEN
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##########################
      
##########################
    (else_try),
      (eq, ":event_type", 6),
      (store_faction_of_troop, ":faction2", ":troop_id"),
      (try_begin),
        (eq, ":faction2", ":player_faction"),
        (assign, ":rgb_code", 16720418), ########## VERY RED
      (else_try),
        (store_relation, ":faction_relation", ":faction2", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 65280), ########## VERY GREEN
      (else_try),
        (assign, ":rgb_code", 6737151), ########## LIGHT BLUE
      (try_end),
##########################
      
      
      
############### THIS IS USED FOR SIEGE START MESSAGES
    (else_try),
      (eq, ":event_type", 7),
      (store_faction_of_troop, ":faction", ":troop_id"),
      (try_begin),
        (eq, ":faction", ":player_faction"),
        (assign, ":rgb_code", 16732240),   ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 5308240), ########## GREEN
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##############################


     
############### THIS IS FOR MESSAGES THAT HAVE TWO OUTCOMES (GOOD = GREEN, BAD = RED)
    (else_try),
      (eq, ":event_type", 9),
      (try_begin),
        (eq, reg0, 1),
        (assign, ":rgb_code", 5308240), ########## GREEN
      (else_try),
        (assign, ":rgb_code", 16732240),   ########## RED
      (try_end),
##############################
    (try_end),
    (assign, reg20, ":rgb_code"),
  ]),
  
  
  
  
############### THIS IS USED FOR FIEF RAID MESSAGES
 ("get_message_color_raid",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":troop_id", 2),
    (store_script_param, ":fief_faction_id", 3),
    (assign, reg20, 4294967295),
    (assign, ":rgb_code", reg20),
    (try_begin),
      (gt, "$players_kingdom", 0),
      (assign, ":player_faction", "$players_kingdom"),
    (else_try),
      (store_faction_of_troop, ":player_faction", "trp_player"),
    (try_end),
    
    (try_begin),
      (eq, ":event_type", 8),
      (store_faction_of_troop, ":faction", ":troop_id"),
      (try_begin),
        (eq, ":faction", ":player_faction"),
        (assign, ":rgb_code", 5308240), ########## GREEN
      (else_try),
        (neq, ":fief_faction_id", ":player_faction"), ########## ORANGE ; "NOT MINE SO I DON'T CARE"
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (else_try),
        (eq, ":fief_faction_id", ":player_faction"), 
        (store_relation, ":faction_relation", ":faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (assign, ":rgb_code", 16732240),   ########## RED
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##########################
    (try_end),
    (assign, reg20, ":rgb_code"),
  ]),
#######################################################################################




  
############### THIS IS USED FOR FIEF SIEGE LIFT MESSAGES
 ("get_message_color_siege",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":besieging_faction", 2),
    (store_script_param, ":besieged_faction", 3),
    (assign, reg20, 4294967295),
    (assign, ":rgb_code", reg20),
    (try_begin),
      (gt, "$players_kingdom", 0),
      (assign, ":player_faction", "$players_kingdom"),
    (else_try),
      (store_faction_of_troop, ":player_faction", "trp_player"),
    (try_end),
    
    (try_begin),
      (eq, ":event_type", 8),
      (try_begin),
        (eq, ":besieging_faction", ":player_faction"),
        (assign, ":rgb_code", 16732240), ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":besieging_faction", ":player_faction"),
        (ge, ":faction_relation", 10),
        (assign, ":rgb_code", 16732240), ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":besieged_faction", ":player_faction"),
        (store_relation, ":faction_relation2", ":besieging_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (ge, ":faction_relation2", -5),
        (assign, ":rgb_code", 5308240),   ########## GREEN
      (else_try),      
        (store_relation, ":faction_relation", ":besieged_faction", ":player_faction"),
        (store_relation, ":faction_relation2", ":besieging_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (lt, ":faction_relation2", -5),
          (assign, ":rgb_code", 0x0000FF),   ########## BLUE - defeated faction is our enemy but the winning faction also is
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##########################
    (try_end),
    (assign, reg20, ":rgb_code"),
  ]),
#######################################################################################





############### THIS IS FOR REBELLION MESSAGES 
 ("get_message_color_rebels",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":faction_id", 2),
    (assign, reg20, 4294967295),
    (assign, ":rgb_code", reg20),
    (try_begin),
      (gt, "$players_kingdom", 0),
      (assign, ":player_faction", "$players_kingdom"),
    (else_try),
      (store_faction_of_troop, ":player_faction", "trp_player"),
    (try_end),

    (try_begin),
      (eq, ":event_type", 10),
      (try_begin),
        (eq, ":faction_id", ":player_faction"),
          (assign, ":rgb_code", 16732240), ########## RED
      (else_try),
        (neq, ":faction_id", ":player_faction"), ########## ORANGE ; "NOT MINE SO I DON'T CARE"
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.1 - changed to white
      (else_try),
        (eq, ":faction_id", ":player_faction"), 
          (store_relation, ":faction_relation", ":faction_id", ":player_faction"),
          (lt, ":faction_relation", -5),
            (assign, ":rgb_code", 5308240),   ########## GREEN
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##############################
    (try_end),
    (assign, reg20, ":rgb_code"),
  ]),
#######################################################################################


  
############### THIS IS USED FOR FIEF SIEGE CAPTURE MESSAGES
 ("get_message_color_siege_win",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":besieging_faction", 2),
    (store_script_param, ":besieged_faction", 3),
    (assign, reg20, 4294967295),
    (assign, ":rgb_code", reg20),
    (try_begin),
      (gt, "$players_kingdom", 0),
      (assign, ":player_faction", "$players_kingdom"),
    (else_try),
      (store_faction_of_troop, ":player_faction", "trp_player"),
    (try_end),
    
    (try_begin),
      (eq, ":event_type", 8),
      (try_begin),
        (eq, ":besieged_faction", ":player_faction"),
        (assign, ":rgb_code", 16732240), ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":besieged_faction", ":player_faction"),
        (ge, ":faction_relation", 10),
        (assign, ":rgb_code", 16732240), ########## RED
      (else_try),
        (store_relation, ":faction_relation", ":besieged_faction", ":player_faction"),
        (store_relation, ":faction_relation2", ":besieging_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (ge, ":faction_relation2", -5),
          (assign, ":rgb_code", 5308240),   ########## GREEN
      (else_try),
        (store_relation, ":faction_relation", ":besieged_faction", ":player_faction"),
        (store_relation, ":faction_relation2", ":besieging_faction", ":player_faction"),
        (lt, ":faction_relation", -5),
        (lt, ":faction_relation2", -5),
          (assign, ":rgb_code", 0x0000FF),   ########## BLUE - defeated faction is our enemy but the winning faction also is
      (else_try),
        # (assign, ":rgb_code", 16763904), ########## NEW v3.1 - changed to yellow
        (assign, ":rgb_code", 16777215), ########## NEW v3.5 - changed to white
      (try_end),
##########################
    (try_end),
    (assign, reg20, ":rgb_code"),
  ]),
#######################################################################################









################################## DIPLOMACY PATROLS
("dplmc_move_troops_party",
[
(store_script_param, ":start_party", 1),
(store_script_param, ":target_party", 2),
(store_script_param, ":party_no", 3),
(store_script_param, ":template_faction", 4),
(store_script_param, ":order_troop", 5), #FLORIS BUGFIX

(set_spawn_radius, 1),
(spawn_around_party, ":start_party", "pt_patrol_party"),
(assign, ":spawned_party",reg0),
(party_set_faction, ":spawned_party", ":template_faction"),
(party_set_slot, ":spawned_party", slot_party_type, spt_patrol),
(party_set_slot, ":spawned_party", slot_party_home_center, ":start_party"),
(party_set_slot, ":spawned_party", dplmc_slot_party_mission_diplomacy, ":order_troop"), #FLORIS BUGFIX
(str_store_party_name, s5, ":target_party"),
(party_set_name, ":spawned_party", "@Transfer to {s5}"),

(party_set_ai_behavior, ":spawned_party", ai_bhvr_travel_to_party),
(party_set_ai_object, ":spawned_party", ":target_party"),
(party_set_slot, ":spawned_party", slot_party_ai_object, ":target_party"),
(party_set_slot, ":spawned_party", slot_party_ai_state, spai_retreating_to_center),
(party_set_aggressiveness, ":spawned_party", 2),
(party_set_courage, ":spawned_party", 3),
(party_set_ai_initiative, ":spawned_party", 100),

(call_script, "script_party_add_party", ":spawned_party", ":party_no"),
]),
  
  
  
  
# ("dplmc_send_scout_party",
  # [
    # (store_script_param, ":start_party", 1),
    # (store_script_param, ":target_party", 2),
    # (store_script_param, ":faction", 3),

    # (set_spawn_radius, 1),
    # (spawn_around_party, ":start_party", "pt_scout_party"),
    # (assign, ":spawned_party",reg0),
    # (party_set_faction, ":spawned_party", ":faction"),
    # (party_set_slot, ":spawned_party", slot_party_type, spt_scout),
    # (party_set_slot, ":spawned_party", slot_party_home_center, ":start_party"),
    # (str_store_party_name, s5, ":target_party"),
    # (party_set_name, ":spawned_party", "@{s5} scout"),

    # (party_add_members, ":spawned_party", "trp_dplmc_scout", 1),

    # (party_get_position, pos1, ":target_party"),
    # (map_get_random_position_around_position, pos2, pos1, 1),
    # (party_set_ai_behavior, ":spawned_party", ai_bhvr_travel_to_point),
    # (party_set_ai_target_position, ":spawned_party", pos2),
    # (party_set_slot, ":spawned_party", slot_party_ai_object, ":target_party"),
    # (party_set_slot, ":spawned_party", slot_party_orders_object, ":target_party"),
    # (party_set_aggressiveness, ":spawned_party", 0),
    # (party_set_courage, ":spawned_party", 3),
    # (party_set_ai_initiative, ":spawned_party", 100),
# ]),
##########################################################




########################################################################################
## FORAGING v1.0 #######################################################################
  ## Script food_consumption_display_message
  ## display food consumption
  ## use reg1 and reg2 and reg4 from forage
  ## hooked in simple trigger for food consumption every 14 hours
  ("food_consumption_display_message",
   [
    (store_script_param, ":consumption_amount", 1),

    (gt, ":consumption_amount", 0),  #### NEW v1.9 - bugfix
    (assign, reg1, ":consumption_amount"),
    # Display day of food left with current amount and party size
    (assign, ":available_food", 0),
    (troop_get_inventory_capacity, ":capacity", "trp_player"),
    (try_for_range, ":cur_slot", 0, ":capacity"),
      (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
      (try_begin),
        (is_between, ":cur_item", food_begin, food_end),
        (troop_get_inventory_slot_modifier, ":item_modifier", "trp_player", ":cur_slot"),
        (neq, ":item_modifier", imod_rotten),
        (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":cur_slot"),
        (val_add, ":available_food", ":cur_amount"),
      (try_end),
    (try_end),
   
    (assign, ":num_food_hours", ":available_food"),
    (val_mul, ":num_food_hours", 12),
    (val_div, ":num_food_hours", 24),
    (val_div, ":num_food_hours", ":consumption_amount"),
    (assign, ":num_food_days", ":num_food_hours"),
    (assign, reg2, ":num_food_days"),
   
    (try_begin),
      (lt, reg2, 4),
      (display_message, "@Your party consumed {reg1} units of food{reg4?, {reg4} from foraging : }({reg2} days left).", 0xFF0000),
    (else_try),
      (display_message, "@Your party consumed {reg1} units of food{reg4?, {reg4} from foraging : }({reg2} days left)."),
    (try_end),
   ]),

  # Script forage_for_food
  # Compute foraging amount
  # use s2, reg0, reg1 and reg10
  # for DEBUG, use s1 and reg11
  # use reg4 for return value
  ("forage_for_food",
   [
        # Get max skill in party for foraging
        (call_script, "script_get_max_skill_of_player_party", "skl_foraging"),
        (assign, ":max_foraging_in_party", reg0),
        (assign, ":max_skill_owner", reg1),

        # Initialize foraged food amount and register
        (assign, ":foraged_food", 0),
        (assign, reg4, 0),
       
        (try_begin),
          # stop if no-one has foraging skill
          (gt, ":max_foraging_in_party", 0),

          (try_begin),
            # set limits and range for foraging
            (assign,  ":foraging_limit", ":max_foraging_in_party"),
            (val_mul, ":foraging_limit", 5),
            (assign,  ":foraging_distance", ":max_foraging_in_party"),
            (val_mul, ":foraging_distance", 2),

            # Check distance from village or town
            (try_for_parties, ":foraging_site"),
              (assign, ":foraged_food_at_site", 0),
              (this_or_next|party_slot_eq, ":foraging_site", slot_party_type, spt_town),
              (party_slot_eq, ":foraging_site", slot_party_type, spt_village),
              (neg|party_slot_eq, ":foraging_site", slot_village_state, svs_looted), # no foraging from looted village

              # Compute center distance to party
              (store_distance_to_party_from_party, ":distance", ":foraging_site", "p_main_party"),
              (try_begin),
                (le, ":distance", ":foraging_distance"), # we can forage from this center

                # Forage from fields
                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_acres_grain),
                (val_div, ":temp_forage", 1000), # 500 was too low, try 1000
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_acres_vineyard),
                (val_div, ":temp_forage", 800), # 400 was too low, try 800
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_acres_vineyard), # second time for fruits
                (val_div, ":temp_forage", 1000), # 500 was too low, try 1000
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_acres_olives),
                (val_div, ":temp_forage", 1200), # 600 was too low, try 1200
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_acres_dates),
                (val_div, ":temp_forage", 960), # 480 was to low, try 960
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                # Forage from herds
                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_head_cattle),
                (val_div, ":temp_forage", 36),
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_head_sheep),
                (val_div, ":temp_forage", 60),
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                # Forage from gardens and apiaries
                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_household_gardens),
                (val_add, ":foraged_food_at_site", 2),

                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_apiaries),
                (val_add, ":foraged_food_at_site", 1),
 
                # Forage game in traps
                (party_get_slot, ":temp_forage", ":foraging_site", slot_center_fur_traps),
                (val_add, ":foraged_food_at_site", ":temp_forage"),

                # Add amount foraged off the center to the total
                (val_add, ":foraged_food", ":foraged_food_at_site"),

                # DEBUG message to tweak values, uncomment to display
                #(str_store_party_name, s1, ":foraging_site"),
                #(assign, reg11, ":foraged_food_at_site"),
                #(display_message, "@DEBUG foraging: foraged {reg11} units from {s1}.", 0xFF00FF),
              (try_end),
            (try_end), # end of centers loop

            # Check terrain for foraging from the countryside
            (party_get_current_terrain, ":cur_terrain", "p_main_party"),
            (try_begin),
              (is_between, ":cur_terrain", rt_bridge, rt_desert_forest),
              (assign, reg10, 4),
            (else_try),
              (is_between, ":cur_terrain", rt_steppe, rt_plain),
              (assign, reg10, 2),
            (else_try),
              (assign, reg10, 0),
            (try_end),

            # Add foraged amount from countryside to total amount
            (val_add, ":foraged_food", reg10),

            # DEBUG message to tweak values, uncomment to display
            #(display_message, "@DEBUG foraging: foraged {reg10} units from countryside.", 0xFF00FF),

            # Tier Multiplier, foraging value multiplied by foraging skill tier bonus
            # Represent experience, less time to find forage means more food foraged
            (try_begin),
              # between 2-4, x1.5 bonus
              (gt, ":max_foraging_in_party", 1),
              (lt, ":max_foraging_in_party", 5),
              (val_mul, ":foraged_food", 3),
              (val_div, ":foraged_food", 2),
            (else_try),
              # between 5-7, x2 bonus
              (gt, ":max_foraging_in_party", 4),
              (lt, ":max_foraging_in_party"),
              (val_mul, ":foraged_food", 2),
            (else_try),
              # between 8-9, x2.5 bonus
              (gt, ":max_foraging_in_party", 7),
              (lt, ":max_foraging_in_party", 10),
              (val_mul, ":foraged_food", 5),
              (val_div, ":foraged_food", 2),
            (else_try),
              # 10 and more, x3 bonus
              (ge, ":max_foraging_in_party", 10),
              (val_mul, ":foraged_food", 3),
            (try_end),

            # Apply Camp bonus x1.5 (represent more time to forage)
            (try_begin),
              #(this_or_next|ge, "$current_camp_party", -1), # uncomment if using Entrenchment
              (this_or_next|eq, "$g_camp_mode", 1),
              (eq, "$g_siege_force_wait", 1),
              (val_mul, ":foraged_food", 3),
              (val_div, ":foraged_food", 2),       
            (try_end),

            # Apply foraging limit according to skill level (modified by party bonus)
            (try_begin),
              (gt, ":foraged_food", ":foraging_limit"),
              (assign, ":foraged_food", ":foraging_limit"),
            (try_end),

            # assign amount foraged to register to deduct from party consumption
            (assign, reg4, ":foraged_food"),

            # End of foraging message
            (try_begin),
              (gt, ":foraged_food", 0),
              (str_store_troop_name, s2, ":max_skill_owner"),
              (display_message, "@{s2} managed to forage {reg4} units of food to complement supplies.", 0x00FF00),
            (try_end),
          (try_end),
        (try_end),
   ]),
## Jrider -
##################################################################





############################### INITIAL BATTLE POSITIONS
  ("battle_pos_init",
  [
    # (display_message, "@Forming ranks."),
    (get_player_agent_no, "$fplayer_agent_no"),
    (agent_get_team, "$fplayer_team_no", "$fplayer_agent_no"),
    (set_show_messages, 0),
    (call_script, "script_player_order_formations", 2),
    (team_give_order, "$fplayer_team_no", 9, 0),
    (agent_get_position, pos1, "$fplayer_agent_no"),
    (position_move_x, 1, -4000),
    (team_set_order_position, "$fplayer_team_no", 2, pos1),
    (team_give_order, "$fplayer_team_no", 2, 7),
    (team_give_order, "$fplayer_team_no", 2, 7),
    (team_give_order, "$fplayer_team_no", 2, 3),
    (agent_get_position, pos1, "$fplayer_agent_no"),
    (position_move_y, pos1, 2500),
    (team_set_order_position, "$fplayer_team_no", 0, pos1),
    (team_give_order, "$fplayer_team_no", 0, 7),
    (team_give_order, "$fplayer_team_no", 0, 7),
    (agent_get_position, pos1, "$fplayer_agent_no"),
    (position_move_y, pos1, 1000),
    (team_set_order_position, "$fplayer_team_no", 1, pos1),
    (team_give_order, "$fplayer_team_no", 1, 7),
    (agent_get_position, pos1, "$fplayer_agent_no"),
    (position_move_x, 1, 4000),
    (position_move_y, pos1, -500),
    (try_for_range, reg0, 3, 9),
      (team_give_order, "$fplayer_team_no", reg0, 7),
      (team_set_order_position, "$fplayer_team_no", reg0, pos1),
    (try_end),
    (set_show_messages, 1),
  ]),

  
  
################### executed when hold order is issue
  ("battle_pos_hold",
  [
    (store_script_param, ":pos", 1),
    # (display_message, "@Forming ranks."),
    (get_player_agent_no, "$fplayer_agent_no"),
    (agent_get_team, "$fplayer_team_no", "$fplayer_agent_no"),
    (set_show_messages, 0),
    (call_script, "script_player_order_formations", 2),
    (team_give_order, "$fplayer_team_no", 9, 0),
    (position_move_x, 1, -4000),
    (team_set_order_position, "$fplayer_team_no", 2, ":pos"),
    (team_give_order, "$fplayer_team_no", 2, 7),
    (team_give_order, "$fplayer_team_no", 2, 7),
    (team_give_order, "$fplayer_team_no", 2, 3),
    (position_move_y, pos1, 2500),
    (team_set_order_position, "$fplayer_team_no", 0, ":pos"),
    (team_give_order, "$fplayer_team_no", 0, 7),
    (team_give_order, "$fplayer_team_no", 0, 7),
    (position_move_y, pos1, 1000),
    (team_set_order_position, "$fplayer_team_no", 1, ":pos"),
    (team_give_order, "$fplayer_team_no", 1, 7),
    (position_move_x, 1, 4000),
    (position_move_y, ":pos", -500),
    (try_for_range, reg0, 3, 9),
      (team_give_order, "$fplayer_team_no", reg0, 7),
      (team_set_order_position, "$fplayer_team_no", reg0, ":pos"),
    (try_end),
    (set_show_messages, 1),
  ]),
##################################################################



##################################################################
  ("recalculate_ais_for_faction",
  [
    (store_script_param, ":cur_faction", 1),
    # (str_store_faction_name, s2, ":cur_faction"),
    # (display_message, "@recalculate_ais_for_faction for {s2}"),
    (call_script, "script_decide_faction_ai", ":cur_faction"),
    # (try_for_range, ":cur_npc", "trp_npc1", "trp_knight_1_1_wife"),
    (try_for_range, ":cur_npc", "trp_npc1", "trp_enhanced_rnd_lord_end"),  ######## NEW v3.8
      (troop_slot_eq, ":cur_npc", slot_troop_is_alive, 1),  ### is alive
      (troop_slot_eq, ":cur_npc", slot_troop_occupation, slto_kingdom_hero),
      (store_faction_of_troop, ":cur_npc_faction", ":cur_npc"),
      (eq, ":cur_npc_faction", ":cur_faction"),
      # (str_store_troop_name, s3, ":cur_npc"),
      # (display_message, "@recalculate_ais_for_faction troop for {s3}"),
      (call_script, "script_calculate_troop_ai", ":cur_npc"),
    (try_end),
  ]),
##################################################################



##################################################################
  ("xgm_get_skill_modifier_for_troop_by_items",
  [
    (store_script_param, ":var0", 1),
    (store_script_param, ":var1", 2),
    (assign, ":var2", 0),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_tracking"),
      (this_or_next|eq, ":var1", "skl_foraging"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_tracking"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_foraging"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_spotting"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_spotting"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_spotting"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_spotting"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_spotting"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_spotting"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_spotting"),
      (this_or_next|eq, ":var1", "skl_pathfinding"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_spotting"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_pathfinding"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_ironflesh"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_ironflesh"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_ironflesh"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_ironflesh"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_ironflesh"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_ironflesh"),
        (store_mul, ":var5", 3, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_ironflesh"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_ironflesh"),
        (store_mul, ":var5", 4, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_athletics"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_athletics"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_athletics"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_athletics"),
        (store_mul, ":var5", 2, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_trade"),
      (this_or_next|eq, ":var1", "skl_inventory_management"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_trade"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_inventory_management"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":var1", "skl_wound_treatment"),
      (this_or_next|eq, ":var1", "skl_surgery"),
      (neq, 1, 1),
      (assign, ":var3", 0),
      (assign, ":var4", 0),
      (val_add, ":var3", ":var4"),
      (try_begin),
        (gt, ":var3", 1),
        (assign, ":var3", 1),
      (try_end),
      (gt, ":var3", 0),
      (try_begin),
        (neq, 1, 1),
      (else_try),
        (eq, ":var1", "skl_wound_treatment"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (else_try),
        (eq, ":var1", "skl_surgery"),
        (store_mul, ":var5", 1, ":var3"),
        (val_add, ":var2", ":var5"),
      (try_end),
    (try_end),
    (assign, reg0, ":var2"),
  ]),
  
  
  ("xgm_get_skill_modifier_for_troop_by_item_sets",
  [
    (store_script_param, ":var0", 1),
    (store_script_param, ":var1", 2),
    (assign, ":var2", 0),
    (assign, reg0, ":var2"),
  ]),
##################################################################





################################ NEW v1.8 - Script to process sieges called from simple triggers
  ("process_sieges_new",
  [
    (store_script_param, ":center_no", 1),
      #####diplomacy start+
      (assign, ":save_reg0", reg0),########Save registers
      (assign, ":save_reg1", reg1),
      #####diplomacy end+
      (try_begin),
        (party_get_slot, ":besieger_party", ":center_no", slot_center_is_besieged_by),
        (gt, ":besieger_party", 0),
        (party_is_active, ":besieger_party"),
        (store_current_hours, ":cur_hours"),
        (store_faction_of_party, ":besieger_faction", ":besieger_party"),
        (party_slot_ge, ":center_no", slot_center_is_besieged_by, 1),
        (party_get_slot, ":siege_begin_hours", ":center_no", slot_center_siege_begin_hours),
        (store_sub, ":siege_begin_hours", ":cur_hours", ":siege_begin_hours"),
        (assign, ":launch_attack", 0),
        (assign, ":call_attack_back", 0),
        (assign, ":attacker_strength", 0),
        (assign, ":marshall_attacking", 0),
        (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
          (troop_slot_eq, ":troop_no", slot_troop_is_alive, 1),  #### NEW v2.7
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
          (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
          (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
          (gt, ":party_no", 0),
          (party_is_active, ":party_no"),
          (store_troop_faction, ":troop_faction_no", ":troop_no"),
          (eq, ":troop_faction_no", ":besieger_faction"),
          (assign, ":continue", 0),
          (try_begin),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_besieging_center),
            (party_slot_eq, ":party_no", slot_party_ai_object, ":center_no"),
            (assign, ":continue", 1),
          (else_try),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_accompanying_army),
            (party_get_slot, ":commander_party", ":party_no", slot_party_ai_object),
            (gt, ":commander_party", 0),
            (party_is_active, ":commander_party"),
            (party_slot_eq, ":commander_party", slot_party_ai_state, spai_besieging_center),
            (party_slot_eq, ":commander_party", slot_party_ai_object, ":center_no"),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (party_get_battle_opponent, ":opponent", ":party_no"),
          (this_or_next|lt, ":opponent", 0),
          (eq, ":opponent", ":center_no"),
          (try_begin),
            (faction_slot_eq, ":besieger_faction", slot_faction_marshall, ":troop_no"),
            (assign, ":marshall_attacking", 1),
          (try_end),
          # (call_script, "script_party_calculate_regular_strength", ":party_no"),
          (call_script, "script_party_calculate_strength", ":party_no", 0), ####### NEW v2.6
          (val_add, ":attacker_strength", reg0),
        (try_end),
        
        (try_begin),
          (gt, ":attacker_strength", 0),
          (party_collect_attachments_to_party, ":center_no", "p_collective_enemy"),
          (call_script, "script_party_calculate_regular_strength", "p_collective_enemy"),
          (assign, ":defender_strength", reg0),
          (try_begin),
            (eq, "$auto_enter_town", ":center_no"),
            (eq, "$g_player_is_captive", 0),
            (call_script, "script_party_calculate_regular_strength", "p_main_party"),
            (val_add, ":defender_strength", reg0),
            (val_mul, ":attacker_strength", 2), ########double the power of attackers if the player is in the campaign
          (try_end),
          (party_get_slot, ":siege_hardness", ":center_no", slot_center_siege_hardness),
          (val_add, ":siege_hardness", 100),
          (val_mul, ":defender_strength", ":siege_hardness"),
          (val_div, ":defender_strength", 100),
          (val_max, ":defender_strength", 1),
          (try_begin),
            (eq, ":marshall_attacking", 1),
            (eq, ":besieger_faction", "$players_kingdom"),
            (check_quest_active, "qst_follow_army"),
            (val_mul, ":attacker_strength", 2), ########double the power of attackers if the player is in the campaign
          (try_end),
          (store_mul, ":strength_ratio", ":attacker_strength", 100),
          (val_div, ":strength_ratio", ":defender_strength"),
          (store_sub, ":random_up_limit", ":strength_ratio", 250), ########was 300 (1.126)
          (try_begin),
            (gt, ":random_up_limit", -100), ########never attack if the strength ratio is less than 150%
            (store_div, ":siege_begin_hours_effect", ":siege_begin_hours", 2), ########was 3 (1.126)
            (val_add, ":random_up_limit", ":siege_begin_hours_effect"),
          (try_end),
          (val_div, ":random_up_limit", 5),
          (val_max, ":random_up_limit", 0),
          (store_sub, ":random_down_limit", 175, ":strength_ratio"), ########was 200 (1.126)
          (val_max, ":random_down_limit", 0),
          ############### NEW v2.1 - Lord's engineering skill reduces the time it takes to launch a assault by 5% per level
          (try_begin),
            (party_get_skill_level, ":engineer_skill", ":besieger_party", skl_engineer),
            (gt, ":engineer_skill", 0),
              (val_mul, ":engineer_skill", 5),
              (val_add, ":random_up_limit", ":engineer_skill"),
          (try_end),
          ###############
          (try_begin),
            (store_random_in_range, ":rand", 0, 100),
            (lt, ":rand", ":random_up_limit"),
            (gt, ":siege_begin_hours", 24),########initial preparation
            (assign, ":launch_attack", 1),
          (else_try),
            (store_random_in_range, ":rand", 0, 100),
            (lt, ":rand", ":random_down_limit"),
            (assign, ":call_attack_back", 1),
          (try_end),
        (else_try),
          (assign, ":call_attack_back", 1),
        (try_end),
        #########Assault the fortress
        (try_begin),
          (eq, ":launch_attack", 1),
          (call_script, "script_begin_assault_on_center", ":center_no"),
        (else_try),
          (eq, ":call_attack_back", 1),
          (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":troop_no", slot_troop_is_alive, 1),  #### NEW v2.7
            (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
            (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
            (gt, ":party_no", 0),
            (party_is_active, ":party_no"),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_besieging_center),
            (party_slot_eq, ":party_no", slot_party_ai_object, ":center_no"),
            (party_slot_eq, ":party_no", slot_party_ai_substate, 1),
            (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
            (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":center_no"),
            #########resetting siege begin time if at least 1 party retreats
            (party_set_slot, ":center_no", slot_center_siege_begin_hours, ":cur_hours"),
          (try_end),
        (try_end),
      (try_end),
      #####diplomacy start+
      #########Revert registers
      (assign, reg0, ":save_reg0"),
      (assign, reg1, ":save_reg1"),
      #####diplomacy end+
  ]),
##################################################################



################################ NEW v1.8 - Script to process fief improvements
  ("process_center_upgrades",
  [
    (store_script_param, ":center_no", 1),
    
    (try_begin),
      (party_get_slot, ":cur_improvement", ":center_no", slot_center_current_improvement),
      (gt, ":cur_improvement", 0),
      (party_get_slot, ":cur_improvement_level", ":center_no", slot_center_current_improvement_level),
      (party_get_slot, ":cur_improvement_end_time", ":center_no", slot_center_improvement_end_hour),
      (store_current_hours, ":cur_hours"),
      (ge, ":cur_hours", ":cur_improvement_end_time"),
      (party_set_slot, ":center_no", ":cur_improvement", ":cur_improvement_level"),
      (party_set_slot, ":center_no", slot_center_current_improvement, 0),
      (call_script, "script_get_improvement_details", ":cur_improvement", ":cur_improvement_level"),
      (try_begin),
        (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
        (str_store_party_name_link, s4, ":center_no"),
####### NEW v3.0-KOMKE START-
        # (display_log_message, "@Building of {s0} in {s4} has been completed.", 0x00E600),
        (call_script, "script_add_notification_menu", "mnu_notification_building_constructed", ":cur_improvement", ":center_no", ":cur_improvement_level"),
####### NEW v3.0-KOMKE END- 
      (try_end),
      (try_begin),
        (is_between, ":center_no", villages_begin, villages_end),
        (eq, ":cur_improvement", slot_center_has_fish_pond),
        (call_script, "script_change_center_prosperity", ":center_no", 5),
      (try_end),

      ############ 1257AD player fiefs
      (try_begin),
        (is_between, ":center_no", villages_begin, villages_end),
        (eq, ":cur_improvement", slot_party_temp_slot_1),
          (call_script, "script_process_1257ad_center_upgrades", ":center_no"),
          # (display_message, "@script_process_1257ad_center_upgrades called!"),
      (try_end),
    (try_end),
  ]),

##################################################################



################################ NEW v1.8 - Script to process 1257AD player manor castle upgrade
  ("process_1257ad_center_upgrades",
  [
    (store_script_param, ":center_no", 1),
    
    (try_begin),
      (party_get_slot, ":cur_improvement", ":center_no", slot_center_current_improvement),
      ######### (display_message, "@script_process_1257ad_center_upgrades got party_slot!"),
      ######### (gt, ":cur_improvement", 0),
        ######## (display_message, "@script_process_1257ad_center_upgrades bypassed gt 0!"),
        # (party_get_slot, ":bound_center", ":center_no", slot_village_bound_center),
        # (party_get_position, pos0, ":bound_center"),
        # (map_get_land_position_around_position, pos1, pos0, 3),
        # (party_set_position, "p_village_player", pos1),
        # (party_set_flags, "p_village_player", pf_disabled, 0),
        # (str_store_party_name, s10, ":bound_center"),
        # (str_store_string, s11, "@{s10} Village"),
        # (party_set_name, "p_village_player", s11),
        # (party_set_flags, "p_village_player", pf_disabled, 0),
        # (party_set_slot, "p_village_player", slot_village_bound_center, ":bound_center"),
        #########(party_get_slot, ":lord", ":center_no", slot_town_lord),

        ##########village scene:
        # (party_get_slot, ":scene", ":center_no", slot_castle_exterior),
        # (party_set_slot, "p_village_player", slot_castle_exterior, ":scene"),
        ############ castle
        (party_get_position, pos0, ":center_no"),        
        (map_get_land_position_around_position, pos1, pos0, 2),####### NEW v3.0-KOMKE changed from 3 to 2 to avoid spawning castle too far away
        (party_set_position, "p_castle_player", pos1),
        (party_set_flags, "p_castle_player", pf_disabled, 0),
        (str_store_party_name, s10, ":center_no"),
        (str_store_string, s11, "@{s10} Castle"),
        (party_set_name, "p_castle_player", s11),
        (party_set_slot, ":center_no", slot_village_bound_center, "p_castle_player"),
        (party_set_slot, "p_castle_player", slot_party_type, spt_castle),
        (party_set_slot, "p_castle_player", slot_town_lord, "trp_player"), ##### NEW v2.1
        # (party_set_slot, "p_village_player", slot_party_type, spt_village),

        (call_script, "script_give_center_to_faction_aux", "p_castle_player", "$players_kingdom"),
        # (call_script, "script_give_center_to_faction_aux", "p_village_player", "$players_kingdom"),
        # (try_begin),
          # (call_script, "script_cf_get_random_lord_except_king_with_faction", "$players_kingdom"),
          # (call_script, "script_give_center_to_lord", "p_village_player", reg0, 0),
        # (else_try), 
          # (call_script, "script_give_center_to_lord", "p_village_player", "trp_player", 0),
        # (try_end),  
        (call_script, "script_give_center_to_lord", "p_castle_player", "trp_player", 0),
        # (call_script, "script_give_center_to_lord", ":center_no", "trp_player", 0),## commented out unnecessary
####### NEW v3.0-KOMKE above line , this village ":center_no" is already be owned by player to build improvements
        (call_script, "script_update_village_market_towns"),
####### NEW v3.0-KOMKE START-
        (party_set_note_available, "p_castle_player", 1),## now castle available in notes and show on map
####### NEW v3.0-KOMKE END- 
        #for feudal recruitment setting up the culture
        (party_get_slot, ":orig_culture", ":center_no", slot_center_culture),
        (party_get_slot, ":orig_faction", ":center_no", slot_center_original_faction),
        
        (party_set_slot, "p_castle_player", slot_center_culture, ":orig_culture"),
        (party_set_slot, "p_castle_player", slot_center_original_faction, ":orig_faction"),
        
        # (party_set_slot, "p_village_player", slot_center_culture, ":orig_culture"),
        # (party_set_slot, "p_village_player", slot_center_original_faction, ":orig_faction"),
        #feudal recruitment thing end
        
        (party_get_current_terrain, ":terrain_type", "p_castle_player"),
        (try_begin),
          (this_or_next|eq, ":terrain_type", rt_desert),
          (eq, ":terrain_type", rt_desert_forest),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_desert_tier1"),
          (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        (else_try),
          (this_or_next|eq, ":terrain_type", rt_snow),
          (eq, ":terrain_type", rt_snow_forest),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_castle_player_nordic_1"),
          (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        (else_try),
          (eq, "fac_kingdom_10", "$players_kingdom"),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_french_tier1"),
          (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   1),
        (else_try),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_central_Europe_tier1"),
          (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        (try_end),
        
        
        
        # (party_set_slot, "p_village_player", slot_castle_exterior, "scn_village_eastern"),
        # (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_castle_player_1"),
        (party_set_slot, "p_castle_player", slot_town_castle, "scn_interior_moscow"),
        (party_set_slot, "p_castle_player", slot_town_prison, "scn_castle_prison_eastern"),
        # (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        
        
        # (party_set_slot, "p_village_player", slot_center_original_faction, "$players_kingdom"),
        (party_set_slot, "p_castle_player", slot_center_original_faction, "$players_kingdom"),
        
        # (party_set_slot, "p_village_player", slot_center_accumulated_rents, 0),
        # (party_set_slot, "p_village_player", slot_center_accumulated_tariffs, 0),
        (party_set_slot, "p_castle_player", slot_center_accumulated_rents, 0),
        (party_set_slot, "p_castle_player", slot_center_accumulated_tariffs, 0),
        #TOM BEGIN
        (try_begin),
            (troop_get_slot, ":party_no", "trp_temp_lord", slot_troop_leaded_party),
            (neq, ":party_no", -1),
            (party_is_active, ":party_no"),
            (party_detach, ":party_no"),  
            (remove_party, ":party_no"),
            (party_clear, "p_castle_player"),
            (remove_member_from_party, "trp_temp_lord", "p_castle_player"),
        (try_end),
        (try_begin),
            (troop_get_slot, ":party_no", "trp_temp_lord", slot_troop_leaded_party),
            (gt, ":party_no", -1),
            (party_is_active, ":party_no"),
            (party_relocate_near_party, ":party_no", ":center_no",10),
            (disable_party, ":party_no"),
        (try_end),
        #TOM END
      # (try_end),
      (party_get_current_terrain, ":terrain_type", "p_castle_player"),
      (try_begin),
        (this_or_next|eq, ":terrain_type", rt_desert),
        (eq, ":terrain_type", rt_desert_forest),
        (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        (try_begin),
          (eq, ":cur_improvement", slot_center_has_fortifications_1),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_desert_tier2"),
        (else_try),
          (eq, ":cur_improvement", slot_center_has_fortifications_2),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_desert_tier3"),
        (try_end),
      (else_try),
        (this_or_next|eq, ":terrain_type", rt_snow),
        (eq, ":terrain_type", rt_snow_forest),
        (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        (try_begin),
          (eq, ":cur_improvement", slot_center_has_fortifications_1),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_castle_player_nordic_2"),
        (else_try),
          (eq, ":cur_improvement", slot_center_has_fortifications_2),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_castle_player_nordic_3"),
        (try_end),
      (else_try),
        (eq, "fac_kingdom_10", "$players_kingdom"),
        (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   1),
        (try_begin),
          (eq, ":cur_improvement", slot_center_has_fortifications_1),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_french_tier2"),
        (else_try),
          (eq, ":cur_improvement", slot_center_has_fortifications_2),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_french_tier3"),
        (try_end),    
      (else_try),
        #(eq, ":terrain", ""),
        (party_set_slot, "p_castle_player", slot_center_siege_with_belfry,   0),
        (try_begin),
          (eq, ":cur_improvement", slot_center_has_fortifications_1),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_central_Europe_tier2"),
        (else_try),
          (eq, ":cur_improvement", slot_center_has_fortifications_2),
          (party_set_slot, "p_castle_player", slot_castle_exterior, "scn_player_castle_central_Europe_tier3"),
        (try_end),
      (try_end),    
      # end rafi
      (party_clear, "p_castle_player"),
    (try_end),
  ]),

##################################################################





######################################### NEW AI CALCULATION SCRIPTS

    # Input: none
    # Output: none
    ("init_ai_calculation_active_npcs",
      [
        (store_script_param, ":cur_troop", 1),
        
        (try_begin),
          (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
          (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
          (party_is_active, ":cur_party"),
          # (store_troop_faction, ":fac", ":cur_troop"),
          # (eq, ":fac", "$g_recalculate_ais_cur_fac"),
          (call_script, "script_party_calculate_strength", ":cur_party", 0), #will update slot_party_cached_strength
        (try_end),
        
        (try_begin),
          (troop_get_slot, ":cur_troop_party", ":cur_troop", slot_troop_leaded_party),
          (gt, ":cur_troop_party", 0),
          (party_is_active, ":cur_troop_party"),
          # (store_troop_faction, ":fac", ":cur_troop"),
          # (eq, ":fac", "$g_recalculate_ais_cur_fac"),
          (call_script, "script_party_calculate_and_set_nearby_friend_enemy_follower_strengths", ":cur_troop_party"),
        (try_end),
    ]),
    
    
    
    # Input: none
    # Output: none
    ("init_ai_calculation_ladies",
      [
        (store_script_param, ":cur_troop", 1),
        
        (try_begin),
          (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
          (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
          (party_is_active, ":cur_party"),
          # (store_troop_faction, ":fac", ":cur_troop"),
          # (eq, ":fac", "$g_recalculate_ais_cur_fac"),
          (call_script, "script_party_calculate_strength", ":cur_party", 0), #will update slot_party_cached_strength
        (try_end),
        
        (try_begin),
          (troop_get_slot, ":cur_troop_party", ":cur_troop", slot_troop_leaded_party),
          (gt, ":cur_troop_party", 0),
          (party_is_active, ":cur_troop_party"),
          # (store_troop_faction, ":fac", ":cur_troop"),
          # (eq, ":fac", "$g_recalculate_ais_cur_fac"),
          (call_script, "script_party_calculate_and_set_nearby_friend_enemy_follower_strengths", ":cur_troop_party"),
        (try_end),
    ]),
    
##################################################################



############################## NEW for "Adding bandits to towns and villages" simple trigger code
    ("add_bandits_to_towns_and_villages",
      [
        (store_script_param, ":cur_fief", 1),
        
        (try_begin),
          (this_or_next|party_slot_eq, ":cur_fief", slot_party_type, spt_town),
          (party_slot_eq, ":cur_fief", slot_party_type, spt_village),
          (party_get_slot, ":has_bandits", ":cur_fief", slot_center_has_bandits),
          (try_begin),
            (le, ":has_bandits", 0),
            (assign, ":continue", 0),
            (try_begin),
              (check_quest_active, "qst_deal_with_night_bandits"),
              (quest_slot_eq, "qst_deal_with_night_bandits", slot_quest_target_center, ":cur_fief"),
              (neg|check_quest_succeeded, "qst_deal_with_night_bandits"),
              (assign, ":continue", 1),
            (else_try),
              (store_random_in_range, ":random_no", 0, 100),
              (lt, ":random_no", 3),  ####### 3% chance
              (assign, ":continue", 1),
            (try_end),
            (try_begin),
              (eq, ":continue", 1),
              (store_random_in_range, ":random_no", 0, 3),
              (try_begin),
                (eq, ":random_no", 0),
                (assign, ":bandit_troop", "trp_bandit"),
              (else_try),
                (eq, ":random_no", 1),
                (assign, ":bandit_troop", "trp_mountain_bandit"),
              (else_try),
                (assign, ":bandit_troop", "trp_forest_bandit"),
              (try_end),
              (party_set_slot, ":cur_fief", slot_center_has_bandits, ":bandit_troop"),
              (try_begin),
                (eq, "$cheat_mode", 1),
                (str_store_party_name, s1, ":cur_fief"),
                (display_message, "@{!}{s1} is infested by bandits (at night)."),
              (try_end),
            (try_end),
          (else_try),
            (try_begin),
              (assign, ":random_chance", 40),
              (try_begin),
                (party_slot_eq, ":cur_fief", slot_party_type, spt_town),
                (assign, ":random_chance", 20),
              (try_end),
              (store_random_in_range, ":random_no", 0, 100),
              (lt, ":random_no", ":random_chance"),
              (party_set_slot, ":cur_fief", slot_center_has_bandits, 0),
              (try_begin),
                (eq, "$cheat_mode", 1),
                (str_store_party_name, s1, ":cur_fief"),
                (display_message, "@{s1} is no longer infested by bandits (at night)."),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
    ]),
##################################################################






############################## NEW v1.8 - updating fief culture
    ("update_fief_culture",
      [        
        (store_script_param, ":center", 1),
        (store_script_param, ":culture", 2),
        
        (party_set_slot, ":center", slot_center_culture, ":culture"),
        
        (try_begin),
          (call_script, "script_update_volunteer_troops_in_village", ":center"),
          # (call_script, "script_feudal_lance_manpower_update", ":center", "$g_party_lances_max_town"),
          (call_script, "script_update_npc_volunteer_troops_in_village", ":center"),
          (call_script, "script_update_mercenaries_in_fief", ":center", ":culture"), ######## NEW v3.9
        (try_end),
        
        # (try_for_range, ":center", towns_begin, towns_end),
          # (call_script, "script_update_volunteer_troops_in_village", ":center"),
          # (call_script, "script_feudal_lance_manpower_update", ":center", "$g_party_lances_max_town"),
          # (call_script, "script_update_npc_volunteer_troops_in_village", ":center"),
        # (try_end),
        
        # (try_for_range, ":center", villages_begin, villages_end),
          # (call_script, "script_update_volunteer_troops_in_village", ":center"),
          # (call_script, "script_feudal_lance_manpower_update", ":center", "$g_party_lances_max_village"),
          # (call_script, "script_update_npc_volunteer_troops_in_village", ":center"),
        # (try_end),
        
        # (try_for_range, ":center", castles_begin, castles_end),
          # (call_script, "script_update_volunteer_troops_in_village", ":center"),
          # (call_script, "script_feudal_lance_manpower_update", ":center", "$g_party_lances_max_castle"),
          # (call_script, "script_update_npc_volunteer_troops_in_village", ":center"),
        # (try_end),
    ]),
##################################################################



############################## NEW v1.8 - process alarms called from simple triggers
    ("trigger_process_alarms",
      [        
        (store_script_param, ":center", 1),
        
        (try_begin), #if raided, sieged and only once!
          (this_or_next|party_slot_ge, ":center", slot_center_is_besieged_by, 0),
          (party_slot_eq, ":center", slot_village_state, svs_being_raided),
          (party_slot_eq, ":center", slot_center_last_spotted_enemy, -1), #if this is not set yet
          (call_script, "script_process_alarms_new", ":center"),
        (else_try), #not raided/sieged - reset the sorties
          (this_or_next|neg|party_slot_ge, ":center", slot_center_is_besieged_by, 0),
          (neg|party_slot_eq, ":center", slot_village_state, svs_being_raided),
          (party_set_slot, ":center", slot_center_last_spotted_enemy, -1),
          (party_set_slot, ":center", slot_center_sortie_strength, 0),
          (party_set_slot, ":center", slot_center_sortie_enemy_strength, 0),
        (try_end),
    ]),
##################################################################



############################## NEW v1.8 - https://forums.taleworlds.com/index.php/topic,8652.msg7535246.html#msg7535246
#-## List management
## The list's zero slot holds the number of current items in it
# script_list_random
# Returns a random element from the list, along with its index
# INPUT: none
# OUTPUT: reg1 - the value of the item, reg2 - its index
("list_random", [
   (store_script_param, ":list_type", 1),
   (troop_get_slot, ":num_elements", ":list_type", 0),
   (val_add, ":num_elements", 1),
   (store_random_in_range, reg2, 1, ":num_elements"),
   (troop_get_slot, reg1, ":list_type", reg2),
]),
# script_list_add
# Appends an item to the list
# INPUT: arg1 - the value which we will add to the list
# OUTPUT: none
("list_add", [
   (store_script_param, ":list_type", 1),
   (store_script_param, ":value", 2),
   (troop_get_slot, ":num_elements", ":list_type", 0),
   (val_add, ":num_elements", 1),
   (troop_set_slot, ":list_type", ":num_elements", ":value"),
   (troop_set_slot, ":list_type", 0, ":num_elements"),
]),
# script_list_clear
# Clears all items from the list
# INPUT: ":list_type"
# OUTPUT: none
("list_clear", [
   (store_script_param, ":list_type", 1),
   (troop_get_slot, ":num_elements", ":list_type", 0),
   (val_add, ":num_elements", 1),
   (try_for_range, ":slot", 1, ":num_elements"),
      (troop_set_slot, ":list_type", ":slot", 0),
   (try_end),
   (troop_set_slot, ":list_type", 0, 0), # Reset number of elements
]),
##################################################################




############################## NEW v1.8 - update_trade_good_prices with scrip_param
    #script_update_trade_good_prices
    # INPUT: none
    ("update_trade_good_prices_new",
      [
        (store_script_param, ":center_no", 1),
        
        (try_begin),
          (this_or_next|is_between, ":center_no", towns_begin, towns_end),
          (is_between, ":center_no", villages_begin, villages_end),
          (call_script, "script_update_trade_good_price_for_party", ":center_no"),
        (try_end),
        
        (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
          (assign, ":total_price", 0),
          (assign, ":total_constants", 0),
          
          (try_for_range, ":center_no", centers_begin, centers_end),
            (this_or_next|is_between, ":center_no", towns_begin, towns_end),
            (is_between, ":center_no", villages_begin, villages_end),
            
            (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
            (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
            (party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),
            
            (try_begin),
              (is_between, ":center_no", towns_begin, towns_end),
              (assign, ":constant", 5),
            (else_try),
              (assign, ":constant", 1),
            (try_end),
            
            (val_mul, ":cur_price", ":constant"),
            
            (val_add, ":total_price", ":cur_price"),
            (val_add, ":total_constants", ":constant"),
          (try_end),
          
          (try_for_range, ":center_no", centers_begin, centers_end),
            (this_or_next|is_between, ":center_no", towns_begin, towns_end),
            (is_between, ":center_no", villages_begin, villages_end),
            
            (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
            (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
            (party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),
            
            (val_mul, ":cur_price", 1000),
            (val_mul, ":cur_price", ":total_constants"),
            (val_div, ":cur_price", ":total_price"),
            
            (val_clamp, ":cur_price", minimum_price_factor, maximum_price_factor),
            (party_set_slot, ":center_no", ":cur_good_price_slot", ":cur_price"),
          (try_end),
        (try_end),
    ]),
##################################################################





############################## NEW v1.9 - removed this code from game menus to remove annoying presentations every day
    #script_update_trade_good_prices
    # INPUT: none
    ("create_incidents_new",
      [
      (store_script_param, ":acting_village", 1),
      (store_script_param, ":target_village", 2),
      
      (store_faction_of_party, ":acting_faction", ":acting_village"),
      (try_begin),
            (eq, ":target_village", -1),
            (party_get_slot, ":target_faction", ":acting_village", slot_center_original_faction),
            (try_begin),
                (this_or_next|eq, ":target_faction", ":acting_faction"),
                (neg|faction_slot_eq, ":target_faction", slot_faction_state, sfs_active),
                (party_get_slot, ":target_faction", ":acting_village", slot_center_ex_faction),
            (try_end),
            (str_store_party_name_link, s1, ":acting_village"),
            (str_store_faction_name_link, s3, ":acting_faction"),
            (str_store_faction_name_link, s4, ":target_faction"),
            (faction_get_slot, ":target_leader", ":target_faction", slot_faction_leader),
            (str_store_troop_name_link, s5, ":target_leader"),
            (str_store_string, s9, "str_local_notables_from_s1_a_village_claimed_by_the_s4_have_been_mistreated_by_their_overlords_from_the_s3_and_petition_s5_for_protection"),
            (display_log_message, "@There has been an alleged border incident: {s9}"),
            (call_script, "script_add_log_entry", logent_border_incident_subjects_mistreated, ":acting_village", -1, -1, ":acting_faction"),
            ########## NEW v3.8
			(try_begin),
              (this_or_next|faction_slot_eq, ":target_faction", slot_faction_leader, "trp_player"),
              (faction_slot_eq, ":acting_faction", slot_faction_leader, "trp_player"),
              (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", -1),
	        (try_end),
			####################
	  (else_try),
            (store_faction_of_party, ":target_faction", ":target_village"),
            (str_store_party_name_link, s1, ":acting_village"),
            (str_store_party_name_link, s2, ":target_village"),
            (store_random_in_range, ":random", 0, 3),
            (try_begin),
                (eq, ":random", 0),
                (str_store_string, s9, "str_villagers_from_s1_stole_some_cattle_from_s2"),
                (display_log_message, "@There has been an alleged border incident: {s9}"),
                (call_script, "script_add_log_entry", logent_border_incident_cattle_stolen, ":acting_village", ":target_village", -1, ":acting_faction"),
                ########## NEW v3.8
			    (try_begin),
                  (this_or_next|faction_slot_eq, ":target_faction", slot_faction_leader, "trp_player"),
                  (faction_slot_eq, ":acting_faction", slot_faction_leader, "trp_player"),
                  (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", ":target_village"),
	            (try_end),
			    ####################
			(else_try),
                (eq, ":random", 1),
                (str_store_string, s9, "str_villagers_from_s1_abducted_a_woman_from_a_prominent_family_in_s2_to_marry_one_of_their_boys"),
                (display_log_message, "@There has been an alleged border incident: {s9}"),
                (call_script, "script_add_log_entry", logent_border_incident_bride_abducted, ":acting_village", ":target_village", -1, ":acting_faction"),
                ########## NEW v3.8
			    (try_begin),
                  (this_or_next|faction_slot_eq, ":target_faction", slot_faction_leader, "trp_player"),
                  (faction_slot_eq, ":acting_faction", slot_faction_leader, "trp_player"),
                  (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", ":target_village"),
	            (try_end),
			    ####################
            (else_try),
                (eq, ":random", 2),
                (str_store_string, s9, "str_villagers_from_s1_killed_some_farmers_from_s2_in_a_fight_over_the_diversion_of_a_stream"),
                (display_log_message, "@There has been an alleged border incident: {s9}"),
                (call_script, "script_add_log_entry", logent_border_incident_villagers_killed, ":acting_village", ":target_village", -1, ":acting_faction"),
                ########## NEW v3.8
			    (try_begin),
                  (this_or_next|faction_slot_eq, ":target_faction", slot_faction_leader, "trp_player"),
                  (faction_slot_eq, ":acting_faction", slot_faction_leader, "trp_player"),
                  (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", ":target_village"),
	            (try_end),
			    ####################
            (try_end),
      (try_end),

      (str_store_faction_name, s3, ":acting_faction"),
      (str_store_faction_name, s4, ":target_faction"),

      (store_add, ":slot_provocation_days", ":acting_faction", slot_faction_provocation_days_with_factions_begin),
      (val_sub, ":slot_provocation_days", kingdoms_begin),
      (faction_set_slot, ":target_faction", ":slot_provocation_days", 30),
      
    ]),
##################################################################






    
############################################### NEW v2.0 - 1257 equip_companion modified to equip player at game start
  ("equip_troop_king_start",
   [
    # (store_script_param_1, ":source_troop"),
    
    (troop_clear_inventory, "trp_player"),
    
    ######### RANDOM FOOD
    (try_for_range, ":unused", 0, 12),
      (store_random_in_range, ":food", "itm_smoked_fish", "itm_raw_grapes"),
      (troop_add_item, "trp_player", ":food", 0),
    (try_end),
    
    (try_begin),
      (eq, "$kaos_kings_kingdom", 1),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_q01"),
      (party_set_banner_icon, "trp_player", "icon_banner_337"),
      (assign, ":source_troop", "trp_kingdom_1_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 2),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_p01"),
      (party_set_banner_icon, "trp_player", "icon_banner_316"),
      (assign, ":source_troop", "trp_kingdom_2_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 3),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_n01"),
      (party_set_banner_icon, "trp_player", "icon_banner_274"),
      (assign, ":source_troop", "trp_kingdom_3_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 4),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_m01"),
      (party_set_banner_icon, "trp_player", "icon_banner_253"),
      (assign, ":source_troop", "trp_kingdom_4_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 5),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_l01"),
      (party_set_banner_icon, "trp_player", "icon_banner_232"),
      (assign, ":source_troop", "trp_kingdom_5_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 6),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_k01"),
      (party_set_banner_icon, "trp_player", "icon_banner_211"),
      (assign, ":source_troop", "trp_kingdom_6_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 7),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_j01"),
      (party_set_banner_icon, "trp_player", "icon_banner_190"),
      (assign, ":source_troop", "trp_kingdom_7_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 8),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_i01"),
      (party_set_banner_icon, "trp_player", "icon_banner_169"),
      (assign, ":source_troop", "trp_kingdom_8_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 9),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_h01"),
      (party_set_banner_icon, "trp_player", "icon_banner_148"),
      (assign, ":source_troop", "trp_kingdom_9_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 10),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_g01"),
      (party_set_banner_icon, "trp_player", "icon_banner_127"),
      (assign, ":source_troop", "trp_kingdom_10_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 11),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (party_set_banner_icon, "trp_player", "icon_banner_358"),
      (assign, ":source_troop", "trp_kingdom_11_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 12),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_s01"),
      (party_set_banner_icon, "trp_player", "icon_banner_379"),
      (assign, ":source_troop", "trp_kingdom_12_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 13),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_t02"),
      (party_set_banner_icon, "trp_player", "icon_banner_401"),
      (assign, ":source_troop", "trp_kingdom_13_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 14),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_u01"),
      (party_set_banner_icon, "trp_player", "icon_banner_421"),
      (assign, ":source_troop", "trp_kingdom_14_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 15),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (party_set_banner_icon, "trp_player", "icon_banner_442"),
      (assign, ":source_troop", "trp_kingdom_15_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 16),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (party_set_banner_icon, "trp_player", "icon_banner_101"),
      (assign, ":source_troop", "trp_kingdom_16_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 17),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_e01"),
      (party_set_banner_icon, "trp_player", "icon_banner_85"),
      (assign, ":source_troop", "trp_kingdom_17_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 18),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (party_set_banner_icon, "trp_player", "icon_banner_106"),
      (assign, ":source_troop", "trp_kingdom_18_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 19),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x04"),
      (party_set_banner_icon, "trp_player", "icon_banner_466"),
      (assign, ":source_troop", "trp_kingdom_19_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 20),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (party_set_banner_icon, "trp_player", "icon_banner_463"),
      (assign, ":source_troop", "trp_kingdom_20_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 21),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_f16"),
      (party_set_banner_icon, "trp_player", "icon_banner_121"),
      (assign, ":source_troop", "trp_pope"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 22),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (party_set_banner_icon, "trp_player", "icon_banner_469"),
      (assign, ":source_troop", "trp_kingdom_22_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 23),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_v05"),
      (party_set_banner_icon, "trp_player", "icon_banner_446"),
      (assign, ":source_troop", "trp_kingdom_23_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 24),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_f10"),
      (party_set_banner_icon, "trp_player", "icon_banner_115"),
      (assign, ":source_troop", "trp_kingdom_24_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 25),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (party_set_banner_icon, "trp_player", "icon_banner_472"),
      (assign, ":source_troop", "trp_kingdom_25_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 26),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x11"),
      (party_set_banner_icon, "trp_player", "icon_banner_473"),
      (assign, ":source_troop", "trp_kingdom_26_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 27),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (party_set_banner_icon, "trp_player", "icon_banner_474"),
      (assign, ":source_troop", "trp_kingdom_27_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 28),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (party_set_banner_icon, "trp_player", "icon_banner_475"),
      (assign, ":source_troop", "trp_kingdom_28_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 29),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (party_set_banner_icon, "trp_player", "icon_banner_478"),
      (assign, ":source_troop", "trp_kingdom_29_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 30),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (party_set_banner_icon, "trp_player", "icon_banner_477"),
      (assign, ":source_troop", "trp_kingdom_30_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 31),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (party_set_banner_icon, "trp_player", "icon_banner_481"),
      (assign, ":source_troop", "trp_kingdom_31_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 32),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_o"),
      (party_set_banner_icon, "trp_player", "icon_banner_15"),
      (assign, ":source_troop", "trp_kingdom_32_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 33),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_p17"),
      (party_set_banner_icon, "trp_player", "icon_banner_332"),
      (assign, ":source_troop", "trp_kingdom_33_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 34),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_l"),
      (party_set_banner_icon, "trp_player", "icon_banner_12"),
      (assign, ":source_troop", "trp_kingdom_34_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 35),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_d"),
      (party_set_banner_icon, "trp_player", "icon_banner_04"),
      (assign, ":source_troop", "trp_kingdom_35_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 36),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_p19"),
      (party_set_banner_icon, "trp_player", "icon_banner_334"),
      (assign, ":source_troop", "trp_kingdom_36_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 37),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_h"),
      (party_set_banner_icon, "trp_player", "icon_banner_08"),
      (assign, ":source_troop", "trp_kingdom_37_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 38),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_f18"),
      (party_set_banner_icon, "trp_player", "icon_banner_123"),
      (assign, ":source_troop", "trp_kingdom_38_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 39),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_x09"),
      (party_set_banner_icon, "trp_player", "icon_banner_471"),
      (assign, ":source_troop", "trp_kingdom_39_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 40),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_t"),
      (party_set_banner_icon, "trp_player", "icon_banner_20"),
      (assign, ":source_troop", "trp_kingdom_40_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 41),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_s"),
      (party_set_banner_icon, "trp_player", "icon_banner_19"),
      (assign, ":source_troop", "trp_kingdom_41_lord"),
    (else_try),
      (eq, "$kaos_kings_kingdom", 42),
      (troop_set_slot, "trp_player", slot_troop_banner_scene_prop, "spr_banner_o06"),
      (party_set_banner_icon, "trp_player", "icon_banner_300"),
      (assign, ":source_troop", "trp_kingdom_42_lord"),
    (try_end),
    
   (call_script, "script_give_source_troop_inventory_to_troop", "trp_player", ":source_troop", 1),
   ]),
####################################

    
    
    
    
####################################
  ("equip_troop_royal_start",
   [
    (troop_clear_inventory, "trp_player"),
    
    ######### RANDOM FOOD
    (try_for_range, ":unused", 0, 8),
      (store_random_in_range, ":food", "itm_smoked_fish", "itm_raw_grapes"),
      (troop_add_item, "trp_player", ":food", 0),
    (try_end),
    
    (try_begin),
      (this_or_next|eq, "$kaos_kings_prince", 1),
      (eq, "$kaos_kings_vassal", 1),
        (store_random_in_range, ":source_troop", "trp_knight_1_1", "trp_knight_2_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 2),
      (eq, "$kaos_kings_vassal", 2),
        (store_random_in_range, ":source_troop", "trp_knight_2_1", "trp_knight_3_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 3),
      (eq, "$kaos_kings_vassal", 3),
        (store_random_in_range, ":source_troop", "trp_knight_3_1", "trp_knight_4_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 4),
      (eq, "$kaos_kings_vassal", 4),
        (store_random_in_range, ":source_troop", "trp_knight_4_1", "trp_knight_5_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 5),
      (eq, "$kaos_kings_vassal", 5),
        (store_random_in_range, ":source_troop", "trp_knight_5_1", "trp_knight_6_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 6),
      (eq, "$kaos_kings_vassal", 6),
        (store_random_in_range, ":source_troop", "trp_knight_6_1", "trp_knight_7_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 7),
      (eq, "$kaos_kings_vassal", 7),
        (store_random_in_range, ":source_troop", "trp_knight_7_1", "trp_knight_8_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 8),
      (eq, "$kaos_kings_vassal", 8),
        (store_random_in_range, ":source_troop", "trp_knight_8_1", "trp_knight_9_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 9),
      (eq, "$kaos_kings_vassal", 9),
        (store_random_in_range, ":source_troop", "trp_knight_9_1", "trp_knight_10_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 10),
      (eq, "$kaos_kings_vassal", 10),
        (store_random_in_range, ":source_troop", "trp_knight_10_1", "trp_knight_11_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 11),
      (eq, "$kaos_kings_vassal", 11),
        (store_random_in_range, ":source_troop", "trp_knight_11_1", "trp_knight_12_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 12),
      (eq, "$kaos_kings_vassal", 12),
        (store_random_in_range, ":source_troop", "trp_knight_12_1", "trp_knight_13_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 13),
      (eq, "$kaos_kings_vassal", 13),
        (store_random_in_range, ":source_troop", "trp_knight_13_1", "trp_knight_14_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 14),
      (eq, "$kaos_kings_vassal", 14),
        (store_random_in_range, ":source_troop", "trp_knight_14_1", "trp_knight_15_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 15),
      (eq, "$kaos_kings_vassal", 15),
        (store_random_in_range, ":source_troop", "trp_knight_15_1", "trp_knight_16_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 16),
      (eq, "$kaos_kings_vassal", 16),
        (store_random_in_range, ":source_troop", "trp_knight_16_1", "trp_knight_17_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 17),
      (eq, "$kaos_kings_vassal", 17),
        (store_random_in_range, ":source_troop", "trp_knight_17_1", "trp_knight_18_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 18),
      (eq, "$kaos_kings_vassal", 18),
        (store_random_in_range, ":source_troop", "trp_knight_18_1", "trp_knight_19_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 19),
      (eq, "$kaos_kings_vassal", 19),
        (store_random_in_range, ":source_troop", "trp_knight_19_1", "trp_knight_20_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 20),
      (eq, "$kaos_kings_vassal", 20),
        (store_random_in_range, ":source_troop", "trp_knight_20_1", "trp_knight_21_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 21),
      (eq, "$kaos_kings_vassal", 21),
        (store_random_in_range, ":source_troop", "trp_knight_21_1", "trp_knight_22_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 22),
      (eq, "$kaos_kings_vassal", 22),
        (store_random_in_range, ":source_troop", "trp_knight_22_1", "trp_knight_23_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 23),
      (eq, "$kaos_kings_vassal", 23),
        (store_random_in_range, ":source_troop", "trp_knight_23_1", "trp_knight_24_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 24),
      (eq, "$kaos_kings_vassal", 24),
        (store_random_in_range, ":source_troop", "trp_knight_24_1", "trp_knight_25_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 25),
      (eq, "$kaos_kings_vassal", 25),
        (store_random_in_range, ":source_troop", "trp_knight_25_1", "trp_knight_26_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 26),
      (eq, "$kaos_kings_vassal", 26),
        (store_random_in_range, ":source_troop", "trp_knight_26_1", "trp_knight_27_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 27),
      (eq, "$kaos_kings_vassal", 27),
        (store_random_in_range, ":source_troop", "trp_knight_27_1", "trp_knight_28_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 28),
      (eq, "$kaos_kings_vassal", 28),
        (store_random_in_range, ":source_troop", "trp_knight_28_1", "trp_knight_29_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 29),
      (eq, "$kaos_kings_vassal", 29),
        (store_random_in_range, ":source_troop", "trp_knight_29_1", "trp_knight_30_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 30),
      (eq, "$kaos_kings_vassal", 30),
        (store_random_in_range, ":source_troop", "trp_knight_30_1", "trp_knight_31_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 31),
      (eq, "$kaos_kings_vassal", 31),
        (store_random_in_range, ":source_troop", "trp_knight_31_1", "trp_knight_32_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 32),
      (eq, "$kaos_kings_vassal", 32),
        (store_random_in_range, ":source_troop", "trp_knight_32_1", "trp_knight_33_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 33),
      (eq, "$kaos_kings_vassal", 33),
        (store_random_in_range, ":source_troop", "trp_knight_33_1", "trp_knight_34_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 34),
      (eq, "$kaos_kings_vassal", 34),
        (store_random_in_range, ":source_troop", "trp_knight_34_1", "trp_knight_35_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 35),
      (eq, "$kaos_kings_vassal", 35),
        (store_random_in_range, ":source_troop", "trp_knight_35_1", "trp_knight_36_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 36),
      (eq, "$kaos_kings_vassal", 36),
        (store_random_in_range, ":source_troop", "trp_knight_36_1", "trp_knight_37_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 37),
      (eq, "$kaos_kings_vassal", 37),
        (store_random_in_range, ":source_troop", "trp_knight_37_1", "trp_knight_38_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 38),
      (eq, "$kaos_kings_vassal", 38),
        (store_random_in_range, ":source_troop", "trp_knight_38_1", "trp_knight_39_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 39),
      (eq, "$kaos_kings_vassal", 39),
        (store_random_in_range, ":source_troop", "trp_knight_39_1", "trp_knight_40_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 40),
      (eq, "$kaos_kings_vassal", 40),
        (store_random_in_range, ":source_troop", "trp_knight_40_1", "trp_knight_41_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 41),
      (eq, "$kaos_kings_vassal", 41),
        (store_random_in_range, ":source_troop", "trp_knight_41_1", "trp_knight_42_1"),
    (else_try),
      (this_or_next|eq, "$kaos_kings_prince", 42),
      (eq, "$kaos_kings_vassal", 42),
        (store_random_in_range, ":source_troop", "trp_knight_42_1", "trp_enhanced_rnd_lord_1"),  ###### NEW v3.0
    (try_end),
    
    # (str_store_troop_name, s20, ":source_troop"),
    # (display_message, "@equip_troop_royal_start selected {s20}!"),
    
    # (set_show_messages, 0),
    
    ######### NEW v3.1 - princes receive better equipment
    (try_begin),
      (gt, "$kaos_kings_prince", 0),        
        (call_script, "script_give_source_troop_inventory_to_troop", "trp_player", ":source_troop", 2),
    (else_try),
      (gt, "$kaos_kings_vassal", 0),
        (call_script, "script_give_source_troop_inventory_to_troop", "trp_player", ":source_troop", 3),
    (try_end),
    ##################
    
   ]),
######################################################################







###################################################  NEW v2.0
  ##script_dplmc_store_troop_is_female
  #
  #This exists to make it easy to modify this to work with mods that redefine the troop types.
  #
  #If you change this, remember to also change script_cf_dplmc_troop_is_female and
  #script_dplmc_store_is_female_troop_1_troop_2
  #
  #INPUT: arg1: troop_no
  #
  #OUTPUT:
  #       reg0: 1 is yes, 0 is no
  ("dplmc_store_troop_is_female",
  [
    (store_script_param_1, ":troop_no"),
    (try_begin),
       (eq, ":troop_no", active_npcs_including_player_begin),
       (assign, ":troop_no", "trp_player"),
    (try_end),
    (troop_get_type, reg0, ":troop_no"),
    (try_begin),
        (neq, reg0, 0),
        (neq, reg0, 1),
        (assign, reg0, 0),#e.g. this would apply to tf_undead
    (try_end),
  ]),

###################################################################





############################# NEW v2.1 - VC improve equipment

  # script_get_item_modifier_effects moto chief
  # Input: itp_*, imod_*
  # Output: reg0 damage effect
  #         reg1 speed effect
  #         reg2 armor effect
  #         reg3 hit points effect
  #         reg4 difficulty effect
  #         reg5 price factor
  #         s0 descriptor string
  ("get_item_modifier_effects", [(store_script_param, ":type", 1),
      (store_script_param, ":imod", 2),
      
      (assign, ":damage", 0),
      (assign, ":speed", 0),
      (assign, ":armor", 0),
      (assign, ":hit_points", 0),
      (assign, ":difficulty", 0),
      (assign, ":price_factor", 100),
      
      (try_begin),
        (eq, ":type", itp_type_horse),
        (try_begin),
          (eq, ":imod", imod_lame),
          (assign, ":speed", -10),
          (assign, ":price_factor", 40),
          (str_store_string, s0, "@Lame"),
        (else_try),
          (eq, ":imod", imod_swaybacked),
          (assign, ":speed", -4),
          (assign, ":price_factor", 60),
          (str_store_string, s0, "@Swaybacked"),
        (else_try),
          (eq, ":imod", imod_timid),
          (assign, ":speed", 2),
          (assign, ":price_factor", 120),
          (str_store_string, s0, "@Timid"),
        (else_try),
          (eq, ":imod", imod_meek),
          (assign, ":speed", 2),
          (assign, ":price_factor", 120),
          (str_store_string, s0, "@Meek"),
        (else_try),
          (eq, ":imod", imod_stubborn),
          (assign, ":hit_points", 5),
          (assign, ":difficulty", 1),
          (assign, ":price_factor", 90),
          (str_store_string, s0, "@Stubborn"),
        (else_try),
          (eq, ":imod", imod_heavy),
          (assign, ":damage", 4),
          (assign, ":armor", 3),
          (assign, ":hit_points", 10),
          (assign, ":price_factor", 150),
          (str_store_string, s0, "@Heavy"),
        (else_try),
          (eq, ":imod", imod_spirited),
          (assign, ":damage", 1),
          (assign, ":speed", 2),
          (assign, ":price_factor", 160),
          (str_store_string, s0, "@Spirited"),
        (else_try),
          (eq, ":imod", imod_champion),
          (assign, ":damage", 2),
          (assign, ":speed", 4),
          (assign, ":difficulty", 2),
          (assign, ":price_factor", 170),
          (str_store_string, s0, "@Champion"),
        (try_end),
        
      (else_try),
        (eq, ":type", itp_type_shield),
        (try_begin),
          (eq, ":imod", imod_cracked),
          (assign, ":armor", -4),
          (assign, ":hit_points", -56),
          (assign, ":price_factor", 50),
          (str_store_string, s0, "@Cracked"),
        (else_try),
          (eq, ":imod", imod_battered),
          (assign, ":armor", -2),
          (assign, ":hit_points", -26),
          (assign, ":price_factor", 75),
          (str_store_string, s0, "@Battered"),
        (else_try),
          (eq, ":imod", imod_thick),
          (assign, ":armor", 2),
          (assign, ":hit_points", 47),
          (assign, ":price_factor", 120),
          (str_store_string, s0, "@Thick"),
        (else_try),
          (eq, ":imod", imod_reinforced),
          (assign, ":armor", 4),
          (assign, ":hit_points", 63),
          (assign, ":price_factor", 150),
          (str_store_string, s0, "@Reinforced"),
        (try_end),
        
      (else_try),
        (ge, ":type", itp_type_head_armor),
        (le, ":type", itp_type_hand_armor),
        (try_begin),
          (eq, ":imod", imod_cracked),
          (assign, ":armor", -4),
          (assign, ":price_factor", 50),
          (str_store_string, s0, "@Cracked"),
        (else_try),
          (eq, ":imod", imod_rusty),
          (assign, ":armor", -3),
          (assign, ":price_factor", 55),
          (str_store_string, s0, "@Rusty"),
        (else_try),
          (eq, ":imod", imod_tattered),
          (assign, ":armor", -3),
          (assign, ":price_factor", 40),
          (str_store_string, s0, "@Tattered"),
        (else_try),
          (eq, ":imod", imod_ragged),
          (assign, ":armor", -2),
          (assign, ":price_factor", 60),
          (str_store_string, s0, "@Ragged"),
        (else_try),
          (eq, ":imod", imod_battered),
          (assign, ":armor", -2),
          (assign, ":price_factor", 75),
          (str_store_string, s0, "@Battered"),
        (else_try),
          (eq, ":imod", imod_crude),
          (assign, ":armor", -1),
          (assign, ":price_factor", 83),
          (str_store_string, s0, "@Crude"),
        (else_try),
          (eq, ":imod", imod_sturdy),
          (assign, ":armor", 1),
          (assign, ":price_factor", 120),
          (str_store_string, s0, "@Sturdy"),
        (else_try),
          (eq, ":imod", imod_thick),
          (assign, ":armor", 2),
          (assign, ":price_factor", 140),
          (str_store_string, s0, "@Thick"),
        (else_try),
          (eq, ":imod", imod_hardened),
          (assign, ":armor", 3),
          (assign, ":price_factor", 160),
          (str_store_string, s0, "@Hardened"),
        (else_try),
          (eq, ":imod", imod_reinforced),
          (assign, ":armor", 4),
          (assign, ":price_factor", 180),
          (str_store_string, s0, "@Reinforced"),
        (else_try),
          (eq, ":imod", imod_lordly),
          (assign, ":armor", 5),
          (assign, ":price_factor", 400),
          (str_store_string, s0, "@Lordly"),
        (try_end),
        
      (else_try),
        (this_or_next | eq, ":type", itp_type_one_handed_wpn),
        (this_or_next | eq, ":type", itp_type_two_handed_wpn),
        (this_or_next | eq, ":type", itp_type_polearm),
        (this_or_next | eq, ":type", itp_type_bow),
        (this_or_next | eq, ":type", itp_type_crossbow),
        (this_or_next | eq, ":type", itp_type_pistol),
        (eq, ":type", itp_type_musket),
        
        (try_begin),
          (eq, ":imod", imod_rotten),        #idea is to use this for a completly broken weapon
          (assign, ":damage", -20),
          (assign, ":price_factor", 5),
          (str_store_string, s0, "@Broken"),
        (else_try),
          (eq, ":imod", imod_cracked),
          (assign, ":damage", -5),
          (assign, ":price_factor", 40),
          (str_store_string, s0, "@Cracked"),
        (else_try),
          (eq, ":imod", imod_rusty),
          (assign, ":damage", -3),
          (assign, ":price_factor", 55),
          (str_store_string, s0, "@Rusty"),
        (else_try),
          (eq, ":imod", imod_bent),
          (assign, ":damage", -3),
          (assign, ":speed", -3),
          (assign, ":price_factor", 60),
          (str_store_string, s0, "@Bent"),
        (else_try),
          (eq, ":imod", imod_chipped),
          (assign, ":damage", -1),
          (assign, ":price_factor", 72),
          (str_store_string, s0, "@Chipped"),
        (else_try),
          (eq, ":imod", imod_heavy),
          (assign, ":damage", 2),
          (assign, ":speed", -2),
          (assign, ":difficulty", 1),
          (assign, ":price_factor", 120),
          (str_store_string, s0, "@Heavy"),
        (else_try),
          (eq, ":imod", imod_strong),
          (assign, ":damage", 3),
          (assign, ":speed", -3),
          (assign, ":difficulty", 2),
          (assign, ":price_factor", 150),
          (str_store_string, s0, "@Strong"),
        (else_try),
          (eq, ":imod", imod_balanced),
          (assign, ":damage", 3),
          (assign, ":speed", 3),
          (assign, ":price_factor", 165),
          (str_store_string, s0, "@Balanced"),
        (else_try),
          (eq, ":imod", imod_tempered),
          (assign, ":damage", 4),
          (assign, ":price_factor", 180),
          (str_store_string, s0, "@Tempered"),
        (else_try),
          (eq, ":imod", imod_masterwork),
          (assign, ":damage", 5),
          (assign, ":speed", 1),
          (assign, ":difficulty", 4),
          (assign, ":price_factor", 400),
          (str_store_string, s0, "@Masterwork"),
        (else_try),
          (eq, ":imod", imod_crude),
          (assign, ":damage", -2),
          (assign, ":price_factor", 83),
        (try_end),
        
      (else_try),
        (this_or_next | eq, ":type", itp_type_arrows),
        (this_or_next | eq, ":type", itp_type_bolts),
        (this_or_next | eq, ":type", itp_type_bullets),
        (eq, ":type", itp_type_thrown),
        
        (try_begin),
          (eq, ":imod", imod_large_bag),
          #       (assign, ":damage", 1), #just make better than plain
          (assign, ":price_factor", 110),
          (str_store_string, s0, "@Large Bag of"),
        (else_try),
          (eq, ":imod", imod_bent),
          (assign, ":damage", -3),
          (assign, ":price_factor", 65),
          (str_store_string, s0, "@Bent"),
        (else_try),
          (eq, ":imod", imod_cracked),
          (assign, ":damage", -5),
          (assign, ":price_factor", 50),
          (str_store_string, s0, "@Cracked"),
        (else_try),
          (eq, ":imod", imod_heavy),
          (assign, ":damage", 2),
          (assign, ":price_factor", 130),
          (str_store_string, s0, "@Heavy"),
        (else_try),
          (eq, ":imod", imod_balanced),
          (assign, ":damage", 3),
          (assign, ":price_factor", 150),
          (str_store_string, s0, "@Balanced"),
        (try_end),
      (try_end),
      
      (assign, reg0, ":damage"),
      (assign, reg1, ":speed"),
      (assign, reg2, ":armor"),
      (assign, reg3, ":hit_points"),
      (assign, reg4, ":difficulty"),
      (assign, reg5, ":price_factor"),]),
  
  
  
  
  # script_get_next_lower_imod_for_item
  # Component: Helper
  ("get_next_lower_imod_for_item",[(store_script_param_1, ":item_id"),
      (store_script_param_2, ":current_imod"),
      
      (item_get_type, ":item_type", ":item_id"),
      (call_script, "script_get_item_modifier_effects", ":item_type", ":current_imod"),
      (assign, ":start_item_value", reg5),
      (assign, ":compare_item_value", 0),
      (assign, ":target_imod", ":current_imod"),
      
      (try_for_range, ":test_imod", imod_plain, imod_large_bag + 1),
        (this_or_next | eq, ":test_imod", imod_plain),
        (item_has_modifier, ":item_id", ":test_imod"), #Fails if <item_modifier_no> is not a valid modifier for <item_kind_no>
        (neq, ":test_imod", ":current_imod"),
        (call_script, "script_get_item_modifier_effects", ":item_type", ":test_imod"),
        (is_between, reg5, ":compare_item_value", ":start_item_value"),
        (assign, ":compare_item_value", reg5),
        (assign, ":target_imod", ":test_imod"),
      (try_end),
      (assign, reg0, ":target_imod"),]),
  
  # script_get_next_higher_imod_for_item
  # Component: Helper
  ("get_next_higher_imod_for_item",[(store_script_param_1, ":item_id"),
      (store_script_param_2, ":current_imod"),
      
      (item_get_type, ":item_type", ":item_id"),
      (call_script, "script_get_item_modifier_effects", ":item_type", ":current_imod"),
      (assign, ":start_item_value", reg5),
      (assign, ":compare_item_value", 1000),
      (assign, ":target_imod", ":current_imod"),
      
      (try_for_range, ":test_imod", imod_plain, imod_large_bag + 1),
        (this_or_next | eq, ":test_imod", imod_plain),
        (item_has_modifier, ":item_id", ":test_imod"), #Fails if <item_modifier_no> is not a valid modifier for <item_kind_no>
        (neq, ":test_imod", imod_swaybacked),    # for some reason item_has_modifier and arrows dont fail for imod_swaybacked
        (neq, ":test_imod", ":current_imod"),
        (call_script, "script_get_item_modifier_effects", ":item_type", ":test_imod"),
        (is_between, reg5, ":start_item_value", ":compare_item_value"),
        (assign, ":compare_item_value", reg5),
        (assign, ":target_imod", ":test_imod"),
      (try_end),
      (assign, reg0, ":target_imod"),]),
  
###################################################################





##################### NEW v2.1 - CWE item scripts
  ("sa_armor_jerusalem_set_tableau_kompl",
  [
    (store_script_param, ":var0", 1),
    (store_script_param, ":var1", 2),
    (store_script_param, ":var2", 3),
    (item_set_slot, ":var2", 94, 1),
    (try_begin),
      (ge, ":var0", 0),
      (agent_is_human, ":var0"),
      (neg|troop_is_hero, ":var1"),
      (try_begin),
        (agent_get_slot, ":var3", ":var0", 28),
        (agent_get_slot, ":var4", ":var0", 29),
        (ge, ":var3", 1),
        (try_begin),
          (assign, ":var5", 0),
          (assign, ":var6", 89),
          (assign, ":var7", 0),
          (try_for_range, ":var8", 70, ":var6"),
            (this_or_next|eq, ":var8", 70),
            (this_or_next|eq, ":var8", 72),
            (this_or_next|eq, ":var8", 74),
            (this_or_next|eq, ":var8", 76),
            (this_or_next|eq, ":var8", 78),
            (this_or_next|eq, ":var8", 80),
            (this_or_next|eq, ":var8", 82),
            (this_or_next|eq, ":var8", 84),
            (this_or_next|eq, ":var8", 86),
            (eq, ":var8", 88),
            (val_add, ":var5", 1),
            (eq, ":var5", ":var3"),
            (item_slot_ge, ":var2", ":var8", 1),
            (assign, ":var9", ":var8"),
            (store_add, ":var10", ":var9", 1),
            (assign, ":var6", 0),
          (try_end),
          (item_get_slot, ":var7", ":var2", ":var9"),
          (item_get_slot, ":var11", ":var2", ":var10"),
          (val_add, ":var11", 1),
          (ge, ":var7", 1),
          (store_random_in_range, ":var12", ":var7", ":var11"),
          (cur_item_set_tableau_material, ":var12"),
        (try_end),
      (else_try),
        (eq, ":var3", 0),
        (ge, ":var4", 1),
        (try_begin),
          (item_get_slot, ":var7", ":var2", 90),
          (item_get_slot, ":var11", ":var2", 91),
          (val_add, ":var11", 1),
          (ge, ":var7", 1),
          (store_random_in_range, ":var12", ":var7", ":var11"),
          (cur_item_set_tableau_material, ":var12"),
          (assign, ":var5", 0),
          (assign, ":var6", 89),
          (assign, ":var7", 0),
          (try_for_range, ":var8", 70, ":var6"),
            (this_or_next|eq, ":var8", 70),
            (this_or_next|eq, ":var8", 72),
            (this_or_next|eq, ":var8", 74),
            (this_or_next|eq, ":var8", 76),
            (this_or_next|eq, ":var8", 78),
            (this_or_next|eq, ":var8", 80),
            (this_or_next|eq, ":var8", 82),
            (this_or_next|eq, ":var8", 84),
            (this_or_next|eq, ":var8", 86),
            (eq, ":var8", 88),
            (val_add, ":var5", 1),
            (item_slot_ge, ":var2", ":var8", 1),
            (assign, ":var9", ":var8"),
            (store_add, ":var10", ":var9", 1),
            (item_get_slot, ":var7", ":var2", ":var9"),
            (item_get_slot, ":var11", ":var2", ":var10"),
            (val_add, ":var11", 1),
            (is_between, ":var12", ":var7", ":var11"),
            (agent_set_slot, ":var0", 28, ":var5"),
            (assign, ":var6", 0),
          (try_end),
        (try_end),
      (else_try),
        (item_get_slot, ":var7", ":var2", 90),
        (item_get_slot, ":var11", ":var2", 91),
        (val_add, ":var11", 1),
        (ge, ":var7", 1),
        (store_random_in_range, ":var12", ":var7", ":var11"),
        (cur_item_set_tableau_material, ":var12"),
      (try_end),
      (try_begin),
        (call_script, "script_sa_boot_set_imodbits_for_troop", ":var1"),
      (try_end),
    (try_end),
  ]),
  

  ("sa_boot_set_imodbits_for_troop",
  [
    (store_script_param, ":var0", 1),
    (try_begin),
      (troop_get_inventory_slot, ":var1", ":var0", ek_foot),
      (ge, ":var1", 1),
      (item_get_slot, ":var2", ":var1", 65),
      (ge, ":var2", 1),
      (assign, ":var3", 0),
      (assign, ":var4", 6),
      (try_begin),
        (eq, ":var2", 16777216),
        (store_random_in_range, ":var5", 0, 2),
        (try_begin),
          (eq, ":var5", 1),
          (assign, ":var3", 24),
        (try_end),
      (else_try),
        (eq, ":var2", 134217728),
        (store_random_in_range, ":var5", 0, 2),
        (try_begin),
          (eq, ":var5", 1),
          (assign, ":var3", 27),
        (try_end),
      (else_try),
        (eq, ":var2", 536870912),
        (try_begin),
          (troop_is_mounted, ":var0"),
          (assign, ":var3", 29),
        (try_end),
      (else_try),
        (eq, ":var2", 33554432),
        (store_random_in_range, ":var5", 0, 2),
        (try_begin),
          (eq, ":var5", 1),
          (assign, ":var3", 25),
        (try_end),
      (try_end),
      (try_begin),
        (ge, ":var3", 0),
        (troop_set_inventory_slot_modifier, ":var0", ":var4", ":var3"),
      (try_end),
    (try_end),
  ]),
  

  ("sa_armor_set_random_tableau",
  [
    (store_script_param, ":var0", 1),
    (store_script_param, ":var1", 2),
    (store_script_param, ":var2", 3),
    (store_script_param, ":var3", 4),
    (store_script_param, ":var4", 5),
    (item_set_slot, ":var4", 94, 1),
    (try_begin),
      (ge, ":var0", 0),
      (neg|troop_is_hero, ":var1"),
      (val_add, ":var3", 1),
      (ge, ":var2", 1),
      (store_random_in_range, ":var5", ":var2", ":var3"),
      (cur_item_set_tableau_material, ":var5"),
    (try_end),
  ]),

###################################################################




############################# NEW v2.1 -  RUBIK'S PERFECT TROOP TREE PRESENTATION 
("troop_tree_recursive_backtracking",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":cur_x", 2),
      (store_script_param, ":cur_y", 3),
      (store_script_param, ":offset_x", 4),
     
      (store_add, ":next_x", ":cur_x", ":offset_x"),
      # upgrade_troop
      (troop_get_upgrade_troop, ":upgrade_troop_1", ":troop_no", 0),
      (troop_get_upgrade_troop, ":upgrade_troop_2", ":troop_no", 1),
      (try_begin),
        (gt,  ":upgrade_troop_2", 0),
        (call_script, "script_troop_tree_recursive_backtracking", ":upgrade_troop_2", ":next_x", reg2, ":offset_x"),
        (assign, ":upgrade_troop_2_y", reg0),
        (val_add, reg2, 160), # current global y
        (call_script, "script_troop_tree_recursive_backtracking", ":upgrade_troop_1", ":next_x", reg2, ":offset_x"),
        (assign, ":upgrade_troop_1_y", reg0),
      (else_try),
        (gt,  ":upgrade_troop_1", 0),
        (call_script, "script_troop_tree_recursive_backtracking", ":upgrade_troop_1", ":next_x", reg2, ":offset_x"),
        (assign, ":upgrade_troop_1_y", reg0),
      (try_end),
     
      # troop_tree_line
      (try_begin),
        (gt,  ":upgrade_troop_2", 0),
        (store_add, reg0, ":upgrade_troop_1_y", ":upgrade_troop_2_y"),
        (val_div, reg0, 2),
        #               ---- upgrade_troop_1
        #              |
        # troop_no ----
        #              |
        #               ---- upgrade_troop_2
        (store_div, ":half_offset_x", ":offset_x", 2),
        (store_add, ":middle_x", ":cur_x", ":half_offset_x"),
        (call_script, "script_prsnt_line", ":half_offset_x", 4, ":cur_x", reg0, 0),
        (call_script, "script_prsnt_line", ":half_offset_x", 4, ":middle_x", ":upgrade_troop_1_y", 0),
        (call_script, "script_prsnt_line", ":half_offset_x", 4, ":middle_x", ":upgrade_troop_2_y", 0),
        (store_sub, ":size_y", ":upgrade_troop_1_y", ":upgrade_troop_2_y"),
        (val_add, ":size_y", 4),
        (call_script, "script_prsnt_line", 4, ":size_y", ":middle_x", ":upgrade_troop_2_y", 0),
      (else_try),
        (gt,  ":upgrade_troop_1", 0),
        (assign, reg0, ":upgrade_troop_1_y"),
        #
        # troop_no -------- upgrade_troop_1
        #
        (call_script, "script_prsnt_line", ":offset_x", 4, ":cur_x", ":upgrade_troop_1_y", 0),
      (else_try),
        (assign, reg0, ":cur_y"),
      (try_end),
     
      # troop name
      (str_store_troop_name, s1, ":troop_no"),
      (create_text_overlay, reg1, "@{s1}", tf_center_justify|tf_vertical_align_center|tf_double_space|tf_scrollable),
      ############ This solves the issue with mounted troop names
      (try_begin),
        (troop_is_mounted, ":troop_no"),
        (store_sub, ":name_x", ":cur_x", 57),
        (store_sub, ":name_y", reg0, 120),
      (else_try),
        (store_sub, ":name_x", ":cur_x", 57),
        (store_sub, ":name_y", reg0, 104),
      (try_end),
      ############
      (position_set_x, pos1, ":name_x"),
      (position_set_y, pos1, ":name_y"),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, 100),
      (position_set_y, pos1, 60),
      (overlay_set_area_size, reg1, pos1),
      (position_set_x, pos1, 640),
      (position_set_y, pos1, 640),
      (overlay_set_size, reg1, pos1),
     
      # troop avatar
      (store_sub, ":avatar_x", ":cur_x", 60),
      (store_sub, ":avatar_y", reg0, 60),
      (store_mul, ":cur_troop", ":troop_no", 2), #with weapons
      (create_image_button_overlay_with_tableau_material, reg1, -1, "tableau_game_party_window", ":cur_troop"),
      (position_set_x, pos1, 360),
      (position_set_y, pos1, 480),
      (overlay_set_size, reg1, pos1),
      (position_set_x, pos1, ":avatar_x"),
      (position_set_y, pos1, ":avatar_y"),
      (overlay_set_position, reg1, pos1),
     
      # troop info
      (troop_set_slot, "trp_stack_selection_amounts", "$g_cur_slot_no", reg1),
      (troop_set_slot, "trp_stack_selection_ids", "$g_cur_slot_no", ":troop_no"),
      (val_add, "$g_cur_slot_no", 1),
    ]),

   # reg0: cur max_tier
   ("troop_tree_recursive_detect_max_tier",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":cur_tier", 2),
     
      (store_add, ":next_tier", ":cur_tier", 1),
      # upgrade_troop
      (troop_get_upgrade_troop, ":upgrade_troop_1", ":troop_no", 0),
      (troop_get_upgrade_troop, ":upgrade_troop_2", ":troop_no", 1),
      (try_begin),
        (gt,  ":upgrade_troop_2", 0),
        (call_script, "script_troop_tree_recursive_detect_max_tier", ":upgrade_troop_2", ":next_tier"),
        (call_script, "script_troop_tree_recursive_detect_max_tier", ":upgrade_troop_1", ":next_tier"),
      (else_try),
        (gt,  ":upgrade_troop_1", 0),
        (call_script, "script_troop_tree_recursive_detect_max_tier", ":upgrade_troop_1", ":next_tier"),
      (try_end),
     
      (try_begin),
        (gt, ":cur_tier", reg0),
        (assign, reg0, ":cur_tier"),
      (try_end),
    ]),
   
  ("prsnt_line",
    [
      (store_script_param, ":size_x", 1),
      (store_script_param, ":size_y", 2),
      (store_script_param, ":pos_x", 3),
      (store_script_param, ":pos_y", 4),
      (store_script_param, ":color", 5),

      (create_mesh_overlay, reg1, "mesh_white_plane"),
      (val_mul, ":size_x", 50),
      (val_mul, ":size_y", 50),
      (position_set_x, pos0, ":size_x"),
      (position_set_y, pos0, ":size_y"),
      (overlay_set_size, reg1, pos0),
      (position_set_x, pos0, ":pos_x"),
      (position_set_y, pos0, ":pos_y"),
      (overlay_set_position, reg1, pos0),
      (overlay_set_color, reg1, ":color"),
  ]),


################# MODIFIED FOR WORKING WITH CULTURES  
  # script_get_page_no_of_troop_tree_for_troop_on_1
  # Input: troop_no
  # Output: page_no
  ("get_page_no_of_troop_tree_for_troop_on_1",
  [
      (store_script_param, ":troop_no", 1),
     
      (store_sub, ":num_factions", npc_cultures_end_1, npc_cultures_begin_1),
      # (store_troop_faction, ":troop_faction", ":troop_no"),
      (try_begin),
        (is_between, ":troop_no", finn_culture_start, finn_culture_end),
        (store_sub, ":page_no", "fac_culture_finnish", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", mazovian_culture_start, mazovian_culture_end),
        (store_sub, ":page_no", "fac_culture_mazovian", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", serbian_culture_start, serbian_culture_end),
        (store_sub, ":page_no", "fac_culture_serbian", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", welsh_culture_start, welsh_culture_end),
        (store_sub, ":page_no", "fac_culture_welsh", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", teutonic_culture_start, teutonic_culture_end),
        (store_sub, ":page_no", "fac_culture_teutonic", npc_cultures_begin_1),
####### NEW v2.9-KOMKE START-           
      # (else_try),##KOMKE fac_culture_mongol commented out here because it's in the last else_try
      #   (is_between, ":troop_no", mongol_culture_start, mongol_culture_end),
      #   (store_sub, ":page_no", "fac_culture_mongol", npc_cultures_begin_1),
####### NEW v2.9-KOMKE END-              
      (else_try),
        (is_between, ":troop_no", balkan_culture_start, balkan_culture_end),
        (store_sub, ":page_no", "fac_culture_balkan", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", rus_culture_start, rus_culture_end),
        (store_sub, ":page_no", "fac_culture_rus", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", nordic_culture_start, nordic_culture_end),
        (store_sub, ":page_no", "fac_culture_nordic", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", balt_culture_start, balt_culture_end),
        (store_sub, ":page_no", "fac_culture_baltic", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", marinid_culture_start, marinid_culture_end),
        (store_sub, ":page_no", "fac_culture_marinid", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", bedouin_culture_start, bedouin_culture_end),
        (store_sub, ":page_no", "fac_culture_mamluke", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", byz_culture_start, byz_culture_end),
        (store_sub, ":page_no", "fac_culture_byzantium", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", iberian_culture_start, iberian_culture_end),
        (store_sub, ":page_no", "fac_culture_iberian", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", italian_culture_start, italian_culture_end),
        (store_sub, ":page_no", "fac_culture_italian", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", andalus_culture_start, andalus_culture_end),
        (store_sub, ":page_no", "fac_culture_andalus", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", gaelic_culture_start, gaelic_culture_end),
        (store_sub, ":page_no", "fac_culture_gaelic", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", anatolian_christian_culture_start, anatolian_christian_culture_end),
        (store_sub, ":page_no", "fac_culture_anatolian_christian", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", anatolian_culture_start, anatolian_culture_end),
        (store_sub, ":page_no", "fac_culture_anatolian", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", scottish_culture_start, scottish_culture_end),
        (store_sub, ":page_no", "fac_culture_scotish", npc_cultures_begin_1),
      (else_try),
        (is_between, ":troop_no", euro_culture_start, euro_culture_end),
        (store_sub, ":page_no", "fac_culture_western", npc_cultures_begin_1),    
      (else_try),
        (is_between, ":troop_no", mongol_culture_start, mongol_culture_end),
        (store_sub, ":page_no", "fac_culture_mongol", npc_cultures_begin_1),
      (try_end),
      (assign, reg0, ":page_no"),
  ]),
  
  
  
  ("get_page_no_of_troop_tree_for_troop_on_2",
  [
      (store_script_param, ":troop_no", 1),
     
      (store_sub, ":num_factions", npc_cultures_end_2, npc_cultures_begin_2),
      # (store_troop_faction, ":troop_faction", ":troop_no"),
      (try_begin),
        (is_between, ":troop_no", templar_culture_start, templar_culture_end),
        (store_sub, ":page_no", "fac_culture_templar", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", hospitaller_culture_start, hospitaller_culture_end),
        (store_sub, ":page_no", "fac_culture_hospitaller", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", antioch_culture_start, antioch_culture_end),
        (store_sub, ":page_no", "fac_culture_antioch", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", tripoli_culture_start, tripoli_culture_end),
        (store_sub, ":page_no", "fac_culture_tripoli", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", ibelin_culture_start, ibelin_culture_end),
        (store_sub, ":page_no", "fac_culture_ibelin", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", jerusalem_culture_start, jerusalem_culture_end),
        (store_sub, ":page_no", "fac_culture_jerusalem", npc_cultures_begin_2),
      ############ NEW v3.3    
      (else_try),
        (is_between, ":troop_no", crusader_culture_start, crusader_culture_end),
        (store_sub, ":page_no", "fac_culture_crusader", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", cuman_culture_start, cuman_culture_end),
        (store_sub, ":page_no", "fac_culture_cuman", npc_cultures_begin_2),
      ########################## NEW v3.10
      (else_try),
        (is_between, ":troop_no", english_culture_start, english_culture_end),
        (store_sub, ":page_no", "fac_culture_english", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", french_culture_start, french_culture_end),
        (store_sub, ":page_no", "fac_culture_french", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", hungarian_culture_start, hungarian_culture_end),
        (store_sub, ":page_no", "fac_culture_hungarian", npc_cultures_begin_2),
      (else_try),
        (is_between, ":troop_no", polish_culture_start, polish_culture_end),
        (store_sub, ":page_no", "fac_culture_polish", npc_cultures_begin_2),
############################
      (else_try),
        (is_between, ":troop_no", player_culture_start, player_culture_end),
        (store_sub, ":page_no", "fac_culture_player", npc_cultures_begin_2),
      ############
      (else_try),
        (is_between, ":troop_no", mercenary_troops_begin, mercenary_troops_end),
        (store_add, ":page_no", ":num_factions", 0), ### Mercenaries
      (else_try),
        (is_between, ":troop_no", "trp_looter", "trp_black_khergit_horseman"),
        (store_add, ":page_no", ":num_factions", 1), ### Outlaws
      (else_try),
        (is_between, ":troop_no", "trp_refugee", "trp_kidnapped_girl"),
        (store_add, ":page_no", ":num_factions", 2), ### Others (peasants)
      (else_try),
        (neg|is_between, ":troop_no", soldiers_begin, soldiers_end),
        (store_add, ":page_no", ":num_factions", 2), ### Others (all others)
      (try_end),
      (assign, reg0, ":page_no"),
  ]),
###################################################################




############################ NEW v2.1
("enhanced_apply_lord_culture_to_fief",
  [
   (try_for_range, ":cur_fief", centers_begin, centers_end),
     (party_get_slot, ":cur_lord", ":cur_fief", slot_town_lord),        
     (gt, ":cur_lord", -1),        
       (troop_get_slot, ":culture", ":cur_lord", slot_troop_cur_culture),        
       (party_set_slot, ":cur_fief", slot_center_culture,  ":culture"),
   (try_end),
  ]),
###################################################################





############################ NEW v2.1 - calculates the lord threshold based upon the amount of lords and fiefs in the faction 
("check_faction_lord_threshold",
  [
   (store_script_param, ":faction_no", 1),
   
   (try_begin),
     (assign, ":lord_town_threshold", 0),
     (assign, ":lord_castle_threshold", 0),
     (assign, ":lord_village_threshold", 0),

     (faction_get_slot, ":cur_faction_town_count", ":faction_no", slot_faction_num_towns),        
     (faction_get_slot, ":cur_faction_castle_count", ":faction_no", slot_faction_num_castles),        
     (faction_get_slot, ":cur_faction_village_count", ":faction_no", slot_faction_num_villages),        
     (faction_get_slot, ":cur_faction_lord_count", ":faction_no", slot_faction_lord_count),  
     (try_begin),
       (gt, "$g_lord_creation_threshold_towns", 0),  ####### NEW v3.2
       (ge, ":cur_faction_town_count", "$g_lord_creation_threshold_towns"),
         (store_div, ":lord_town_threshold", ":cur_faction_town_count", "$g_lord_creation_threshold_towns"),
     (try_end),
     
     (try_begin),
       (gt, "$g_lord_creation_threshold_castles", 0),  ####### NEW v3.2
       (ge, ":cur_faction_castle_count", "$g_lord_creation_threshold_castles"),
         (store_div, ":lord_castle_threshold", ":cur_faction_castle_count", "$g_lord_creation_threshold_castles"),
     (try_end),
     
     (try_begin),
       (gt, "$g_lord_creation_threshold_villages", 0),  ####### NEW v3.2
       (ge, ":cur_faction_village_count", "$g_lord_creation_threshold_villages"),
         (store_div, ":lord_village_threshold", ":cur_faction_village_count", "$g_lord_creation_threshold_villages"),
     (try_end),

     (try_begin),
       (store_add, ":cur_faction_lord_total_threshold", ":lord_town_threshold", ":lord_castle_threshold"),
       (val_add, ":cur_faction_lord_total_threshold", ":lord_village_threshold"),
       (try_begin), #### minimum
         (lt, ":cur_faction_lord_total_threshold", "$g_lord_creation_minimum"),
           (val_add, ":cur_faction_lord_total_threshold", "$g_lord_creation_minimum"),
       (try_end),
       (lt, ":cur_faction_lord_count", ":cur_faction_lord_total_threshold"),
         (assign, reg0, 1),  ### create new lord
     (else_try),
       (assign, reg0, 0),
     (try_end),
   (try_end),
  ]),
###################################################################






############################ NEW v2.1 - creates a new lord
("create_new_lord_for_faction",
  [
   (store_script_param, ":faction_no", 1),
   
   # (assign, ":break_loop", 0),
   
   (try_begin), 
     (le, "$g_use_random_lords_until", 130),  #### will use random lords for the first 130 times
       (assign, ":lord_lower_range", "trp_enhanced_rnd_lord_1"),  
       (assign, ":lord_upper_range", "trp_enhanced_rnd_lord_end"), 
       (val_add, "$g_use_random_lords_until", 1), 
       # (display_message, "@#########################"),
       # (display_message, "@Went with random lords."),
   (else_try), 
     (gt, "$g_use_random_lords_until", 130),  #### start using vanilla 1257 lords too
       (assign, ":lord_lower_range", lords_begin),  
       (assign, ":lord_upper_range", lords_end), 
       (val_add, "$g_use_random_lords_until", 1), ######## NEW v3.7
       # (display_message, "@#########################"),
       # (display_message, "@Went with vanilla lords."),
   (try_end), 
   
     
   (try_begin),  ### CULTURE
     (eq, ":faction_no", "fac_player_supporters_faction"),  #### if player use different script
       (call_script, "script_get_random_culture_for_lord_player_faction", ":faction_no"), ## gets a random culture based on proximity
       (assign, ":cur_lord_culture", reg0),  
       # (str_store_faction_name, s7, ":cur_lord_culture"),  
       # (display_message, "@Culture is {s7}."),
   (else_try),
     (neq, ":faction_no", "fac_player_supporters_faction"),  #### if player use different script
       (call_script, "script_get_random_culture_for_lord", ":faction_no"), ## gets a random culture based on proximity
       (assign, ":cur_lord_culture", reg0),  
       # (str_store_faction_name, s7, ":cur_lord_culture"),  
       # (display_message, "@Culture is {s7}."),
   (try_end),
       
   # (assign, ":upper_range", 1000),   ### this should be enough
   (try_for_range, ":cur_lord", ":lord_lower_range", ":lord_upper_range"), 
     # (call_script, "script_rand", ":lord_lower_range", ":lord_upper_range"), ###### gets a random lord #### NEW v3.3 - no longer necessary
     # (assign, ":cur_lord", reg0),  
     (troop_slot_eq, ":cur_lord", slot_troop_is_alive, 0),  ### dead or inactive
     # (troop_slot_eq, ":cur_lord", slot_troop_face_type, ":cur_lord_face_type"),   ### check if face type matches
       (assign, ":lord_upper_range", -1),  ### breaks loop
       (troop_set_note_available, ":cur_lord", 0),
       (call_script, "script_recycle_lord", ":cur_lord", ":faction_no"), ## recycle the mofo
       # (call_script, "script_ee_set_random_face_for_hero_troop_by_culture", ":cur_lord", ":cur_lord_culture"), ## NEW v3.3 - gets a random face based on culture
       # (call_script, "script_ee_set_random_face_for_hero_troop_by_culture", ":cur_lord", ":cur_lord_culture"), ## NEW v3.3 - gets a random face based on culture
     
       (try_begin),  ### CULTURE
         (troop_set_slot, ":cur_lord", slot_troop_cur_culture, ":cur_lord_culture"),  ## applies the culture to lord
       (try_end),
     
################## NEW v3.2 - added new script 
       (try_begin),  ### NAME
         # (eq, ":faction_no", "fac_player_supporters_faction"),  #### if player use different script
         (eq, ":cur_lord_culture", "fac_culture_player"),  
           (call_script, "script_get_random_name_for_lord_by_language", ":faction_no", ":cur_lord"), ## gets a random name based on culture
       (else_try),
         (neq, ":cur_lord_culture", "fac_culture_player"),  
           (call_script, "script_get_random_name_for_lord", ":faction_no", ":cur_lord", ":cur_lord_culture"), 
       (try_end),
##################
       # (str_store_troop_name, s8, ":cur_lord"), 
       # (display_message, "@His name is {s8}."),
   
       (try_begin),  ### EQUIPMENT
         (neq, ":cur_lord_culture", "fac_culture_player"),
         (neg|is_between, ":faction_no", enhanced_factions_begin, enhanced_factions_end),
           (faction_get_slot, ":cur_faction_culture", ":faction_no", slot_faction_culture), 
           (eq, ":cur_lord_culture", ":cur_faction_culture"),
           (call_script, "script_get_random_equipment_type_from_troop_by_faction", ":cur_lord", ":faction_no"), ## gets a random name based on faction
             # (display_message, "@Gave him equipment (script_get_random_equipment_type_from_troop_by_faction_or_culture)."),
       (else_try), 
         (call_script, "script_get_random_equipment_type_from_troop_by_culture", ":cur_lord", ":cur_lord_culture"), ## gets a random name based on culture
           # (display_message, "@Gave him equipment (script_get_random_equipment_type_from_troop_by_faction_or_culture)."),
       (try_end),
     
       # (str_store_troop_name, s8, ":cur_lord"), 
       # (display_message, "@His name is {s8}."),
    
###################### NEW v3.3 - player can choose if he wants to accept a lord or not
       (try_begin),  
         (eq, ":faction_no", "$players_kingdom"),
         (faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"),
           (assign, "$g_ee_cur_faction", ":faction_no"),
           (assign, "$g_ee_cur_troop", ":cur_lord"),
           (start_presentation, "prsnt_lord_vassalage_notify"),
       (else_try),
         (neq, ":faction_no", "$players_kingdom"),
         (neg|faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"),
           (call_script, "script_ee_spawn_lord_party", ":cur_lord", ":faction_no"), 
       (else_try),
         (call_script, "script_ee_spawn_lord_party", ":cur_lord", ":faction_no"), 
       (try_end),
############################################
   (try_end),
]),
########################################################
  

  

############################ NEW v2.1 - recycles the lord
("recycle_lord",
  [
   (store_script_param, ":cur_lord", 1),
   (store_script_param, ":faction_no", 2),
   
   (try_begin),
     (troop_set_slot, ":cur_lord", slot_troop_father, -1),
     (troop_set_slot, ":cur_lord", slot_troop_mother, -1),
     (troop_set_slot, ":cur_lord", slot_troop_guardian, -1),
     (troop_set_slot, ":cur_lord", slot_troop_spouse, -1),
     (troop_set_slot, ":cur_lord", slot_troop_betrothed, -1),
     (troop_set_slot, ":cur_lord", slot_troop_prisoner_of_party, -1),
     (troop_set_slot, ":cur_lord", slot_lady_last_suitor, -1),
     (troop_set_slot, ":cur_lord", slot_troop_stance_on_faction_issue, -1),
     
     (call_script, "script_rand", 0, 10000),
     (troop_set_slot, ":cur_lord", slot_troop_set_decision_seed, reg0),    #currently not used
     (troop_set_slot, ":cur_lord", slot_troop_temp_decision_seed, reg0), 
     
     (call_script, "script_rand", 200, 400),
     (troop_set_slot, ":cur_lord", slot_troop_renown, reg0),
     
     (call_script, "script_rand", banner_meshes_begin, banner_meshes_end_minus_one),  
     (troop_set_slot, ":cur_lord", slot_troop_banner_scene_prop, reg0),
     
     (troop_set_slot, ":cur_lord", slot_troop_original_faction, ":faction_no"),
     
     (call_script, "script_rand", 3000, 5000),
     (troop_set_slot, ":cur_lord", slot_troop_wealth, reg0),
     
     (troop_set_slot, ":cur_lord", slot_troop_leaded_party, -1),
     (troop_set_slot, ":cur_lord", slot_troop_occupation, slto_kingdom_hero),

     (call_script, "script_rand", 1, 8),
     (troop_set_slot, ":cur_lord", slot_lord_reputation_type, reg0),
     
     (troop_set_slot, ":cur_lord", slot_troop_met, 0),

     (call_script, "script_rand", 20, 50),
     (troop_set_slot, ":cur_lord", slot_troop_age, reg0),
     (call_script, "script_init_troop_age", ":cur_lord", reg0),
     
     (troop_set_slot, ":cur_lord", slot_troop_does_not_give_quest, 0),
     (troop_set_slot, ":cur_lord", slot_troop_player_debt, 0),
     (troop_set_slot, ":cur_lord", slot_troop_player_relation, 0),
     (troop_set_slot, ":cur_lord", slot_troop_last_quest, 0),
     (troop_set_slot, ":cur_lord", slot_troop_last_quest_betrayed, 0),
     (troop_set_slot, ":cur_lord", slot_troop_last_persuasion_time, 0),
     (troop_set_slot, ":cur_lord", slot_troop_last_comment_time, 0),
     
     (troop_set_slot, ":cur_lord", slot_troop_first_encountered, -1),
     (troop_set_slot, ":cur_lord", slot_troop_home, -1),
     
     (troop_set_slot, ":cur_lord", slot_troop_morality_value, -1),
     (troop_set_slot, ":cur_lord", slot_troop_town_with_contacts, -1),
     (troop_set_slot, ":cur_lord", slot_troop_morality_penalties, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalityclash_object, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalityclash_state, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalityclash2_object, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalityclash2_state, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalitymatch_object, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalitymatch_state, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalityclash_penalties, -1),
     (troop_set_slot, ":cur_lord", slot_troop_personalityclash_penalties, -1),
     
     (troop_set_slot, ":cur_lord", slot_troop_met_previously, -1),
     (troop_set_slot, ":cur_lord", slot_troop_turned_down_twice, -1),
     (troop_set_slot, ":cur_lord", slot_troop_playerparty_history, -1),
     
     (troop_set_slot, ":cur_lord", slot_troop_days_on_mission, -1),
     (troop_set_slot, ":cur_lord", slot_troop_current_mission, -1),
     (troop_set_slot, ":cur_lord", slot_troop_mission_object, -1),
     
     (call_script, "script_assign_troop_love_interests", ":cur_lord"),
    
     (troop_set_slot, ":cur_lord", slot_troop_temp_slot, 0),
     (troop_set_slot, ":cur_lord", slot_troop_mission_participation, 0), 
     
     (troop_set_slot, ":cur_lord", slot_troop_original_name, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_original_surname, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_original_title_numeral, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_original_origin, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_original_title3, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_original_title4, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_original_title5, -1), 
     
     (troop_set_slot, ":cur_lord", slot_troop_death_cause, 0), 
     (troop_set_slot, ":cur_lord", slot_troop_death_battle_killer, -1), 
     
     (troop_set_slot, ":cur_lord", slot_troop_death_execution_killer, -1), 
     (troop_set_slot, ":cur_lord", slot_troop_death_execution_method, 0), 
     
     (troop_set_slot, ":cur_lord", slot_troop_death_assassination_method, 0), 
     (troop_set_slot, ":cur_lord", slot_troop_death_assassination_found_perpetrators, -1), 
     
     (troop_set_slot, ":cur_lord", slot_troop_spawned_before, 1), ########## NEW v3.3 - removed lords spawning with 180-280 troops
     
     (call_script, "script_rand", 10, 46),
     (troop_set_slot, ":cur_lord", slot_troop_controversy, reg0), 

     (try_for_range, ":cur_slot", slot_troop_relations_begin, 1401), ########## reset relations - slot_troop_relations_begin 
       (neg|troop_slot_eq, ":cur_lord", ":cur_slot", 0), 
         (troop_set_slot, ":cur_lord", ":cur_slot", 0), 
     (try_end),
	 
     ########## NEW v3.6
     (try_for_range, ":cur_fief", centers_begin, centers_end), 
       (party_slot_eq, ":cur_fief", slot_town_lord, ":cur_lord"), 
         (party_set_slot, ":cur_fief", slot_town_lord, -1), 
     (try_end),
     ##########
     (troop_set_slot, ":cur_lord", slot_troop_face_key, 0),  ######## NEW v3.3
     # (display_message, "@He was recycled!"),
   (try_end),
  ]),
###################################################################


  
  

############################ NEW v2.1 - gets a random culture for lord (e.g. england has a chance of getting scottish/gaelic/welsh lords)
("get_random_culture_for_lord",
  [
   (store_script_param, ":faction_no", 1),
   
   (faction_get_slot, ":faction_culture", ":faction_no", slot_faction_culture),
      
   (try_begin),
     ##### Teutonic Order
     (eq, ":faction_culture", "fac_culture_teutonic"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 75),
           (assign, ":culture", "fac_culture_teutonic"),
       (else_try),
         (ge, ":random_chance", 75),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_baltic"),
       (try_end),
       
   (else_try),
     ##### Balts
     (eq, ":faction_culture", "fac_culture_baltic"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_baltic"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_rus"),
       (try_end),
       
   (else_try), 
     ##### Golden Horde
     (eq, ":faction_no", "fac_kingdom_3"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_mongol"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_rus"),
       (try_end),
	   
############ NEW v3.9 - fixed mongols not getting culture
   (else_try), 
     ##### Golden Horde
     (eq, ":faction_culture", "fac_culture_mongol"),
       # (store_random_in_range, ":random_chance", 0, 100),
       # (try_begin),
         # (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_mongol"),
       # (else_try),
         # (ge, ":random_chance", 80),
           # (assign, ":culture", "fac_culture_rus"),
       # (try_end),
########################
   (else_try), 
     ##### Denmark
     # (eq, ":faction_no", "fac_kingdom_4"),
     (eq, ":faction_culture", "fac_culture_nordic"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_danish),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Poland
     # (eq, ":faction_no", "fac_kingdom_5"),
     (eq, ":faction_culture", "fac_culture_polish"), ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_polish),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_polish"), ###### NEW v3.10 - 
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_mazovian"),
       (try_end),
              
   (else_try), 
     ##### Holy Roman Empire
     # (eq, ":faction_no", "fac_kingdom_6"),
     (eq, ":faction_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_german),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 93),
           (assign, ":culture", "fac_culture_teutonic"),
       (else_try),
         (ge, ":random_chance", 93),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
              
   (else_try), 
     ##### Hungary
     # (eq, ":faction_no", "fac_kingdom_7"),
     (eq, ":faction_culture", "fac_culture_hungarian"),  ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_hungarian),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 75),
           (assign, ":culture", "fac_culture_hungarian"),  ###### NEW v3.10 - 
       (else_try),
         (ge, ":random_chance", 75),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_balkan"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_cuman"), ######### NEW v3.3
       (try_end),
              
   (else_try), 
     ##### Rus
     (eq, ":faction_culture", "fac_culture_rus"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_rus"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_baltic"),
       (try_end),
              
   (else_try), 
     ##### England
     # (eq, ":faction_no", "fac_kingdom_9"),
     (eq, ":faction_culture", "fac_culture_english"),  ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_english),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_english"),  ###### NEW v3.10 - 
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 77),
           (assign, ":culture", "fac_culture_welsh"),
       (else_try),
         (ge, ":random_chance", 77),
         (lt, ":random_chance", 84),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 84),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 90),
         (lt, ":random_chance", 95),
           (assign, ":culture", "fac_culture_templar"),
       (else_try),
         (ge, ":random_chance", 95),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
              
   (else_try), 
     ##### France
     # (eq, ":faction_no", "fac_kingdom_10"),
     (eq, ":faction_culture", "fac_culture_french"),  ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_french),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 75),
           (assign, ":culture", "fac_culture_french"),  ###### NEW v3.10 - 
       (else_try),
         (ge, ":random_chance", 75),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 93),
           (assign, ":culture", "fac_culture_templar"),
       (else_try),
         (ge, ":random_chance", 93),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
              
   (else_try), 
     ##### Norway
     # (eq, ":faction_no", "fac_kingdom_11"),
     (eq, ":faction_culture", "fac_culture_nordic"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_norwegian),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 85),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_finnish"),
       (try_end),
              
   (else_try), 
     ##### Scotland
     (eq, ":faction_culture", "fac_culture_scotish"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Gaelic
     (eq, ":faction_culture", "fac_culture_gaelic"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Sweden
     # (eq, ":faction_no", "fac_kingdom_14"),
     (eq, ":faction_culture", "fac_culture_nordic"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_swedish),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_finnish"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Iberian
     (eq, ":faction_culture", "fac_culture_iberian"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_iberian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
       
############## NEW v3.3 - Navarra has western culture
   (else_try), 
     ##### Iberian
     (eq, ":faction_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_spanish),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 60),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 60),
           (assign, ":culture", "fac_culture_iberian"),
       (try_end),
############################

   (else_try), 
     ##### Italian (except ghibellines, latin empire)
     # (this_or_next|eq, ":faction_no", "fac_papacy"),
     # (this_or_next|eq, ":faction_no", "fac_kingdom_24"),
     # (this_or_next|eq, ":faction_no", "fac_kingdom_32"),
     # (this_or_next|eq, ":faction_no", "fac_kingdom_38"),
     # (this_or_next|eq, ":faction_no", "fac_kingdom_39"),
     # (eq, ":faction_no", "fac_kingdom_40"),
     (neq, ":faction_no", "fac_kingdom_26"),
     (neq, ":faction_no", "fac_kingdom_41"),
     (eq, ":faction_culture", "fac_culture_italian"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_italian),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
       
   (else_try), 
     ##### Byzantines 
     (eq, ":faction_culture", "fac_culture_byzantium"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_byzantium"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_balkan"),
       (try_end),
       
   (else_try), 
     ##### Crusaders 
     # (eq, ":faction_no", "fac_kingdom_23"),
     (eq, ":faction_culture", "fac_culture_crusader"),  ############ NEW v3.3
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 30),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 30),
         (lt, ":random_chance", 35),
           (assign, ":culture", "fac_culture_iberian"),
       (else_try),
         (ge, ":random_chance", 35),
         (lt, ":random_chance", 40),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 40),
         (lt, ":random_chance", 50),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (else_try),
         (ge, ":random_chance", 50),
         (lt, ":random_chance", 60),
           (assign, ":culture", "fac_culture_teutonic"),
       (else_try),
         (ge, ":random_chance", 60),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_templar"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_hospitaller"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_antioch"),
       (else_try),
         (ge, ":random_chance", 85),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_tripoli"),
       (else_try),
         (ge, ":random_chance", 90),
         (lt, ":random_chance", 95),
           (assign, ":culture", "fac_culture_ibelin"),
       (else_try),
         (ge, ":random_chance", 95),
           (assign, ":culture", "fac_culture_jerusalem"),
       (try_end),
       
   (else_try), 
     ##### Latin Empire 
     (eq, ":faction_no", "fac_kingdom_26"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 60),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 60),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 87),
           (assign, ":culture", "fac_culture_serbian"),
       (else_try),
         (ge, ":random_chance", 87),
         (lt, ":random_chance", 94),
           (assign, ":culture", "fac_culture_balkan"),
       (else_try),
         (ge, ":random_chance", 94),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (try_end),
       
   (else_try), 
     ##### Il Khanate
     (eq, ":faction_no", "fac_kingdom_27"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 55),
           (assign, ":culture", "fac_culture_anatolian"),
       (else_try),
         (ge, ":random_chance", 55),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_mongol"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (try_end),
       
   (else_try), 
     ##### Mamluk 
     (eq, ":faction_culture", "fac_culture_mamluke"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_mamluke"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_anatolian"),
       (try_end),
       
   (else_try), 
     ##### Serbia 
     (eq, ":faction_culture", "fac_culture_serbian"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_serbian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_balkan"),
       (try_end),
       
   (else_try), 
     ##### Bulgaria 
     (eq, ":faction_culture", "fac_culture_balkan"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_balkan"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_serbian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_byzantium"),
       (try_end),
       
   (else_try), 
     ##### Marinid 
     (eq, ":faction_culture", "fac_culture_marinid"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_marinid"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_andalus"),
       (try_end),
       
################# NEW v3.3 - forgot about andalus
   (else_try), 
     (eq, ":faction_culture", "fac_culture_andalus"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_andalus"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_marinid"),
       (try_end),
##################################
       
   (else_try), 
     ##### Welsh 
     (eq, ":faction_culture", "fac_culture_welsh"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_welsh"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 77),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 77),
         (lt, ":random_chance", 84),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 84),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
       
   (else_try), 
     ##### Ghibbelines 
     (eq, ":faction_no", "fac_kingdom_41"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 70),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
       
   (else_try), 
     ##### Bohemia 
     # (eq, ":faction_no", "fac_kingdom_42"),
     (eq, ":faction_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_czech),
       # (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         # (le, ":random_chance", 100),
         (assign, ":culture", "fac_culture_western"),
       (try_end),
	   
############ NEW v3.8 - Missing crusader cultures 
   (else_try), 
     (eq, ":faction_culture", "fac_culture_templar"),
       (try_begin),
         (assign, ":culture", "fac_culture_templar"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_hospitaller"),
       (try_begin),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_antioch"),
       (try_begin),
           (assign, ":culture", "fac_culture_antioch"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_tripoli"),
       (try_begin),
           (assign, ":culture", "fac_culture_tripoli"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_ibelin"),
       (try_begin),
           (assign, ":culture", "fac_culture_ibelin"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_jerusalem"),
       (try_begin),
         (assign, ":culture", "fac_culture_jerusalem"),
       (try_end),
####################### NEW v3.8 - missing anatolian christian
   (else_try), 
     (eq, ":faction_culture", "fac_culture_anatolian_christian"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 75),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (else_try),
         (ge, ":random_chance", 25),
           (assign, ":culture", "fac_culture_byzantium"),
       (try_end),
####################################
   (try_end),
   
   (assign, reg0, ":culture"),  #### sends the assigned culture
  ]),
###################################################################






############################ NEW v2.1 - gets a random name for lord based on culture
("get_random_name_for_lord",
  [
   (store_script_param, ":faction_no", 1),
   (store_script_param, ":cur_lord", 2),
   (store_script_param, ":cur_lord_culture", 3),
   
   (str_clear, s1),  
   (str_clear, s2),  
   (str_clear, s3), 
   (assign, ":random_name", 0),  
   (assign, ":random_surname", 0),  
###########   
   (try_begin),
     (eq, ":cur_lord_culture", "fac_culture_finnish"),
       (store_random_in_range, ":random_name", "str_enhanced_name_finnish_1", "str_enhanced_name_serbian_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_finnish_1", "str_enhanced_name_serbian_1"), 
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_serbian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_serbian_1", "str_enhanced_surname_serbian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_serbian_1", "str_enhanced_name_welsh_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_welsh"),
       (store_random_in_range, ":random_name", "str_enhanced_name_welsh_1", "str_enhanced_surname_welsh_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_welsh_1", "str_enhanced_name_german_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_teutonic"),
       (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_western"),
     (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_german),
     (this_or_next|eq, ":faction_no", "fac_kingdom_4"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_6"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_40"),  ########### NEW v3.3 
     (this_or_next|eq, ":faction_no", "fac_kingdom_41"),  ########### NEW v3.3 
     (eq, ":faction_no", "fac_kingdom_14"),
       (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_balkan"),
       (store_random_in_range, ":random_name", "str_enhanced_name_balkan_1", "str_enhanced_name_rus_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_balkan_1", "str_enhanced_name_rus_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_rus"),
       (store_random_in_range, ":random_name", "str_enhanced_name_rus_1", "str_enhanced_surname_rus_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_rus_1", "str_enhanced_name_danish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
     (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_danish),
     (this_or_next|eq, ":faction_no", "fac_kingdom_1"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_4"),
     (eq, ":faction_no", "fac_kingdom_6"),
       (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
     (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_norwegian),
     (eq, ":faction_no", "fac_kingdom_11"),
       (store_random_in_range, ":random_name", "str_enhanced_name_norwegian_1", "str_enhanced_surname_norwegian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_norwegian_1", "str_enhanced_name_swedish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
     (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_swedish),
     (this_or_next|eq, ":faction_no", "fac_kingdom_1"),
     (eq, ":faction_no", "fac_kingdom_14"),
       (store_random_in_range, ":random_name", "str_enhanced_name_swedish_1", "str_enhanced_surname_swedish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_swedish_1", "str_enhanced_name_baltic_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_baltic"),
       (store_random_in_range, ":random_name", "str_enhanced_name_baltic_1", "str_enhanced_name_arab_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_baltic_1", "str_enhanced_name_french_1"), ### baltic nobles don't seem to have surnames
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_marinid"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_mamluke"),
     (eq, ":cur_lord_culture", "fac_culture_andalus"),
       (store_random_in_range, ":random_name", "str_enhanced_name_arab_1", "str_enhanced_surname_arab_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_arab_1", "str_enhanced_name_greek_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_byzantium"),
       (store_random_in_range, ":random_name", "str_enhanced_name_greek_1", "str_enhanced_surname_greek_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_greek_1", "str_enhanced_name_spanish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_spanish),
     # (neq, ":faction_no", "fac_kingdom_16"),
     (eq, ":cur_lord_culture", "fac_culture_iberian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_portuguese),
     # (eq, ":faction_no", "fac_kingdom_16"),
     (eq, ":cur_lord_culture", "fac_culture_iberian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
################# NEW v3.9.1 - fixed crusader iberian lords spawning without names
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_iberian"),
       (call_script, "script_rand", 0, 100),  
       (try_begin), ### 30% portuguese, 70% spanish
         (lt, reg0, 30),
           (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
       (else_try),
         (ge, reg0, 30),
           (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
       (try_end),        
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_italian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_italian_1", "str_enhanced_surname_italian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_italian_1", "str_enhanced_name_gaelic_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_gaelic"),
       (store_random_in_range, ":random_name", "str_enhanced_name_gaelic_1", "str_enhanced_surname_gaelic_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_gaelic_1", "str_enhanced_name_armenian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_anatolian_christian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_armenian_1", "str_enhanced_surname_armenian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_armenian_1", "str_enhanced_name_turkish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_anatolian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_turkish_1", "str_enhanced_surname_turkish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_turkish_1", "str_enhanced_name_scottish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_scotish"),
       (store_random_in_range, ":random_name", "str_enhanced_name_scottish_1", "str_enhanced_surname_scottish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_scottish_1", "str_enhanced_name_polish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
########### 
   (else_try),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_polish"),  ###### NEW v3.10 - 
     (eq, ":cur_lord_culture", "fac_culture_mazovian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_hungarian"),
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_hungarian),
     # (eq, ":faction_no", "fac_kingdom_7"),
       (store_random_in_range, ":random_name", "str_enhanced_name_hungarian_1", "str_enhanced_surname_hungarian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_hungarian_1", "str_enhanced_name_english_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_english"),
     # (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_english),
     (this_or_next|eq, ":faction_no", "fac_kingdom_9"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_12"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_13"),
     (eq, ":faction_no", "fac_kingdom_37"),
       (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_french"),
     # (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_french),
     (this_or_next|eq, ":faction_no", "fac_kingdom_10"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_16"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_17"),
     (this_or_next|eq, ":faction_no", "fac_kingdom_18"),
     (eq, ":faction_no", "fac_kingdom_19"),
       (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
########### NEW v3.3 - Cuman
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_cuman"),
       (store_random_in_range, ":random_name", "str_enhanced_name_cuman_1", "str_enhanced_name_custom_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     # (eq, ":faction_no", "fac_kingdom_23"),
     #(faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_crusader"),  ############ NEW v3.3
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_western"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_antioch"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_tripoli"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_ibelin"),
     (eq, ":cur_lord_culture", "fac_culture_jerusalem"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 45% french, 35% german, 20% english
       (lt, reg0, 45),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 45),
       (lt, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 

############ NEW v3.3 - fixed italian factions not getting any names with western lords
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_italian),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 30% french, 50% german, 20% english
       (lt, reg0, 30),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 30),
       (lt, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_mongol"),
       (store_random_in_range, ":random_name", "str_enhanced_name_mongolian_1", "str_enhanced_name_bohemian_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_mongolian_1", "str_enhanced_names_end"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_templar"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 60% french, 25% german, 15% english
       (lt, reg0, 60),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 60),
       (lt, reg0, 85),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 85),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_hospitaller"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 20% french, 60% german, 20% english
       (lt, reg0, 20),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 20),
       (lt, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########  BOHEMIA
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_western"),
     (this_or_next|faction_slot_eq, ":faction_no", slot_faction_language, faction_language_czech),
     (eq, ":faction_no", "fac_kingdom_42"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 65% czech, 25% german, 10% polish
       (lt, reg0, 65),
         (store_random_in_range, ":random_name", "str_enhanced_name_bohemian_1", "str_enhanced_surname_bohemian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_bohemian_1", "str_enhanced_name_cuman_1"),
     (else_try),
       (ge, reg0, 65),
       (lt, reg0, 90),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 90),
         (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
######################
   (try_end),
   
   (troop_set_slot, ":cur_lord", slot_troop_original_name, ":random_name"),
   (troop_set_slot, ":cur_lord", slot_troop_original_surname, ":random_surname"),
   (call_script, "script_get_troop_title", ":cur_lord", ":cur_lord_culture"), ## gets a random title
   (troop_set_name, ":cur_lord", s3),
   (troop_set_plural_name, ":cur_lord", s3), ## script that gives the lord titles uses the plural   
   # (str_store_troop_name, s8, ":cur_lord"), 
   # (display_message, "@Gave {s8} a title."), 
  ]),
###################################################################






############################ NEW v2.1 - gets a random name for lord based on culture
("get_random_equipment_for_lord",
  [
   (store_script_param, ":cur_lord", 1),
   (store_script_param, ":cur_lord_culture", 2),
   
   (troop_clear_inventory, ":cur_lord"),
   (troop_get_inventory_capacity, ":inv_cap", ":cur_lord"),
   (try_for_range, ":i_slot", 0, ":inv_cap"),
     (troop_set_inventory_slot, ":cur_lord", ":i_slot", -1),
   (try_end),
##############
   (try_begin),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_western"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_welsh"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_iberian"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_gaelic"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_scotish"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_player"),
     (eq, ":cur_lord_culture", "fac_culture_italian"),
       (call_script, "script_rand", "itm_osp_great_helm_b", "itm_african_turban"),  ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_rand", "itm_splinted_leather_greaves", "itm_sarranid_boots_a_long"), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_rand", "itm_rnd_surcoat_01", "itm_rus_militia_padded_a"), ## armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_rand", "itm_tab_shield_kite_cav_b", "itm_tab_shield_pavise_d"), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_rand", "itm_warhorse_white", "itm_warhorse_denmark_a"), ## horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (try_begin), ## side arm
         (call_script, "script_rand", 0, 100),
         (lt, reg0, 70),
           (call_script, "script_rand", "itm_cp391_sword", "itm_bb_rus_sword_1"),  ## sword
       (else_try),
            (ge, reg0, 70),       
           (call_script, "script_rand", "itm_mace_1", "itm_baltic_sword"),  ## mace
       (try_end),
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_finnish"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_finn_noble_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_finn_noble_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_finn_noble_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_finn_noble_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_finn_noble_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_rand", "itm_hunter", "itm_arabian_horse_a"), ## horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_mazovian"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_mazovian_horse_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_mazovian_horse_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_mazovian_horse_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_mazovian_horse_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_mazovian_horse_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_rand", "itm_hunter", "itm_arabian_horse_a"), ## horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_serbian"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_serbian_horse_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_serbian_horse_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_serbian_horse_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_serbian_horse_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_serbian_horse_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_serbian_horse_4", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_teutonic"),
       (call_script, "script_rand", "itm_osp_great_helm_b", "itm_african_turban"),  ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_teu_horse_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_teu_horse_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_teu_horse_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_teu_horse_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_teu_horse_4", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_balkan"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balkan_horse_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balkan_horse_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balkan_horse_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balkan_horse_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balkan_horse_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balkan_horse_4", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_rus"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_rus_horse_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_rus_horse_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_rus_horse_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_rus_horse_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_rus_horse_4", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
       (call_script, "script_rand", "itm_osp_great_helm_b", "itm_african_turban"),  ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_rand", "itm_splinted_leather_greaves", "itm_sarranid_boots_a_long"), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_rand", "itm_rnd_surcoat_01", "itm_rus_militia_padded_a"), ## armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_rand", "itm_tab_shield_kite_cav_b", "itm_tab_shield_pavise_d"), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_rand", "itm_warhorse_white", "itm_warhorse_denmark_a"), ## horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (try_begin), ## side arm
         (call_script, "script_rand", 0, 100),
         (lt, reg0, 65),
           (call_script, "script_rand", "itm_cp391_sword", "itm_bb_rus_sword_1"),  ## sword
       (else_try),
            (ge, reg0, 65),       
           (call_script, "script_rand", "itm_raf_two_handed_axe_a", "itm_club_with_spike_head"),  ## 2H axe
       (try_end),
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_baltic"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balt_medium_cavalry", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balt_medium_cavalry", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balt_medium_cavalry", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balt_medium_cavalry", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_balt_medium_cavalry", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
       (troop_add_item, ":cur_lord", "itm_balt_javelin", imod_large_bag),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_marinid"),
       (call_script, "script_get_random_equipment_type_from_random_troop", "trp_knight_31_1", "trp_knight_32_1", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_random_troop", "trp_knight_31_1", "trp_knight_32_1", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_random_troop", "trp_knight_31_1", "trp_knight_32_1", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_random_troop", "trp_knight_31_1", "trp_knight_32_1", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_random_troop", "trp_knight_31_1", "trp_knight_32_1", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_random_troop", "trp_knight_31_1", "trp_knight_32_1", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_mamluke"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
       (try_begin), ## Bow and arrows
         (call_script, "script_rand", 0, 100),
         (lt, reg0, 40),
          (call_script, "script_get_random_equipment_type_from_troop", "trp_ghulam_cavalry_3", itp_type_bow), ## Bow
          (troop_add_item, ":cur_lord", reg0, imod_strong),
          (troop_add_item, ":cur_lord", "itm_strely", imod_large_bag),
       (try_end),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_byzantium"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_byz_castle_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_byz_castle_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_byz_castle_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_byz_castle_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_byz_castle_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_byz_castle_4", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_andalus"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_andalus_horse_4", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_andalus_horse_4", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_andalus_horse_4", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_andalus_horse_4", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_andalus_horse_4", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_andalus_horse_4", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_anatolian_christian"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_heavy_cavalry", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_heavy_cavalry", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_heavy_cavalry", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_heavy_cavalry", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_heavy_cavalry", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_anatolian"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
       (try_begin), ## Bow and arrows
         (call_script, "script_rand", 0, 100),
         (lt, reg0, 40),
          (call_script, "script_get_random_equipment_type_from_troop", "trp_anatolian_turkoman_3", itp_type_bow), ## Bow
          (troop_add_item, ":cur_lord", reg0, imod_strong),
          (troop_add_item, ":cur_lord", "itm_strely", imod_large_bag),
       (try_end),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_mongol"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_tatar_heavy_lancer", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_tatar_heavy_lancer", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_tatar_heavy_lancer", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_tatar_heavy_lancer", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_tatar_heavy_lancer", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_lamellar_gauntlets", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
       (troop_add_item, ":cur_lord", "itm_khergit_guard_boots"),
       (try_begin), ## Bow and arrows
         (call_script, "script_rand", 0, 100),
         (lt, reg0, 60),
          (call_script, "script_get_random_equipment_type_from_troop", "trp_tatar_veteran_horse_archer", itp_type_bow), ## Bow
          (troop_add_item, ":cur_lord", reg0, imod_strong),
          (troop_add_item, ":cur_lord", "itm_strely", imod_large_bag),
       (try_end),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_templar"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_templar_knight_veteran", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_templar_knight_veteran", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_templar_knight_veteran", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_templar_knight_veteran", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_templar_knight_veteran", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_templar_knight_veteran", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_hospitaller"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hospitaller_knight_veteran", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hospitaller_knight_veteran", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hospitaller_knight_veteran", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hospitaller_knight_veteran", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hospitaller_knight_veteran", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hospitaller_knight_veteran", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_antioch"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_antioch", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_antioch", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_antioch", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_antioch", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_antioch", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_antioch", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_tripoli"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_tripoli", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_tripoli", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_tripoli", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_tripoli", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_tripoli", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_tripoli", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_ibelin"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_ibelin", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_ibelin", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_ibelin", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_ibelin", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_ibelin", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_ibelin", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_jerusalem"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_jerusalem", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_jerusalem", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_jerusalem", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_jerusalem", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_jerusalem", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4_jerusalem", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
############## NEW v3.3 - cuman
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_cuman"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_cuman_heavy_lancer", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_cuman_heavy_lancer", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_cuman_heavy_lancer", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_cuman_heavy_lancer", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_cuman_heavy_lancer", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_cuman_heavy_lancer", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
############## NEW v3.10
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_english"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_english_knight", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_english_knight", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_english_knight", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_english_knight", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_english_knight", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_english_knight", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_french"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_french_knight", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_french_knight", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_french_knight", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_french_knight", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_french_knight", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_french_knight", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_hungarian"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hungarian_knight", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hungarian_knight", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hungarian_knight", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hungarian_knight", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hungarian_knight", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_hungarian_knight", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_polish"),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_polish_guard", itp_type_head_armor), ## helm
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_polish_guard", itp_type_body_armor), ## body armor
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_polish_guard", itp_type_foot_armor), ## greaves
       (troop_add_item, ":cur_lord", reg0),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_polish_guard", itp_type_shield), ## shield
       (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_polish_guard", itp_type_one_handed_wpn), ## 1H
       (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (call_script, "script_get_random_equipment_type_from_troop", "trp_polish_guard", itp_type_horse), ## Horse
       (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (troop_add_item, ":cur_lord", "itm_mail_mittens", imod_reinforced),
       (troop_add_item, ":cur_lord", "itm_heraldic_lance"),
       (troop_add_item, ":cur_lord", "itm_mail_chausses"),
############################
##############
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_player"),
       (assign, ":source_troop", "trp_euro_horse_4"), #### if no fix has been selected default to euro senior knight
       (try_begin),
         # (eq, "$cstm_num_tiers", 1),
           # (assign, ":source_troop", "trp_cstm_custom_troop_1_tier_0_0_6"), ### A7
       # (else_try),  
         # (eq, "$cstm_num_tiers", 2),
           # (assign, ":source_troop", "trp_cstm_custom_troop_2_tiers_0_1_5"), ### B6
       # (else_try),  
         # (eq, "$cstm_num_tiers", 3),
           (assign, ":source_troop", "trp_cstm_custom_troop_3_tiers_0_2_4"), ### C5
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_head_armor), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0),
       (else_try),
         (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4", itp_type_head_armor), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0),
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_body_armor), ## body armor
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (else_try),
         (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4", itp_type_body_armor), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_hand_armor), ## gauntlets
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (else_try),
         (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4", itp_type_hand_armor), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_foot_armor), ## greaves
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0),
       (else_try),
         (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4", itp_type_foot_armor), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0),
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_shield), ## shield
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (else_try),
         (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4", itp_type_shield), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_reinforced),
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_one_handed_wpn), ## 1H
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (else_try),
         (call_script, "script_get_random_equipment_type_from_troop", "trp_euro_horse_4", itp_type_one_handed_wpn), ## helm
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_balanced),
       (try_end),
       (try_begin),
         (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_horse), ## 1H
         (gt, reg0, 0),
           (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (else_try),  ### if no horse found, give him a random non bearded horse
         (call_script, "script_rand", "itm_hunter", "itm_arabian_horse_a"), ## horse
         (troop_add_item, ":cur_lord", reg0, imod_heavy),
       (try_end),
       (try_begin), ## Bow and arrows
         (call_script, "script_rand", 0, 100),
         (lt, reg0, 60),
           (call_script, "script_get_random_equipment_type_from_troop", ":source_troop", itp_type_bow), ## Bow
           (gt, reg0, 0),
             (troop_add_item, ":cur_lord", reg0, imod_strong),
             (troop_add_item, ":cur_lord", "itm_arrows", imod_large_bag),
       (try_end),
       (troop_add_item, ":cur_lord", "itm_heavy_lance"),
##############
   (try_end),
  ]),
###################################################################




################ NEW v2.1 - https://forums.taleworlds.com/index.php?topic=59574.0
# script_rand
# Input: arg1 = min arg2 = max
# Output: reg0 = random_number
# Will only work up to about a billion
("rand",
[
(store_script_param_1, ":min"),
(store_script_param_2, ":max"),
    
(val_mul, "$rand_seed",1664525), # see: Numerical Recipes in C
(val_add, "$rand_seed",1013904223), # Any two odd, relatively prime numbers larger than 65536 will do

(val_sub, ":max", ":min"),
(try_begin),
  (gt, ":max",1),
  # Handle negative numbers; store_mod is not safe there!
  (store_mod, ":r", "$rand_seed",1024*1024*1024),
  (try_begin),
    (lt, ":r", 0),
    (val_add, ":r",1024*1024*1024),
  (try_end),
  (store_div, ":range",1024*1024*1024, ":max"),
  (val_div, ":r", ":range"),
  (try_begin),
    # Make sure we didn't exceed our range.
    # Should happen very rarely, so we can afford to be lazy and use recursion.
    (eq, ":r", ":max"),
    (call_script, "script_rand",0, ":max"),
    (val_add,reg0, ":min"),
  (else_try),
    (store_add,reg0, ":min", ":r"),
  (try_end),
(else_try),
  (assign,reg0, ":min"),
(try_end),
]),
#################################################################





################ NEW v2.1 - gets a random equipment type from a troop - must not be used for items types that the troop has only one of, otherwise it may return no item
# script_get_random_equipment_type_from_troop
# Input: arg1 = troop_ID arg2 = equipment_type
# Output: reg1 = random_item 
("get_random_equipment_type_from_troop",
  [
   (store_script_param, ":troop_no", 1),
   (store_script_param, ":equipment_type", 2),

   (assign, ":cur_fake_slot", 325),
   
   (troop_get_inventory_capacity, ":capacity", ":troop_no"),
   
   (try_for_range, ":cur_slot", 0, ":capacity"),
     (troop_get_inventory_slot, ":cur_item", ":troop_no", ":cur_slot"),
     (gt, ":cur_item", 0),
       (item_get_type, ":type", ":cur_item"),
       (eq, ":type", ":equipment_type"),
         # (troop_get_inventory_slot_modifier, ":cur_item_imod", ":troop_no", ":cur_slot"),
         (troop_set_slot, "trp_items_array", ":cur_fake_slot", ":cur_item"),
         (val_add, ":cur_fake_slot", 1),
   (try_end),

   # (val_add, ":cur_fake_slot", 1),
   (call_script, "script_rand", 325, ":cur_fake_slot"),
   (assign, reg1, reg0),
]),
######################################################################


  

################ NEW v2.1 - gets a random equipment type from a troop
# script_get_random_equipment_type_from_random_troop
# Input: arg1 = troop_ID arg2 = equipment_type
# Output: reg1 = random_item 
("get_random_equipment_type_from_random_troop",
  [
   (store_script_param, ":troop_lower_range", 1),
   (store_script_param, ":troop_upper_range", 2),
   (store_script_param, ":equipment_type", 3),

   (assign, ":cur_fake_slot", 325),
   
   (call_script, "script_rand", ":troop_lower_range", ":troop_upper_range"),
   (assign, ":troop_no", reg0),
   
   (troop_get_inventory_capacity, ":capacity", ":troop_no"),
   
   (try_for_range, ":cur_slot", 0, ":capacity"),
     (troop_get_inventory_slot, ":cur_item", ":troop_no", ":cur_slot"),
     (gt, ":cur_item", 0),
       (item_get_type, ":type", ":cur_item"),
       (eq, ":type", ":equipment_type"),
         # (troop_get_inventory_slot_modifier, ":cur_item_imod", ":troop_no", ":cur_slot"),
         (troop_set_slot, "trp_items_array", ":cur_fake_slot", ":cur_item"),
         (val_add, ":cur_fake_slot", 1),
   (try_end),

   # (val_add, ":cur_fake_slot", 1),
   (call_script, "script_rand", 325, ":cur_fake_slot"),
   (assign, reg1, reg0),
]),
#################################################################





################ NEW v2.1 - kills a lord 
("kill_lord_execution",
  [
   (store_script_param, ":killer", 1),
   (store_script_param, ":dead_troop", 2),
   (store_script_param, ":party_no", 3),
   (store_script_param, ":execution_method", 4),
   (store_script_param, ":execution_reason", 5),

   # make sure we don't try to recruit this prisoner stack later!
   # (troop_set_slot, ":dead_troop", slot_prisoner_agreed, 0),

   # "kill" the NPC - force the 48 hr respawn kingdom heros trigger to ignore this troop (no party will be created for this troop, ever again)
   # [q.v. script_create_kingdom_hero_party]
   (troop_set_slot, ":dead_troop", slot_troop_is_alive, 0),  ## he's dead/inactive
   (troop_set_slot, ":dead_troop", slot_troop_death_cause, 2),  ## executed
   (troop_set_slot, ":dead_troop", slot_troop_death_execution_killer, ":killer"),  ## killer

   # remove them from their faction
   (troop_set_slot, ":dead_troop", slot_troop_change_to_faction, "fac_no_faction"),
   (troop_set_slot, ":dead_troop", slot_troop_original_faction, "fac_no_faction"),

   # determine the penalty for this act (based on the honor of the troop they've killed)
   (troop_get_slot, ":impact", ":dead_troop", slot_troop_renown),
   (troop_get_slot, ":impact_pos", ":dead_troop", slot_troop_renown),
   # (val_div, ":impact", -33),


   (store_troop_faction, ":faction_killer", ":killer"),
   (str_store_troop_name_link, s1, ":dead_troop"),
   (str_store_faction_name_link, s2, ":faction_killer"),
   (try_begin),
     ########### execution_reason 
	 ########### 1 = normal execution
	 ########### 2 = execution after capture
	 ########### 3 = treason
     (neq, ":execution_reason", 2), 
     (neq, ":execution_reason", 3),  
       (str_store_party_name, s3, ":party_no"),
       (str_store_party_name, s4, "p_main_party"),
   (try_end),
   (str_store_troop_name_link, s5, ":killer"),

   (try_begin),   #### Now determine penalty in relation depending on the method of execution - also display message
     (eq, ":execution_method", 1),  #### Beheading
       (val_div, ":impact", -50),
       (troop_set_slot, ":dead_troop", slot_troop_death_execution_method, 1),  
   (else_try),              
     (eq, ":execution_method", 2),  ###### hanging
       (val_div, ":impact", -40),
       (troop_set_slot, ":dead_troop", slot_troop_death_execution_method, 2), 
   (else_try),              
     (eq, ":execution_method", 3),  ###### Burning
       (val_div, ":impact", -30),
       (troop_set_slot, ":dead_troop", slot_troop_death_execution_method, 3),  
   (else_try),              
     (eq, ":execution_method", 4),  ###### Hung, Strung and Quartered
       (val_div, ":impact", -20),
       (troop_set_slot, ":dead_troop", slot_troop_death_execution_method, 4),  
   (else_try),              
     (eq, ":execution_method", 5),  ######  execution by beheading at player's party ### NEW v3.9 - now lords can do this
       (val_div, ":impact", -30),  ##### killing him in the spot isn't civilized
       (troop_set_slot, ":dead_troop", slot_troop_death_execution_method, 1),  
   (try_end),     
########################
   (try_begin), 
     (eq, ":execution_reason", 1),  ########## 1 = normal execution / 2 = execution after capture / 3 = treason so no relation penalty within same faction
     (try_begin), 
       (neq, ":killer", "trp_player"), 
       (try_begin),   
          (eq, ":execution_method", 1),      #### Beheading
            (display_log_message, "@{s1} was beheaded by the {s2} at {s3}!"),
        (else_try),              
          (eq, ":execution_method", 2),    ###### hanging
            (display_log_message, "@{s1} was hanged by the {s2} at {s3}!"),
        (else_try),              
          (eq, ":execution_method", 3),  ###### Burning
            (display_log_message, "@{s1} was burned alive by the {s2} at {s3}!"),
        (else_try),              
          (eq, ":execution_method", 4),      ###### Hung, Strung and Quartered
            (display_log_message, "@{s1} was hung, strung, and quartered by the {s2} at {s3}!"),
        (else_try),              
          (eq, ":execution_method", 5),      ###### Only player can do this - execution by beheading at player's party
            (display_log_message, "@{s1} was killed by the {s2} while being held prisoner under {s4}!"),
        (try_end),  
     (else_try),     
       (eq, ":killer", "trp_player"), 
       (neq, ":execution_method", 5),  ########## NEW v3.5
         (call_script, "script_add_notification_menu", "mnu_lord_executed_by_player", ":dead_troop", ":party_no", ":execution_method"),
     (try_end),        
######################## EXECUTION AFTER CAPTURE
   (else_try),        
     (eq, ":execution_reason", 2),  
     (try_begin),   
       (display_log_message, "@{s1} was captured and executed by {s5}! Reason was vengeance."),
     (try_end),  
######################## TREASON
   (else_try),        
     (eq, ":execution_reason", 3),  
     (try_begin),   
        (eq, ":execution_method", 1),      #### Beheading
          (display_log_message, "@{s1} was beheaded by the orders of {s5}! The reason was treason."),
      (else_try),              
        (eq, ":execution_method", 2),    ###### hanging
          (display_log_message, "@{s1} was hanged by the orders of {s5}! The reason was treason."),
      (else_try),              
        (eq, ":execution_method", 3),  ###### Burning
          (display_log_message, "@{s1} was burned alive by the orders of {s5}! The reason was treason."),
      (else_try),              
        (eq, ":execution_method", 4),      ###### Hung, Strung and Quartered
          (display_log_message, "@{s1} was hung, strung, and quartered by the orders of {s5}! The reason was treason."),
      (else_try),              
        (eq, ":execution_method", 5),      ###### Only player can do this - execution by beheading at player's party
          (display_log_message, "@{s1} was killed by the orders of {s5}! The reason was treason."),
      (try_end),  
   (try_end),        
########################
  
   
   (assign, ":impact2", ":impact"),
   (store_div, ":half", ":impact", 2),

   (val_div, ":impact_pos", 50),
   (store_div, ":half_pos", ":impact_pos", 2),   


   (store_troop_faction, ":dead_troop_faction", ":dead_troop"),
   ################ NEW v2.1 - faction statistics
   (faction_get_slot, ":cur_slot_value", ":dead_troop_faction", slot_faction_lords_lost_execution),
   (val_add, ":cur_slot_value", 1),
   (faction_set_slot, ":dead_troop_faction", slot_faction_lords_lost_execution, ":cur_slot_value"),
   ################
   (try_for_range, ":troop", active_npcs_begin, active_npcs_end),
     (troop_slot_eq, ":troop", slot_troop_is_alive, 1),  ## he's alive/active
       (store_troop_faction, ":faction_cur_npc", ":troop"),
       # (faction_get_slot, ":faction_religion_dead_lord", ":dead_troop_faction", slot_faction_religion),        
       # (faction_get_slot, ":faction_religion_cur_npc", ":faction_cur_npc", slot_faction_religion),        
       (call_script, "script_get_troop_relation_with_troop", ":dead_troop", ":troop"),
       # (assign, ":deceased_relation", reg0),  
       (assign, ":troop_relation", reg1),  
       (try_begin),
         (ge, ":troop_relation", 20), 
         (store_div, ":impact2", ":troop_relation", 2), 
           (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", ":impact2"),
       (else_try),
         (lt, ":troop_relation", -10), 
         (store_div, ":half_pos", ":troop_relation", 2), 
           (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", ":half_pos"),
       (else_try),
         (eq, ":dead_troop_faction", ":faction_cur_npc"), 
           (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", ":half"),
       (try_end),
	   
	   ############## Now family reactions
       (try_begin),
         (ge, ":troop_relation", -30), ######### didn't hate him
         (try_begin),
           (troop_slot_eq, ":troop", slot_troop_spouse, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -40),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_father, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -80),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_mother, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -80),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_guardian, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -30),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_betrothed, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -50),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_1, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_2, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_3, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (try_end),
       (else_try),
         (try_begin),
           (troop_slot_eq, ":troop", slot_troop_spouse, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -20),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_father, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -40),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_mother, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -40),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_guardian, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -15),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_betrothed, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_1, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -10),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_2, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -10),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_3, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -10),
         (try_end),
       (try_end),
   (try_end),
################################################
   (store_troop_faction, ":faction_killer_npc", ":killer"), 
   (store_troop_faction, ":dead_troop_faction", ":dead_troop"), 
   
   # (try_begin),
     # (neq, ":execution_reason", 2), ########## NEW v3.9
     # (try_for_range, ":faction", kingdoms_begin, kingdoms_end),
       # (faction_slot_eq, ":faction", slot_faction_state, sfs_active),
       # (neq, ":faction", ":faction_killer_npc"), 
       # (neq, ":faction", ":dead_troop_faction"),  
         # (store_relation, ":relation", ":faction", ":dead_troop_faction"),
         # (try_begin),
           # (ge, ":relation", 20), 
             # (store_add, ":relation_change", ":relation", ":half"),
             # (set_relation, ":faction", ":faction_killer_npc", ":relation_change"),
         # (try_end),
     # (try_end),

     # (store_relation, ":relation", ":dead_troop_faction", ":faction_killer_npc"),
     # (store_add, ":relation_change", ":relation", ":impact"),
     # (set_relation, ":dead_troop_faction", ":faction_killer_npc", ":relation_change"),
   # (try_end),

   (try_begin),
     # apply the honor hit (if player)
     (eq, ":killer", "trp_player"), 
	 ############## NEW v3.9 - 
     (this_or_next|eq, ":execution_method", 3), 
     (this_or_next|eq, ":execution_method", 4), 
     (eq, ":execution_method", 5), 
     ############################
       (call_script, "script_change_player_honor", ":impact"),
       # party morale takes a hit as well
       (call_script, "script_change_player_party_morale", ":half"),
   (try_end),


   # but give them renown for this evil deed (their deed spreads upon every tongue, impressing some, and cowing others)
   (val_mul, ":impact", -1),
   (call_script, "script_change_troop_renown", ":killer" , ":impact"),


   ###### no longer our prisoner
    ########### execution_reason 
	########### 1 = normal execution
	########### 2 = execution after capture
	########### 3 = treason
   ########## NEW v3.9
   (try_begin),
     (eq, ":execution_reason", 1), 
       (call_script, "script_remove_troop_from_prison", ":dead_troop"),
       (party_remove_prisoners, ":party_no", ":dead_troop", 1), 
   (else_try),
     (eq, ":execution_reason", 2), 
       (party_remove_prisoners, ":party_no", ":dead_troop", 1), 
   (else_try),
     (eq, ":execution_reason", 3),  
       (call_script, "script_remove_dead_lord_from_game", ":dead_troop"), 
   (try_end),
   ####################
   
   (call_script, "script_process_lord_death", ":dead_troop", ":dead_troop_faction"),   ###### NEW v3.0
]),
#################################################################





################ NEW v2.1 - kills a lord 
("kill_lord_battle",
  [
   (store_script_param, ":killer", 1),
   (store_script_param, ":dead_troop", 2),

   # make sure we don't try to recruit this prisoner stack later!
   # (troop_set_slot, ":dead_troop", slot_prisoner_agreed, 0),

   # "kill" the NPC - force the 48 hr respawn kingdom heros trigger to ignore this troop (no party will be created for this troop, ever again)
   # [q.v. script_create_kingdom_hero_party]
   (troop_set_slot, ":dead_troop", slot_troop_is_alive, 0),  ## he's dead/inactive
   (troop_set_slot, ":dead_troop", slot_troop_death_cause, 1),  ## killed in battle
   (troop_set_slot, ":dead_troop", slot_troop_death_battle_killer, ":killer"),  ## killer

   # remove them from their faction
   (troop_set_slot, ":dead_troop", slot_troop_change_to_faction, "fac_no_faction"),
   (troop_set_slot, ":dead_troop", slot_troop_original_faction, "fac_no_faction"),

   # determine the penalty for this act (based on the honor of the troop they've killed)
   (troop_get_slot, ":impact", ":dead_troop", slot_troop_renown),
   (troop_get_slot, ":impact_pos", ":dead_troop", slot_troop_renown),
   # (val_div, ":impact", -33),
   (val_div, ":impact", -80),
   (store_div, ":half", ":impact", 2),
   (store_div, ":third", ":impact", 3),
   
   (val_div, ":impact_pos", 80),
   (assign, ":impact2", ":impact"),
   (store_div, ":half_pos", ":impact_pos", 2),   
     
   (try_for_range, ":troop", active_npcs_begin, active_npcs_end),
       (troop_slot_eq, ":troop", slot_troop_is_alive, 1),  ## he's alive/active
         (store_troop_faction, ":dead_troop_faction", ":dead_troop"),
         (store_troop_faction, ":faction_cur_npc", ":troop"),    
         (call_script, "script_get_troop_relation_with_troop", ":dead_troop", ":troop"),
         # (assign, ":deceased_relation", reg0),  
         (assign, ":troop_relation", reg1),  
         (try_begin),
           (ge, ":troop_relation", 20), 
             (store_div, ":impact2", ":troop_relation", 2), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", ":impact2"),
         (else_try),
           (lt, ":troop_relation", -10), 
             (store_div, ":half_pos", ":troop_relation", 2), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", ":half_pos"),
         (else_try),
           (eq, ":dead_troop_faction", ":faction_cur_npc"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", ":third"),
         (try_end),
		 
	   ############## Now family reactions
       (try_begin),
         (ge, ":troop_relation", -30), ######### didn't hate him
         (try_begin),
           (troop_slot_eq, ":troop", slot_troop_spouse, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -40),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_father, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -80),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_mother, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -80),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_guardian, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -30),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_betrothed, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -50),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_1, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_2, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_3, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (try_end),
       (else_try),
         (try_begin),
           (troop_slot_eq, ":troop", slot_troop_spouse, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -20),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_father, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -40),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_mother, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -40),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_guardian, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -15),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_betrothed, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -25),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_1, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -10),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_2, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -10),
         (else_try),
           (troop_slot_eq, ":troop", slot_troop_love_interest_3, ":dead_troop"), 
             (call_script, "script_troop_change_relation_with_troop", ":killer", ":troop", -10),
         (try_end),
       (try_end),
   (try_end),

   (store_troop_faction, ":faction_killer_npc", ":killer"), 
   (store_troop_faction, ":dead_troop_faction", ":dead_troop"),  
   ################ NEW v2.1 - faction statistics
   (faction_get_slot, ":cur_slot_value", ":dead_troop_faction", slot_faction_lords_lost_battle),
   (val_add, ":cur_slot_value", 1),
   (faction_set_slot, ":dead_troop_faction", slot_faction_lords_lost_battle, ":cur_slot_value"),
   ################
   # (try_for_range, ":faction", kingdoms_begin, kingdoms_end),
     # (faction_slot_eq, ":faction", slot_faction_state, sfs_active),
     # (neq, ":faction", ":faction_killer_npc"), 
     # (neq, ":faction", ":dead_troop_faction"),  
       # (store_relation, ":relation", ":faction", ":dead_troop_faction"),
       # (try_begin),
         # (ge, ":relation", 20), 
           # (store_add, ":relation_change", ":relation", ":half"),
           # (set_relation, ":faction", ":faction_killer_npc", ":relation_change"),
       # (try_end),
   # (try_end),

   # (store_relation, ":relation", ":dead_troop_faction", ":faction_killer_npc"),
   # (store_add, ":relation_change", ":relation", ":impact"),
   # (set_relation, ":dead_troop_faction", ":faction_killer_npc", ":relation_change"),

   (try_begin),
   #### gives morale to the party
     (eq, ":killer", "trp_player"), 
       (call_script, "script_change_player_party_morale", ":impact_pos"),
   (try_end),

   # but give them renown for this evil deed (their deed spreads upon every tongue, impressing some, and cowing others)
   (val_mul, ":impact", -1),
   (call_script, "script_change_troop_renown", ":killer" , ":impact"),

   (call_script, "script_process_lord_death", ":dead_troop", ":dead_troop_faction"),   ###### NEW v3.0
   
]),
#################################################################





################ NEW v2.1 
("get_troop_relation_with_troop",
  [
   (store_script_param, ":troop1", 1),
   (store_script_param, ":troop2", 2),
    
   (store_add, ":troop1_slot_for_troop2", ":troop2", slot_troop_relations_begin),
   (troop_get_slot, ":relation1", ":troop1", ":troop1_slot_for_troop2"),
   
   (store_add, ":troop2_slot_for_troop1", ":troop1", slot_troop_relations_begin),
   (troop_get_slot, ":relation2", ":troop2", ":troop2_slot_for_troop1"),
   
   (assign, reg0, ":relation1"),
   (assign, reg1, ":relation2"),
]),
#################################################################




################ NEW v2.1 - kills a lord by assassination
("kill_lord_assassination",
  [
   (store_script_param, ":dead_troop", 1),
   (store_script_param, ":found_killer", 2),
   (store_script_param, ":killer", 3),

   # make sure we don't try to recruit this prisoner stack later!
   # (troop_set_slot, ":dead_troop", slot_prisoner_agreed, 0),

   # "kill" the NPC - force the 48 hr respawn kingdom heros trigger to ignore this troop (no party will be created for this troop, ever again)
   # [q.v. script_create_kingdom_hero_party]
   (troop_set_slot, ":dead_troop", slot_troop_is_alive, 0),  ## he's dead/inactive
   (troop_set_slot, ":dead_troop", slot_troop_death_cause, 3),  ## assassinated
   (store_troop_faction, ":dead_troop_faction", ":dead_troop"), 
   ################ NEW v2.1 - faction statistics
   (faction_get_slot, ":cur_slot_value", ":dead_troop_faction", slot_faction_lords_lost_assassination),
   (val_add, ":cur_slot_value", 1),
   (faction_set_slot, ":dead_troop_faction", slot_faction_lords_lost_assassination, ":cur_slot_value"),
   ################
   (call_script, "script_get_message_color", 2, ":dead_troop"),
   (str_store_troop_name_link, s1, ":dead_troop"),
   (str_store_faction_name_link, s2, ":dead_troop_faction"),
   (display_log_message, "@{s1} of {s2} was assassinated!", reg20),
   
   ### Now to the cause of death
   (try_begin),
     (call_script, "script_rand", 0, 100),
     (lt, reg0, 40), 
       (display_message, "@Cause of death: Poisoned.", reg20),
       (troop_set_slot, ":dead_troop", slot_troop_death_assassination_method, 1), 
   (else_try),
     (ge, reg0, 40), 
     (lt, reg0, 60), 
       (display_message, "@Cause of death: Stabbed.", reg20),
       (troop_set_slot, ":dead_troop", slot_troop_death_assassination_method, 2), 
   (else_try),
     (ge, reg0, 60), 
     (lt, reg0, 80), 
       (display_message, "@Cause of death: Strangled.", reg20),
       (troop_set_slot, ":dead_troop", slot_troop_death_assassination_method, 3), 
   (else_try),
     (ge, reg0, 80), 
       (display_message, "@Cause of death: Ambushed.", reg20),
       (troop_set_slot, ":dead_troop", slot_troop_death_assassination_method, 4), 
   (try_end),

   # remove them from their faction
   (troop_set_slot, ":dead_troop", slot_troop_change_to_faction, "fac_no_faction"),
   (troop_set_slot, ":dead_troop", slot_troop_original_faction, "fac_no_faction"),

   # determine the penalty for this act (based on the honor of the troop they've killed)
   (troop_get_slot, ":impact", ":dead_troop", slot_troop_renown),
   (troop_get_slot, ":impact_pos", ":dead_troop", slot_troop_renown),
   # (val_div, ":impact", -33),
   (val_div, ":impact", -60),
   (store_div, ":half", ":impact", 2),
   
   (val_div, ":impact_pos", 60),
   (store_div, ":half_pos", ":impact_pos", 2),   
 
   (try_begin),
     (eq, ":found_killer", 1), 
       (store_troop_faction, ":killer_faction", ":killer"), 
       (str_store_troop_name_link, s2, ":killer"),
       (str_store_faction_name_link, s3, ":killer_faction"),
       (str_store_faction_name_link, s4, ":dead_troop_faction"),
	   ############## NEW v3.9 - make killer of the same faction matter
       (troop_set_slot, ":dead_troop", slot_troop_death_assassination_found_perpetrators, ":killer"),    
	   
       (try_begin),
         (eq, ":killer_faction", ":dead_troop_faction"), 
           (display_message, "@The perpretator was discovered! It is {s2}! The {s4} is furious!", reg20),     
		   (try_for_range, ":cur_lord", active_npcs_begin, active_npcs_end),
             (troop_slot_eq, ":cur_lord", slot_troop_is_alive, 1), 
			 
             ######### process friends/enemies reactions
             (call_script, "script_get_troop_relation_with_troop", ":dead_troop", ":cur_lord"),
             (assign, ":troop_relation", reg1),  
             (try_begin),
               (ge, ":troop_relation", 20), 
               (store_div, ":impact", ":troop_relation", 2), 
                 (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", ":impact"),
             (else_try),
               (lt, ":troop_relation", -10), 
               (store_div, ":half_pos", ":troop_relation", 2), 
                 (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", ":half_pos"),
             (try_end),  
			 
	         ############## Now family reactions
             (try_begin),
               (ge, ":troop_relation", -30), ######### didn't hate him
               (try_begin),
                 (troop_slot_eq, ":cur_lord", slot_troop_spouse, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -40),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_father, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -80),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_mother, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -80),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_guardian, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -30),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_betrothed, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -50),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_love_interest_1, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -25),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_love_interest_2, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -25),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_love_interest_3, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -25),
               (try_end),
             (else_try),
               (try_begin),
                 (troop_slot_eq, ":cur_lord", slot_troop_spouse, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -20),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_father, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -40),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_mother, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -40),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_guardian, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -15),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_betrothed, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -25),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_love_interest_1, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -10),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_love_interest_2, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -10),
               (else_try),
                 (troop_slot_eq, ":cur_lord", slot_troop_love_interest_3, ":dead_troop"), 
                   (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", -10),
               (try_end),
             (try_end),
			 ######### now process normal reaction to act
             (store_troop_faction, ":cur_faction", ":cur_lord"),
             (eq, ":cur_faction", ":killer_faction"),
               (try_begin),
                 (eq, ":dead_troop_faction", ":cur_faction"), 
				 
                 (troop_get_slot, ":impact", ":dead_troop", slot_troop_renown),
                 (troop_get_slot, ":impact_pos", ":dead_troop", slot_troop_renown),
                 # (val_div, ":impact", -33),
                 (val_div, ":impact", -60),
                 (store_div, ":half", ":impact", 2),
                 (val_div, ":impact_pos", 60),
                 (store_div, ":half_pos", ":impact_pos", 2),   
			   
                 (try_begin),
                   (eq, ":dead_troop_faction", ":cur_faction"), 
                   (faction_slot_eq, ":killer_faction", slot_faction_leader, ":cur_lord"), 
                     (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", ":impact"),
                 (else_try),
                   (eq, ":dead_troop_faction", ":cur_faction"), 
                   (neg|faction_slot_eq, ":killer_faction", slot_faction_leader, ":cur_lord"), 
                     (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", ":half"),
                 (try_end),
               (try_end),
           (try_end),
       (else_try),
         (neq, ":killer_faction", ":dead_troop_faction"), 
           (display_message, "@The perpretator was discovered! It is {s2} from the {s3}! The {s4} is furious!", reg20),     
           (try_begin),
             # (eq, "$players_kingdom", ":killer_faction"),
             # (store_relation, ":relation", "fac_player_supporters_faction", ":dead_troop_faction"),
             # (call_script, "script_set_player_relation_with_faction", ":dead_troop_faction", ":relation"),
           # (else_try),
             # (eq, "$players_kingdom", ":dead_troop_faction"),
             # (store_relation, ":relation", "fac_player_supporters_faction", ":killer_faction"),
             # (call_script, "script_set_player_relation_with_faction", ":killer_faction", ":relation"),
           # (else_try),
             # (store_relation, ":relation", ":dead_troop_faction", ":killer_faction"),
             # (store_add, ":relation", ":relation", ":impact"),
             # (set_relation, ":dead_troop_faction", ":killer_faction", ":relation"),
           (try_end), 
			 
           ######### process friends/enemies reactions
		   (try_for_range, ":cur_lord", active_npcs_begin, active_npcs_end),
             (troop_slot_eq, ":cur_lord", slot_troop_is_alive, 1), 
             (call_script, "script_get_troop_relation_with_troop", ":dead_troop", ":cur_lord"),
             (assign, ":troop_relation", reg1),  
             (try_begin),
               (ge, ":troop_relation", 20), 
               (store_div, ":impact", ":troop_relation", 2), 
                 (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", ":impact"),
             (else_try),
               (lt, ":troop_relation", -10), 
               (store_div, ":half_pos", ":troop_relation", 2), 
                 (call_script, "script_troop_change_relation_with_troop", ":killer", ":cur_lord", ":half_pos"),
             (try_end),  
           (try_end),  
       (try_end),
       ############################
   (try_end),


   ########### NEW v2.7 - fixes lords not disappearing from the map when they're assassinated
   (call_script, "script_remove_dead_lord_from_game", ":dead_troop"), 
   ###########
   
   (call_script, "script_process_lord_death", ":dead_troop", ":dead_troop_faction"),  ###### NEW v3.0
]),
#################################################################





################ NEW v2.1  - modified version of equip_troop_king_start that accepts a troop - used for equipping new kings
("give_equipment_to_new_king",
  [
   (store_script_param, ":troop_no", 1),    
   (store_script_param, ":source_troop", 2),    
  
   (try_begin),  ##### if troop = player don't clear inventory
     (neq, ":troop_no", "trp_player"),
       (troop_clear_inventory, ":troop_no"),
       (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
       (try_for_range, ":i_slot", 0, ":inv_cap"),
         (troop_set_inventory_slot, ":troop_no", ":i_slot", -1),
       (try_end),
   (try_end),  

   (try_begin),  
     (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
     (gt, ":party_no", -1),  ######## NEW v3.6
       (store_troop_faction, ":troop_faction", ":troop_no"),  
       (call_script, "script_apply_banner_to_new_king", ":party_no", ":troop_no", ":troop_faction"),  
   (try_end),
   
   # (call_script, "script_give_source_troop_inventory_to_troop", ":troop_no", ":source_troop", 3),  
   (call_script, "script_give_source_troop_inventory_to_troop", ":troop_no", ":source_troop", 1),   ######## NEW v3.3 - fixed kings receiving vassal quality equipment
]),
#################################################################



################ NEW v2.1  gives the new king the old king's banner 
("apply_banner_to_new_king",
  [
   (store_script_param, ":party_no", 1),    
   (store_script_param, ":troop_no", 2),    
   (store_script_param, ":troop_faction", 3),    
   ####### NEW v3.6
   (try_begin),
     (eq, ":troop_faction", "fac_kingdom_1"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_q01"),
     (party_set_banner_icon, ":party_no", "icon_banner_337"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_2"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_p01"),
     (party_set_banner_icon, ":party_no", "icon_banner_316"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_3"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_n01"),
     (party_set_banner_icon, ":party_no", "icon_banner_274"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_4"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_m01"),
     (party_set_banner_icon, ":party_no", "icon_banner_253"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_5"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_l01"),
     (party_set_banner_icon, ":party_no", "icon_banner_232"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_6"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_k01"),
     (party_set_banner_icon, ":party_no", "icon_banner_211"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_7"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_j01"),
     (party_set_banner_icon, ":party_no", "icon_banner_190"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_8"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_i01"),
     (party_set_banner_icon, ":party_no", "icon_banner_169"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_9"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_h01"),
     (party_set_banner_icon, ":party_no", "icon_banner_148"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_10"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_g01"),
     (party_set_banner_icon, ":party_no", "icon_banner_127"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_11"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_r01"),
     (party_set_banner_icon, ":party_no", "icon_banner_358"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_12"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_s01"),
     (party_set_banner_icon, ":party_no", "icon_banner_379"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_13"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_t02"),
     (party_set_banner_icon, ":party_no", "icon_banner_401"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_14"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_u01"),
     (party_set_banner_icon, ":party_no", "icon_banner_421"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_15"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_v01"),
     (party_set_banner_icon, ":party_no", "icon_banner_442"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_16"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_e17"),
     (party_set_banner_icon, ":party_no", "icon_banner_101"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_17"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_e01"),
     (party_set_banner_icon, ":party_no", "icon_banner_85"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_18"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_f01"),
     (party_set_banner_icon, ":party_no", "icon_banner_106"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_19"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x04"),
     (party_set_banner_icon, ":party_no", "icon_banner_466"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_20"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x01"),
     (party_set_banner_icon, ":party_no", "icon_banner_463"),
   (else_try),
     (eq, ":troop_faction", "fac_papacy"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_f16"),
     (party_set_banner_icon, ":party_no", "icon_banner_121"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_22"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x07"),
     (party_set_banner_icon, ":party_no", "icon_banner_469"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_23"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_v05"),
     (party_set_banner_icon, ":party_no", "icon_banner_446"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_24"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_f10"),
     (party_set_banner_icon, ":party_no", "icon_banner_115"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_25"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x10"),
     (party_set_banner_icon, ":party_no", "icon_banner_472"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_26"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x11"),
     (party_set_banner_icon, ":party_no", "icon_banner_473"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_27"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x12"),
     (party_set_banner_icon, ":party_no", "icon_banner_474"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_28"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x13"),
     (party_set_banner_icon, ":party_no", "icon_banner_475"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_29"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x16"),
     (party_set_banner_icon, ":party_no", "icon_banner_478"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_30"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x15"),
     (party_set_banner_icon, ":party_no", "icon_banner_477"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_31"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x19"),
     (party_set_banner_icon, ":party_no", "icon_banner_481"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_32"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_o"),
     (party_set_banner_icon, ":party_no", "icon_banner_15"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_33"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_p17"),
     (party_set_banner_icon, ":party_no", "icon_banner_332"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_34"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_l"),
     (party_set_banner_icon, ":party_no", "icon_banner_12"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_35"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_d"),
     (party_set_banner_icon, ":party_no", "icon_banner_04"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_36"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_p19"),
     (party_set_banner_icon, ":party_no", "icon_banner_334"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_37"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_h"),
     (party_set_banner_icon, ":party_no", "icon_banner_08"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_38"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_f18"),
     (party_set_banner_icon, ":party_no", "icon_banner_123"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_39"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_x09"),
     (party_set_banner_icon, ":party_no", "icon_banner_471"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_40"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_t"),
     (party_set_banner_icon, ":party_no", "icon_banner_20"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_41"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_s"),
     (party_set_banner_icon, ":party_no", "icon_banner_19"),
   (else_try),
     (eq, ":troop_faction", "fac_kingdom_42"),
     (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, "spr_banner_o06"),
     (party_set_banner_icon, ":party_no", "icon_banner_300"),
   (try_end),
   ###################################
]),
#################################################################




################ NEW v2.1 - Handles faction leader death
("process_faction_leader_death",
  [
   (store_script_param, ":old_faction_leader", 1),    
   (store_script_param, ":faction_no", 2),    
   
   # (display_message, "@script_process_faction_leader_death called!"),
   
   ########## NEW v3.3 - heir system
   (assign, ":best_troop", -1),
   (assign, ":best_renown", -1),
   (assign, ":no_heir", 0),
   (try_begin),
     (faction_get_slot, ":heir", ":faction_no", slot_faction_heir_1),
     (gt, ":heir", -1),
     (troop_slot_eq, ":heir", slot_troop_is_alive, 1), 
	 ########## NEW v3.9.1 - fixed dead heirs that got recycled receiving fiefs when their father died
	 (store_troop_faction, ":heir_faction", ":heir"),  
	 (eq, ":heir_faction", ":faction_no"),
	 ##########
     (assign, ":best_troop", ":heir"),
     (faction_set_slot, ":faction_no", slot_faction_heir_1, -1),
     (str_store_troop_name_link, s46, ":heir"),
     (display_message, "@Found heir: {s46}."),
   (else_try),
     (faction_get_slot, ":heir", ":faction_no", slot_faction_heir_2),
     (gt, ":heir", -1),
     (troop_slot_eq, ":heir", slot_troop_is_alive, 1),  
	 ########## NEW v3.9.1 - fixed dead heirs that got recycled receiving fiefs when their father died
	 (store_troop_faction, ":heir_faction", ":heir"),  
	 (eq, ":heir_faction", ":faction_no"),
	 ##########
     (assign, ":best_troop", ":heir"),
     (faction_set_slot, ":faction_no", slot_faction_heir_2, -1),
     (str_store_troop_name_link, s46, ":heir"),
     (display_message, "@Found heir: {s46}."),
   (else_try),
     (faction_get_slot, ":heir", ":faction_no", slot_faction_heir_3),
     (gt, ":heir", -1),
     (troop_slot_eq, ":heir", slot_troop_is_alive, 1),  
	 ########## NEW v3.9.1 - fixed dead heirs that got recycled receiving fiefs when their father died
	 (store_troop_faction, ":heir_faction", ":heir"),  
	 (eq, ":heir_faction", ":faction_no"),
	 ##########
     (assign, ":best_troop", ":heir"),
     (faction_set_slot, ":faction_no", slot_faction_heir_3, -1),
     (str_store_troop_name_link, s46, ":heir"),
     (display_message, "@Found heir: {s46}."),
   (else_try),
     (eq, ":best_troop", -1),
     (assign, ":no_heir", 1),
     (display_message, "@Found no heir."),
   (try_end),
   ################

   (try_begin),
     # find best candidate to become king
     (eq, ":no_heir", 1),  ######### NEW v3.3
     (try_for_range, ":troop", active_npcs_begin, active_npcs_end),
       (troop_slot_eq, ":troop", slot_troop_is_alive, 1),  ## he's alive/active           
       (troop_slot_eq, ":troop", slot_troop_occupation, slto_kingdom_hero),  #only other heros of this faction may become the king
         (store_troop_faction, ":cur_troop_faction", ":troop"),
         (eq, ":cur_troop_faction", ":faction_no"),
           # (str_store_troop_name_link, s1, ":troop"),
           # (str_store_faction_name_link, s2, ":faction_no"),
           # (display_message, "@Found a candidate for {s2}: {s1}."),
           (troop_get_slot, ":renown", ":troop", slot_troop_renown),
           # (assign, reg11, ":renown"),
           # (display_message, "@Got his renown: {reg11}"),
           (gt, ":renown", ":best_renown"),
             (assign, ":best_troop", ":troop"),
             (assign, ":best_renown", ":renown"),
             # (str_store_troop_name_link, s1, ":best_troop"),
             # (str_store_faction_name_link, s2, ":faction_no"),
             # (display_message, "@Found the best candidate for {s2}: {s1}."),
     (try_end),
   (try_end),
     
     ########## NEW v2.4 - Fixes player not becoming king when king dies and player has the highest renown in the faction
     (try_begin),
       (eq, ":no_heir", 1),  ######### NEW v3.3
       (eq, "$players_kingdom", ":faction_no"),  
         (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
         (gt, ":renown", ":best_renown"),
           (assign, ":best_troop", "trp_player"),
           (assign, ":best_renown", ":renown"),
           (assign, "$g_player_cur_role", role_king),  ####### NEW v3.0 - player role
           ############## NEW v3.3 - fixes player not getting staff after becoming king by succession and not having a culture as well
           (assign, "$g_player_minister", "trp_temporary_minister"),
           (troop_set_faction, "trp_temporary_minister", "$players_kingdom"),
           (assign, "$g_player_chamberlain", "trp_dplmc_chamberlain"),
           (troop_set_faction, "trp_dplmc_chamberlain", "$players_kingdom"),
           (assign, "$g_player_chancellor", "trp_dplmc_chancellor"),
           (troop_set_faction, "trp_dplmc_chancellor", "$players_kingdom"),
           (assign, "$g_player_constable", "trp_dplmc_constable"),
           (troop_set_faction, "trp_dplmc_constable", "$players_kingdom"),
           (faction_get_slot, ":culture", "$players_kingdom", slot_faction_culture),
           (troop_set_slot, "trp_player", slot_troop_cur_culture, ":culture"),
           ############################
     (try_end),
     ########
     
     ########## NEW v3.3 - fixes player prince not getting staff nor culture
     (try_begin),
       (eq, ":no_heir", 0),  
       (eq, ":best_troop", "trp_player"), 
         (assign, "$g_player_cur_role", role_king),  
         (assign, "$g_player_minister", "trp_temporary_minister"),
         (troop_set_faction, "trp_temporary_minister", "$players_kingdom"),
         (assign, "$g_player_chamberlain", "trp_dplmc_chamberlain"),
         (troop_set_faction, "trp_dplmc_chamberlain", "$players_kingdom"),
         (assign, "$g_player_chancellor", "trp_dplmc_chancellor"),
         (troop_set_faction, "trp_dplmc_chancellor", "$players_kingdom"),
         (assign, "$g_player_constable", "trp_dplmc_constable"),
         (troop_set_faction, "trp_dplmc_constable", "$players_kingdom"),
         (faction_get_slot, ":culture", "$players_kingdom", slot_faction_culture),
         (troop_set_slot, "trp_player", slot_troop_cur_culture, ":culture"),
     (try_end),
     ########
         
     (try_begin),
       # check if a candidate was found
       (neq, ":best_troop", -1),

       # make them king
       (faction_set_slot, ":faction_no", slot_faction_leader, ":best_troop"),  
       # (str_store_troop_name_link, s1, ":best_troop"),
       # (str_store_faction_name_link, s2, ":faction_no"),
       # (display_message, "@{s1} became the new king of {s2}."),         
       (troop_get_slot, ":renown", ":best_troop", slot_troop_renown),
       (val_add, ":renown", 300),
       (troop_set_slot, ":best_troop", slot_troop_renown, ":renown"),  #### add some renown to him
       
       #### Sets the new title
       (try_begin),
         (troop_get_slot, ":orig_name", ":best_troop", slot_troop_original_name),
         (troop_get_slot, ":orig_surname", slot_troop_original_surname, ":best_troop"),
         (gt, ":orig_name", 0),
         (gt, ":orig_surname", 0),
           (str_store_string, s1, ":orig_name"),  
           (str_store_string, s2, ":orig_surname"),  
           (str_store_string, s3, "str_enhanced_name_surname"),  
           (troop_set_name, ":best_troop", s3),
       (else_try),
         (gt, ":orig_name", 0),
           (str_store_string, s1, ":orig_name"),  
           (str_store_string, s3, "str_enhanced_name"),  
           (troop_set_name, ":best_troop", s3),
       (try_end),
       
       (call_script, "script_give_equipment_to_new_king", ":best_troop", ":old_faction_leader"),  ######## gives him the king's equipment

       (call_script, "script_update_troop_notes", ":old_faction_leader"), ### update notes
       (call_script, "script_update_troop_notes", ":best_troop"), ### update notes

       # announce it!
       #TODO: generate a presentation for this! (start_presentation, "prsnt_enemy_succession"),
       (str_store_troop_name, s1, ":best_troop"),
       (str_store_faction_name, s2, ":faction_no"),
       (display_message, "@{s1} is the new ruler of the {s2}!!!"),
       (call_script, "script_update_faction_notes", ":faction_no"), ### update notes
       
      
       ##### NEW v2.8 - gives the deceased king's fiefs to the new king
       (try_for_range, ":fief", centers_begin, centers_end),
         (party_get_slot, ":lord", ":fief", slot_town_lord),
         (eq, ":lord", ":old_faction_leader"),
         (call_script, "script_give_center_to_faction", ":fief", ":faction_no"),
         # (party_set_slot, ":fief", slot_town_lord, -1),  
         (call_script, "script_give_center_to_lord_plus_villages", ":fief", ":best_troop", 0),
       (try_end),
       ###############
       
       ##### NEW v3.3 - if player give him a court
       (try_begin),
         (eq, ":best_troop", "trp_player"),  
         # (assign, ":court_found", 0),  
         (assign, ":upper_bound", centers_end), 
         (try_for_range, ":fief", centers_begin, ":upper_bound"),
           (party_get_slot, ":lord", ":fief", slot_town_lord),
           (eq, ":lord", "trp_player"),
           (try_begin), #### give preference to towns
             (party_slot_eq, ":fief", slot_party_type, spt_town), 
             (assign, "$g_player_court", ":fief"),  
             # (assign, ":court_found", 1),  
             (assign, ":upper_bound", -1),  
           (else_try), #### if no town, then get a caslte
             # (eq, ":court_found", 0),  
             (party_slot_eq, ":fief", slot_party_type, spt_castle), 
             (assign, "$g_player_court", ":fief"),  
             (assign, ":upper_bound", -1),  
           (try_end),
         (try_end),
       (try_end),
       ###############
       
       ##### NEW v3.7 - if Berke Khan = change faction religion to pagan
       (try_begin),
         (eq, ":old_faction_leader", "trp_kingdom_3_lord"),  
           (faction_set_slot, ":faction_no", slot_faction_religion, religion_pagan_mongol),  
           (display_message, "@Berke Khan died! Golden Horde religion changed to Mongol Paganism."),  
       (try_end),
       ###############
       
     (try_end),
]),
#################################################################



########################################
# script_cf_get_random_enemy_center
# Input: arg1 = faction_no
# Output: reg21 = center_no
("get_random_faction_walled_center",
  [
    (store_script_param_1, ":faction_no"),
    
    (assign, ":num_centers", 0),
    (assign, ":cur_slot", 100),
    (try_for_range, ":cur_center", centers_begin, centers_end),
      (store_faction_of_party, ":cur_faction", ":cur_center"),
      (eq, ":cur_faction", ":faction_no"),
        (val_add, ":num_centers", 1),
        (troop_set_slot, "trp_ee_array_2", ":cur_slot", ":cur_center"),
        (val_add, ":cur_slot", 1),
    (try_end),
     
    (try_begin),
      (gt, ":num_centers", 0),
        (call_script, "script_rand", 100, ":cur_slot"),  ### gets a random center store in one of the slots
        (troop_get_slot, ":result", "trp_ee_array_2", reg0),
        (assign, reg21, ":result"),
    (try_end),
]),
#################################################################




################ NEW v2.1 - Applies random string to the lord name for variety
("get_troop_title",
  [
   (store_script_param, ":troop_no", 1),    
   (store_script_param, ":troop_culture", 2),    
   
   (str_clear, s4), 
   (str_clear, s5), 
   (str_clear, s6), 
   
   (assign, ":random_title_numerical", 0), 
   (assign, ":random_origin", 0), 
   (assign, ":random_title3", 0), 
   (assign, ":random_title4", 0), 
   (assign, ":random_title5", 0), 
   (assign, ":selected_name_combination", 0), 
   
   (store_faction_of_troop, ":troop_faction", ":troop_no"),     
   
########
   (try_begin),  ### titles numerical
     (call_script, "script_rand", 0, 100), 
     # (lt, reg0, 25), 
     (lt, reg0, 15),  ######### NEW v3.5
     (this_or_next|neq, ":troop_culture", "fac_culture_finnish"), 
     (this_or_next|neq, ":troop_culture", "fac_culture_baltic"), 
     (this_or_next|neq, ":troop_culture", "fac_culture_marinid"), 
     (this_or_next|neq, ":troop_culture", "fac_culture_mamluke"), 
     (this_or_next|neq, ":troop_culture", "fac_culture_andalus"), 
     (this_or_next|neq, ":troop_culture", "fac_culture_anatolian"), 
     (this_or_next|neq, ":troop_culture", "fac_culture_cuman"), ######## NEW v3.3
     (neq, ":troop_culture", "fac_culture_mongol"), 
       (call_script, "script_rand", "str_enhanced_name_title_numeral_1", "str_enhanced_name_surname_origin_1"), 
       (str_store_string, s4, reg0),   
       (assign, ":random_title_numerical", reg0), 
       # (call_script, "script_rand", 0, 100), 
       (try_begin),  
         # (lt, reg0, 70), 
           (assign, ":selected_name_combination", "str_enhanced_name_title_numeral"),    
       # (else_try),
         # (ge, reg0, 50), 
         # (lt, reg0, 60), 
           # (assign, ":selected_name_combination", "str_enhanced_name_title_numeral_surname"), 
       # (else_try),
         # (ge, reg0, 60), 
         # (lt, reg0, 80), 
           # (call_script, "script_get_random_faction_walled_center", ":troop_faction"),
           # (str_store_party_name, s6, reg21), 
           # (assign, ":random_origin", reg21), 
           # (assign, ":selected_name_combination", "str_enhanced_name_title_numeral_surname_origin"), 
       # (else_try),
         # (ge, reg0, 70), 
           # (call_script, "script_get_random_faction_walled_center", ":troop_faction"),
           # (str_store_party_name, s6, reg21), 
           # (assign, ":random_origin", reg21), 
           # (assign, ":selected_name_combination", "str_enhanced_name_title_numeral_origin"), 
       (try_end),
########
   # (else_try),
     # (ge, reg0, 30), 
     # (lt, reg0, 50), 
     # (this_or_next|neq, ":troop_culture", "fac_culture_finnish"), 
     # (this_or_next|neq, ":troop_culture", "fac_culture_baltic"), 
     # (this_or_next|neq, ":troop_culture", "fac_culture_marinid"), 
     # (this_or_next|neq, ":troop_culture", "fac_culture_mamluke"), 
     # (this_or_next|neq, ":troop_culture", "fac_culture_andalus"), 
     # (this_or_next|neq, ":troop_culture", "fac_culture_anatolian"), 
     # (neq, ":troop_culture", "fac_culture_mongol"), 
       # (str_store_string, s5, "str_enhanced_name_surname_origin_1"),   
       # (call_script, "script_get_random_faction_walled_center", ":troop_faction"),
       # (str_store_party_name, s6, reg21), 
       # (assign, ":random_origin", reg21), 
       # (call_script, "script_rand", 0, 100), 
       # (try_begin),  
         # (lt, reg0, 30), 
           # (assign, ":selected_name_combination", "str_enhanced_name_origin"),    
       # (else_try),
         # (ge, reg0, 30), 
           # (assign, ":selected_name_combination", "str_enhanced_name_surname_origin"), 
       # (try_end),
########
   (else_try),
     # (ge, reg0, 25), 
     (ge, reg0, 15), ##### NEW v3.5 
       # (call_script, "script_rand", 0, 100), 
       (try_begin),  
         (this_or_next|eq, ":troop_culture", "fac_culture_finnish"), 
         (this_or_next|eq, ":troop_culture", "fac_culture_baltic"), 
         (this_or_next|eq, ":troop_culture", "fac_culture_cuman"), ######## NEW v3.3
         # (this_or_next|eq, ":troop_culture", "fac_culture_marinid"), 
         # (this_or_next|eq, ":troop_culture", "fac_culture_mamluke"), 
         # (this_or_next|eq, ":troop_culture", "fac_culture_andalus"), 
         # (this_or_next|eq, ":troop_culture", "fac_culture_anatolian"), 
         (eq, ":troop_culture", "fac_culture_mongol"), 
           (assign, ":selected_name_combination", "str_enhanced_name"),    
       (else_try),
         (assign, ":selected_name_combination", "str_enhanced_name_surname"), 
       (try_end),
########
   (try_end),
   
   (try_begin),  #### this is to ensure that factions like mongols get their names in case they didn't
     (eq, ":selected_name_combination", 0), 
     (this_or_next|eq, ":troop_culture", "fac_culture_finnish"), 
     (this_or_next|eq, ":troop_culture", "fac_culture_baltic"), 
     (this_or_next|eq, ":troop_culture", "fac_culture_cuman"), ######## NEW v3.3
     (eq, ":troop_culture", "fac_culture_mongol"), 
       (assign, ":selected_name_combination", "str_enhanced_name"),    
   (try_end),
   
   (troop_set_slot, ":troop_no", slot_troop_original_title_numeral, ":random_title_numerical"),
   (troop_set_slot, ":troop_no", slot_troop_original_origin, ":random_origin"),
   (troop_set_slot, ":troop_no", slot_troop_original_title3, ":random_title3"),
   (troop_set_slot, ":troop_no", slot_troop_original_title4, ":random_title4"),
   (troop_set_slot, ":troop_no", slot_troop_original_title5, ":random_title5"),
   
   (str_store_string, s3, ":selected_name_combination"),
]),
#################################################################






################ NEW v2.1 - makes a copy of source troop inventory and gives it to target troop
("give_source_troop_inventory_to_troop",
  [
   (store_script_param, ":troop_no", 1),    
   (store_script_param, ":source_troop", 2),    
   (store_script_param, ":noble_type", 3),    
      
   (assign, ":main_weapon", 0),
   (assign, ":side_weapon", 25),
   (assign, ":shield", 50),
   (assign, ":two_handed", 75),
   (assign, ":javelin", 100),
   (assign, ":bolts", 125),
   (assign, ":arrows", 150),
   (assign, ":bow", 175),
   (assign, ":crossbow", 200),
   (assign, ":head", 225),
   (assign, ":body", 250),
   (assign, ":foot", 275),
   (assign, ":hand", 300),
   (assign, ":horse", 325),
   
   (assign, ":equip_main", 0),
   (assign, ":equip_side", 0),
   (assign, ":equip_shield", 0),
   (assign, ":equip_two_handed", 0),
   (assign, ":equip_javelin", 0),
   (assign, ":equip_bolts", 0),
   (assign, ":equip_arrows", 0),
   (assign, ":equip_bow", 0),
   (assign, ":equip_crossbow", 0),
   (assign, ":equip_head", 0),
   (assign, ":equip_body", 0),
   (assign, ":equip_foot", 0),
   (assign, ":equip_hand", 0),
   (assign, ":equip_horse", 0),

   (troop_get_inventory_capacity, ":capacity", ":source_troop"),
   
   (try_for_range, ":cur_slot", 0, ":capacity"),     
     (troop_get_inventory_slot, ":cur_item", ":source_troop", ":cur_slot"),
     (troop_get_inventory_slot_modifier, ":cur_item_imod", ":source_troop", ":cur_slot"),
     (gt, ":cur_item", 0),
     (item_get_type, ":type", ":cur_item"),
     (try_begin),
       (eq, ":type", itp_type_polearm),
       (val_add, ":main_weapon", 1),
       (troop_set_slot, "trp_items_array", 0, ":main_weapon"),
       (troop_set_slot, "trp_items_array", ":main_weapon", ":cur_item"),
       (assign, ":equip_main", 1),
     (else_try),    
       (eq, ":type", itp_type_one_handed_wpn),
       (val_add, ":side_weapon", 1),
       (troop_set_slot, "trp_items_array", 25, ":side_weapon"),
       (troop_set_slot, "trp_items_array", ":side_weapon", ":cur_item"),    
       (assign, ":equip_side", 1),
     (else_try),    
       (eq, ":type", itp_type_shield),
       (val_add, ":shield", 1),
       (troop_set_slot, "trp_items_array", 50, ":shield"),
       (troop_set_slot, "trp_items_array", ":shield", ":cur_item"),
       (assign, ":equip_shield", 1),    
     (else_try),    
       (eq, ":type", itp_type_two_handed_wpn),
       (val_add, ":two_handed", 1),
       (troop_set_slot, "trp_items_array", 75, ":two_handed"),
       (troop_set_slot, "trp_items_array", ":two_handed", ":cur_item"),
       (assign, ":equip_two_handed", 1),
     (else_try),    
       (eq, ":type", itp_type_thrown),
       (val_add, ":javelin", 1),
       (troop_set_slot, "trp_items_array", 100, ":javelin"),
       (troop_set_slot, "trp_items_array", ":javelin", ":cur_item"),
       (assign, ":equip_javelin", 1),
     (else_try),    
       (eq, ":type", itp_type_bolts),
       (val_add, ":bolts", 1),
       (troop_set_slot, "trp_items_array", 125, ":bolts"),
       (troop_set_slot, "trp_items_array", ":bolts", ":cur_item"),
       (assign, ":equip_bolts", 1),
     (else_try),    
       (eq, ":type", itp_type_arrows),
       (val_add, ":arrows", 1),
       (troop_set_slot, "trp_items_array", 150, ":arrows"),
       (troop_set_slot, "trp_items_array", ":arrows", ":cur_item"),
       (assign, ":equip_arrows", 1),
     (else_try),    
       (eq, ":type", itp_type_bow),
       (val_add, ":bow", 1),
       (troop_set_slot, "trp_items_array", 175, ":bow"),
       (troop_set_slot, "trp_items_array", ":bow", ":cur_item"),
       (assign, ":equip_bow", 1),
     (else_try),    
       (eq, ":type", itp_type_crossbow),
       (val_add, ":crossbow", 1),
       (troop_set_slot, "trp_items_array", 200, ":crossbow"),
       (troop_set_slot, "trp_items_array", ":crossbow", ":cur_item"),
       (assign, ":equip_crossbow", 1),
     (else_try),    
       (eq, ":type", itp_type_head_armor),
       (neq, ":type", itp_civilian),  ########## NEW v3.5
       (val_add, ":head", 1),
       (troop_set_slot, "trp_items_array", 225, ":head"),
       (troop_set_slot, "trp_items_array", ":head", ":cur_item"),
       (assign, ":equip_head", 1),
     (else_try),    
       (eq, ":type", itp_type_body_armor),
       (neq, ":type", itp_civilian),  ########## NEW v3.5
       (val_add, ":body", 1),
       (troop_set_slot, "trp_items_array", 250, ":body"),
       (troop_set_slot, "trp_items_array", ":body", ":cur_item"),
       (assign, ":equip_body", 1),    
     (else_try),    
       (eq, ":type", itp_type_foot_armor),
       (neq, ":type", itp_civilian),  ########## NEW v3.5
       (val_add, ":foot", 1),
       (troop_set_slot, "trp_items_array", 275, ":foot"),
       (troop_set_slot, "trp_items_array", ":foot", ":cur_item"),
       (assign, ":equip_foot", 1),    
     (else_try),    
       (eq, ":type", itp_type_hand_armor),
       (val_add, ":hand", 1),
       (troop_set_slot, "trp_items_array", 300, ":hand"),
       (troop_set_slot, "trp_items_array", ":hand", ":cur_item"),
       (assign, ":equip_hand", 1),    
     (else_try),    
       (eq, ":type", itp_type_horse),
       (val_add, ":horse", 1),
       (troop_set_slot, "trp_items_array", 325, ":horse"),
       (troop_set_slot, "trp_items_array", ":horse", ":cur_item"),
       (assign, ":equip_horse", 1),    
     (try_end),
   (try_end),
   
   (try_begin),
     (eq, ":equip_main", 1),
     (troop_get_slot, ":amount", "trp_items_array", 0),
     (store_random_in_range, ":slot", 1, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_balanced),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_balanced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_heavy),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_side", 1),
     (troop_get_slot, ":amount", "trp_items_array", 25),
     (store_random_in_range, ":slot", 26, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_masterwork),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_balanced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_heavy),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_shield", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 50),
     (store_random_in_range, ":slot", 51, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_heavy),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_two_handed", 1),    
     (try_begin),
       (eq, ":equip_side", 1),    #if have and side arm
       (store_random_in_range, ":random", 0, 100),
       (lt, ":random", 65), #small chance for getting a sidearm as well####### NEW v3.1-KOMKE something is missing below this line
     (else_try),
       (troop_get_slot, ":amount", "trp_items_array", 75),
       (store_random_in_range, ":slot", 76, ":amount"),
       (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
       (neq, ":current_item", "itm_no_item"),
       ######## NEW v3.1 - 
       (try_begin),
         (eq, ":noble_type", 1),  ##### king
           (troop_add_item, ":troop_no", ":current_item", imod_masterwork),
       (else_try),
         (eq, ":noble_type", 2),  ##### prince
           (troop_add_item, ":troop_no", ":current_item", imod_balanced),
       (else_try),
         (eq, ":noble_type", 3),  ##### vassal
           (troop_add_item, ":troop_no", ":current_item", imod_heavy),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
       (try_end),
       ########################
     (try_end),
   (try_end),
   (try_begin),
     (eq, ":equip_javelin", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 100),
     (store_random_in_range, ":slot", 101, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_bolts", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 125),
     (store_random_in_range, ":slot", 126, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_arrows", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 150),
     (store_random_in_range, ":slot", 151, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_bow", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 175),
     (store_random_in_range, ":slot", 176, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_masterwork),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_balanced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item",  ":cur_item_imod"),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_crossbow", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 200),
     (store_random_in_range, ":slot", 201, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_masterwork),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_balanced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_heavy),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_head", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 225),
     (store_random_in_range, ":slot", 226, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_lordly),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_thick),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_body", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 250),
     (store_random_in_range, ":slot", 251, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_thick),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_foot", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 275),
     (store_random_in_range, ":slot", 276, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_thick),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_hand", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 300),
     (store_random_in_range, ":slot", 301, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_reinforced),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_thick),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (eq, ":equip_horse", 1),    
     (troop_get_slot, ":amount", "trp_items_array", 325),
     (store_random_in_range, ":slot", 326, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     ######## NEW v3.1 - 
     (try_begin),
       (eq, ":noble_type", 1),  ##### king
         (troop_add_item, ":troop_no", ":current_item", imod_champion),
     (else_try),
       (eq, ":noble_type", 2),  ##### prince
         (troop_add_item, ":troop_no", ":current_item", imod_spirited),
     (else_try),
       (eq, ":noble_type", 3),  ##### vassal
         (troop_add_item, ":troop_no", ":current_item", imod_heavy),
     (else_try),
       (eq, ":noble_type", 4),  ##### NEW v3.4 - normal
         (troop_add_item, ":troop_no", ":current_item", imod_plain),
     (try_end),
     ########################
   (try_end),
   (try_begin),
     (troop_equip_items, ":troop_no"),
     (troop_set_auto_equip, ":troop_no", 0),
   (try_end),
]),
#################################################################



##########################
("get_random_equipment_type_from_troop_by_faction",
   [
    (store_script_param, ":troop_no", 1),
    (store_script_param, ":faction_no", 2),

    (try_begin),  ##### if troop = player don't clear inventory
      (neq, ":troop_no", "trp_player"),
        (troop_clear_inventory, ":troop_no"),
        (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_set_inventory_slot, ":troop_no", ":i_slot", -1),
        (try_end),
    (try_end),  

    (assign, ":source_troop", -1),
    (try_begin),
      (eq, ":faction_no", "fac_kingdom_1"),
        (assign, ":source_troop", "trp_item_pool_faction_1"),
    (else_try),
      (this_or_next|eq, ":faction_no", "fac_kingdom_2"),
      (this_or_next|eq, ":faction_no", "fac_kingdom_33"),
      (this_or_next|eq, ":faction_no", "fac_kingdom_34"),
      (this_or_next|eq, ":faction_no", "fac_kingdom_35"),
      (eq, ":faction_no", "fac_kingdom_36"),
        (assign, ":source_troop", "trp_item_pool_faction_baltic"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_3"),
        (assign, ":source_troop", "trp_item_pool_faction_mongol"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_4"),
        (assign, ":source_troop", "trp_item_pool_faction_4"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_5"),
        (assign, ":source_troop", "trp_item_pool_faction_5"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_6"),
        (assign, ":source_troop", "trp_item_pool_faction_6"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_7"),
        (assign, ":source_troop", "trp_item_pool_faction_7"),
    (else_try),
      (this_or_next|eq, ":faction_no", "fac_kingdom_8"),
      (eq, ":faction_no", "fac_kingdom_15"),
        (assign, ":source_troop", "trp_item_pool_faction_rus"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_9"),
        (assign, ":source_troop", "trp_item_pool_faction_9"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_10"),
        (assign, ":source_troop", "trp_item_pool_faction_10"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_11"),
        (assign, ":source_troop", "trp_item_pool_faction_11"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_12"),
        (assign, ":source_troop", "trp_item_pool_faction_12"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_13"),
        (assign, ":source_troop", "trp_item_pool_faction_13"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_14"),
        (assign, ":source_troop", "trp_item_pool_faction_14"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_16"),
        (assign, ":source_troop", "trp_item_pool_faction_16"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_17"),
        (assign, ":source_troop", "trp_item_pool_faction_17"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_18"),
        (assign, ":source_troop", "trp_item_pool_faction_18"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_19"),
        (assign, ":source_troop", "trp_item_pool_faction_19"),
    (else_try),
      (this_or_next|eq, ":faction_no", "fac_kingdom_20"),
      (eq, ":faction_no", "fac_kingdom_31"),
        (assign, ":source_troop", "trp_item_pool_faction_andalus"),
    (else_try),
      (eq, ":faction_no", "fac_papacy"),
        (assign, ":source_troop", "trp_item_pool_faction_21"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_22"),
        (assign, ":source_troop", "trp_item_pool_faction_22"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_23"),
        (assign, ":source_troop", "trp_item_pool_faction_23"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_24"),
        (assign, ":source_troop", "trp_item_pool_faction_24"),
    (else_try),
      (this_or_next|eq, ":faction_no", "fac_kingdom_25"),
      (eq, ":faction_no", "fac_kingdom_28"),
        (assign, ":source_troop", "trp_item_pool_faction_mamluke"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_26"),
        (assign, ":source_troop", "trp_item_pool_faction_26"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_27"),
        (assign, ":source_troop", "trp_item_pool_faction_27"),
    (else_try),
      (this_or_next|eq, ":faction_no", "fac_kingdom_29"),
      (eq, ":faction_no", "fac_kingdom_30"),
        (assign, ":source_troop", "trp_item_pool_faction_balkan"),
    (else_try),
      (this_or_next|eq, ":faction_no", "fac_kingdom_32"),
      (this_or_next|eq, ":faction_no", "fac_kingdom_38"),
      (this_or_next|eq, ":faction_no", "fac_kingdom_39"),
      (eq, ":faction_no", "fac_kingdom_40"),
        (assign, ":source_troop", "trp_item_pool_faction_italian"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_37"),
        (assign, ":source_troop", "trp_item_pool_faction_37"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_41"),
        (assign, ":source_troop", "trp_item_pool_faction_41"),
    (else_try),
      (eq, ":faction_no", "fac_kingdom_42"),
        (assign, ":source_troop", "trp_item_pool_faction_42"),
    (else_try),
      (eq, ":faction_no", "fac_player_supporters_faction"),
        (assign, ":source_troop", "trp_euro_horse_4"), #### if no fix has been selected default to euro senior knight
        (try_begin),
          # (eq, "$cstm_num_tiers", 1),
            # (assign, ":source_troop", "trp_cstm_custom_troop_1_tier_0_0_6"), ### A7
        # (else_try),  
          # (eq, "$cstm_num_tiers", 2),
            # (assign, ":source_troop", "trp_cstm_custom_troop_2_tiers_0_1_5"), ### B6
        # (else_try),  
          # (eq, "$cstm_num_tiers", 3),
          (eq, "$g_player_culture", "fac_culture_player"),####### NEW v3.1-KOMKE custom troops only if culture = culture_player
            (assign, ":source_troop", "trp_cstm_custom_troop_3_tiers_0_2_4"), ### C5
        (try_end),
    (try_end),
    
    # (str_store_troop_name, s20, ":source_troop"),
    # (display_message, "@equip_troop_royal_start selected {s20}!"),
    
    # (set_show_messages, 0),
    
   (call_script, "script_give_source_troop_inventory_to_troop", ":troop_no", ":source_troop", 3),
   ]),
######################################################################





##########################
("get_random_equipment_type_from_troop_by_culture",
   [
    (store_script_param, ":troop_no", 1),
    (store_script_param, ":culture_no", 2),

    (try_begin),  ##### if troop = player don't clear inventory
      (neq, ":troop_no", "trp_player"),
        (troop_clear_inventory, ":troop_no"),
        (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_set_inventory_slot, ":troop_no", ":i_slot", -1),
        (try_end),
    (try_end),  

    (try_begin),
      (eq, ":culture_no", "fac_culture_teutonic"),
        (assign, ":source_troop", "trp_item_pool_faction_1"),
    (else_try),
      (eq, ":culture_no", "fac_culture_baltic"),
        (assign, ":source_troop", "trp_item_pool_faction_baltic"),
    (else_try),
      (eq, ":culture_no", "fac_culture_mongol"),
        (assign, ":source_troop", "trp_item_pool_faction_mongol"),
    (else_try),
      (eq, ":culture_no", "fac_culture_nordic"),
      (call_script, "script_rand", 0, 100),
      (try_begin),
        (lt, reg0, 34),
          (assign, ":source_troop", "trp_item_pool_faction_4"),
      (else_try),
        (ge, reg0, 34),
        (lt, reg0, 67),
          (assign, ":source_troop", "trp_item_pool_faction_11"),
      (else_try),
        (ge, reg0, 67),
          (assign, ":source_troop", "trp_item_pool_faction_14"),
      (try_end),
    (else_try),
      (eq, ":culture_no", "fac_culture_rus"),
        (assign, ":source_troop", "trp_item_pool_faction_rus"),
    (else_try),
      (eq, ":culture_no", "fac_culture_scotish"),
        (assign, ":source_troop", "trp_item_pool_faction_12"),
    (else_try),
      (eq, ":culture_no", "fac_culture_gaelic"),
        (assign, ":source_troop", "trp_item_pool_faction_13"),
    (else_try),
      (eq, ":culture_no", "fac_culture_iberian"),
        (assign, ":source_troop", "trp_item_pool_faction_19"),
    (else_try),
      (this_or_next|eq, ":culture_no", "fac_culture_marinid"),
      (eq, ":culture_no", "fac_culture_andalus"),
        (assign, ":source_troop", "trp_item_pool_faction_andalus"),
    (else_try),
      (eq, ":culture_no", "fac_culture_byzantium"),
        (assign, ":source_troop", "trp_item_pool_faction_22"),
    (else_try),
      (eq, ":culture_no", "fac_culture_mamluke"),
        (assign, ":source_troop", "trp_item_pool_faction_mamluke"),
    (else_try),
      (eq, ":culture_no", "fac_culture_anatolian"),
        (assign, ":source_troop", "trp_item_pool_faction_27"),
    (else_try),
      (eq, ":culture_no", "fac_culture_balkan"),
        (assign, ":source_troop", "trp_item_pool_faction_balkan"),
    (else_try),
      (eq, ":culture_no", "fac_culture_italian"),
        (assign, ":source_troop", "trp_item_pool_faction_italian"),
    (else_try),
      (eq, ":culture_no", "fac_culture_welsh"),
        (assign, ":source_troop", "trp_item_pool_faction_37"),
    (else_try),
      (eq, ":culture_no", "fac_culture_western"),
        (assign, ":source_troop", "trp_item_pool_faction_42"),
    (else_try), ############# yes i can use those here
      (eq, ":culture_no", "fac_culture_finnish"),
        (assign, ":source_troop", "trp_finn_noble_4"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_mazovian"),
        (assign, ":source_troop", "trp_mazovian_horse_4"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_anatolian_christian"),
        (assign, ":source_troop", "trp_anatolian_heavy_cavalry"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_templar"),
        (assign, ":source_troop", "trp_templar_knight_veteran"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_hospitaller"),
        (assign, ":source_troop", "trp_hospitaller_knight_veteran"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_antioch"),
        (assign, ":source_troop", "trp_euro_horse_4_antioch"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_tripoli"),
        (assign, ":source_troop", "trp_euro_horse_4_tripoli"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_ibelin"),
        (assign, ":source_troop", "trp_euro_horse_4_ibelin"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_jerusalem"),
        (assign, ":source_troop", "trp_euro_horse_4_jerusalem"),
######### NEW v3.3        
    (else_try), 
      (eq, ":culture_no", "fac_culture_cuman"),
        (assign, ":source_troop", "trp_cuman_heavy_lancer"),
###########################
######### NEW v3.10        
    (else_try), 
      (eq, ":culture_no", "fac_culture_english"),
        (assign, ":source_troop", "trp_english_knight"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_french"),
        (assign, ":source_troop", "trp_french_knight"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_hungarian"),
        (assign, ":source_troop", "trp_hungarian_knight"),
    (else_try), 
      (eq, ":culture_no", "fac_culture_polish"),
        (assign, ":source_troop", "trp_polish_guard"),
###########################
    (else_try), 
      (eq, ":culture_no", "fac_culture_player"),
        (assign, ":source_troop", "trp_cstm_custom_troop_3_tiers_0_2_4"), #### NEW v3.2 - fixes player culture lords not having any equipment
    (try_end),
    
   (call_script, "script_give_source_troop_inventory_to_troop", ":troop_no", ":source_troop", 3),
   ]),
######################################################################






########################## NEW v2.1 - assigns lord face types at game start
("assign_lord_face_type",
   [
    (try_for_range, ":cur_lord", active_npcs_begin, active_npcs_end),
      (store_faction_of_troop, ":troop_faction", ":cur_lord"),
      (try_begin),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_1"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_2"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_4"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_5"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_6"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_7"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_8"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_9"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_10"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_11"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_12"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_13"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_14"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_15"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_16"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_17"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_18"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_19"),
        (this_or_next|eq, ":troop_faction", "fac_papacy"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_22"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_23"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_24"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_26"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_29"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_30"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_32"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_33"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_34"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_35"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_36"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_37"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_38"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_39"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_40"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_41"),
        (eq, ":troop_faction", "fac_kingdom_42"),
        (neq, ":cur_lord", "trp_knight_7_15"),
        (neq, ":cur_lord", "trp_knight_23_9"),
          (troop_set_slot, ":cur_lord", slot_troop_face_type, 1), ### european
      (else_try),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_20"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_25"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_27"),
        (this_or_next|eq, ":troop_faction", "fac_kingdom_28"),
        (this_or_next|eq, ":cur_lord", "trp_knight_23_9"),
        (eq, ":troop_faction", "fac_kingdom_31"),
        (neq, ":cur_lord", "trp_kingdom_27_lord"),
        (neq, ":cur_lord", "trp_knight_27_4"),
        (neq, ":cur_lord", "trp_knight_27_5"),
        (neq, ":cur_lord", "trp_knight_27_6"),
        (neq, ":cur_lord", "trp_knight_27_7"),
        (neq, ":cur_lord", "trp_knight_27_8"),
        (neq, ":cur_lord", "trp_knight_27_9"),
        (neq, ":cur_lord", "trp_knight_27_10"),
        (neq, ":cur_lord", "trp_knight_27_11"),
        (neq, ":cur_lord", "trp_knight_27_12"),
        (neq, ":cur_lord", "trp_knight_27_13"),
        (neq, ":cur_lord", "trp_knight_27_14"),
        (neq, ":cur_lord", "trp_knight_27_15"),
        (neq, ":cur_lord", "trp_knight_7_15"),
          (troop_set_slot, ":cur_lord", slot_troop_face_type, 2), ### muslim
      (else_try),
        (this_or_next|eq, ":cur_lord", "trp_kingdom_27_lord"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_4"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_5"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_6"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_7"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_8"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_9"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_10"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_11"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_12"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_13"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_14"),
        (this_or_next|eq, ":cur_lord", "trp_knight_27_15"),
        (this_or_next|eq, ":cur_lord", "trp_knight_7_15"),
        (eq, ":troop_faction", "fac_kingdom_3"),
          (troop_set_slot, ":cur_lord", slot_troop_face_type, 3), ### asian/mongol
      (try_end),
      
      # (try_begin), ####### new random lords
        # (is_between, ":cur_lord", "trp_enhanced_rnd_lord_1", "trp_enhanced_rnd_lord_201"),
          # (troop_set_slot, ":cur_lord", slot_troop_face_type, 1), ### european
      # (else_try),
        # (is_between, ":cur_lord", "trp_enhanced_rnd_lord_201", "trp_enhanced_rnd_lord_271"),
          # (troop_set_slot, ":cur_lord", slot_troop_face_type, 2), ### muslim
      # (else_try),
        # (is_between, ":cur_lord", "trp_enhanced_rnd_lord_271", "trp_enhanced_rnd_lord_end"),
          # (troop_set_slot, ":cur_lord", slot_troop_face_type, 3), ### asian/mongol
      # (try_end),
      
    (try_end),
   ]),
######################################################################


############################ NEW v2.1 - gets a random culture for lord (e.g. england has a chance of getting scottish/gaelic/welsh lords)
("get_random_culture_for_lord_player_faction",
  [
   (store_script_param, ":faction_no", 1),
   
   (faction_get_slot, ":faction_culture", ":faction_no", slot_faction_culture),
   (faction_get_slot, ":faction_language", ":faction_no", slot_faction_language),  ###### NEW v2.7
      
   (try_begin),
     ##### Teutonic Order
     (eq, ":faction_culture", "fac_culture_teutonic"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 75),
           (assign, ":culture", "fac_culture_teutonic"),
       (else_try),
         (ge, ":random_chance", 75),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_baltic"),
       (try_end),
       
   (else_try),
     ##### Balts
     (eq, ":faction_culture", "fac_culture_baltic"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_baltic"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_rus"),
       (try_end),
       
   (else_try), 
     ##### Golden Horde
     (eq, ":faction_culture", "fac_culture_mongol"),
     (eq, "$kaos_kings_kingdom", 3),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_mongol"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_rus"),
	   ############## NEW v3.9 - 
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_cuman"),
       ############################
       (try_end),
              
   (else_try), 
     ##### Denmark
     (eq, ":faction_culture", "fac_culture_nordic"),
     # (eq, "$kaos_kings_kingdom", 4),
     (eq, ":faction_language", faction_language_danish),  #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Poland
     (eq, ":faction_culture", "fac_culture_polish"),  ###### NEW v3.10 - 
     # (eq, "$kaos_kings_kingdom", 5),
     # (eq, ":faction_language", faction_language_polish),  #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_mazovian"),
       (try_end),
              
   (else_try), 
     ##### Holy Roman Empire
     (eq, ":faction_culture", "fac_culture_western"),
     # (eq, "$kaos_kings_kingdom", 6),
     (eq, ":faction_language", faction_language_german),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 93),
           (assign, ":culture", "fac_culture_teutonic"),
       (else_try),
         (ge, ":random_chance", 93),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
              
   (else_try), 
     ##### Hungary
     (eq, ":faction_culture", "fac_culture_hungarian"),  ###### NEW v3.10 - 
     # (eq, "$kaos_kings_kingdom", 7),
     # (eq, ":faction_language", faction_language_hungarian),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 75),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 75),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_balkan"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_cuman"),  ######### NEW v3.3
       (try_end),
              
   (else_try), 
     ##### Rus
     (eq, ":faction_culture", "fac_culture_rus"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_rus"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_baltic"),
       (try_end),
              
   (else_try), 
     ##### England
     (eq, ":faction_culture", "fac_culture_english"),  ###### NEW v3.10 - 
     # (eq, "$kaos_kings_kingdom", 9),
     # (eq, ":faction_language", faction_language_english),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 77),
           (assign, ":culture", "fac_culture_welsh"),
       (else_try),
         (ge, ":random_chance", 77),
         (lt, ":random_chance", 84),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 84),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 90),
         (lt, ":random_chance", 95),
           (assign, ":culture", "fac_culture_templar"),
       (else_try),
         (ge, ":random_chance", 95),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
              
   (else_try), 
     ##### France
     (eq, ":faction_culture", "fac_culture_french"), ###### NEW v3.10 - 
     # (eq, "$kaos_kings_kingdom", 10),
     # (eq, ":faction_language", faction_language_french),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 85),
         (lt, ":random_chance", 95),
           (assign, ":culture", "fac_culture_templar"),
       (else_try),
         (ge, ":random_chance", 95),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
              
   (else_try), 
     ##### Norway
     (eq, ":faction_culture", "fac_culture_nordic"),
     # (eq, "$kaos_kings_kingdom", 11),
     (eq, ":faction_language", faction_language_norwegian),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 85),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_finnish"),
       (try_end),
              
   (else_try), 
     ##### Scotland
     (eq, ":faction_culture", "fac_culture_scotish"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Gaelic
     (eq, ":faction_culture", "fac_culture_gaelic"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Sweden
     (eq, ":faction_culture", "fac_culture_nordic"),
     # (eq, "$kaos_kings_kingdom", 14),
     (eq, ":faction_language", faction_language_swedish),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_nordic"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_finnish"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
              
   (else_try), 
     ##### Iberian
     (eq, ":faction_culture", "fac_culture_iberian"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_iberian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (try_end),

############## NEW v3.3 - Navarra has western culture
   (else_try), 
     ##### Iberian
     (eq, ":faction_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_spanish),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 60),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 60),
           (assign, ":culture", "fac_culture_iberian"),
       (try_end),
############################

   (else_try), 
     ##### Italian (except ghibellines, latin empire)
     (eq, ":faction_culture", "fac_culture_italian"),
     (eq, ":faction_language", faction_language_italian),   #### NEW v2.7
     # (this_or_next|eq, "$kaos_kings_kingdom", 21),
     # (this_or_next|eq, "$kaos_kings_kingdom", 24),
     # (this_or_next|eq, "$kaos_kings_kingdom", 32),
     # (this_or_next|eq, "$kaos_kings_kingdom", 38),
     # (this_or_next|eq, "$kaos_kings_kingdom", 39),
     # (eq, "$kaos_kings_kingdom", 40),
     ########## NEW v3.2
     (neq, "$kaos_kings_kingdom", 26),  
     (neq, "$kaos_kings_kingdom", 41),  
     (neq, ":faction_no", "fac_kingdom_26"),  
     (neq, ":faction_no", "fac_kingdom_41"),  
     ########## 
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
       
   (else_try), 
     ##### Byzantines 
     (eq, ":faction_culture", "fac_culture_byzantium"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_byzantium"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (else_try),
         (ge, ":random_chance", 85),
           (assign, ":culture", "fac_culture_balkan"),
       (try_end),
       
   (else_try), 
     ##### Crusaders 
     # (eq, "$kaos_kings_kingdom", 23),
     (eq, ":faction_culture", "fac_culture_crusader"),  ######### NEW v3.3
     # (eq, ":faction_language", faction_language_mixed_euro),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 30),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 30),
         (lt, ":random_chance", 35),
           (assign, ":culture", "fac_culture_iberian"),
       (else_try),
         (ge, ":random_chance", 35),
         (lt, ":random_chance", 40),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 40),
         (lt, ":random_chance", 50),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (else_try),
         (ge, ":random_chance", 50),
         (lt, ":random_chance", 60),
           (assign, ":culture", "fac_culture_teutonic"),
       (else_try),
         (ge, ":random_chance", 60),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_templar"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_hospitaller"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 85),
           (assign, ":culture", "fac_culture_antioch"),
       (else_try),
         (ge, ":random_chance", 85),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_tripoli"),
       (else_try),
         (ge, ":random_chance", 90),
         (lt, ":random_chance", 95),
           (assign, ":culture", "fac_culture_ibelin"),
       (else_try),
         (ge, ":random_chance", 95),
           (assign, ":culture", "fac_culture_jerusalem"),
       (try_end),
       
   (else_try), 
     ##### Latin Empire 
     (this_or_next|eq, "$kaos_kings_kingdom", 26),  ########## NEW v3.2
     (eq, ":faction_no", "fac_kingdom_26"),  
     (eq, ":faction_language", faction_language_italian),   #### NEW v2.7
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 60),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 60),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_western"),
       (else_try),
         (ge, ":random_chance", 80),
         (lt, ":random_chance", 87),
           (assign, ":culture", "fac_culture_serbian"),
       (else_try),
         (ge, ":random_chance", 87),
         (lt, ":random_chance", 94),
           (assign, ":culture", "fac_culture_balkan"),
       (else_try),
         (ge, ":random_chance", 94),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (try_end),
       
   (else_try), 
     ##### Il Khanate
     (this_or_next|eq, ":faction_culture", "fac_culture_anatolian"),
     (eq, ":faction_culture", "fac_culture_mongol"),
     (eq, "$kaos_kings_kingdom", 27),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 55),
           (assign, ":culture", "fac_culture_anatolian"),
       (else_try),
         (ge, ":random_chance", 55),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_mongol"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (try_end),
       
   (else_try), 
     ##### Mamluk 
     (eq, ":faction_culture", "fac_culture_mamluke"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 90),
           (assign, ":culture", "fac_culture_mamluke"),
       (else_try),
         (ge, ":random_chance", 90),
           (assign, ":culture", "fac_culture_anatolian"),
       (try_end),
       
   (else_try), 
     ##### Serbia 
     (eq, ":faction_culture", "fac_culture_serbian"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_serbian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_balkan"),
       (try_end),
       
   (else_try), 
     ##### Bulgaria 
     (eq, ":faction_culture", "fac_culture_balkan"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_balkan"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_serbian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_byzantium"),
       (try_end),
       
   (else_try), 
     ##### Marinid 
     (eq, ":faction_culture", "fac_culture_marinid"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_marinid"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_andalus"),
       (try_end),
       
################# NEW v3.3 - forgot about andalus
   (else_try), 
     (eq, ":faction_culture", "fac_culture_andalus"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_andalus"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_marinid"),
       (try_end),
##################################

   (else_try), 
     ##### Welsh 
     (eq, ":faction_culture", "fac_culture_welsh"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_welsh"),
       (else_try),
         (ge, ":random_chance", 70),
         (lt, ":random_chance", 77),
           (assign, ":culture", "fac_culture_gaelic"),
       (else_try),
         (ge, ":random_chance", 77),
         (lt, ":random_chance", 84),
           (assign, ":culture", "fac_culture_scotish"),
       (else_try),
         (ge, ":random_chance", 84),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
       
   (else_try), 
     ##### Ghibbelines 
     (eq, ":faction_culture", "fac_culture_welsh"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 70),
           (assign, ":culture", "fac_culture_italian"),
       (else_try),
         (ge, ":random_chance", 70),
           (assign, ":culture", "fac_culture_western"),
       (try_end),
########################## NEW v3.8 - anatolian christian
   (else_try), 
     (eq, ":faction_culture", "fac_culture_anatolian_christian"),
       (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         (lt, ":random_chance", 80),
           (assign, ":culture", "fac_culture_anatolian_christian"),
       (else_try),
         (ge, ":random_chance", 80),
           (assign, ":culture", "fac_culture_byzantium"),
       (try_end),
####################################################
   (else_try), 
     ##### Bohemia 
     (eq, ":faction_culture", "fac_culture_western"),
     # (eq, "$kaos_kings_kingdom", 42),
     (eq, ":faction_language", faction_language_czech),   #### NEW v2.7
       # (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         # (le, ":random_chance", 100),
         (assign, ":culture", "fac_culture_western"),
       (try_end),
       
   (else_try), 
     (eq, ":faction_culture", "fac_culture_western"),
     # (eq, "$kaos_kings_kingdom", 42),
     (eq, ":faction_language", faction_language_mixed_euro),   #### NEW v3.8
       # (store_random_in_range, ":random_chance", 0, 100),
       (try_begin),
         # (le, ":random_chance", 100),
         (assign, ":culture", "fac_culture_western"),
       (try_end),
	   
############ NEW v3.8 - Missing crusader cultures 
   (else_try), 
     (eq, ":faction_culture", "fac_culture_templar"),
       (try_begin),
         (assign, ":culture", "fac_culture_templar"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_hospitaller"),
       (try_begin),
           (assign, ":culture", "fac_culture_hospitaller"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_antioch"),
       (try_begin),
           (assign, ":culture", "fac_culture_antioch"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_tripoli"),
       (try_begin),
           (assign, ":culture", "fac_culture_tripoli"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_ibelin"),
       (try_begin),
           (assign, ":culture", "fac_culture_ibelin"),
       (try_end),
   (else_try), 
     (eq, ":faction_culture", "fac_culture_jerusalem"),
       (try_begin),
         (assign, ":culture", "fac_culture_jerusalem"),
       (try_end),
############## NEW v3.9 - missing anatolian muslim
   (else_try), 
     (eq, ":faction_culture", "fac_culture_anatolian"),
       (try_begin),
         (assign, ":culture", "fac_culture_anatolian"),
       (try_end),
############################
############## NEW v3.9 - missing cuman
   (else_try), 
     (eq, ":faction_culture", "fac_culture_cuman"),
       (try_begin),
         (assign, ":culture", "fac_culture_cuman"),
       (try_end),
############################
####################################
   (else_try), 
     ##### Player Culture 
     (eq, ":faction_culture", "fac_culture_player"),
       (assign, ":culture", "fac_culture_player"),
   (try_end),
   
   (assign, reg0, ":culture"),  #### sends the assigned culture
  ]),
###################################################################








############################ NEW v2.1
("get_random_name_for_lord_player_faction",
  [
   (store_script_param, ":faction_no", 1),
   (store_script_param, ":cur_lord", 2),
   (store_script_param, ":cur_lord_culture", 3),
   
   (str_clear, s1),  
   (str_clear, s2),  
   (str_clear, s3), 
   (str_clear, s4), 
   (str_clear, s5), 
   (assign, ":random_name", 0),  
   (assign, ":random_surname", 0),  
   
###########   
   (try_begin),
     (eq, ":cur_lord_culture", "fac_culture_finnish"),
       (store_random_in_range, ":random_name", "str_enhanced_name_finnish_1", "str_enhanced_name_serbian_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_finnish_1", "str_enhanced_name_serbian_1"), 
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_serbian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_serbian_1", "str_enhanced_surname_serbian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_serbian_1", "str_enhanced_name_welsh_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_welsh"),
       (store_random_in_range, ":random_name", "str_enhanced_name_welsh_1", "str_enhanced_surname_welsh_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_welsh_1", "str_enhanced_name_german_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_teutonic"),
       (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_german),
     # (eq, ":faction_language", faction_language_german),   #### NEW v2.7
       (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_balkan"),
       (store_random_in_range, ":random_name", "str_enhanced_name_balkan_1", "str_enhanced_name_rus_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_balkan_1", "str_enhanced_name_rus_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_rus"),
       (store_random_in_range, ":random_name", "str_enhanced_name_rus_1", "str_enhanced_surname_rus_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_rus_1", "str_enhanced_name_danish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_danish),
       (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_norwegian),
       (store_random_in_range, ":random_name", "str_enhanced_name_norwegian_1", "str_enhanced_surname_norwegian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_norwegian_1", "str_enhanced_name_swedish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_nordic"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_swedish),
       (store_random_in_range, ":random_name", "str_enhanced_name_swedish_1", "str_enhanced_surname_swedish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_swedish_1", "str_enhanced_name_baltic_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_baltic"),
       (store_random_in_range, ":random_name", "str_enhanced_name_baltic_1", "str_enhanced_name_arab_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_baltic_1", "str_enhanced_name_french_1"), ### baltic nobles don't seem to have surnames
       (str_store_string, s3, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_marinid"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_mamluke"),
     (eq, ":cur_lord_culture", "fac_culture_andalus"),
       (store_random_in_range, ":random_name", "str_enhanced_name_arab_1", "str_enhanced_surname_arab_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_arab_1", "str_enhanced_name_greek_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_byzantium"),
       (store_random_in_range, ":random_name", "str_enhanced_name_greek_1", "str_enhanced_surname_greek_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_greek_1", "str_enhanced_name_spanish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_iberian"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_spanish),
       (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_iberian"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_portuguese),
       (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
########### NEW v2.7
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_iberian"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_mixed_euro),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 70% spanish, 30% portuguese
       (lt, reg0, 70),
         (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
     (else_try),
       (ge, reg0, 70),
         (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
     (try_end),
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_italian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_italian_1", "str_enhanced_surname_italian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_italian_1", "str_enhanced_name_gaelic_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_gaelic"),
       (store_random_in_range, ":random_name", "str_enhanced_name_gaelic_1", "str_enhanced_surname_gaelic_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_gaelic_1", "str_enhanced_name_armenian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_anatolian_christian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_armenian_1", "str_enhanced_surname_armenian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_armenian_1", "str_enhanced_name_turkish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_anatolian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_turkish_1", "str_enhanced_surname_turkish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_turkish_1", "str_enhanced_name_scottish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_scotish"),
       (store_random_in_range, ":random_name", "str_enhanced_name_scottish_1", "str_enhanced_surname_scottish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_scottish_1", "str_enhanced_name_polish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_mazovian"),
       (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_polish"), ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_polish),
       (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_hungarian"), ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_hungarian),
       (store_random_in_range, ":random_name", "str_enhanced_name_hungarian_1", "str_enhanced_surname_hungarian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_hungarian_1", "str_enhanced_name_english_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_english"), ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_english),
       (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_french"), ###### NEW v3.10 - 
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_french),
       (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
###########  BOHEMIA
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_western"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_czech),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 65% czech, 25% german, 10% polish
       (lt, reg0, 65),
         (store_random_in_range, ":random_name", "str_enhanced_name_bohemian_1", "str_enhanced_surname_bohemian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_bohemian_1", "str_enhanced_name_cuman_1"),
     (else_try),
       (ge, reg0, 65),
       (lt, reg0, 90),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 90),
         (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########, 
   ######## NEW v3.3   
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_cuman"),
     # (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_cuman),
       (store_random_in_range, ":random_name", "str_enhanced_name_cuman_1", "str_enhanced_name_custom_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_cuman_1", "str_enhanced_name_custom_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
   ########################
   (else_try),
     # (eq, "$kaos_kings_kingdom", 23),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_western"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_antioch"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_tripoli"),
     (this_or_next|eq, ":cur_lord_culture", "fac_culture_ibelin"),
     (eq, ":cur_lord_culture", "fac_culture_jerusalem"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 45% french, 35% german, 20% english
       (lt, reg0, 45),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 45),
       (lt, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_mongol"),
       (store_random_in_range, ":random_name", "str_enhanced_name_mongolian_1", "str_enhanced_name_bohemian_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_mongolian_1", "str_enhanced_names_end"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_templar"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 60% french, 25% german, 15% english
       (lt, reg0, 60),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 60),
       (lt, reg0, 85),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 85),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_hospitaller"),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 20% french, 60% german, 20% english
       (lt, reg0, 20),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     (else_try),
       (ge, reg0, 20),
       (lt, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
     (else_try),
       (ge, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
###########  Player Culture
   (else_try),
     (try_begin),      
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_finnish),    
         (store_random_in_range, ":random_name", "str_enhanced_name_finnish_1", "str_enhanced_name_serbian_1"),
         # (store_random_in_range, ":random_surname", "str_enhanced_surname_finnish_1", "str_enhanced_name_serbian_1"), 
         (str_store_string, s1, ":random_name"),  
         # (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_polish), 
         (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"), 
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_serbian), 
         (store_random_in_range, ":random_name", "str_enhanced_name_serbian_1", "str_enhanced_surname_serbian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_serbian_1", "str_enhanced_name_welsh_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_welsh), 
         (store_random_in_range, ":random_name", "str_enhanced_name_welsh_1", "str_enhanced_surname_welsh_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_welsh_1", "str_enhanced_name_german_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_german), 
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_bulgarian), 
         (store_random_in_range, ":random_name", "str_enhanced_name_balkan_1", "str_enhanced_name_rus_1"),
         # (store_random_in_range, ":random_surname", "str_enhanced_surname_balkan_1", "str_enhanced_name_rus_1"),
         (str_store_string, s1, ":random_name"),  
         # (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_rus), 
         (store_random_in_range, ":random_name", "str_enhanced_name_rus_1", "str_enhanced_surname_rus_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_rus_1", "str_enhanced_name_danish_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_danish),
         (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_norwegian),
         (store_random_in_range, ":random_name", "str_enhanced_name_norwegian_1", "str_enhanced_surname_norwegian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_norwegian_1", "str_enhanced_name_swedish_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_swedish),
         (store_random_in_range, ":random_name", "str_enhanced_name_swedish_1", "str_enhanced_surname_swedish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_swedish_1", "str_enhanced_name_baltic_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_baltic), 
         (store_random_in_range, ":random_name", "str_enhanced_name_baltic_1", "str_enhanced_name_arab_1"),
         # (store_random_in_range, ":random_surname", "str_enhanced_surname_baltic_1", "str_enhanced_name_french_1"), ### baltic nobles don't seem to have surnames
         (str_store_string, s1, ":random_name"),  
         # (str_store_string, s2, ":random_surname"),   
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_arab), 
         (store_random_in_range, ":random_name", "str_enhanced_name_arab_1", "str_enhanced_surname_arab_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_arab_1", "str_enhanced_name_greek_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_greek), 
         (store_random_in_range, ":random_name", "str_enhanced_name_greek_1", "str_enhanced_surname_greek_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_greek_1", "str_enhanced_name_spanish_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_spanish), 
         (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_portuguese), 
         (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_italian), 
         (store_random_in_range, ":random_name", "str_enhanced_name_italian_1", "str_enhanced_surname_italian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_italian_1", "str_enhanced_name_gaelic_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_gaelic), 
         (store_random_in_range, ":random_name", "str_enhanced_name_gaelic_1", "str_enhanced_surname_gaelic_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_gaelic_1", "str_enhanced_name_armenian_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_armenian), 
         (store_random_in_range, ":random_name", "str_enhanced_name_armenian_1", "str_enhanced_surname_armenian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_armenian_1", "str_enhanced_name_turkish_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_turkish), 
         (store_random_in_range, ":random_name", "str_enhanced_name_turkish_1", "str_enhanced_surname_turkish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_turkish_1", "str_enhanced_name_scottish_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_scottish),
         (store_random_in_range, ":random_name", "str_enhanced_name_scottish_1", "str_enhanced_surname_scottish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_scottish_1", "str_enhanced_name_polish_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"),  
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_hungarian),
         (store_random_in_range, ":random_name", "str_enhanced_name_hungarian_1", "str_enhanced_surname_hungarian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_hungarian_1", "str_enhanced_name_english_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"), 
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_english),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"), 
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_french),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"), 
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_mongol),
         (store_random_in_range, ":random_name", "str_enhanced_name_mongolian_1", "str_enhanced_name_bohemian_1"),
         # (store_random_in_range, ":random_surname", "str_enhanced_surname_mongolian_1", "str_enhanced_names_end"),
         (str_store_string, s1, ":random_name"),  
         # (str_store_string, s2, ":random_surname"), 
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_czech),
         (store_random_in_range, ":random_name", "str_enhanced_name_bohemian_1", "str_enhanced_surname_bohemian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_bohemian_1", "str_enhanced_name_cuman_1"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"), 
   ######## NEW v3.3   
   (else_try),
     (eq, ":cur_lord_culture", "fac_culture_player"),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_cuman),
       (store_random_in_range, ":random_name", "str_enhanced_name_cuman_1", "str_enhanced_name_custom_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_cuman_1", "str_enhanced_name_custom_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
   ########################
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_custom),
         (store_random_in_range, ":random_name", "str_enhanced_name_custom_1", "str_enhanced_surname_custom_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_custom_1", "str_enhanced_names_end"),
         (str_store_string, s1, ":random_name"),  
         (str_store_string, s2, ":random_surname"), 
     (else_try),
       (eq, ":cur_lord_culture", "fac_culture_player"),
       (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_mixed_euro),
       (call_script, "script_rand", 0, 100),  
       (try_begin), ### 20% english, 20% french, 20% german, 5% polish, 5% hungarian, 5% czech, 5% danish, 5% norwegian, 5% swedish, 10% iberian, 
         (lt, reg0, 20),
           (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
        
       (else_try),
         (ge, reg0, 20),
         (lt, reg0, 40),
           (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
       
       (else_try),
         (ge, reg0, 40),
         (lt, reg0, 60),
           (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
  
       (else_try),
         (ge, reg0, 60),
         (lt, reg0, 65),
           (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
       
       (else_try),
         (ge, reg0, 65),
         (lt, reg0, 70),
           (store_random_in_range, ":random_name", "str_enhanced_name_hungarian_1", "str_enhanced_surname_hungarian_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_hungarian_1", "str_enhanced_name_english_1"),
      
       (else_try),
         (ge, reg0, 70),
         (lt, reg0, 75),
           (store_random_in_range, ":random_name", "str_enhanced_name_bohemian_1", "str_enhanced_surname_bohemian_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_bohemian_1", "str_enhanced_name_cuman_1"),
       
       (else_try),
         (ge, reg0, 75),
         (lt, reg0, 80),
           (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
       
       (else_try),
         (ge, reg0, 80),
         (lt, reg0, 85),
           (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
              
       (else_try),
         (ge, reg0, 85),
         (lt, reg0, 90),
           (store_random_in_range, ":random_name", "str_enhanced_name_swedish_1", "str_enhanced_surname_swedish_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_swedish_1", "str_enhanced_name_baltic_1"),
       
       (else_try),
         (call_script, "script_rand", 0, 100),  
         (try_begin), ### 70% spanish, 30% portuguese
           (lt, reg0, 30),
             (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
             (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
         (else_try),
           (ge, reg0, 30),
             (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
             (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
         (try_end),        
       (try_end),        
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
     (try_end),        
###########
   (try_end),
   
   (troop_set_slot, ":cur_lord", slot_troop_original_name, ":random_name"),
   (troop_set_slot, ":cur_lord", slot_troop_original_surname, ":random_surname"),
   (call_script, "script_get_troop_title", ":cur_lord", ":cur_lord_culture"), ## gets a random title
   (troop_set_name, ":cur_lord", s3),
   (troop_set_plural_name, ":cur_lord", s3), ## script that gives the lord titles uses the plural  
   # (str_store_troop_name, s8, ":cur_lord"), 
   # (display_message, "@Gave {s8} a title (player faction)."), 
  ]),
###################################################################


######################
("calculate_hero_weekly_income_and_party_wage",
[
  (store_script_param_1, ":troop_no"),
  
  (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
  (troop_get_slot, ":troop_wealth", ":troop_no", slot_troop_wealth),
  (assign, ":weekly_income", 1000),
  (store_character_level, ":troop_level", ":troop_no"),
  (store_mul, ":level_modifier", ":troop_level", 10),
  (val_add, ":weekly_income", ":level_modifier"),
  (store_faction_of_troop, ":troop_faction", ":troop_no"),
  (try_begin),
    (faction_slot_eq, ":troop_faction", slot_faction_leader, ":troop_no"),
    (val_add, ":weekly_income", 1000),
  (try_end),
  (try_begin),
    (faction_slot_eq, ":troop_faction", slot_faction_marshall, ":troop_no"),
    (val_add, ":weekly_income", 1000),
  (try_end),
  (assign, reg35, ":weekly_income"),
  (try_begin),
    (gt, ":troop_party", 0),
    (call_script, "script_calculate_weekly_party_wage", ":troop_party"),
    (assign, ":party_wage", reg0),
  (try_end),
  (assign, reg36, ":party_wage"),
]),
#######################################################



##################### NEW v2.1 - copy of script_cf_troop_get_random_enemy_troop_with_occupation with decreased relation requirement to -20
 # script_cf_troop_get_random_enemy_lord
 # Input: arg1 = troop_no,
 # Output: reg0 = enemy_troop_no (Can fail)
 ("cf_troop_get_random_enemy_lord",
   [
     (store_script_param_1, ":troop_no"),
     
     (assign, ":result", -1),
     (assign, ":count_enemies", 0),
     (try_for_range, ":enemy_troop_no", active_npcs_begin, active_npcs_end),
       (troop_slot_eq, ":enemy_troop_no", slot_troop_is_alive, 1),  ## he's alive/active
       (troop_slot_eq, ":enemy_troop_no", slot_troop_occupation, slto_kingdom_hero),
       (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":enemy_troop_no"),
       (lt, reg0, -20),
       (val_add, ":count_enemies", 1),
     (try_end),
     
     (gt, ":count_enemies", 0),
     (call_script, "script_rand", 0, ":count_enemies"),
     (assign, ":random_enemy", reg0),
     
     (assign, ":count_enemies", 0),
     (try_for_range, ":enemy_troop_no", active_npcs_begin, active_npcs_end),
       (troop_slot_eq, ":enemy_troop_no", slot_troop_is_alive, 1),  ## he's alive/active
       (troop_slot_eq, ":enemy_troop_no", slot_troop_occupation, slto_kingdom_hero),
       (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":enemy_troop_no"),
       (lt, reg0, -20),
       (val_add, ":count_enemies", 1),
       (eq, ":random_enemy", ":count_enemies"),
       (assign, ":result", ":enemy_troop_no"),
     (try_end),
     
     (neq, ":result", -1),
     (assign, reg0, ":result"),
 ]),
#######################################################



##################### NEW v2.1 - check if there's enough angry vassals to start a civil war
("check_faction_civil_war_requirements",
  [
    (store_script_param, ":faction_no", 1),
    
    (assign, reg0, 0),
    (assign, ":cur_angry_lords", 0),
    (assign, ":cur_angry_lords_percentage", 0),
    (assign, ":cur_slot", 150),
    (assign, ":fiefs_found", 0),  ##### NEW v1.1
    (assign, ":upper_bound", walled_centers_end),  ##### NEW v1.1
    (faction_get_slot, ":cur_king", ":faction_no", slot_faction_leader),  
    (faction_get_slot, ":lord_count", ":faction_no", slot_faction_lord_count),  
    # (display_message, "@######################"),
    (try_for_range, ":cur_lord", lords_begin, lords_end),  
      (troop_slot_eq, ":cur_lord", slot_troop_is_alive, 1),  ## he's alive/active
      (troop_slot_eq, ":cur_lord", slot_troop_occupation, slto_kingdom_hero),
      (neq, ":cur_king", ":cur_lord"), ### not the king
      (store_faction_of_troop, ":cur_lord_faction", ":cur_lord"),
      (eq, ":cur_lord_faction", ":faction_no"),
        (call_script, "script_troop_get_relation_with_troop", ":cur_king", ":cur_lord"),
        # (lt, reg0, -30),              
        (le, reg0, -20),              
          # (str_store_troop_name_link, s1, ":cur_lord"),
          # (display_message, "@Found a angry lord: {s1}"),
          ############### NEW v1.1 - there must be at least 1 walled fief for the rebels
          (try_for_range, ":cur_center", walled_centers_begin, ":upper_bound"),
            (party_get_slot, ":town_lord", ":cur_center", slot_town_lord),  
            (eq, ":town_lord", ":cur_lord"),  
              (val_add, ":fiefs_found", 1),
              (try_begin),
                (gt, ":fiefs_found", 0),
                  (assign, ":upper_bound", -1),  ##### 1 fief already found so break loop
              (try_end),
          (try_end),
          ###############
          (val_add, ":cur_angry_lords", 1),
          (troop_set_slot, "trp_ee_array_1", ":cur_slot", ":cur_lord"),
          # (assign, reg11, ":cur_slot"),
          # (display_message, "@Assigned {s1} to slot number {reg11}."),
          (val_add, ":cur_slot", 1),
    (try_end),
        
    (try_begin),
      (gt, ":cur_angry_lords", 0),
      (gt, ":fiefs_found", 0),  ######## NEW v1.1
        (val_mul, ":cur_angry_lords", 100),   
        (store_div, ":cur_angry_lords_percentage", ":cur_angry_lords", ":lord_count"),   #### e.g. 10 total lords with 4 angry lords = 4*100 = 400 / 10 = 40% which meets the requirements 
    (try_end),
    
    # (assign, reg10, ":cur_angry_lords_percentage"),
    # (display_message, "@Angry lords: {reg10}%"),
    # (display_message, "@######################"),
      
    (try_begin),
      (ge, ":cur_angry_lords_percentage", "$g_misc_civil_war_lords_required"),  #### needs x% angry lords
        (assign, reg0, 1),  #### run civil war
        (assign, reg1, ":cur_slot"),  
    (try_end),
]),
#######################################################



##################### NEW v2.1 - starts the civil war
("initiate_civil_war",
  [
   (store_script_param, ":faction_no", 1),
   (store_script_param, ":slot_upper_bound", 2),
    
   (assign, reg0, 0),
   (assign, ":slot_lower_bound", 150),
   (assign, ":faction_upper_bound", enhanced_factions_end),
   
################# this is the random faction setup
   (try_for_range, ":faction", enhanced_factions_begin, ":faction_upper_bound"),
     (neg|faction_slot_eq, ":faction", slot_faction_state, sfs_active),
     (neg|faction_slot_ge, ":faction", slot_faction_rebel_original_faction, 1),  ### ISN'T a rebel faction that hasn't defeated its original
     (assign, ":faction_selected", ":faction"),
     (faction_set_note_available, ":faction_selected", 0),
     #### sets the color (random)
     (call_script, "script_rand", 0, 16777215), #### color ranges
     (faction_set_color, ":faction_selected", reg0),
     #### 
     (faction_set_slot, ":faction_selected", slot_faction_ai_state, -1),
     (faction_set_slot, ":faction_selected", slot_faction_ai_object, -1),
     (faction_get_slot, ":banner_mesh", ":faction_no", slot_faction_banner),
     (faction_set_slot, ":faction_selected", slot_faction_banner, ":banner_mesh"),
     (faction_set_slot, ":faction_selected", slot_faction_recognized_player, 1),
     
     (faction_set_slot, ":faction_selected", slot_faction_last_attacked_center, -1),
     (faction_set_slot, ":faction_selected", slot_faction_last_attacked_hours, -1),
     (faction_set_slot, ":faction_selected", slot_faction_last_safe_hours, -1),
     (faction_set_slot, ":faction_selected", slot_faction_last_feast_concluded, -1),
     (faction_set_slot, ":faction_selected", slot_faction_last_feast_start_time, -1),
     
     (faction_set_slot, ":faction_selected", slot_faction_rebel_original_faction, ":faction_no"),
     (try_begin),
       (faction_set_slot, ":faction_selected", slot_faction_days_active, 0),
       (faction_set_slot, ":faction_selected", slot_faction_battles_won, 0),
       (faction_set_slot, ":faction_selected", slot_faction_battles_lost, 0),
       (faction_set_slot, ":faction_selected", slot_faction_enemies_killed, 0),
       (faction_set_slot, ":faction_selected", slot_faction_enemies_wounded, 0),
       (faction_set_slot, ":faction_selected", slot_faction_enemies_captured, 0),
       (faction_set_slot, ":faction_selected", slot_faction_troops_lost_killed, 0),
       (faction_set_slot, ":faction_selected", slot_faction_troops_lost_wounded, 0),
       (faction_set_slot, ":faction_selected", slot_faction_troops_lost_captured, 0),
       (faction_set_slot, ":faction_selected", slot_faction_troops_deployed, 0),
       (faction_set_slot, ":faction_selected", slot_faction_lords_lost_battle, 0),
       (faction_set_slot, ":faction_selected", slot_faction_lords_lost_assassination, 0),
       (faction_set_slot, ":faction_selected", slot_faction_lords_lost_execution, 0),
       (faction_set_slot, ":faction_selected", slot_faction_lords_lost_defection, 0),
     (try_end),
     (faction_set_slot, ":faction", slot_faction_state, sfs_active), ### it's now active
     (assign, ":faction_upper_bound", -1), ### breaks loop
   (try_end),
#################


################# They all need to switch to the new faction first
   (try_for_range, ":cur_slot", ":slot_lower_bound", ":slot_upper_bound"),
     (troop_get_slot, ":cur_lord", "trp_ee_array_1", ":cur_slot"),
     (gt, ":cur_lord", 0),
       # (call_script, "script_change_troop_faction_new", ":cur_lord", ":faction_selected"),
       (call_script, "script_change_troop_faction", ":cur_lord", ":faction_selected"),
       # (display_message, "@#################################"),
       # (str_store_troop_name_link, s1, ":cur_lord"),
       # (display_message, "@({s1}) switched to civil war faction."),
   (try_end),
   # (display_message, "@#################################"),
################# 

     
################# gives him relation boost with his new colleagues
   (try_for_range, ":cur_faction_lord", active_npcs_begin, active_npcs_end),
     (troop_slot_eq, ":cur_faction_lord", slot_troop_is_alive, 1),
     (troop_slot_eq, ":cur_faction_lord", slot_troop_occupation, slto_kingdom_hero),
     (neq, ":cur_faction_lord", ":cur_lord"), ### not himself
       (store_faction_of_troop, ":cur_lord_faction", ":cur_faction_lord"),
       (eq, ":cur_lord_faction", ":faction_selected"),
         (store_random_in_range, ":random_relation", 20, 30),
         (call_script, "script_troop_change_relation_with_troop", ":cur_lord", ":cur_faction_lord", ":random_relation"),
   (try_end),
#################


#################
   (try_for_range, ":cur_slot", ":slot_lower_bound", ":slot_upper_bound"),
     (troop_get_slot, ":cur_lord", "trp_ee_array_1", ":cur_slot"),
     (gt, ":cur_lord", 0),
     
     ######### suffers relation loss with members of ex faction
     (try_for_range, ":cur_ex_faction_lord", active_npcs_begin, active_npcs_end),
       (troop_slot_eq, ":cur_ex_faction_lord", slot_troop_is_alive, 1),
       (troop_slot_eq, ":cur_ex_faction_lord", slot_troop_occupation, slto_kingdom_hero),
         (store_faction_of_troop, ":cur_ex_faction_lord_faction", ":cur_ex_faction_lord"),
         (eq, ":cur_ex_faction_lord_faction", ":faction_no"),
           (store_random_in_range, ":random_relation", -30, -15),
           (call_script, "script_troop_change_relation_with_troop", ":cur_lord", ":cur_ex_faction_lord", ":random_relation"),
     (try_end),
     #########
     
     #### extra relation loss with king
     (faction_get_slot, ":cur_king", ":faction_no", slot_faction_leader),  
     (store_random_in_range, ":random_relation", -60, -40),
     (call_script, "script_troop_change_relation_with_troop", ":cur_lord", ":cur_king", ":random_relation"),
     # (display_message, "@He suffers relation hit with his former king."),
     #########
   (try_end),
##################################
   
   (try_begin),
     (call_script, "script_process_faction_leader_death", ":cur_king", ":faction_selected"),  ### select the king for the faction
     (store_random_in_range, ":cur_slot", ":slot_lower_bound", ":slot_upper_bound"), #### selects a random lord
     (troop_get_slot, ":new_marshall", "trp_ee_array_1", ":cur_slot"),  #### get him from the slot
     (faction_set_slot, ":faction_selected", slot_faction_marshall, ":new_marshall"), #### make him the new marshall
     ####
     (faction_get_slot, ":king", ":faction_selected", slot_faction_leader),  
     (troop_get_slot, ":culture", ":king", slot_troop_cur_culture), 
     (faction_set_slot, ":faction_selected", slot_faction_culture, ":culture"), ## assigns culture
     (faction_get_slot, ":culture_religion", ":culture", slot_faction_religion),
     (faction_set_slot, ":faction_selected", slot_faction_religion, ":culture_religion"), ## assigns religion
     #### set the reinforcement stuff
     (faction_get_slot, ":reinforcements_a", ":culture", slot_faction_reinforcements_a),
     (faction_get_slot, ":reinforcements_b", ":culture", slot_faction_reinforcements_b),
     (faction_get_slot, ":reinforcements_c", ":culture", slot_faction_reinforcements_c),     
     (faction_set_slot, ":faction_selected", slot_faction_reinforcements_a, ":reinforcements_a"),
     (faction_set_slot, ":faction_selected", slot_faction_reinforcements_b, ":reinforcements_b"),
     (faction_set_slot, ":faction_selected", slot_faction_reinforcements_c, ":reinforcements_c"),
     (faction_get_slot, ":tier_1_troop", ":culture", slot_faction_tier_1_troop), 
     (faction_get_slot, ":tier_2_troop", ":culture", slot_faction_tier_2_troop), 
     (faction_get_slot, ":tier_3_troop", ":culture", slot_faction_tier_3_troop),
     (faction_get_slot, ":tier_4_troop", ":culture", slot_faction_tier_4_troop),
     (faction_get_slot, ":tier_5_troop", ":culture", slot_faction_tier_5_troop),
     (faction_set_slot, ":faction_selected", slot_faction_tier_1_troop, ":tier_1_troop"), 
     (faction_set_slot, ":faction_selected", slot_faction_tier_2_troop, ":tier_2_troop"), 
     (faction_set_slot, ":faction_selected", slot_faction_tier_3_troop, ":tier_3_troop"),
     (faction_set_slot, ":faction_selected", slot_faction_tier_4_troop, ":tier_4_troop"),
     (faction_set_slot, ":faction_selected", slot_faction_tier_5_troop, ":tier_5_troop"),
     
     (faction_get_slot, ":town_troop", ":culture", slot_faction_tier_1_town_troop), 
     (faction_get_slot, ":castle_troop", ":culture", slot_faction_tier_1_castle_troop), 
     (faction_set_slot, ":faction_selected", slot_faction_tier_1_town_troop, ":town_troop"), 
     (faction_set_slot, ":faction_selected", slot_faction_tier_1_castle_troop, ":castle_troop"), 
     
     (faction_get_slot, ":deserter_troop", ":culture", slot_faction_deserter_troop),  
     (faction_get_slot, ":guard_troop", ":culture", slot_faction_guard_troop),           
     (faction_get_slot, ":messenger_troop", ":culture", slot_faction_messenger_troop),     
     (faction_get_slot, ":prison_guard_troop", ":culture", slot_faction_prison_guard_troop),            
     (faction_get_slot, ":castle_guard_troop", ":culture", slot_faction_castle_guard_troop),     
     (faction_set_slot, ":faction_selected", slot_faction_deserter_troop, ":deserter_troop"), 
     (faction_set_slot, ":faction_selected", slot_faction_guard_troop, ":guard_troop"),           
     (faction_set_slot, ":faction_selected", slot_faction_messenger_troop, ":messenger_troop"),     
     (faction_set_slot, ":faction_selected", slot_faction_prison_guard_troop, ":prison_guard_troop"),            
     (faction_set_slot, ":faction_selected", slot_faction_castle_guard_troop, ":castle_guard_troop"),     
     ####
     
     #### gets and sets the language based on the king's culture
     (try_begin), #### if western pull language from original faction
       (eq, ":culture", "fac_culture_western"), 
         (faction_get_slot, ":language", ":faction_no", slot_faction_language), 
         (faction_set_slot, ":faction_selected", slot_faction_language, ":language"),
     (else_try), 
       (faction_get_slot, ":language", ":culture", slot_faction_language), 
       (faction_set_slot, ":faction_selected", slot_faction_language, ":language"),
     (try_end),
     
     (faction_get_slot, ":culture", ":faction_no", slot_faction_culture),
     (faction_get_slot, ":language", ":faction_no", slot_faction_language),
     (call_script, "script_troop_set_title_according_to_culture_language_king", ":king", ":culture", ":language"), 
     #### sets the faction name 
     # (call_script, "script_generate_kingdom_name", ":faction_selected"), 
     (str_clear, s4),
     (str_clear, s5),
     (str_store_faction_name, s4, ":faction_no"),
     (str_store_string, s5, "@{s4} Rebels"),
     (faction_set_name, ":faction_selected", s5),
   (try_end),
   

   (faction_get_slot, ":language", ":faction_selected", slot_faction_language), 
   (faction_get_slot, ":culture", ":faction_selected", slot_faction_culture),
   (try_for_range, ":cur_slot", ":slot_lower_bound", ":slot_upper_bound"),
     (troop_get_slot, ":cur_lord", "trp_ee_array_1", ":cur_slot"),
     (neg|faction_slot_eq, ":faction_selected", slot_faction_leader, ":cur_lord"), #### not the king because his was set up earlier
     # (call_script, "script_update_troop_notes", ":cur_lord"), ### update notes
       #Give new title
     (call_script, "script_troop_set_title_according_to_culture_language", ":cur_lord", ":culture", ":language"),
   (try_end),
   
   (str_clear, s1),
   (str_clear, s2),
   (str_store_faction_name_link, s1, ":faction_no"),
   (str_store_faction_name_link, s2, ":faction_selected"),
   (display_message, "@Disgruntled lords from the {s1} have joined forces and started a rebellion! A civil war in the lands of the {s1} has begun."),
   (call_script, "script_diplomacy_start_war_between_kingdoms", ":faction_selected", ":faction_no", 0),
     
   (call_script, "script_faction_recalculate_strength", ":faction_no"), ### updates strenght of both
   (call_script, "script_faction_recalculate_strength", ":faction_selected"), 
   (call_script, "script_recalculate_ais_for_faction", ":faction_no"),  ### recalculate ai for both
   (call_script, "script_recalculate_ais_for_faction", ":faction_selected"),
   
   (faction_set_note_available, ":faction_selected", 1),
   
   (call_script, "script_update_all_notes"), ### update notes
 ]),
#######################################################



##################### NEW v2.1 - set the faction languages at game start 
("set_kingdom_languages_game_start",
  [
   (try_begin),     
     (faction_set_slot, "fac_kingdom_1", slot_faction_language, faction_language_german),
     (faction_set_slot, "fac_kingdom_6", slot_faction_language, faction_language_german),
     (faction_set_slot, "fac_kingdom_2", slot_faction_language, faction_language_baltic),
     (faction_set_slot, "fac_kingdom_33", slot_faction_language, faction_language_baltic),
     (faction_set_slot, "fac_kingdom_34", slot_faction_language, faction_language_baltic),
     (faction_set_slot, "fac_kingdom_35", slot_faction_language, faction_language_baltic),
     (faction_set_slot, "fac_kingdom_36", slot_faction_language, faction_language_baltic),
     (faction_set_slot, "fac_kingdom_3", slot_faction_language, faction_language_mongol),
     (faction_set_slot, "fac_kingdom_4", slot_faction_language, faction_language_danish),
     (faction_set_slot, "fac_kingdom_5", slot_faction_language, faction_language_polish),
     (faction_set_slot, "fac_kingdom_7", slot_faction_language, faction_language_hungarian),
     (faction_set_slot, "fac_kingdom_8", slot_faction_language, faction_language_rus),
     (faction_set_slot, "fac_kingdom_15", slot_faction_language, faction_language_rus),
     (faction_set_slot, "fac_kingdom_9", slot_faction_language, faction_language_english),
     (faction_set_slot, "fac_kingdom_10", slot_faction_language, faction_language_french),
     (faction_set_slot, "fac_kingdom_11", slot_faction_language, faction_language_norwegian),
     (faction_set_slot, "fac_kingdom_12", slot_faction_language, faction_language_scottish),
     (faction_set_slot, "fac_kingdom_13", slot_faction_language, faction_language_gaelic),
     (faction_set_slot, "fac_kingdom_14", slot_faction_language, faction_language_swedish),
     (faction_set_slot, "fac_kingdom_16", slot_faction_language, faction_language_portuguese),
     (faction_set_slot, "fac_kingdom_17", slot_faction_language, faction_language_spanish),
     (faction_set_slot, "fac_kingdom_18", slot_faction_language, faction_language_spanish),
     (faction_set_slot, "fac_kingdom_19", slot_faction_language, faction_language_spanish),
     (faction_set_slot, "fac_kingdom_20", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_kingdom_25", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_kingdom_28", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_kingdom_31", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_papacy", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_24", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_26", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_32", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_38", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_39", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_40", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_41", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_kingdom_22", slot_faction_language, faction_language_greek),
     (faction_set_slot, "fac_kingdom_23", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_kingdom_27", slot_faction_language, faction_language_turkish),
     (faction_set_slot, "fac_kingdom_29", slot_faction_language, faction_language_serbian),
     (faction_set_slot, "fac_kingdom_30", slot_faction_language, faction_language_bulgarian),
     (faction_set_slot, "fac_kingdom_37", slot_faction_language, faction_language_welsh),
     (faction_set_slot, "fac_kingdom_42", slot_faction_language, faction_language_czech),
     (faction_set_slot, "fac_player_supporters_faction", slot_faction_language, faction_language_mixed_euro),
     
     #### cultures
     (faction_set_slot, "fac_culture_finnish", slot_faction_language, faction_language_finnish),
     (faction_set_slot, "fac_culture_mazovian", slot_faction_language, faction_language_polish),
     (faction_set_slot, "fac_culture_serbian", slot_faction_language, faction_language_serbian),
     (faction_set_slot, "fac_culture_welsh", slot_faction_language, faction_language_welsh),
     (faction_set_slot, "fac_culture_teutonic", slot_faction_language, faction_language_german),
     (faction_set_slot, "fac_culture_balkan", slot_faction_language, faction_language_bulgarian),
     (faction_set_slot, "fac_culture_rus", slot_faction_language, faction_language_rus),
     (faction_set_slot, "fac_culture_nordic", slot_faction_language, faction_language_danish),
     (faction_set_slot, "fac_culture_baltic", slot_faction_language, faction_language_baltic),
     (faction_set_slot, "fac_culture_marinid", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_culture_mamluke", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_culture_andalus", slot_faction_language, faction_language_arab),
     (faction_set_slot, "fac_culture_byzantium", slot_faction_language, faction_language_greek),
     (faction_set_slot, "fac_culture_iberian", slot_faction_language, faction_language_spanish),
     (faction_set_slot, "fac_culture_italian", slot_faction_language, faction_language_italian),
     (faction_set_slot, "fac_culture_gaelic", slot_faction_language, faction_language_gaelic),
     (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_language, faction_language_armenian),
     (faction_set_slot, "fac_culture_anatolian", slot_faction_language, faction_language_turkish),
     (faction_set_slot, "fac_culture_scotish", slot_faction_language, faction_language_scottish),
     (faction_set_slot, "fac_culture_western", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_templar", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_hospitaller", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_antioch", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_tripoli", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_ibelin", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_jerusalem", slot_faction_language, faction_language_mixed_euro),
     (faction_set_slot, "fac_culture_mongol", slot_faction_language, faction_language_mongol),
     # (faction_set_slot, "fac_culture_player", slot_faction_language, faction_language_custom),
     ######## NEW v3.3
     (faction_set_slot, "fac_culture_crusader", slot_faction_language, faction_language_mixed_euro), 
     (faction_set_slot, "fac_culture_cuman", slot_faction_language, faction_language_cuman), 
     #################
     ############# NEW v3.10
     (faction_set_slot, "fac_culture_english", slot_faction_language, faction_language_english), 
     (faction_set_slot, "fac_culture_french", slot_faction_language, faction_language_french), 
     (faction_set_slot, "fac_culture_hungarian", slot_faction_language, faction_language_hungarian), 
     (faction_set_slot, "fac_culture_polish", slot_faction_language, faction_language_polish), 
############################
     (faction_set_slot, "fac_culture_player", slot_faction_language, faction_language_mixed_euro), #### New v2.7 
   (try_end),
]),
#######################################################



##################### NEW v2.1 - generates a name for the faction based on its language
# ("generate_kingdom_name",
  # [
   # (store_script_param, ":faction_no", 1),
  
   # (faction_get_slot, ":language", ":faction_no", slot_faction_language), 
   # (try_begin),     
     # (eq, ":language", faction_language_finnish),
       # (store_random_in_range, ":cur_slot", ":slot_lower_bound", ":slot_upper_bound"), 
   # (try_end),
# ]),
#######################################################




################ copy of script_change_troop_faction to be used by civil war script
# script_change_troop_faction_new
# Input: arg1 = troop_no, arg2 = faction
("change_troop_faction_new",
  [
    (store_script_param_1, ":troop_no"),
    (store_script_param_2, ":faction_no"),
    
    # (try_begin),
      #######Reactivating inactive or defeated faction
      # (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
      # (neg|faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
      # (faction_set_slot, ":faction_no", slot_faction_state, sfs_active),
    # (try_end),
    
    (store_faction_of_troop, ":orig_faction", ":troop_no"),
    #remove if he is marshal
    (try_begin),
      (faction_slot_eq, ":orig_faction", slot_faction_marshall, ":troop_no"),
      (call_script, "script_check_and_finish_active_army_quests_for_faction", ":orig_faction"),
      #No current issue on the agenda
      (try_begin),
        (faction_slot_eq, ":orig_faction", slot_faction_political_issue, 0),
        
        (faction_set_slot, ":orig_faction", slot_faction_political_issue, 1), #Appointment of marshal
        (store_current_hours, ":hours"),
        (val_max, ":hours", 0),
        (faction_set_slot, ":orig_faction", slot_faction_political_issue_time, ":hours"), #Appointment of marshal
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
          (troop_slot_eq, ":active_npc", slot_troop_is_alive, 1),  ## he's alive/active
          (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
          (eq, ":active_npc_faction", ":orig_faction"),
          (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (try_begin),
          (eq, "$players_kingdom", ":orig_faction"),
          (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
        (try_end),
      (try_end),
      
      (try_begin),
        (troop_get_slot, ":old_marshall_party", ":troop_no", slot_troop_leaded_party),
        (party_is_active, ":old_marshall_party"),
        (party_set_marshall, ":old_marshall_party", 0),
      (try_end),
      
      (faction_set_slot, ":orig_faction", slot_faction_marshall, -1),
    (try_end),
    #Removal as marshal ends
    
    #Other political ramifications
    (troop_set_slot, ":troop_no", slot_troop_stance_on_faction_issue, -1),
    (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
      (troop_slot_eq, ":active_npc", slot_troop_is_alive, 1),  ## he's alive/active
      (troop_slot_eq, ":active_npc", slot_troop_stance_on_faction_issue, ":troop_no"),
      (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
    (try_end),
    #Political ramifications end
    
    (troop_set_faction, ":troop_no", ":faction_no"),
    (troop_set_slot, ":troop_no", slot_troop_recruitment_random, 0),
    (troop_set_slot, ":troop_no", slot_lord_recruitment_argument, 0),
    (troop_set_slot, ":troop_no", slot_lord_recruitment_candidate, 0),
    (troop_set_slot, ":troop_no", slot_troop_promised_fief, 0),
    
    
    #Takes walled centers and dependent villages with him
    (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
      (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
      (party_set_faction, ":center_no", ":faction_no"),
      (try_for_range, ":village_no", villages_begin, villages_end),
        (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
        (party_set_faction, ":village_no", ":faction_no"),
        (party_get_slot, ":farmer_party_no", ":village_no", slot_village_farmer_party),
        (try_begin),
          (gt, ":farmer_party_no", 0),
          (party_is_active, ":farmer_party_no"),
          (party_set_faction, ":farmer_party_no", ":faction_no"),
        (try_end),
        (try_begin),
          (party_get_slot, ":old_town_lord", ":village_no", slot_town_lord),
          (neq, ":old_town_lord", ":troop_no"),
          (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
        (try_end),
      (try_end),
    (try_end),
    
    #Dependant kingdom ladies switch faction
    (try_for_range, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end),
      (call_script, "script_get_kingdom_lady_social_determinants", ":kingdom_lady"),
      (assign, ":closest_male_relative", reg0),
      (assign, ":new_center", reg1),
      
      (eq, ":closest_male_relative", ":troop_no"),
      
      (try_begin),
        (ge, "$cheat_mode", 1),
        (str_store_troop_name, s4, ":kingdom_lady"),
        (display_message, "@{!}DEBUG - {s4} faction changed by guardian moving"),
      (try_end),
      
      (troop_set_faction, ":kingdom_lady", ":faction_no"),
      (troop_slot_eq, ":kingdom_lady", slot_troop_prisoner_of_party, -1),
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, ":new_center"),
    (try_end),
    
    #Remove his control over villages under another fortress
    (try_for_range, ":village_no", villages_begin, villages_end),
      (party_slot_eq, ":village_no", slot_town_lord, ":troop_no"),
      (store_faction_of_party, ":village_faction", ":village_no"),
      (try_begin),
        (neq, ":village_faction", ":faction_no"),
        (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
      (try_end),
    (try_end),
    
    #Free prisoners
    (try_begin),
      (troop_get_slot, ":leaded_party", ":troop_no", slot_troop_leaded_party),
      (gt, ":leaded_party", 0),
      (party_set_faction, ":leaded_party", ":faction_no"),
      (party_get_num_prisoner_stacks, ":num_stacks", ":leaded_party"),
      (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":leaded_party", ":troop_iterator"),
        (store_troop_faction, ":cur_faction", ":cur_troop_id"),
        (troop_is_hero, ":cur_troop_id"),
        (eq, ":cur_faction", ":faction_no"),
        (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
        (party_remove_prisoners, ":leaded_party", ":cur_troop_id", 1),
      (try_end),
    (try_end),
    
    #Annull all quests of which the lord is giver
    (try_for_range, ":quest", all_quests_begin, all_quests_end),
      (check_quest_active, ":quest"),
      (quest_slot_eq, ":quest", slot_quest_giver_troop, ":troop_no"),
      
      (str_store_troop_name, s4, ":troop_no"),
      (try_begin),
        (eq, "$cheat_mode", 1),
        (display_message, "str_s4_changing_sides_aborts_quest"),
      (try_end),
      (call_script, "script_abort_quest", ":quest", 0),
    (try_end),
    
    #Boot all lords out of centers whose faction has changed
    (try_for_range, ":lord_to_move", active_npcs_begin, active_npcs_end),
      (troop_slot_eq, ":lord_to_move", slot_troop_is_alive, 1),  ## he's alive/active
      (troop_get_slot, ":lord_led_party", ":lord_to_move", slot_troop_leaded_party),
      (party_is_active, ":lord_led_party"),
      (party_get_attached_to, ":led_party_attached", ":lord_led_party"),
      (is_between, ":led_party_attached", walled_centers_begin, walled_centers_end),
      (store_faction_of_party, ":led_party_faction", ":lord_led_party"),
      (store_faction_of_party, ":attached_party_faction", ":led_party_attached"),
      (neq, ":led_party_faction", ":attached_party_faction"),
      
      (party_detach, ":lord_led_party"),
    (try_end),
    
    #Increase relation with lord in new faction by 5
    #Or, if player kingdom, make inactive pending confirmation
    # (faction_get_slot, ":faction_liege", ":faction_no", slot_faction_leader),
    # (try_begin),
      # (eq, ":faction_liege", "trp_player"),
      # (neq, ":troop_no", "$g_talk_troop"),
      # (troop_set_slot, ":troop_no", slot_troop_occupation, slto_inactive), #POSSIBLE REASON 1
    # (else_try),
      # (is_between, ":faction_liege", active_npcs_begin, active_npcs_end),
      # (is_between, ":troop_no", active_npcs_begin, active_npcs_end),
      # (call_script, "script_troop_change_relation_with_troop", ":faction_liege", ":troop_no", 5),
      # (val_add, "$total_indictment_changes", 5),
    # (try_end),
    
    #Break courtship relations
    (try_begin),
      (troop_slot_ge, ":troop_no", slot_troop_spouse, 0),
      #Already married, do nothing
    (else_try),
      (is_between, ":troop_no", active_npcs_begin, active_npcs_end),
      (try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
        (troop_get_slot, ":courted_lady", ":troop_no", ":love_interest_slot"),
        (call_script, "script_courtship_event_lady_break_relation_with_suitor", ":courted_lady", ":troop_no"),
      (try_end),
      (call_script, "script_assign_troop_love_interests", ":troop_no"),
    (else_try),
      (is_between, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
      (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
        (troop_slot_eq, ":active_npc", slot_troop_is_alive, 1),  ## he's alive/active
        (try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
          (troop_slot_eq, ":active_npc", ":love_interest_slot", ":troop_no"),
          (call_script, "script_courtship_event_lady_break_relation_with_suitor", ":troop_no", ":active_npc"),
        (try_end),
      (try_end),
    (try_end),
    
    #Stop raidings/sieges of new faction's fief if there is any
    (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
    (try_for_range, ":center_no", centers_begin, centers_end),
      (party_slot_eq, ":center_no", slot_party_type, spt_village),
      (party_get_slot, ":raided_by", ":center_no", slot_village_raided_by),
      (eq, ":raided_by", ":troop_party"),
      (party_set_slot, ":center_no", slot_village_raided_by, -1),
      (try_begin),
        (party_slot_eq, ":center_no", slot_village_state, svs_being_raided),
        (party_set_slot, ":center_no", slot_village_state, svs_normal),
        (party_set_extra_text, ":center_no", "str_empty_string"),
      (try_end),
    (else_try),
      (party_get_slot, ":besieged_by", ":center_no", slot_center_is_besieged_by),
      (eq, ":besieged_by", ":troop_party"),
      (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
      (try_begin),
        (party_slot_eq, ":center_no", slot_village_state, svs_under_siege),
        (party_set_slot, ":center_no", slot_village_state, svs_normal),
        (party_set_extra_text, ":center_no", "str_empty_string"),
      (try_end),
    (try_end),
        
    (call_script, "script_update_village_market_towns"),
    
]),
############################################################################




######################## NEW v2.1 - stuff from floris/diplomacy
#script_dplmc_print_subordinate_says_sir_madame_to_s0
#
#In a number of circumstances a subordinate (a soldier in the player's employ) will refer
#to him as "sir" or "madame".  This is intended as a sign of respect, but becomes
#unintentionally disrespectful if the player would ordinarily merit a higher title.
#
#This function does not take into account the personal characteristics of the speaker in
#any way.  That logic should occur elsewhere.        
#
#input: none
#output: reg0 gets a number corresponding to the title used
("dplmc_print_subordinate_says_sir_madame_to_s0",
    [
    (assign, ":highest_honor", 1),#{sir/madame}
    #1: str_dplmc_sirmadame
    #2: str_dplmc_my_lordlady
    #3: str_dplmc_your_highness
    (try_begin),
        #disable extra honors when the player is not recognized
        (eq, "$sneaked_into_town", 1),
        (assign, ":highest_honor", 1),
    (else_try),
        #initialize variables for following steps
        (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
        (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
        #check if the player is the spouse of one of a widely recognized monarch,
        #or if the player is the ruler of one of the starting kingdoms (this can't happen but check anyway)
        (ge, ":player_spouse", 1),
        (try_for_range, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
            (this_or_next|faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"),
            (faction_slot_eq, ":faction_no", slot_faction_leader, ":player_spouse"),
            (val_max, ":highest_honor", 3),
        (try_end),
        (this_or_next|is_between, ":player_spouse", kings_begin, kings_end),
        (this_or_next|is_between, ":player_spouse", pretenders_begin, pretenders_end),
            (ge, ":highest_honor", 3),
        (val_max, ":highest_honor", 3),
        #Do not continue, since you've already used the highest available honor.
    (else_try),
        #the player is head of his own faction
        (ge, "$players_kingdom", 0),
        #faction leader is player, or faction leader is spouse and spouse is valid
        (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
            (faction_slot_eq, "$players_kingdom", slot_faction_leader, ":player_spouse"),
        (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
            (ge, ":player_spouse", 1),

        (faction_slot_eq, "$players_kingdom", slot_faction_state, sfs_active),
        (try_begin),
            #If you have sufficient right-to-rule and renown, your subjects
            #will call you "highness".
            (ge, "$player_right_to_rule", 10),
            (store_sub, reg0, 75 + 75, "$player_right_to_rule"),
            (val_mul, reg0, 1200 // 75),#minimum required renown (as an aside, 1200 is evenly divisibly by 75)
            #examples: at right to rule 50, renown must be at least 1600
            #          at right to rule 99, renown must be at least 816
            #          at right to rule 10, renown must be at least 2240
            (ge, ":player_renown", reg0),
            (val_max, ":highest_honor", 3),
        (else_try),
            #"Highness" is also used if the player's kingdom holds meaningful territory.
            (try_begin),
                #Recalculate the cached value if it's suspicious
                (faction_slot_eq, "$players_kingdom", slot_faction_num_castles, 0),
                (faction_slot_eq, "$players_kingdom", slot_faction_num_towns, 0),
                (call_script, "script_faction_recalculate_strength", "$players_kingdom"),
            (else_try),
                #Recalculate the cached value if it's obviously wrong
                (this_or_next|neg|faction_slot_ge, "$players_kingdom", slot_faction_num_castles, 0),
                (neg|faction_slot_ge, "$players_kingdom", slot_faction_num_towns, 0),
                (call_script, "script_faction_recalculate_strength", "$players_kingdom"),
            (try_end),
            #Territory points: castles = 2, towns = 3 (ignore villages)
            (faction_get_slot, ":territory_points", "$players_kingdom", slot_faction_num_towns),
            (val_mul, ":territory_points", 3),
            (faction_get_slot, reg0, "$players_kingdom", slot_faction_num_castles),
            (val_add, ":territory_points", reg0),
            (val_add, ":territory_points", reg0),
            #If the player owns even a single center, that's worth at least "my lord" from his followers
            (ge, ":territory_points", 1),
            (val_max, ":highest_honor", 2),
            #By default there are around 48 castles and 22 towns on the map, for a total of 70
            #centers, and 162 "points" if weighting castles = 2 and towns = 3.
            (store_sub, ":global_points", towns_end, towns_begin),
            (val_mul, ":global_points", 3),
            (store_sub, reg0, castles_end, castles_begin),
            (val_add, ":global_points", reg0),
            (val_add, ":global_points", reg0),
            #By default there are 6 NPC kingdoms, averaging 8 castles and 3.66... towns or
            #27 points each (although the initial distribution of territory is not even).
            (store_sub, ":number_kingdoms", npc_kingdoms_end, npc_kingdoms_begin),
            (val_max,  ":number_kingdoms", 1),
            #Territory must be at least 3/4 the total points divided by number of initial kingdoms.
            #Right to rule applied as a percentage bonus, scaled so that you gain recognition with
            #75% right to rule and a 50% size kingdom.
                            
            #What I want is: ( (RtR * 2/3) + 100 ) * territory * kingdoms >= globe * 3/4
            #This is equivalent to: (RtR * 2 + 300) * territory * kingdoms * 4 >= globe * 9
            #The re-ordering is because of rounding.
            (store_mul, ":target_points", ":global_points", 9),
            (store_mul, reg0, "$player_right_to_rule", 2),
            (val_add, reg0, 300),
            (val_mul, reg0, ":territory_points"),
            (val_mul, reg0, ":number_kingdoms"),
            (val_mul, reg0, 4),
            (ge, reg0, ":target_points"),
            (val_max, ":highest_honor", 3),
        (try_end),
        #stop evaluation if you reached highest honor
        (ge, ":highest_honor", 3),
    (else_try),
        #the player is a vassal of one of the initial kingdoms
        (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        (val_max, ":highest_honor", 1),
        (eq, "$player_has_homage", 1),#<- can fail
        (val_max, ":highest_honor", 2),
    (try_end),

    (try_begin),
       (ge, ":highest_honor", 3),
       (str_store_string, s0, "str_dplmc_your_highness"),
    (else_try),
       (eq, ":highest_honor", 2),
       (str_store_string, s0, "str_dplmc_my_lordlady"),
    (else_try),
       (str_store_string, s0, "str_dplmc_sirmadam"),
    (try_end),

      ##Special cases
    (try_begin),
       (lt, "$sneaked_into_town", 1),
         (is_between, "$g_talk_troop", companions_begin, companions_end),
          (ge, ":highest_honor", 1),
          (neg|troop_slot_eq, "$g_talk_troop", slot_troop_met, 0),
          (this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_inactive),
             (neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, 0),
         # (neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),              
       (troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
       (ge, ":honorific", "str_npc1_honorific"),
          (str_store_string, s0, ":honorific"),
      (else_try),
         (eq, ":highest_honor", 1),
          (is_between, "$g_talk_troop", heroes_begin, heroes_end),
          (str_store_string, s0, "str_dplmc_sirmadame"),
    (try_end),

    (assign, reg0, ":highest_honor"),
]),




#Decide whether an NPC wants to exchange a fief or not.
#
# param#1 is NPC being asked
# param#2 is that NPC's fief being asked for
# param#3 is the one asking (usually the player)
# param#4 is the fief being offered in exchange
#
# Result is returned in reg0.  Negative means "no", zero means "yes",
# positive means "yes but you have to pay me this amount".
# If the result is negative, the response string is stored in s14.
("dplmc_evaluate_fief_exchange",
  [
    (store_script_param, ":target_npc", 1),
    (store_script_param, ":target_fief", 2),
    (store_script_param, ":asker", 3),
    (store_script_param, ":offered_fief", 4),

    (assign, ":result", -1),
    (assign, reg0, ":result"),
    (str_store_string, s14, "str_ERROR_string"),

    (try_begin),
        #Both NPCs are valid, and are not same character.  One can be the player.
        (neq, ":target_npc", ":asker"),
        (is_between, ":target_npc", heroes_begin, heroes_end),
        (this_or_next|is_between, ":asker", heroes_begin, heroes_end),
           (eq, ":asker", "trp_player"),
        #Both fiefs are valid and owned by the lords in the arguments
        (is_between, ":target_fief", centers_begin, centers_end),
        (party_slot_eq, ":target_fief", slot_town_lord, ":target_npc"),
        (is_between, ":offered_fief", centers_begin, centers_end),
        (party_slot_eq, ":offered_fief", slot_town_lord, ":asker"),
        #The lords are in the same faction
        (store_troop_faction, ":target_faction", ":target_npc"),
        (store_troop_faction, ":asker_faction", ":asker"),
        (try_begin),
           #Special handling needed for player faction
           (eq, ":asker", "trp_player"),
           (neg|eq, ":target_faction", ":asker_faction"),
           (assign, ":asker_faction", "$players_kingdom"),
        (try_end),
        (this_or_next|eq, ":target_faction", ":asker_faction"),
           (this_or_next|faction_slot_eq, ":target_faction",slot_faction_leader, ":asker"),
           (faction_slot_eq, ":asker_faction",slot_faction_leader, ":target_npc"),
        #Get prosperity for use in later tests
        (party_get_slot, ":target_prosperity", ":target_fief", slot_town_prosperity),
        (party_get_slot, ":offered_prosperity", ":offered_fief", slot_town_prosperity),
        (store_div, ":min_prosperity", ":target_prosperity", 10),
        (val_mul, ":min_prosperity", 10),
        #...take into account relation
        (call_script, "script_troop_get_relation_with_troop", ":target_npc", ":asker"),
        (store_div, ":relation_div_10", reg0, 10),
        (val_sub, ":min_prosperity", ":relation_div_10"),
        #...take into account persuasion
        (store_skill_level, ":asker_persuasion", "skl_persuasion", ":asker"),
        (val_sub, ":min_prosperity", ":asker_persuasion"),
        #...take into account personal (not party) trade skill
        (store_skill_level, ":asker_trade", "skl_trade", ":asker"),
        (val_sub, ":min_prosperity", ":asker_trade"),
        #...don't let it rise above original's prosperity.
        (val_min, ":min_prosperity", ":target_prosperity"),
        #target_type 1 = village, 2 = castle, 3 = town
        (assign, ":target_type", 0),
        (try_begin),
          (party_slot_eq, ":target_fief", slot_party_type, spt_town),
          (assign, ":target_type", 3),
        (else_try),
          (party_slot_eq, ":target_fief", slot_party_type, spt_castle),
          (assign, ":target_type", 2),
        (else_try),
          (party_slot_eq, ":target_fief", slot_party_type, spt_village),
          (assign, ":target_type", 1),
        (try_end),
        (ge, ":target_type", 1),#break with error if the type was bad
        #offered_type: 1 = village, 2 = castle, 3 = town
        (assign, ":offered_type", 0),
        (try_begin),
          (party_slot_eq, ":offered_fief", slot_party_type, spt_town),
          (assign, ":offered_type", 3),
        (else_try),
          (party_slot_eq, ":offered_fief", slot_party_type, spt_castle),
          (assign, ":offered_type", 2),
        (else_try),
          (party_slot_eq, ":offered_fief", slot_party_type, spt_village),
          (assign, ":offered_type", 1),
        (try_end),
        (ge, ":offered_type", 1),#break with error if the type was bad
        #Now execute comparison logic:
        (try_begin),
          #refuse to trade town for a castle or village 
          (lt, ":offered_type", ":target_type"),
          (eq, ":target_type", 3), 
          (str_store_string, s14, "str_dplmc_fief_exchange_refuse_town"),
        (else_try),
          #refuse to trade any better type for a worse type
          (lt, ":offered_type", ":target_type"),
          (str_store_string, s14, "str_dplmc_fief_exchange_refuse_castle"), 
        (else_try),
          #refuse to trade for something under siege or being raided
          (this_or_next|party_slot_eq, ":offered_fief", slot_village_state, svs_under_siege), 
          (party_slot_eq, ":offered_fief", slot_village_state, svs_being_raided),
          (str_store_party_name, s14, ":offered_fief"),
          (str_store_string, s14, "str_dplmc_fief_exchange_refuse_s14_attack"),
        (else_try),
          #accept a trade if the offered type is better
          (lt, ":target_type", ":offered_type"),
          (str_store_string, s14, "str_dplmc_fief_exchange_accept"),
          (assign, ":result", 0),
        (else_try),
          #refuse to trade away home center (unless trading up for a better type)
          #Target fief is home of NPC...
          (this_or_next|party_slot_eq, ":target_fief", dplmc_slot_center_original_lord, ":target_npc"),
             (troop_slot_eq, ":target_npc", slot_troop_home, ":target_fief"),
          (neg|party_slot_eq, ":offered_fief", dplmc_slot_center_original_lord, ":target_npc"),
          #...and offered fief is not.
          (neg|troop_slot_eq, ":target_npc", slot_troop_home, ":offered_fief"),
          (this_or_next|neg|is_between, ":target_npc", companions_begin, companions_end),
          (neg|troop_slot_eq, ":target_npc", slot_troop_town_with_contacts, ":offered_fief"),
          (str_store_party_name, s14, ":target_fief"), #Line added by zerilius
          (str_store_string, s14, "str_dplmc_fief_exchange_refuse_home"),
        (else_try),
          #refuse trade if prosperity is too low
          (lt, ":offered_prosperity", ":min_prosperity"),
          (str_store_string, s14, "str_dplmc_fief_exchange_refuse_rich"),
        (else_try),
          #accept trade for 0 or more denars
          (store_sub, ":result", ":target_prosperity", ":offered_prosperity"),
          (val_mul, ":result", ":target_type"),
          (val_mul, ":result", 36),#Should probably be 60 instead
          #(val_div, ":result", 100),
          (val_add, ":result", 2000),
          (val_max, ":result", 0),
          (try_begin),
             (ge, ":result", 1),
             (assign, reg3, ":result"),
             (str_store_string, s14, "str_dplmc_fief_exchange_accept_reg3_denars"),
          (else_try),
             (str_store_string, s14, "str_dplmc_fief_exchange_accept"),
          (try_end),
        (try_end),
    (try_end),
    (assign, reg0, ":result"),
  ]),
  

#"script_dplmc_distribute_gold_to_lord_and_holdings"
#
#Related to script_dplmc_remove_gold_from_lord_and_holdings, divides the gold
#between the lord and his fortresses in a semi-intelligent way.
#
#INPUT:
#   arg1: the amount of gold
#   arg2: the lord's ID
("dplmc_distribute_gold_to_lord_and_holdings",
 [
  (store_script_param_1, ":gold_left"),
  (store_script_param_2, ":lord_no"),
  
  (try_begin),
      (lt, ":lord_no", 0),#Invalid ID
  (else_try),
      #If the number is negative, handle this using script_dplmc_remove_gold_from_lord_and_holdings
      (lt, ":gold_left", 0),
      (val_mul, ":gold_left", -1),
      (call_script, "script_dplmc_remove_gold_from_lord_and_holdings", ":gold_left", ":lord_no"),
      (assign, ":gold_left", 0),
  (else_try),
      (neq, ":lord_no", "trp_player"),
      (neg|troop_is_hero, ":lord_no"),#Not hero or player
      (troop_add_gold, ":lord_no", ":gold_left"),
      (assign, ":gold_left", 0),
  (else_try),
      #The player doesn't use center wealth to pay garrison wages, so just
      #give it directly.
      (eq, ":lord_no", "trp_player"),
      (troop_add_gold, "trp_player", ":gold_left"),
      (assign, ":gold_left", 0),
  (else_try),
      (neg|troop_is_hero, ":lord_no"),#If the lord isn't the player, and isn't a hero, do nothing
  (else_try),    
      (troop_get_slot, ":target_gold", ":lord_no", slot_troop_wealth),
      (val_max, ":target_gold", 0),
      #If the lord is low on gold, first he takes enough gold so he isn't low on funds,
      #or all of the gold, whichever is less.
      (store_sub, ":gold_to_give", 6000, ":target_gold"),#6000 is the standard starting gold for lords (kings start with more, but don't increase this for them, since I'm using this number as a "low on gold" threshold)
      (val_max, ":gold_to_give", 0),
      (val_min, ":gold_to_give", ":gold_left"),
          
      (val_add, ":target_gold", ":gold_to_give"),
      (troop_set_slot, ":lord_no", slot_troop_wealth, ":target_gold"),
      (val_sub, ":gold_left", ":gold_to_give"),
      #If gold remains, the lord gives some to any castles or towns he owns that have
      #low wealth.  Note that iterating in this order means that towns get checked
      #before castles do.
      (gt, ":gold_left", 0),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
          (party_slot_eq, ":center_no", slot_town_lord, ":lord_no"),
          (party_get_slot, ":target_gold", ":center_no", slot_town_wealth),
          #Don't give gold to centers with garrisons more than 50% above the ideal size
          (store_party_size_wo_prisoners, ":garrison_size", ":center_no"),
          (call_script, "script_party_get_ideal_size", ":center_no"),#This script has been modified to support this use
          (val_mul, reg0, 3),
          (val_div, reg0, 2),
          (ge, reg0, ":garrison_size"),
          
          (try_begin),
              (party_slot_eq, ":center_no", slot_party_type, spt_town),
              (store_sub, ":gold_to_give", 4000, ":target_gold"),#4000 is the standard starting gold for towns
          (else_try),
              (store_sub, ":gold_to_give", 2000, ":target_gold"),#2000 is the standard starting gold for castles
          (try_end),
                  
          (val_max, ":gold_to_give", 0),
          (val_min, ":gold_to_give", ":gold_left"),
          (gt, ":gold_to_give", 0),
          (val_add, ":target_gold", ":gold_to_give"),
          (party_set_slot, ":center_no", slot_town_wealth, ":target_gold"),
          (val_sub, ":gold_left", ":gold_to_give"),
      (try_end),
      #If gold is left -- the lord isn't low on gold, and none of his walled centers are --
      #he pockets the remainder.
      (gt, ":gold_left", 0),
      (troop_get_slot, ":target_gold", ":lord_no", slot_troop_wealth),
      (val_add, ":target_gold", ":gold_left"),
      (val_max, ":target_gold", 0),
      (troop_set_slot, ":lord_no", slot_troop_wealth, ":target_gold"),
      (assign, ":gold_left", 0),
  (try_end),
  ]),


#"script_dplmc_remove_gold_from_lord_and_holdings"
#INPUT:
#arg1: the amount of money to remove (greater than zero)
#arg2: the ID of the lord spending the money
#OUTPUT:
#None
("dplmc_remove_gold_from_lord_and_holdings",
 [
  (store_script_param_1, ":gold_cost"),
  (store_script_param_2, ":lord_no"),

  (try_begin),
      (lt, ":lord_no", 0),#Invalid ID
  (else_try),
      (neq, ":lord_no", "trp_player"),
      (neg|troop_is_hero, ":lord_no"),#Not player or hero
  (else_try),
      #If the number is negative, give gold instead of taking it.
      #Handle this using script_dplmc_distribute_gold_to_lord_and_holdings
      (lt, ":gold_cost", 0),
      (val_mul, ":gold_cost", -1),
      (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":gold_cost", ":lord_no"),
      (assign, ":gold_cost", 0),
  (else_try),
      #For the player, first subtract the gold from his treasury (if any).
      (eq, ":lord_no", "trp_player"),
      (store_troop_gold, ":treasury", "trp_household_possessions"),
      (try_begin),
          (ge, ":treasury", 1),
          (val_min, ":treasury", ":gold_cost"),
          (call_script, "script_dplmc_withdraw_from_treasury", ":treasury"),
          (val_sub, ":gold_cost", ":treasury"),
      (try_end),
      (store_troop_gold, ":treasury", "trp_player"),
      (try_begin),
          (ge, ":treasury", 1),
          (val_min, ":treasury", ":gold_cost"),
          (troop_remove_gold, "trp_player", ":treasury"),
          (val_sub, ":gold_cost", ":treasury"),
      (try_end),
      #Fall through to the next section if the treasury didn't cover it.
      (lt, ":gold_cost", 1),
  (else_try),
      #Remove the gold directly from the lord's wealth slot
      (ge, ":gold_cost", 1),
      (ge, ":lord_no", 1),#not the player
      (troop_get_slot, ":treasure", ":lord_no", slot_troop_wealth),
      (ge, ":treasure", 1),
      (try_begin),
          (ge, ":treasure", ":gold_cost"),
          (val_sub, ":treasure", ":gold_cost"),
          (assign, ":gold_cost", 0),
      (else_try),
          (val_sub, ":gold_cost", ":treasure"),
          (assign, ":treasure", 0),
      (try_end),
      (troop_set_slot, ":lord_no", slot_troop_wealth, ":treasure"),
      #Fall through to the next section if his personal wealth didn't cover it.
      (lt, ":gold_cost", 1),
  (else_try),
      #Remove remaining gold from uncollected taxes.
      #We iterate backwards in order to remove from villages before castles and towns.
      (ge, ":gold_cost", 1),
      (try_for_range_backwards, ":center_no", centers_begin, centers_end),
          (ge, ":gold_cost", 1),
          (party_slot_eq, ":center_no", slot_town_lord, ":lord_no"),
          (party_get_slot, ":treasure", ":center_no", slot_center_accumulated_rents),
          (try_begin),
              (gt, ":treasure", 0),
              (ge, ":treasure", ":gold_cost"),
              (val_sub, ":treasure", ":gold_cost"),
              (assign, ":gold_cost", 0),
          (else_try),
              (gt, ":treasure", 0),
              (val_sub, ":gold_cost", ":treasure"),
              (assign, ":treasure", 0),
          (try_end),
          (party_set_slot, ":center_no", slot_center_accumulated_rents, ":treasure"),

          (ge, ":gold_cost", 1),
          (party_get_slot, ":treasure", ":center_no", slot_center_accumulated_tariffs),
          (try_begin),
              (gt, ":treasure", 0),
              (ge, ":treasure", ":gold_cost"),
              (val_sub, ":treasure", ":gold_cost"),
              (assign, ":gold_cost", 0),
          (else_try),
              (gt, ":treasure", 0),
              (val_sub, ":gold_cost", ":treasure"),
              (assign, ":treasure", 0),
          (try_end),
          (party_set_slot, ":center_no", slot_center_accumulated_tariffs, ":treasure"),
      (try_end),
      #Fall through to the next section if the uncollected taxes didn't cover it.
      (lt, ":gold_cost", 1),
  (else_try),
      #Remove remaining gold from center wealth.  We iterate backwards to remove from
      #castles before towns.
      (ge, ":gold_cost", 1),
      (try_for_range_backwards, ":center_no", centers_begin, centers_end),
          (ge, ":gold_cost", 1),
          (party_slot_eq, ":center_no", slot_town_lord, ":lord_no"),
          (party_get_slot, ":treasure", ":center_no", slot_town_wealth),
          (ge, ":treasure", 1),
          (try_begin),
              (ge, ":treasure", ":gold_cost"),
              (val_sub, ":treasure", ":gold_cost"),
              (assign, ":gold_cost", 0),
          (else_try),
              (val_sub, ":gold_cost", ":treasure"),
              (assign, ":treasure", 0),
          (try_end),
          (party_set_slot, ":center_no", slot_town_wealth, ":treasure"),
      (try_end),
      (lt, ":gold_cost", 1),
  (else_try),
      #Try to remove the gold from the hero himself
      (store_troop_gold, ":treasure", ":lord_no"),
      (gt, ":treasure", 0),
      (try_begin),
          (ge, ":treasure", ":gold_cost"),
          (troop_remove_gold, ":lord_no", ":gold_cost"),
          (assign, ":gold_cost", 0),
      (else_try),
          (troop_remove_gold, ":lord_no", ":treasure"), #Floris - bugfix for Diplomacy, was missing lord argument
          (val_sub, ":gold_cost", ":treasure"),
      (try_end),
  (try_end),

 ]),
 
 
# script_trade_with_travelling_merchant
# Input: arg1 = begin or end; arg2 = trading penalty state
# Output: none
("trade_with_travelling_merchant", 
 [
  (store_script_param_1, ":state"),
  (assign, ":merchant_troop", "$g_talk_troop"),
  
    (try_begin),
      (eq, ":state", 1),        
      (call_script, "script_copy_inventory", ":merchant_troop", "trp_temp_troop"),

      (call_script, "script_merchant_inventory_from_party_slot", ":merchant_troop", "$g_encountered_party"), #Give merchant trade goods
      (store_troop_gold, ":gold", ":merchant_troop"),
      (troop_remove_gold, ":merchant_troop", ":gold"),        
      (party_get_slot, ":wealth", "$g_encountered_party", slot_town_wealth),
      #(assign, reg0, ":wealth"), #DEBUG
      #(display_message, "@Has {reg0} gold"), #DEBUG
      (troop_add_gold, ":merchant_troop", ":wealth"),
      
      (try_for_range, ":i", ek_item_0, ek_food), #Double check merchant's gear is gone
          (agent_get_item_slot, ":item", "$g_talk_agent", ":i"),
          (gt, ":item", 0),
          (troop_remove_item, "$g_talk_troop", ":item"),
      (try_end),
      
      (store_script_param_2, reg60), #Forced trading penalty
      (change_screen_trade),        
  (else_try),
      (eq, ":state", 2),
      (call_script, "script_merchant_inventory_to_party_slot", ":merchant_troop", "$g_encountered_party"), #Store trade goods
       
      (party_get_slot, ":wealth", "$g_encountered_party", slot_town_wealth),
      (store_troop_gold, ":gold", ":merchant_troop"),
      (party_set_slot, "$g_encountered_party", slot_town_wealth, ":gold"), 
      (troop_remove_gold, ":merchant_troop", ":gold"),    
      (try_begin),
          (lt, reg60, 4), #Not forced to trade
          (troop_slot_ge, "trp_player", slot_troop_renown, 200), #Player is memorable enough to matter
          (val_sub, ":wealth", ":gold"),
          (val_abs, ":wealth"),
          (val_div, ":wealth", 100),
          (gt, ":wealth", 0),
          (store_random_in_range, ":relation_change", 0, 3),
          (gt, ":relation_change", 0),
          (val_mul, ":relation_change", ":wealth"),
          (call_script, "script_change_player_relation_with_center", "$g_encountered_party", ":relation_change"),
      (try_end),        
      
      (call_script, "script_copy_inventory", "trp_temp_troop", ":merchant_troop"),    
      (assign, reg60, 0), #Reset forced trading penalty
  (try_end),   
 ]), 
## Floris - Trade with Merchant Caravans 



# script_merchant_inventory_from_party_slot
# Input: arg1 = merchant_troop_id, arg2 = party_no
# Output: none
("merchant_inventory_from_party_slot",
 [
  (store_script_param_1, ":merchant_troop"),
  (store_script_param_2, ":party_no"),
  
  (troop_clear_inventory, ":merchant_troop"),
  
    (party_get_slot, ":num_goods", ":party_no", slot_town_trade_good_productions_begin),
  (val_add, ":num_goods", 1),
  (troop_ensure_inventory_space, ":merchant_troop", ":num_goods"),
  (try_for_range, ":i", 1, ":num_goods"),
      (store_add, ":slot", slot_town_trade_good_productions_begin, ":i"),
      (party_slot_ge, ":party_no", ":slot", 1),
      (party_get_slot, ":item", ":party_no", ":slot"),
      #(str_store_item_name, s0, ":item"), #DEBUG
      #(assign, reg0, ":slot"), #DEBUG
      #(display_message, "@Party Carries {s0} in slot {reg0}"), #DEBUG
      (troop_add_item, ":merchant_troop", ":item"),
      (party_set_slot, ":party_no", ":slot", 0),
  (try_end), #Slot Loop
  (troop_sort_inventory, ":merchant_troop"),
 ]),
 
# script_refresh_travelling_merchant_inventory
# Input: arg1 = merchant_party_no
# Output: none
("refresh_travelling_merchant_inventory",
  [
    (store_script_param_1, ":party_no"),
    (assign, ":profit", reg1), #From do_merchant_town_trade (this is the value that tariffs are taken from)
    #(display_message, "@Profit {reg1}"), #DEBUG      
    (party_get_slot, ":town_no", ":party_no", slot_party_last_traded_center),
    (assign, ":merchant_troop", "trp_temp_troop"),
    
    (val_div, ":profit", 2),
    (party_get_slot, ":num_goods", ":party_no", slot_town_trade_good_productions_begin),
    (val_mul, ":profit", ":num_goods"),
    (val_div, ":profit", num_merchandise_goods / 3), #Scale profit based on number of goods carried, normalized
    (call_script, "script_merchant_inventory_from_party_slot", ":merchant_troop", ":party_no"),
    (troop_clear_inventory, ":merchant_troop"), #Clear's party's previous inventory
    
    (reset_item_probabilities,0),
    (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
    (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
      (call_script, "script_center_get_production", ":town_no", ":cur_goods"),
      (assign, ":cur_probability", reg0),
      (call_script, "script_center_get_consumption", ":town_no", ":cur_goods"),
      (val_add, ":cur_probability", reg0),
    
      (try_begin),
          (this_or_next|eq, ":cur_goods", "itm_cattle_meat"),
          (this_or_next|eq, ":cur_goods", "itm_chicken"),
          (eq, ":cur_goods", "itm_pork"),
          (assign, ":cur_probability", 0),
      (try_end),
    
      (val_mul, ":cur_probability", 3),
    
      (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
      (party_get_slot, ":cur_price", ":party_no", ":cur_price_slot"),
      (val_mul, ":cur_probability", average_price_factor),
      (val_div, ":cur_probability", ":cur_price"),
      (val_mul, ":cur_probability", average_price_factor),
      (val_div, ":cur_probability", ":cur_price"),
      (val_mul, ":cur_probability", average_price_factor),
      (val_div, ":cur_probability", ":cur_price"),
       (val_mul, ":cur_probability", average_price_factor),
       (val_div, ":cur_probability", ":cur_price"),
      (set_item_probability_in_merchandise, ":cur_goods", ":cur_probability"),
    (try_end),

    (store_random_in_range, ":number_of_goods", num_merchandise_goods / 4, num_merchandise_goods / 2),
    (try_begin),
      (party_get_slot, ":party_prosperity", ":party_no", slot_town_prosperity),
      (store_div, ":prosperity_mod", ":party_prosperity", 10), #up to 5
      (val_add, ":number_of_goods", ":prosperity_mod"),
    (try_end),

    (troop_add_merchandise, ":merchant_troop", itp_type_goods, ":number_of_goods"),
    (troop_ensure_inventory_space, ":merchant_troop", ":number_of_goods"),
    (troop_sort_inventory, ":merchant_troop"),

    (call_script, "script_merchant_inventory_to_party_slot", ":merchant_troop", ":party_no"),

    (party_get_slot, ":wealth", ":party_no", slot_town_wealth),
    ## Floris - Companion Caravans
    # (try_begin),
      # (party_stack_get_troop_id, ":leader", ":party_no", 0),
      # (is_between, ":leader", companions_begin, companions_end),
      # (party_slot_eq, ":party_no", 1, -1), #Hire Initial
      # (val_sub, ":wealth", 1500),
      # (party_set_slot, ":party_no", 1, 0),
      # (store_random_in_range, ":rand", 10, 30),
      # (party_add_members, ":party_no", "trp_mercenary_n_page", ":rand"),
    # (try_end),
    ## Floris - Companion Caravans
    (val_add, ":wealth", ":profit"),
    (store_sub, ":wealth_to_prosperity", ":wealth", 1000),
    (try_begin),
      (gt, ":wealth_to_prosperity", 1000),
      (store_mod, ":remainder", ":wealth_to_prosperity", 500),
      (val_sub, ":wealth", ":wealth_to_prosperity"),
      (val_add, ":wealth", ":remainder"),
      (val_div, ":wealth_to_prosperity", 500),
      (try_begin),
          # (store_party_size_wo_prisoners, ":size", ":party_no"),
          # (lt, ":size", 60),
          # (val_div, ":size", 10),
          # (store_random_in_range, ":rand", 0, 10),
          # (val_sub, ":rand", ":size"),
          # (ge, ":rand", 6),
          ##Floris MTT begin
          # (try_begin),
              # (eq, "$troop_trees", troop_trees_0),
              # (party_add_members, ":party_no", "trp_mercenary_n_page", ":wealth_to_prosperity"), #At least 2
          # (else_try),
              # (eq, "$troop_trees", troop_trees_1),
              # (party_add_members, ":party_no", "trp_mercenary_r_page", ":wealth_to_prosperity"), #At least 2
          # (else_try),
              # (eq, "$troop_trees", troop_trees_2),
              # (party_add_members, ":party_no", "trp_mercenary_e_page", ":wealth_to_prosperity"), #At least 2
          # (try_end),
          #(display_message, "@{reg0} guards added."), #DEBUG
      # (else_try),
          (val_add, ":party_prosperity", ":wealth_to_prosperity"),
          (val_clamp, ":party_prosperity", 0, 101),
      (try_end),
    (try_end),
    (party_set_slot, ":party_no", slot_town_wealth, ":wealth"),
    (party_set_slot, ":party_no", slot_town_prosperity, ":party_prosperity"),  
]), 


#script_dplmc_center_point_calc
# INPUT: arg1 = faction_id
#        arg2 = troop_1
#        arg2 = troop_2
#        arg3 = town_point_value (see explanation below)
# OUTPUT:
#        reg0 = total renown / total faction points (or 0 if no centers held)
#        reg1 = troop_1 total (not divided)
#        reg2 = troop_2 total (not divided)
#        reg3 = faction average lord renown (or 0 if no lords)
#In various places the game tallies center points differently.  The values of
#villages/castles/fiefs, respectively, in some places are 1/2/2, in other
#places are 1/2/3, and in others are 1/3/4.
#Specifying the town point value determines which scheme will be used to
#determine ceter points:
#        arg3 = 2 gives 1/2/2
#        arg3 = 3 gives 1/2/3
#        arg3 = 4 gives 1/2/4
#If the specified town_point_value is not 2,3, or 4, the script is allowed to
#clamp the value or substitute a default.
("dplmc_center_point_calc",
  [
  (store_script_param, ":faction_id", 1),
  (store_script_param, ":troop_1", 2),
  (store_script_param, ":troop_2", 3),
  (store_script_param, ":town_point_value", 4),
  
  (val_clamp, ":town_point_value", 2, 5),
  
  #The outputs
  (assign, ":faction_score", 0),
  (assign, ":troop_1_score", 0),
  (assign, ":troop_2_score", 0),
  #(assign, ":average_renown", 0),
  
  #Intermediate values we use for computing outputs
  (assign, ":total_renown", 0),
  (assign, ":num_lords", 0),
  
  #Handle the player first
  #(assign, ":player_in_faction", 0),
  (assign, ":faction_alias", ":faction_id"),
  (try_begin),
      (this_or_next|eq, ":faction_id", "$players_kingdom"),
      (eq, ":faction_id", "fac_player_supporters_faction"),
      (val_add, ":num_lords", 1),
      (troop_get_slot, ":total_renown", "trp_player", slot_troop_renown),
      #(assign, ":player_in_faction", 1),
      (assign, ":faction_alias", "fac_player_supporters_faction"),
      (eq, ":faction_id", "fac_player_supporters_faction"),
      (assign, ":faction_alias", "$players_kingdom"),
  (try_end),
  
  #Get lords in faction
  (try_for_range, ":troop_no", heroes_begin, heroes_end),
      (troop_slot_eq, ":troop_no", slot_troop_is_alive, 1),  ## is alive/active
      (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
      (neq, ":troop_no", "trp_kingdom_heroes_including_player_begin"),
      (store_troop_faction, ":faction_no", ":troop_no"),
      (this_or_next|eq, ":faction_no", ":faction_id"),
          (eq, ":faction_no", ":faction_alias"),
      
      (val_add, ":num_lords", 1),
      (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
      (val_max, ":renown", 0),
      (val_add, ":total_renown", ":renown"),
  (try_end),
  
  #Get stats for centers
  (try_for_parties, ":center_no"),
      (assign, ":points", 0),
      (try_begin),
          #Towns are 2, 3, or 4 points
          (this_or_next|is_between, ":center_no", towns_begin, towns_end),
          (party_slot_eq, ":center_no", slot_party_type, spt_town),
          (assign, ":points", ":town_point_value"),
      (else_try),
          #Castles are always 2 points
          (this_or_next|is_between, ":center_no", castles_begin, castles_end),
          (party_slot_eq, ":center_no", slot_party_type, spt_castle),
          (assign, ":points", 2),#castles are always 2
      (else_try),
          #Villages are always 1 point
          (this_or_next|is_between, ":center_no", villages_begin, villages_end),
          (party_slot_eq, ":center_no", slot_party_type, spt_village),
      (try_end),
      
      #Don't process parties that aren't centers.
      (ge, ":points", 1),
  
      #NB: We don't know for sure that troop_1 and troop_2 aren't the
      #same value, and we don't even necessarily know that they're part
      #of the specified faction.
      (try_begin),
          (party_slot_eq, ":center_no", slot_town_lord, ":troop_1"),
          (val_add, ":troop_1_score", ":points"),
      (try_end),
      
      (try_begin),
          (party_slot_eq, ":center_no", slot_town_lord, ":troop_2"),
          (val_add, ":troop_2_score", ":points"),
      (try_end),
      
      (store_faction_of_party, ":faction_no", ":center_no"),
      (this_or_next|eq, ":faction_no", ":faction_id"),
          (eq, ":faction_no", ":faction_alias"),
      (val_add, ":faction_score", ":points"),
  (try_end),
  
  # OUTPUT:
  #        reg0 = faction renown / faction points (or 0 if faction has no centers)
  #        reg1 = troop_1 total (not divided)
  #        reg2 = troop_2 total (not divided)
  #        reg3 = faction average lord renown (or 0 if no lords)
  (assign, reg0, 0),
  (try_begin),
      (neq, ":faction_score", 0),
      (store_div, reg0, ":total_renown", ":faction_score"),
  (try_end),
  (assign, reg1, ":troop_1_score"),
  (assign, reg2, ":troop_2_score"),
  (assign, reg3, 0),
  (try_begin),
      (neq, ":num_lords", 0),
      (store_div, reg0, ":total_renown", ":num_lords"),
  (try_end),
  ]),
  
#script_dplmc_get_troop_morality_value
# INPUT: arg1 = troop_id, arg2 = morality type
# OUTPUT: reg0 has morality value, or 0 if inapplicable
("dplmc_get_troop_morality_value",
[
 (store_script_param, ":troop_id", 1),
 (store_script_param, ":morality_type", 2),
 
 (assign, reg0, 0),
 (try_begin),
   (neg|is_between, ":troop_id", companions_begin, companions_end),#<-- result is 0 for non-companions
 (else_try),
   (troop_slot_eq, ":troop_id", slot_troop_morality_type, ":morality_type"),
   (troop_get_slot, reg0, ":troop_id", slot_troop_morality_value),
 (else_try),
   (troop_slot_eq, ":troop_id", slot_troop_2ary_morality_type, ":morality_type"),
   (troop_get_slot, reg0, ":troop_id", slot_troop_2ary_morality_value),
 (try_end),
]),

## Floris - Trade with Merchant Caravans  
# script_merchant_inventory_to_party_slot
# Input: arg1 = merchant_troop_id, arg2 = party_no
# Output: none
("merchant_inventory_to_party_slot",
 [
  (store_script_param_1, ":merchant_troop"),
  (store_script_param_2, ":party_no"),
  
  (assign, ":num_goods", 0),
  (troop_get_inventory_capacity, ":cap", ":merchant_troop"),
  (try_for_range, ":i", 0, ":cap"),
      (troop_get_inventory_slot, ":item", ":merchant_troop", ":i"),
      (gt, ":item", 0),
      (item_get_type, ":type", ":item"),
      (eq, ":type", itp_type_goods),
      (val_add, ":num_goods", 1),
      (store_add, ":end", ":cap", 1),
      (try_for_range, ":n", 1, ":end"),
          (store_add, ":slot", slot_town_trade_good_productions_begin, ":n"),
          (party_slot_eq, ":party_no", ":slot", 0),
          (party_set_slot, ":party_no", ":slot", ":item"),
          #(str_store_item_name, s0, ":item"), #DEBUG
          #(assign, reg0, ":slot"), #DEBUG
          #(display_message, "@Party stores {s0} in slot {reg0}"), #DEBUG
          (assign, ":end",0),        
      (try_end), #Slot Loop
  (try_end), #Inventory Loop
  (party_set_slot, ":party_no", slot_town_trade_good_productions_begin, ":num_goods"),
  (troop_clear_inventory, ":merchant_troop"),
 ]),
############################################################################



########################### NEW v2.1 - set troop titles according to culture/language
# script_troop_set_title_according_to_culture_language
# Input: arg1 = troop_no, arg2 = culture_no
("troop_set_title_according_to_culture_language",
  [
    (store_script_param, ":troop_no", 1),
    (store_script_param, ":culture_no", 2),
    (store_script_param, ":language_no", 3),
    
    (str_clear, s0),
    (str_clear, s1),
    (str_clear, s2),
    (str_clear, s5),
    # (gt, ":troop_no", 0),
##############################
    (try_begin),
      (is_between, ":culture_no", cultures_begin, cultures_end),
      (neq, ":culture_no", "fac_culture_western"),
      (str_store_troop_name_plural, s0, ":troop_no"),
      # (troop_get_type, ":gender", ":troop_no"),
      (store_sub, ":title_index", ":culture_no", cultures_begin),
      (try_begin),
        # (eq, ":gender", 0), #male
        (val_add, ":title_index", culture_titles_male_begin),
      # (else_try),
        # (val_add, ":title_index", culture_titles_female_begin),
      (try_end),
##############################
    (else_try), ### for cultures which have multiple languages
      (is_between, ":language_no", faction_languages_begin, faction_languages_end),
      (eq, ":culture_no", "fac_culture_western"),
      (str_store_troop_name_plural, s0, ":troop_no"),
      # (troop_get_type, ":gender", ":troop_no"),
      (store_sub, ":title_index", ":language_no", faction_languages_begin),
      (try_begin),
        # (eq, ":gender", 0), #male
        (val_add, ":title_index", language_titles_male_begin),
      # (else_try),
        # (val_add, ":title_index", language_titles_female_begin),
      (try_end),
    (try_end),
##############################
    (str_store_string, s1, ":title_index"),
    (troop_set_name, ":troop_no", s1),
    (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
    # (gt, ":troop_party", 0),  
    (gt, ":troop_party", -1),  ########## NEW v3.3 - bugfix
    (str_store_troop_name, s5, ":troop_no"),
    (party_set_name, ":troop_party", "str_s5_s_party"),
]),
############################################################################
    
    

########################### NEW v2.1 - set king titles according to culture/language
# script_troop_set_title_according_to_culture_language_king
# Input: arg1 = troop_no, arg2 = culture_no
("troop_set_title_according_to_culture_language_king",
  [
    (store_script_param, ":troop_no", 1),
    (store_script_param, ":culture_no", 2),
    (store_script_param, ":language_no", 3),
    
    (str_clear, s0),
    (str_clear, s1),
    (str_clear, s2),
    (str_clear, s3),
    (str_clear, s5),
    # (store_faction_of_troop, ":faction_no", ":troop_no"),
    # (str_store_faction_name, s2, ":faction_no"),
    
    # (str_store_faction_name, s3, ":culture_no"),
    # (display_message, "@Current culture is: {s3}"),
    # (gt, ":troop_no", 0),
    ############# NEW v3.3
    # (troop_slot_eq, "trp_dummy_5_king", 0, 1),
    # (str_store_troop_name, s0, "trp_dummy_5_king"),
    # (str_store_troop_name_plural, s2, ":troop_no"),
    # (str_store_string, s1, "str_s0_s1"),
    # (troop_set_name, ":script_param_1", s1),
    #############
##############################
    (try_begin),
      (is_between, ":culture_no", cultures_begin, cultures_end),
      (neq, ":culture_no", "fac_culture_western"),
      (str_store_troop_name_plural, s0, ":troop_no"),
      (troop_get_type, ":gender", ":troop_no"),
      (store_sub, ":title_index", ":culture_no", cultures_begin),
      (try_begin),
        (eq, ":gender", 0), #male
        (val_add, ":title_index", culture_titles_king_male_begin),
      (else_try),
        (val_add, ":title_index", culture_titles_queen_female_begin),
      (try_end),
##############################
    (else_try), ### for cultures which have multiple languages
      (is_between, ":language_no", faction_languages_begin, faction_languages_end),
      (eq, ":culture_no", "fac_culture_western"),
      (str_store_troop_name_plural, s0, ":troop_no"),
      (troop_get_type, ":gender", ":troop_no"),
      (store_sub, ":title_index", ":language_no", faction_languages_begin),
      (try_begin),
        (eq, ":gender", 0), #male
        (val_add, ":title_index", language_titles_king_male_begin),
      (else_try),
        (val_add, ":title_index", language_titles_queen_female_begin),
      (try_end),
    (try_end),
##############################
    (str_store_string, s1, ":title_index"),
    (troop_set_name, ":troop_no", s1),
    (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
    # (gt, ":troop_party", 0),  
    (gt, ":troop_party", -1),  ########## NEW v3.3 - bugfix
    (str_store_troop_name_plural, s5, ":troop_no"),
    (party_set_name, ":troop_party", "str_s5_s_party"),
]),
############################################################################
    

############################################################################
  ("sort_party_by_troop_level",
  [
    (store_script_param, ":party_no", 1),
    (store_script_param, ":var1", 2),
    (party_get_num_companion_stacks, ":var2", ":party_no"),
    (try_begin),
      (party_slot_eq, ":party_no", 0, 11),
      (try_for_range, ":var3", 0, ":var2"),
        (party_stack_get_troop_id, ":var4", ":party_no", ":var3"),
        (eq, ":var4", "trp_caravan_master"),
        (party_stack_get_size, ":var5", ":party_no", ":var3"),
        (party_remove_members, ":party_no", "trp_caravan_master", ":var5"),
        (party_add_leader, ":party_no", "trp_caravan_master", ":var5"),
        (assign, ":var3", 0),
        (assign, ":var1", 1),
      (try_end),
    (try_end),
    (try_begin),
      (gt, ":var2", ":var1"),
      (assign, ":var6", ":var2"),
      (store_sub, ":var7", ":var2", ":var1"),
      (try_for_range, ":var8", 0, ":var7"),
        (assign, ":var9", -1),
        (assign, ":var10", -1),
        (try_for_range, ":var3", ":var1", ":var6"),
          (party_stack_get_troop_id, ":var4", ":party_no", ":var3"),
          (store_character_level, ":var11", ":var4"),
          (val_mul, ":var11", 10),
          (try_begin),
            (troop_is_guarantee_horse, ":var4"),
            (troop_is_guarantee_ranged, ":var4"),
            (val_add, ":var11", 2),
          (else_try),
            (troop_is_guarantee_horse, ":var4"),
            (val_add, ":var11", 3),
          (else_try),
            (troop_is_guarantee_ranged, ":var4"),
            (val_add, ":var11", 0),
          (else_try),
            (val_add, ":var11", 1),
          (try_end),
          (gt, ":var11", ":var10"),
          (assign, ":var10", ":var11"),
          (assign, ":var9", ":var3"),
        (try_end),
        (try_begin),
          (gt, ":var10", -1),
          (party_stack_get_troop_id, ":var12", ":party_no", ":var9"),
          (party_stack_get_size, ":var5", ":party_no", ":var9"),
          (party_stack_get_num_wounded, ":var13", ":party_no", ":var9"),
          (party_remove_members, ":party_no", ":var12", ":var5"),
          (party_add_members, ":party_no", ":var12", ":var5"),
          (party_wound_members, ":party_no", ":var12", ":var13"),
          (val_sub, ":var6", 1),
        (try_end),
      (try_end),
    (try_end),
  ]),

  
  ("sort_prisoners_by_troop_level",
  [
    (store_script_param, ":party_no", 1),
    (store_script_param, ":var1", 2),
    (party_get_num_prisoner_stacks, ":var2", ":party_no"),
    (try_begin),
      (gt, ":var2", ":var1"),
      (assign, ":var3", ":var2"),
      (store_sub, ":var4", ":var2", ":var1"),
      (try_for_range_backwards, ":var5", 0, ":var4"),
        (assign, ":var6", -1),
        (assign, ":var7", -1),
        (try_for_range, ":var8", ":var1", ":var3"),
          (party_prisoner_stack_get_troop_id, ":var9", ":party_no", ":var8"),
          (store_character_level, ":var10", ":var9"),
          (gt, ":var10", ":var7"),
          (assign, ":var7", ":var10"),
          (assign, ":var6", ":var8"),
        (try_end),
        (try_begin),
          (gt, ":var7", -1),
          (party_prisoner_stack_get_troop_id, ":var11", ":party_no", ":var6"),
          (party_prisoner_stack_get_size, ":var12", ":party_no", ":var6"),
          (party_remove_prisoners, ":party_no", ":var11", ":var12"),
          (party_add_prisoners, ":party_no", ":var11", ":var12"),
          (val_sub, ":var3", 1),
        (try_end),
      (try_end),
    (try_end),
  ]),
############################################################################




########################### NEW v1.0 - Improved Siege Tower mechanics - https://forums.taleworlds.com/index.php/topic,289532.0.html
# script_cf_siege_move_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_move_belfry",
   [(neq, "$last_belfry_object_pos", slot_scene_belfry_props_begin),
    (entry_point_get_position,pos1,50),
    (entry_point_get_position,pos4,55),
    (get_distance_between_positions, ":total_distance", pos4, pos1),
    (store_current_scene, ":cur_scene"),
    (scene_get_slot, ":first_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
    (prop_instance_get_position, pos2, ":first_belfry_object"),
    (entry_point_get_position,pos1,"$cur_belfry_pos"),
    (position_transform_position_to_parent, pos3, pos1, pos_belfry_begin),
    (position_transform_position_to_parent, pos5, pos4, pos_belfry_begin),
    (get_distance_between_positions, ":cur_distance", pos2, pos3),
    (get_distance_between_positions, ":distance_left", pos2, pos5),
    (try_begin),
      (le, ":cur_distance", 10),
      (val_add, "$cur_belfry_pos", 1),
      (entry_point_get_position,pos1,"$cur_belfry_pos"),
      (position_transform_position_to_parent, pos3, pos1, pos_belfry_begin),
      (get_distance_between_positions, ":cur_distance", pos2, pos3),
    (try_end),
    (neq, "$cur_belfry_pos", 50),

    (assign, ":base_speed", 20),
    (store_div, ":slow_range", ":total_distance", 60),
    (store_sub, ":distance_moved", ":total_distance", ":distance_left"),

    (try_begin),
      (lt, ":distance_moved", ":slow_range"),
      (store_mul, ":base_speed", ":distance_moved", -60),
      (val_div, ":base_speed", ":slow_range"),
      (val_add, ":base_speed", 80),
    (else_try),
      (lt, ":distance_left", ":slow_range"),
      (store_mul, ":base_speed", ":distance_left", -60),
      (val_div, ":base_speed", ":slow_range"),
      (val_add, ":base_speed", 80),
    (try_end),
    (store_mul, ":belfry_speed", ":cur_distance", ":base_speed"),
    (try_begin),
      (eq, "$belfry_num_men_pushing", 0),
      (assign, ":belfry_speed", 1000000),
    (else_try),
      (val_mul, ":belfry_speed", 15), #assuming an average strength per man
      (val_div, ":belfry_speed", "$belfry_num_men_pushing"),
    (try_end),

    (try_begin),
      (le, "$cur_belfry_pos", 55),
      (init_position, pos3),
      (position_rotate_x, pos3, ":distance_moved"),
      (scene_get_slot, ":base_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
      (prop_instance_get_position, pos4, ":base_belfry_object"),
      (entry_point_get_position,pos1,"$cur_belfry_pos"),
      (try_for_range, ":i_belfry_object_pos", slot_scene_belfry_props_begin, "$last_belfry_object_pos"),
        (scene_get_slot, ":cur_belfry_object", ":cur_scene", ":i_belfry_object_pos"),
        (try_begin),
          (ge, ":i_belfry_object_pos", "$belfry_rotating_objects_begin"),
          (prop_instance_get_starting_position, pos5, ":base_belfry_object"),
          (prop_instance_get_starting_position, pos6, ":cur_belfry_object"),
          (position_transform_position_to_local, pos7, pos5, pos6),
          (position_transform_position_to_parent, pos5, pos4, pos7),
          (position_transform_position_to_parent, pos6, pos5, pos3),
          (prop_instance_set_position, ":cur_belfry_object", pos6),
        (else_try),
          (assign, ":pos_no", pos_belfry_begin),
          (val_add, ":pos_no", ":i_belfry_object_pos"),
          (val_sub, ":pos_no", slot_scene_belfry_props_begin),
          (position_transform_position_to_parent, pos2, pos1, ":pos_no"),
          (prop_instance_animate_to_position, ":cur_belfry_object", pos2, ":belfry_speed"),
        (try_end),
      (try_end),
    (try_end),
    (gt, "$cur_belfry_pos", 55),
    (assign, "$belfry_positioned", 1),
  ]),

  # script_cf_siege_rotate_belfry_platform
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_rotate_belfry_platform",
   [(eq, "$belfry_positioned", 1),
    (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_a", 0),
    (prop_instance_get_position, pos1, ":belfry_object"),
    (position_rotate_x, pos1, -90),
    (prop_instance_animate_to_position, ":belfry_object", pos1, 400),
    (assign, "$belfry_positioned", 2),
  ]),

  # script_siege_rotate_belfry_platform
  # Input: none
  # Output: none ($belfry_positioned assigned)
  ("siege_rot_belfry_platform",
   [
    (try_begin),
    (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_a", 0),
    (prop_instance_get_position, pos1, ":belfry_object"),
    (position_rotate_x, pos1, -90),
    (prop_instance_animate_to_position, ":belfry_object", pos1, 400),
    (assign, "$belfry_positioned", 3),
    (try_end),
  ]),


  # script_cf_siege_assign_men_to_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_assign_men_to_belfry",
   [
    (neq, "$last_belfry_object_pos", slot_scene_belfry_props_begin),
    (assign, ":end_trigger", 0),
    (try_begin),
      (lt, "$belfry_positioned", 3),
      (get_player_agent_no, ":player_agent"),
      (store_current_scene, ":cur_scene"),
      (scene_get_slot, ":first_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
      (prop_instance_get_position, pos2, ":first_belfry_object"),
      (assign, ":slot_1_positioned", 0),
      (assign, ":slot_2_positioned", 0),
      (assign, ":slot_3_positioned", 0),
      (assign, ":slot_4_positioned", 0),
      (assign, ":slot_5_positioned", 0),
      (assign, ":slot_6_positioned", 0),
      (assign, "$belfry_num_slots_positioned", 0),
      #this has been modified to allow the player to help push
     
      (try_begin), #the player can try to help
        (get_player_agent_no, ":player_agent"),
        (agent_is_alive, ":player_agent"), #while still alive
        #can't push from inside/on top - makes no physical sense
        (assign, ":belfry_pos", "$last_belfry_object_pos"),
        (try_for_range, ":i_belfry_object_pos", slot_scene_belfry_props_begin, ":belfry_pos"),
          (scene_get_slot, ":belfry_object", ":cur_scene", ":i_belfry_object_pos"),
          (scene_prop_has_agent_on_it, ":belfry_object", ":player_agent"),
          (assign, ":belfry_pos", -1),
        (try_end), #if the player is stepping on top, loop is broken
        (eq, ":belfry_pos", "$last_belfry_object_pos"),
        #although bots tend to get stuck and exert force, ignoring this physical impossiblity
        (agent_get_team, ":agent_team", ":player_agent"),
        (this_or_next|eq, ":agent_team", "$attacker_team"),
        (eq, ":agent_team", "$attacker_team_2"),
        (init_position, pos3),
        (position_move_y, pos3, -600),
        (position_transform_position_to_parent, pos5, pos2, pos3),
        (agent_get_position, pos3, ":player_agent"),
        (get_distance_between_positions, ":target_distance", pos5, pos3),
        (lt, ":target_distance", 600), #same as other distance
        (agent_get_troop_id, ":player_troop", ":player_agent"),
        (store_attribute_level, "$belfry_num_men_pushing", ":player_troop", ca_strength),
        # (assign, reg1, ":target_distance"),
        # (display_message, "@player is pushing from {reg1} cm away"),
      (else_try),
        (assign, "$belfry_num_men_pushing", 0),
      (try_end),
      #this is a maintenance loop - it will be triggered most often and repositions pushing agents
      (try_for_agents, ":cur_agent"),
        (agent_is_active, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (try_begin),
          (agent_get_slot, ":x_pos", ":cur_agent", slot_agent_target_x_pos),
          (try_begin), #remove wounded agents from the belfry pusher list
            (this_or_next|eq, ":x_pos", 600),
            (eq, ":x_pos", -600),
            (store_agent_hit_points, ":health", ":cur_agent", 0),
            (le, ":health", 33), #wounded
            (agent_clear_scripted_mode, ":cur_agent"),
           
            (agent_force_rethink, ":cur_agent"),
            (agent_get_entry_no, ":entry", ":cur_agent"),
            (entry_point_get_position, pos1, ":entry"), #spawn point
            # (str_store_agent_name, s1, ":cur_agent"),
            # (assign, reg1, ":entry"),
            # (display_message, "@{s1} to be replaced at {reg1}", 0xff0000),
            #do not bother re-raising speed limit - pretend they are limping
            (agent_set_scripted_destination, ":cur_agent", pos1),
            (agent_set_slot, ":cur_agent", slot_agent_target_x_pos, 0),
            (agent_set_slot, ":cur_agent", slot_agent_target_y_pos, 0),
            (assign, ":x_pos", 0),
          (try_end),
          (neq, ":x_pos", 0), #do some level-sorting here as opposed to agent id selector?
          (agent_get_slot, ":y_pos", ":cur_agent", slot_agent_target_y_pos),
          (try_begin),
            (eq, ":x_pos", -600),
            (try_begin),
              (eq, ":y_pos", 0),
              (val_add, ":slot_1_positioned", 1),
            (else_try),
              (eq, ":y_pos", -200),
              (val_add, ":slot_2_positioned", 1),
            (else_try),
              (val_add, ":slot_3_positioned", 1),
            (try_end),
          (else_try),
            (try_begin),
              (eq, ":y_pos", 0),
              (val_add, ":slot_4_positioned", 1),
            (else_try),
              (eq, ":y_pos", -200),
              (val_add, ":slot_5_positioned", 1),
            (else_try),
              (val_add, ":slot_6_positioned", 1),
            (try_end),
          (try_end),
          (val_add, "$belfry_num_slots_positioned", 1),
          (init_position, pos1),
          (position_move_x, pos1, ":x_pos"),
          (position_move_y, pos1, ":y_pos"),
          (init_position, pos3),
          (position_move_x, pos3, ":x_pos"),
          (position_move_y, pos3, -1000),
          (position_transform_position_to_parent, pos4, pos2, pos1),
          (position_transform_position_to_parent, pos5, pos2, pos3),
          (agent_get_position, pos6, ":cur_agent"),
          (get_distance_between_positions, ":target_distance", pos6, pos4),
          (get_distance_between_positions, ":waypoint_distance", pos6, pos5),
          (try_begin),
            (this_or_next|lt, ":target_distance", ":waypoint_distance"),
            (lt, ":waypoint_distance", 600),
            (agent_set_scripted_destination, ":cur_agent", pos4, 1),
          (else_try),
            (agent_set_scripted_destination, ":cur_agent", pos5, 1),
          (try_end),
          (try_begin),
            (le, ":target_distance", 300),
            (agent_get_troop_id, ":cur_troop", ":cur_agent"),
            (store_attribute_level, ":strength", ":cur_troop", ca_strength),
            (store_agent_hit_points, ":health", ":cur_agent", 0),
            (val_mul, ":strength", ":health"),
            (val_div, ":strength", 100),
            (val_add, "$belfry_num_men_pushing", ":strength"),
            # (str_store_agent_name, s1, ":cur_agent"),
            # (assign, reg1, ":x_pos"),
            # (assign, reg2, ":y_pos"),
            # (assign, reg3, ":health"),
            # (assign, reg4, "$belfry_num_slots_positioned"),
            # (assign, reg0, "$belfry_num_men_pushing"),
            # (display_message, "@loop {reg0}/{reg4}: {s1} pushing at {reg1},{reg2} with {reg3} health",0xffffff),
          (try_end),
        (try_end),
      (try_end),
      (try_begin), #assigns non-pushing agents?
        #2 front, 1 mid, 3 back
        (lt, "$belfry_num_slots_positioned", 12),
        (try_for_agents, ":cur_agent"),
          (lt, "$belfry_num_slots_positioned", 12),
          (agent_is_alive, ":cur_agent"),
          (agent_get_team, ":cur_agent_team", ":cur_agent"),
          (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
          (eq, "$attacker_team_2", ":cur_agent_team"),
          (neq, ":player_agent", ":cur_agent"),
          (agent_get_class, ":agent_class", ":cur_agent"),
          (try_begin), #allow archers to push
            (eq,  ":agent_class", grc_archers),
            (agent_get_ammo, ":ammo", ":cur_agent"),
            (le, ":ammo", 0),
            (assign, ":agent_class", grc_everyone),
          (try_end),
          (neq, ":agent_class", grc_archers),
          # (this_or_next|eq, ":agent_class", grc_infantry),
          # (eq, ":agent_class", grc_cavalry),
          # (agent_get_wielded_item, ":shield", ":cur_agent", 1),
          (assign, ":shield", -1),
          (try_for_range, ":slots", ek_item_0, ek_head),
            (agent_get_item_slot, ":item", ":cur_agent", ":slots"),
            (gt, ":item", 0),
            (item_get_type, ":type", ":item"),
            (eq, ":type", itp_type_shield),
            (assign, ":shield", ":item"),
          (try_end),
          #we want there to be a greater chance of tower pushers having shields in use
          (this_or_next|gt, ":shield", 0),
          (lt, "$belfry_num_slots_positioned", 6), #this is for troops without shields, ranged units without ammo as seen above, etc.
          (store_agent_hit_points, ":health", ":cur_agent", 0),
          (eq, ":health", 100), #healthy
          (agent_get_slot, ":x_pos", ":cur_agent", 1),
          (eq, ":x_pos", 0),
          (assign, ":y_pos", 0),
          #restructured - symmetry and increased quantity
          (try_begin),
            (eq, ":slot_5_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", -200),
            (val_add, ":slot_5_positioned", 1),
          (else_try),
            (eq, ":slot_2_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", -200),
            (val_add, ":slot_2_positioned", 1),
          (else_try),
            (lt, ":slot_1_positioned", 2),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", 0),
            (val_add, ":slot_1_positioned", 1),
          (else_try),
            (lt, ":slot_4_positioned", 2),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", 0),
            (val_add, ":slot_4_positioned", 1),
          (else_try),
            (lt, ":slot_3_positioned", 3),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", -400),
            (val_add, ":slot_3_positioned", 1),
          (else_try),
            (lt, ":slot_6_positioned", 3),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", -400),
            (val_add, ":slot_6_positioned", 1),
          (try_end),
          (val_add, "$belfry_num_slots_positioned", 1),
          (agent_set_slot, ":cur_agent", slot_agent_target_x_pos, ":x_pos"),
          (agent_set_slot, ":cur_agent", slot_agent_target_y_pos, ":y_pos"),
          # (str_store_agent_name, s1, ":cur_agent"),
          # (try_begin),
            # (gt, ":shield", 0),
            # (str_store_item_name, s2, ":shield"),
          # (else_try),
            # (str_store_string, s2, "@beefy arms"),
          # (try_end),
          # (assign, reg1, ":x_pos"),
          # (assign, reg2, ":y_pos"),
          # (assign, reg0, "$belfry_num_slots_positioned"),
          # (display_message, "@middle loop {reg0}: {s1} pushing wiith {s2} at {reg1},{reg2}", 0xffff00),
          #this really doesn't seem to work
          (agent_ai_set_always_attack_in_melee, ":cur_agent", 1),
          (try_begin),
            (gt, ":shield", 0),
            (agent_get_wielded_item, ":item", ":cur_agent", 1),
            (neq, ":shield", ":item"),
            (agent_set_wielded_item, ":cur_agent", ":shield"),
          (try_end),
          (agent_set_speed_limit, ":cur_agent", 3),
        (try_end),
      (try_end),
    (else_try),
      (assign, ":end_trigger", 1),
    (try_end),
    (eq, ":end_trigger", 1),
  ]),
############################################################################


######################### NEW v1.0 - Universal Inventory Sorting Script - https://forums.taleworlds.com/index.php/topic,89072.0.html
#script_rearrange_inventory
#input: arg1 - troop_id, arg2 - sorting order; 0 - simple (compact inventory, removing spaces), 1 - by cost, 2 - by type.      
#output : none
 ("rearrange_inventory",
  [(store_script_param, ":troop_id", 1),
   (store_script_param, ":type", 2),
   (troop_get_inventory_capacity, ":inv_cap", ":troop_id"),
   (try_begin),
     (eq, ":type", 0),
     (try_for_range, ":slot_no", 11, ":inv_cap"),
        (troop_get_inventory_slot, ":item", ":troop_id", ":slot_no"),
        (gt, ":item", 0),
        (troop_get_inventory_slot_modifier, ":mod", ":troop_id", ":slot_no"),
        (troop_inventory_slot_get_item_amount, ":amount", ":troop_id", ":slot_no"),
        (assign, ":target_slot", -1),
        (try_for_range_backwards, ":to_slot", 10, ":slot_no"),
          (troop_get_inventory_slot, ":is_full", ":troop_id", ":to_slot"),
          (le, ":is_full", 0),
          (assign, ":target_slot", ":to_slot"),
        (try_end), 
        (neq, ":target_slot", -1),
        (troop_set_inventory_slot, ":troop_id", ":target_slot", ":item"),
        (troop_set_inventory_slot_modifier, ":troop_id", ":target_slot", ":mod"),
        (try_begin),
         (gt, ":amount", 0),
         (troop_inventory_slot_set_item_amount, ":troop_id", ":target_slot", ":amount"),
        (try_end),
        (troop_set_inventory_slot, ":troop_id", ":slot_no", -1),
        (troop_inventory_slot_set_item_amount, ":troop_id", ":slot_no", 0),
     (try_end),
    (else_try),
       (eq, ":type", 1),
       (troop_sort_inventory, ":troop_id"),
    (else_try),       
       (eq, ":type", 2),
       (assign, ":temp_slot", 0),
#define sorting order
       (troop_set_slot, "trp_temp_array_a", 0, itp_type_goods),
       (troop_set_slot, "trp_temp_array_a", 1, itp_type_book),
       (troop_set_slot, "trp_temp_array_a", 2, itp_type_horse),
       (troop_set_slot, "trp_temp_array_a", 3, itp_type_head_armor),
       (troop_set_slot, "trp_temp_array_a", 4, itp_type_body_armor),
       (troop_set_slot, "trp_temp_array_a", 5, itp_type_foot_armor),
       (troop_set_slot, "trp_temp_array_a", 6, itp_type_hand_armor),
       (troop_set_slot, "trp_temp_array_a", 7, itp_type_one_handed_wpn),
       (troop_set_slot, "trp_temp_array_a", 8, itp_type_two_handed_wpn),
       (troop_set_slot, "trp_temp_array_a", 9, itp_type_polearm),
       (troop_set_slot, "trp_temp_array_a", 10, itp_type_bow),
       (troop_set_slot, "trp_temp_array_a", 11, itp_type_crossbow),
       (troop_set_slot, "trp_temp_array_a", 12, itp_type_thrown),
       (troop_set_slot, "trp_temp_array_a", 13, itp_type_arrows),
       (troop_set_slot, "trp_temp_array_a", 14, itp_type_bolts),
       (troop_set_slot, "trp_temp_array_a", 15, itp_type_shield),
       (troop_set_slot, "trp_temp_array_a", 16, itp_type_pistol),
       (troop_set_slot, "trp_temp_array_a", 17, itp_type_musket),
       (troop_set_slot, "trp_temp_array_a", 18, itp_type_bullets),
       (troop_set_slot, "trp_temp_array_a", 19, itp_type_animal),
#define sorting order   
       (call_script, "script_clear_inventory", "trp_temp_array_a"),
       (troop_sort_inventory, ":troop_id"),
       (try_for_range, ":array_pos", 0, 20),
         (try_for_range, ":slot_no", 10, ":inv_cap"),
           (troop_get_inventory_slot, ":item", ":troop_id", ":slot_no"),
           (gt, ":item", 0),           
           (item_get_type, ":item_type", ":item"),
           (troop_slot_eq, "trp_temp_array_a", ":array_pos", ":item_type"),
           (troop_inventory_slot_get_item_amount, ":amount", ":troop_id", ":slot_no"),
           (troop_get_inventory_slot_modifier, ":mod", ":troop_id", ":slot_no"),
           (troop_set_inventory_slot, "trp_temp_array_a", ":temp_slot", ":item"),
           (troop_set_inventory_slot_modifier, "trp_temp_array_a", ":temp_slot", ":mod"),
           (try_begin),
             (gt, ":amount", 0),
             (troop_inventory_slot_set_item_amount, "trp_temp_array_a", ":temp_slot", ":amount"),
           (try_end),
           (val_add, ":temp_slot", 1),
          (try_end),
       (try_end),
       (troop_clear_inventory, ":troop_id"),
       (try_for_range, ":slot_no", 0, ":inv_cap"),
            (troop_get_inventory_slot, ":item", "trp_temp_array_a", ":slot_no"),
            (troop_get_inventory_slot_modifier, ":mod", "trp_temp_array_a", ":slot_no"),
            (troop_inventory_slot_get_item_amount, ":amount", "trp_temp_array_a", ":slot_no"),
            (val_add, ":slot_no", 10),
            (troop_set_inventory_slot, ":troop_id", ":slot_no", ":item"),
            (troop_set_inventory_slot_modifier, ":troop_id", ":slot_no", ":mod"),
            (try_begin),
              (gt, ":amount", 0),
              (troop_inventory_slot_set_item_amount, ":troop_id", ":slot_no", ":amount"),
            (try_end),
            (try_begin),
              (le, ":item", 0),
              (assign, ":inv_cap", 0),
            (try_end),
         (try_end),
    (try_end),     
   ]),
   
#script_clear_inventory
#INPUT: arg1 = troop_id
  ("clear_inventory",
   [(store_script_param_1, ":troop_id"),
    (troop_clear_inventory,":troop_id"),
    (try_for_range, ":item", 0, 10),
       (troop_set_inventory_slot, ":troop_id", ":item",  -1),
    (try_end),]),
############################################################################


########################## NEW v2.5 - copies original faction stats to player faction
("initialize_faction_stats_player",
[  
 (store_script_param, ":faction", 1),
 
 (faction_set_slot, "fac_player_supporters_faction", slot_faction_player_original_template_faction, ":faction"),
 
 (faction_get_color, ":color", ":faction"),
 (faction_set_color, "fac_player_supporters_faction", ":color"),
 
 (faction_get_slot, ":culture", ":faction", slot_faction_culture),
 (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":culture"),
 (assign, "$g_player_culture", ":culture"),
 (faction_set_slot, "fac_player_faction", slot_faction_culture, ":culture"),
 
 (faction_get_slot, ":religion", ":faction", slot_faction_religion),
 (faction_set_slot, "fac_player_supporters_faction", slot_faction_religion, ":religion"),
 
 ####### NEW v3.3 - changes player faction language
 (faction_get_slot, ":orig_faction_language", ":faction", slot_faction_language),
 (faction_set_slot, "fac_player_supporters_faction", slot_faction_language, ":orig_faction_language"),
 (faction_set_slot, "fac_player_faction", slot_faction_language, ":orig_faction_language"),
 #######
]),
############################################################################


########################## NEW v2.7 - removes lord from map
("remove_dead_lord_from_game",
[  
 (store_script_param, ":dead_lord", 1),
 (try_begin),
   (troop_get_slot, ":party", ":dead_lord", slot_troop_leaded_party),
   # (gt, ":party", -1),
   (gt, ":party", 0), ######## NEW v3.8
   (party_is_active, ":party"), ######## NEW v3.8
     (try_begin),  ###### if attached to a fief, add 50-66% of the troops to the garrison
       ####### NEW v3.7
       (party_get_num_companions, ":count", ":party"),  
       (gt, ":count", 0),
       #####################
       (assign, ":end", walled_centers_end),
       (try_for_range, ":fief", walled_centers_begin, ":end"),
         (party_get_slot, ":town_lord", ":fief", slot_town_lord),
         (eq, ":town_lord", ":dead_lord"),
         (party_get_num_companion_stacks, ":num_stacks", ":party"),
         (gt, ":num_stacks", 1), ######## NEW v3.8
         ####### NEW v3.7
         (try_for_range, ":cur_stack", 0, ":num_stacks"),
           (party_stack_get_troop_id, ":cur_troop_id", ":party", ":cur_stack"),
           (party_stack_get_size, ":cur_stack_size", ":party", ":cur_stack"),
           (val_mul, ":cur_stack_size", 100),
           (store_random_in_range, ":random", 150, 201), ### 50-66%
           (val_div, ":cur_stack_size", ":random"),
           (party_add_members, ":fief", ":cur_troop_id", ":cur_stack_size"),
           (assign, ":end", -1), #### breaks loop
         (try_end),
       (try_end),
################## if he doens't have a walled fief, see if he's in a walled fief and transfer troops
     (else_try),
       ####### NEW v3.7
       (party_get_num_companions, ":count", ":party"),  
       (gt, ":count", 0),
       #####################
       (party_get_attached_to, ":cur_fief", ":party"),
       (is_between, ":cur_fief", walled_centers_begin, walled_centers_end),
         (party_get_num_companion_stacks, ":num_stacks", ":party"),
         (gt, ":num_stacks", 1), ######## NEW v3.8
         (try_for_range, ":cur_stack", 0, ":num_stacks"),
           (party_stack_get_troop_id, ":cur_troop_id", ":party", ":cur_stack"),
           (party_stack_get_size, ":cur_stack_size", ":party", ":cur_stack"),
           (val_mul, ":cur_stack_size", 100),
           (store_random_in_range, ":random", 300, 351), ### 25-33%
           (val_div, ":cur_stack_size", ":random"),
           (party_add_members, ":cur_fief", ":cur_troop_id", ":cur_stack_size"),
         (try_end),
     (try_end),
     (remove_party, ":party"),
 (try_end),
]),
############################################################################



#################### NEW v2.8 - copy of give_center_to_lord that gives all attached centers to new owner, also doesn't contain lord objection code
   ("give_center_to_lord_plus_villages",
      [
        (store_script_param, ":center_no", 1),
        (store_script_param, ":lord_troop_id", 2), #-1 only in the case of a player deferring ownership of a center
        (store_script_param, ":add_garrison", 3),
        ##diplomacy begin
        (party_set_slot, ":center_no", dplmc_slot_center_taxation, 0),
        (try_begin),
          (party_slot_eq, ":center_no", slot_village_infested_by_bandits, "trp_peasant_woman"),
          (party_set_slot, ":center_no", slot_village_infested_by_bandits, 0),
        (try_end),
        ##diplomacy end
        

      (try_begin),
      ##diplomacy start+ notable events like this should be logged by default
       (ge, ":lord_troop_id", 0),
        (str_store_party_name_link, s4, ":center_no"),
        (str_store_troop_name_link, s5, ":lord_troop_id"),
        (store_troop_faction, ":msg_faction_no", ":lord_troop_id"),
        #Floris - refine text
        (try_begin),
            (eq, ":msg_faction_no", "fac_player_faction"),
            (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
            (assign, ":msg_faction_no", "$players_kingdom"),
        (try_end),
        #Floris - refine text end
        (str_store_faction_name_link, s7, ":msg_faction_no"),
        (try_begin),
           (faction_slot_eq, ":msg_faction_no", slot_faction_leader, ":lord_troop_id"),
           (display_log_message, "@{s5} of the {s7} has taken ownership of {s4}."),
        (else_try),
           (display_log_message, "@{s4} has been awarded to {s5} of the {s7}."),
        (try_end),
		############ NEW v3.5 - lords get renown for acquiring fiefs
        (try_begin),
          (neg|faction_slot_eq, ":msg_faction_no", slot_faction_leader, ":lord_troop_id"),  ###### not to kings
          (try_begin),
            (this_or_next|is_between, ":center_no", towns_begin, towns_end),
            (party_slot_eq, ":center_no", slot_party_type, spt_town),
            (troop_get_slot, ":renown", ":lord_troop_id", slot_troop_renown),
		    (val_add, ":renown", 100),
            (troop_set_slot, ":lord_troop_id", slot_troop_renown, ":renown"),
          (else_try),
            (this_or_next|is_between, ":center_no", castles_begin, castles_end),
            (party_slot_eq, ":center_no", slot_party_type, spt_castle),
            (troop_get_slot, ":renown", ":lord_troop_id", slot_troop_renown),
		    (val_add, ":renown", 60),
            (troop_set_slot, ":lord_troop_id", slot_troop_renown, ":renown"),
          (else_try),
            (this_or_next|is_between, ":center_no", villages_begin, villages_end),
            (party_slot_eq, ":center_no", slot_party_type, spt_village),
            (troop_get_slot, ":renown", ":lord_troop_id", slot_troop_renown),
		    (val_add, ":renown", 30),
            (troop_set_slot, ":lord_troop_id", slot_troop_renown, ":renown"),
          (try_end),
        (try_end),
		########################
      (else_try),
      ##diplomacy end+
          (eq, "$cheat_mode", 1),
          (ge, ":lord_troop_id", 0),
          (str_store_party_name, s4, ":center_no"),
          (str_store_troop_name, s5, ":lord_troop_id"),
          (display_message, "@{!}DEBUG -- {s4} awarded to {s5}"),
        (try_end),
        
        (try_begin),
          (eq, ":lord_troop_id", "trp_player"),
          (unlock_achievement, ACHIEVEMENT_ROYALITY_PAYMENT),
          
          (assign, ":number_of_fiefs_player_have", 1),
          (try_for_range, ":cur_center", centers_begin, centers_end),
            (neq, ":cur_center", ":center_no"),
            (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
            (val_add, ":number_of_fiefs_player_have", 1),
          (try_end),
          
          (ge, ":number_of_fiefs_player_have", 5),
          (unlock_achievement, ACHIEVEMENT_MEDIEVAL_EMLAK),
        (try_end),
        
        (party_get_slot, ":old_lord_troop_id", ":center_no", slot_town_lord),
        
        (try_begin), #This script is ONLY called with lord_troop_id = -1 when it is the player faction
          (eq, ":lord_troop_id", -1),
          (assign, ":lord_troop_faction", "fac_player_supporters_faction"),
          (party_set_banner_icon, ":center_no", 0),#Removing banner
          
        (else_try),
          (eq, ":lord_troop_id", "trp_player"),
          (assign, ":lord_troop_faction", "$players_kingdom"), #was changed on Apr 27 from fac_plyr_sup_fac
          
        (else_try),
          (store_troop_faction, ":lord_troop_faction", ":lord_troop_id"),
        (try_end),
        (faction_get_slot, ":faction_leader", ":lord_troop_faction", slot_faction_leader),
        
        (try_begin),
          (eq, ":faction_leader", ":old_lord_troop_id"),
          (call_script, "script_add_log_entry", logent_liege_grants_fief_to_vassal, ":faction_leader", ":center_no", ":lord_troop_id", ":lord_troop_faction"),
          (troop_set_slot, ":lord_troop_id", slot_troop_promised_fief, 0),
        (try_end),
        
        (try_begin),
          (eq, ":lord_troop_id", -1), #Lord troop ID -1 is only used when a player is deferring assignment of a fief
          (party_set_faction, ":center_no", "$players_kingdom"),
        (else_try),
          (eq, ":lord_troop_id", "trp_player"),
          (gt, "$players_kingdom", 0),
          (party_set_faction, ":center_no", "$players_kingdom"),
        (else_try),
          (eq, ":lord_troop_id", "trp_player"),
          (neg|is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
          (party_set_faction, ":center_no", "fac_player_supporters_faction"),
        (else_try),
          (party_set_faction, ":center_no", ":lord_troop_faction"),
        (try_end),
        (party_set_slot, ":center_no", slot_town_lord, ":lord_troop_id"),
        
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_village),
          (party_get_slot, ":farmer_party_no", ":center_no", slot_village_farmer_party),
          (gt, ":farmer_party_no", 0),
          (party_is_active, ":farmer_party_no"),
          (store_faction_of_party, ":center_faction", ":center_no"),
          (party_set_faction, ":farmer_party_no", ":center_faction"),
        (try_end),
        
        (try_begin),
          (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
          (party_slot_eq, ":center_no", slot_party_type, spt_castle),
          (gt, ":lord_troop_id", -1),
          
          #normal_banner_begin
          (troop_get_slot, ":cur_banner", ":lord_troop_id", slot_troop_banner_scene_prop),
          (gt, ":cur_banner", 0),
          (val_sub, ":cur_banner", banner_scene_props_begin),
          (val_add, ":cur_banner", banner_map_icons_begin),
          (party_set_banner_icon, ":center_no", ":cur_banner"),
          # custom_banner_begin
          #        (troop_get_slot, ":flag_icon", ":lord_troop_id", slot_troop_custom_banner_map_flag_type),
          #        (ge, ":flag_icon", 0),
          #        (val_add, ":flag_icon", custom_banner_map_icons_begin),
          #        (party_set_banner_icon, ":center_no", ":flag_icon"),
        (try_end),
        
        (try_begin),
          (gt, ":lord_troop_id", -1),
          (call_script, "script_update_troop_notes", ":lord_troop_id"),
        (try_end),
        
        (call_script, "script_update_center_notes", ":center_no"),
        
        (try_begin),
          (gt, ":lord_troop_faction", 0),
          (call_script, "script_update_faction_notes", ":lord_troop_faction"),
        (try_end),
        
        (try_begin),
          (ge, ":old_lord_troop_id", 0),
          (call_script, "script_update_troop_notes", ":old_lord_troop_id"),
          (store_troop_faction, ":old_lord_troop_faction", ":old_lord_troop_id"),
          (call_script, "script_update_faction_notes", ":old_lord_troop_faction"),
        (try_end),
        
        (try_begin),
          (eq, ":add_garrison", 1),
          (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
          (party_slot_eq, ":center_no", slot_party_type, spt_castle),
          (assign, ":garrison_strength", 3),
          (try_begin),
            (party_slot_eq, ":center_no", slot_party_type, spt_town),
            (assign, ":garrison_strength", 9),
          (try_end),
          (try_for_range, ":unused", 0, ":garrison_strength"),
            (call_script, "script_cf_reinforce_party", ":center_no"),
          (try_end),
          ## ADD some XP initially
          (try_for_range, ":unused", 0, 7),
            (store_mul, ":xp_range_min", 150, ":garrison_strength"),
            (store_mul, ":xp_range_max", 200, ":garrison_strength"),
            
            (store_random_in_range, ":xp", ":xp_range_min", ":xp_range_max"),
            (party_upgrade_with_xp, ":center_no", ":xp", 0),
          (try_end),
        (try_end),
        
        #Villages from another faction will also be transferred along with a fortress
        (try_begin),
          (is_between, ":center_no", walled_centers_begin, walled_centers_end),
          (try_for_range, ":cur_village", villages_begin, villages_end),
            (party_slot_eq, ":cur_village", slot_village_bound_center, ":center_no"),
            # (store_faction_of_party, ":cur_village_faction", ":cur_village"),
            # (neq, ":cur_village_faction", ":lord_troop_faction"),
            (call_script, "script_give_center_to_lord", ":cur_village", ":lord_troop_id", 0),
          (try_end),
        (try_end),
    ]),
############################################################################

########################## NEW v2.9-KOMKE  Changes faction colors according to diplomatic relations with player
########################## if you change a reference faction color, similar factions will change to that color
########################## mountain bandits used for allies, forest bandits for friends, undeads for enemies
("change_to_diplomatic_colors",
[   
    (faction_get_color, ":cur_color", "fac_neutral"),## faction neutral is reference for neutrals
    (faction_set_color, "fac_commoners", ":cur_color"),
    (faction_set_color, "fac_innocents", ":cur_color"),
    (faction_set_color, "fac_manhunters", ":cur_color"),
    (faction_get_color, ":cur_color", "fac_outlaws"),## faction outlaws is reference for deserters, rebels and crusaders
    (faction_set_color, "fac_deserters", ":cur_color"),                
    (faction_set_color, "fac_peasant_rebels", ":cur_color"),                
    (faction_set_color, "fac_crusade", ":cur_color"),    
    (faction_get_color, ":cur_color", "fac_player_faction"),## faction player is reference for player supporters, prisoners   
    (faction_set_color, "fac_player_supporters_faction", ":cur_color"),                
    (faction_set_color, "fac_escaped_prisoners_faction", ":cur_color"),                
    (try_for_range, ":cur_faction", npc_kingdoms_begin, enhanced_factions_end),## all kingdoms but player supporters
        (store_relation, ":cur_relation", "fac_player_supporters_faction", ":cur_faction"),
        (try_begin),
            (lt, ":cur_relation", 0),
            (faction_get_color, ":cur_color", "fac_undeads"),
            (faction_set_color, ":cur_faction", ":cur_color"),##if negative color of undeads (enemy red default)
        (else_try),
            (gt, ":cur_relation", 0),
            (faction_get_color, ":cur_color", "fac_mountain_bandits"),
            (faction_set_color, ":cur_faction", ":cur_color"),##if positive color of mountain bandits (allied blue default)
        (else_try),
            (faction_get_color, ":cur_color", "fac_forest_bandits"),
            (faction_set_color, ":cur_faction", ":cur_color"),   ## else color of forest bandits (friendly green default)
        (end_try),        
    (end_try),        
      
]),

############################################################################



########################## NEW v2.9 - checks the amount of lords in faction and print it to log
("print_faction_lord_count",
[   
    (store_script_param, ":faction_no", 1),
    (store_script_param, ":line_number", 2), 
        
    (assign, ":lord_count", 0),
    (try_for_range, ":cur_troop", lords_begin, pretenders_end),## all kingdoms but player supporters
      (store_faction_of_troop, ":cur_faction", ":cur_troop"),
      (eq, ":cur_faction", ":faction_no"),
        (val_add, ":lord_count", 1),
    (try_end),        
    (str_store_faction_name, s1, ":faction_no"),  
    (assign, reg19, ":lord_count"),
    (assign, reg20, ":line_number"),
    (display_message, "@s1 has {reg19} lords. Line {reg20}."), 
]),

############################################################################


#################### NEW v3.0 - gets closest town to the party - currently used by the mercenary captain start
("ee_get_closest_town",
  [
    (store_script_param_1, ":party_no"),
    (assign, ":min_distance", 9999999),
    (assign, reg0, -1),
    (try_for_range, ":center_no", towns_begin, towns_end),
      (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
      (lt, ":party_distance", ":min_distance"),
      (assign, ":min_distance", ":party_distance"),
      (assign, reg0, ":center_no"),
    (try_end),
]),
############################################################################



#################### NEW v3.0 - script to store generic operations called when a lord dies
("process_lord_death",
  [
    (store_script_param, ":dead_troop", 1),
    (store_script_param, ":dead_troop_faction", 2),
    
   # start with the assumption that the fief should return to its faction for redistribution
   # (assign, ":fief_faction", ":dead_troop_faction"),
   
   (try_begin),
     ##### handle king's death
     (faction_slot_eq, ":dead_troop_faction", slot_faction_leader, ":dead_troop"),
       (call_script, "script_process_faction_leader_death", ":dead_troop", ":dead_troop_faction"),
   (try_end),
   
   ##### free up the deceased's fief
   (try_begin),  ######### NEW v2.8 - if dead lord is king don't clear fiefs because they were give to the new king in the process_faction_leader_death script
     (neg|faction_slot_eq, ":dead_troop_faction", slot_faction_leader, ":dead_troop"),
     (try_for_range, ":fief", centers_begin, centers_end),
       # (party_get_slot, ":lord", ":fief", slot_town_lord),
       # (eq, ":lord", ":dead_troop"),
	   (party_slot_eq, ":fief", slot_town_lord, ":dead_troop"), ####### NEW v3.8
       (call_script, "script_give_center_to_faction", ":fief", ":dead_troop_faction"),
       (party_set_slot, ":fief", slot_town_lord, -1),   ########## NEW v2.6 - fixes lords dying and not getting their fiefs reset
     (try_end),
   (try_end),
   
   ########### Clear marriage
   (try_begin),
     (troop_get_slot, ":troop_spouse", ":dead_troop", slot_troop_spouse),
     (gt, ":troop_spouse", -1),
       (troop_set_slot, ":dead_troop", slot_troop_spouse, -1),
       (troop_set_slot, ":troop_spouse", slot_troop_spouse, -1),
   (try_end),
   ###########
   
   ########### NEW v2.7 - Clear betrothal
   (try_begin),
     (troop_get_slot, ":troop_betrothal", ":dead_troop", slot_troop_betrothed),
     (gt, ":troop_betrothal", -1),
       (troop_set_slot, ":dead_troop", slot_troop_betrothed, -1),
       (troop_set_slot, ":troop_betrothal", slot_troop_betrothed, -1),
   (try_end),
   ###########

   ########### NEW v2.7 - fixes freelancer bug where the enlisted lord died and there wasn't a way for the player to complete the quest, thus he was labeled as a deserter and lost honor and relations
   (try_begin),
     (check_quest_active, "qst_freelancer_enlisted"),
     (eq, "$enlisted_lord", ":dead_troop"),        
       (store_current_day, ":day"), 
       (quest_get_slot, reg0, "qst_freelancer_enlisted", slot_quest_freelancer_start_date),    
       (val_sub, ":day", reg0),
       (val_mul, ":day", 100),
       (val_div, ":day", 60),
       (call_script, "script_finish_quest", "qst_freelancer_enlisted", ":day"), #percentage of days served, based on 60 days
   (try_end),
   ###########
   
########### NEW v3.0 - quests bugfix
   ########### lend companion 
   (try_begin),
     (check_quest_active, "qst_lend_companion"),
     (this_or_next|quest_slot_eq, "qst_lend_companion", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_lend_companion", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_lend_companion", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_lend_companion"),
   (try_end),

   ########### lend surgeon 
   (try_begin),
     (check_quest_active, "qst_lend_surgeon"),
     (this_or_next|quest_slot_eq, "qst_lend_surgeon", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_lend_surgeon", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_lend_surgeon", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_lend_surgeon"),
   (try_end),

   ########### deliver message
   (try_begin),
     (check_quest_active, "qst_deliver_message"),
     (this_or_next|quest_slot_eq, "qst_deliver_message", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_deliver_message", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_deliver_message", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_deliver_message"),
   (try_end),

   ########### deliver message to enemy lord
   (try_begin),
     (check_quest_active, "qst_deliver_message_to_enemy_lord"),
     (this_or_next|quest_slot_eq, "qst_deliver_message_to_enemy_lord", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_deliver_message_to_enemy_lord", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_deliver_message_to_enemy_lord", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_deliver_message_to_enemy_lord"),
   (try_end),

   ########### raise troops
   (try_begin),
     (check_quest_active, "qst_raise_troops"),
     (this_or_next|quest_slot_eq, "qst_raise_troops", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_raise_troops", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_raise_troops", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_raise_troops"),
   (try_end),

   ########### collect taxes
   (try_begin),
     (check_quest_active, "qst_collect_taxes"),
     (this_or_next|quest_slot_eq, "qst_collect_taxes", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_collect_taxes", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_collect_taxes", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_collect_taxes"),
   (try_end),

   ########### hunt down fugitive
   (try_begin),
     (check_quest_active, "qst_hunt_down_fugitive"),
     (this_or_next|quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_hunt_down_fugitive"),
   (try_end),

   ########### kill local merchant
   (try_begin),
     (check_quest_active, "qst_kill_local_merchant"),
     (this_or_next|quest_slot_eq, "qst_kill_local_merchant", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_kill_local_merchant", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_kill_local_merchant", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_kill_local_merchant"),
   (try_end),

   ########### bring back runaway serfs
   (try_begin),
     (check_quest_active, "qst_bring_back_runaway_serfs"),
     (this_or_next|quest_slot_eq, "qst_bring_back_runaway_serfs", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_bring_back_runaway_serfs", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_bring_back_runaway_serfs", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_bring_back_runaway_serfs"),
   (try_end),

   ########### follow spy
   (try_begin),
     (check_quest_active, "qst_follow_spy"),
     (this_or_next|quest_slot_eq, "qst_follow_spy", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_follow_spy", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_follow_spy", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_follow_spy"),
   (try_end),

   ########### capture enemy hero
   (try_begin),
     (check_quest_active, "qst_capture_enemy_hero"),
     (this_or_next|quest_slot_eq, "qst_capture_enemy_hero", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_capture_enemy_hero", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_capture_enemy_hero", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_capture_enemy_hero"),
   (try_end),

   ########### collect debt
   (try_begin),
     (check_quest_active, "qst_collect_debt"),
     (this_or_next|quest_slot_eq, "qst_collect_debt", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_collect_debt", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_collect_debt", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_collect_debt"),
   (try_end),

   ########### capture prisoners
   (try_begin),
     (check_quest_active, "qst_capture_prisoners"),
     (this_or_next|quest_slot_eq, "qst_capture_prisoners", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_capture_prisoners", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_capture_prisoners", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_capture_prisoners"),
   (try_end),

   ########### follow army
   (try_begin),
     (check_quest_active, "qst_follow_army"),
     (this_or_next|quest_slot_eq, "qst_follow_army", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_follow_army", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_follow_army", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_follow_army"),
   (try_end),

   ########### report to army
   (try_begin),
     (check_quest_active, "qst_report_to_army"),
     (this_or_next|quest_slot_eq, "qst_report_to_army", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_report_to_army", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_report_to_army", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_report_to_army"),
   (try_end),

   ########### deliver cattle to army
   (try_begin),
     (check_quest_active, "qst_deliver_cattle_to_army"),
     (this_or_next|quest_slot_eq, "qst_deliver_cattle_to_army", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_deliver_cattle_to_army", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_deliver_cattle_to_army", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_deliver_cattle_to_army"),
   (try_end),

   ########### join siege with army
   (try_begin),
     (check_quest_active, "qst_join_siege_with_army"),
     (this_or_next|quest_slot_eq, "qst_join_siege_with_army", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_join_siege_with_army", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_join_siege_with_army", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_join_siege_with_army"),
   (try_end),

   ########### screen army
   (try_begin),
     (check_quest_active, "qst_screen_army"),
     (this_or_next|quest_slot_eq, "qst_screen_army", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_screen_army", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_screen_army", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_screen_army"),
   (try_end),

   ########### scout
   (try_begin),
     (check_quest_active, "qst_scout_waypoints"),
     (this_or_next|quest_slot_eq, "qst_scout_waypoints", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_scout_waypoints", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_scout_waypoints", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_scout_waypoints"),
   (try_end),

########### Lady quests 
   ########### rescue lord
   (try_begin),
     (check_quest_active, "qst_rescue_lord_by_replace"),
     (this_or_next|quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_rescue_lord_by_replace"),
   (try_end),
   
   ########### deliver message
   (try_begin),
     (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
     (this_or_next|quest_slot_eq, "qst_deliver_message_to_prisoner_lord", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_deliver_message_to_prisoner_lord", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_deliver_message_to_prisoner_lord", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_deliver_message_to_prisoner_lord"),
   (try_end),
   
   ########### duel
   (try_begin),
     (check_quest_active, "qst_duel_for_lady"),
     (this_or_next|quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_duel_for_lady", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_duel_for_lady", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_duel_for_lady"),
   (try_end),
   
   ########### duel (rival)
   (try_begin),
     (check_quest_active, "qst_duel_courtship_rival"),
     (this_or_next|quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_duel_courtship_rival", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_duel_courtship_rival"),
   (try_end),
   
   ########### duel (insult)
   (try_begin),
     (check_quest_active, "qst_duel_avenge_insult"),
     (this_or_next|quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_duel_avenge_insult", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_duel_avenge_insult"),
   (try_end),
   
###### Other quests
   ########### persuade lords for peace
   (try_begin),
     (check_quest_active, "qst_persuade_lords_to_make_peace"),
     (this_or_next|quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_persuade_lords_to_make_peace"),
   (try_end),
   
   ########### marriage proposal
   (try_begin),
     (check_quest_active, "qst_formal_marriage_proposal"),
     (this_or_next|quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_formal_marriage_proposal"),
   (try_end),
   
   ####### NEW v3.9.1
   ########### qst_obtain_liege_blessing  
   (try_begin),
     (check_quest_active, "qst_obtain_liege_blessing"),
     (this_or_next|quest_slot_eq, "qst_obtain_liege_blessing", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_obtain_liege_blessing", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_obtain_liege_blessing", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_obtain_liege_blessing"),
   (try_end),
   
   ########### qst_wed_betrothed  
   (try_begin),
     (check_quest_active, "qst_wed_betrothed"),
     (this_or_next|quest_slot_eq, "qst_wed_betrothed", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_wed_betrothed", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_wed_betrothed", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_wed_betrothed"),
   (try_end),
   ############################
   ########### qst_wed_betrothed_female  
   (try_begin),
     (check_quest_active, "qst_wed_betrothed_female"),
     (this_or_next|quest_slot_eq, "qst_wed_betrothed_female", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_wed_betrothed_female", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_wed_betrothed_female"),
   (try_end),
   ############################
   
   ########### join faction
   (try_begin),
     (check_quest_active, "qst_join_faction"),
     (this_or_next|quest_slot_eq, "qst_join_faction", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_join_faction", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_join_faction", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_join_faction"),
   (try_end),
   
   ########### resolve dispute
   (try_begin),
     (check_quest_active, "qst_resolve_dispute"),
     (this_or_next|quest_slot_eq, "qst_resolve_dispute", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_resolve_dispute", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_resolve_dispute", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_resolve_dispute"),
   (try_end),
   
   ########### offer gift
   (try_begin),
     (check_quest_active, "qst_offer_gift"),
     (this_or_next|quest_slot_eq, "qst_offer_gift", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_offer_gift", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_offer_gift", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_offer_gift"),
   (try_end),
   
   ########### denounce lord
   (try_begin),
     (check_quest_active, "qst_denounce_lord"),
     (this_or_next|quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_denounce_lord", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_denounce_lord", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_denounce_lord"),
   (try_end),
   
   ########### intrigue against lord
   (try_begin),
     (check_quest_active, "qst_intrigue_against_lord"),
     (this_or_next|quest_slot_eq, "qst_intrigue_against_lord", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_intrigue_against_lord", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_intrigue_against_lord", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_intrigue_against_lord"),
   (try_end),
   
   ########### retaliate for border incident
   (try_begin),
     (check_quest_active, "qst_retaliate_for_border_incident"),
     (this_or_next|quest_slot_eq, "qst_retaliate_for_border_incident", slot_quest_target_troop, ":dead_troop"),
     (this_or_next|quest_slot_eq, "qst_retaliate_for_border_incident", slot_quest_object_troop, ":dead_troop"),
     (quest_slot_eq, "qst_retaliate_for_border_incident", slot_quest_giver_troop, ":dead_troop"),
       (call_script, "script_cancel_quest", "qst_retaliate_for_border_incident"),
   (try_end),
###########
]),
############################################################################



#################### NEW v3.0 - set the troops name during a town/castle visit
("ee_set_town_troop_names",
  [
    (try_for_agents, ":agent"),
      (agent_get_entry_no, ":entry_no", ":agent"),
      (try_begin),   ######## guards
        (this_or_next|eq, ":entry_no", 25),
        (this_or_next|eq, ":entry_no", 26),
        (this_or_next|eq, ":entry_no", 27),
        (eq, ":entry_no", 28),
      (else_try),  ######## castle guard
        (eq, ":entry_no", 23),
      (else_try),  ######## prison guard
        (eq, ":entry_no", 24),
      (try_end),
    (try_end),
]),
############################################################################


############################## NEW v3.0 - gives a random weapon from source troop
("give_source_troop_random_weapon_to_troop",
  [
   (store_script_param, ":troop_no", 1),    
   (store_script_param, ":source_troop", 2),    
      
   (assign, ":main_weapon", 0),
   (assign, ":side_weapon", 25),
   (assign, ":shield", 50),
   (assign, ":two_handed", 75),
   (assign, ":bow", 175),
   (assign, ":crossbow", 200),
   
   (assign, ":equip_this", 0),
   (troop_get_inventory_capacity, ":capacity", ":source_troop"),
   
   (try_for_range, ":cur_slot", 0, ":capacity"),     
     (troop_get_inventory_slot, ":cur_item", ":source_troop", ":cur_slot"),
     (troop_get_inventory_slot_modifier, ":cur_item_imod", ":source_troop", ":cur_slot"),
     (gt, ":cur_item", 0),
     (item_get_type, ":type", ":cur_item"),
     (try_begin),
       (eq, ":type", itp_type_polearm),
       (val_add, ":main_weapon", 1),
       (troop_set_slot, "trp_items_array", 0, ":main_weapon"),
       (troop_set_slot, "trp_items_array", ":main_weapon", ":cur_item"),
     (else_try),    
       (eq, ":type", itp_type_one_handed_wpn),
       (val_add, ":side_weapon", 1),
       (troop_set_slot, "trp_items_array", 25, ":side_weapon"),
       (troop_set_slot, "trp_items_array", ":side_weapon", ":cur_item"),    
     (else_try),    
       (eq, ":type", itp_type_shield),
       (val_add, ":shield", 1),
       (troop_set_slot, "trp_items_array", 50, ":shield"),
       (troop_set_slot, "trp_items_array", ":shield", ":cur_item"),
     (else_try),    
       (eq, ":type", itp_type_two_handed_wpn),
       (val_add, ":two_handed", 1),
       (troop_set_slot, "trp_items_array", 75, ":two_handed"),
       (troop_set_slot, "trp_items_array", ":two_handed", ":cur_item"),
     (else_try),    
       (eq, ":type", itp_type_bow),
       (val_add, ":bow", 1),
       (troop_set_slot, "trp_items_array", 175, ":bow"),
       (troop_set_slot, "trp_items_array", ":bow", ":cur_item"),
     (else_try),    
       (eq, ":type", itp_type_crossbow),
       (val_add, ":crossbow", 1),
       (troop_set_slot, "trp_items_array", 200, ":crossbow"),
       (troop_set_slot, "trp_items_array", ":crossbow", ":cur_item"),
     (try_end),
   (try_end),
   
   (store_random_in_range, ":equip_this", 1, 8),
   (try_begin),
     (eq, ":equip_this", 1),
     (troop_get_slot, ":amount", "trp_items_array", 0),
     (store_random_in_range, ":slot", 1, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_this", 2),
     (troop_get_slot, ":amount", "trp_items_array", 25),
     (store_random_in_range, ":slot", 26, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_this", 3),    
     (troop_get_slot, ":amount", "trp_items_array", 50),
     (store_random_in_range, ":slot", 51, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_this", 4),    
     (try_begin),
       (eq, ":equip_this", 5),    #if have and side arm
       (store_random_in_range, ":random", 0, 100),
       (lt, ":random", 65), #small chance for getting a sidearm as well
     (else_try),
       (troop_get_slot, ":amount", "trp_items_array", 75),
       (store_random_in_range, ":slot", 76, ":amount"),
       (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
       (neq, ":current_item", "itm_no_item"),
       (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
     (try_end),
   (try_end),
   (try_begin),
     (eq, ":equip_this", 6),    
     (troop_get_slot, ":amount", "trp_items_array", 175),
     (store_random_in_range, ":slot", 176, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
   (try_begin),
     (eq, ":equip_this", 7),    
     (troop_get_slot, ":amount", "trp_items_array", 200),
     (store_random_in_range, ":slot", 201, ":amount"),
     (troop_get_slot, ":current_item", "trp_items_array", ":slot"),
     (neq, ":current_item", "itm_no_item"),
     (troop_add_item, ":troop_no", ":current_item", ":cur_item_imod"),
   (try_end),
]),
############################################################################



######################### NEW v1.3 - scripts from Azgad A Story Of Calradia v1.0
   ##Enhanced
   ("return_random_troop_from_garrison",
    [
      (store_script_param, ":number", 1),

      (try_for_range,":cur_troop",soldiers_begin,soldiers_end),              #For loop between those troops
          (troop_set_slot,":cur_troop",slot_troop_type_num_in_town,0),              #Reset all of their values
      (try_end),
      (assign,":troop",-1),                                                         #Define :troop
      (assign,":num_troop_types",0),                                                #Define variable for number of troop types
      (try_for_range,":cur_troop",soldiers_begin,soldiers_end),              #For loop between those troops
          (party_count_members_of_type,":count","$current_town",":cur_troop"),      #Count each one of those troop types in current town
          (ge,":count",":number"),                                                  #If the count is greater or equal to the number we are looking for
          (val_add,":num_troop_types",1),                                           #add one to the number of troop types
          (troop_set_slot,":cur_troop",slot_troop_type_num_in_town,":count"),       #save count of troop type to troop itself
      (try_end),
      (store_random_in_range,":random_num",0,":num_troop_types"),                   #generate a random number between 0 and number of troop types(this is the troop that is gonna be choosen)
      (assign,":random_cycle",-1),                                                  #Define random cycle (to cycle through troops that are not present in town or not in the number we are looking for)
      (try_for_range,":cur_troop",soldiers_begin,soldiers_end),              #For loop between those troops again
          (troop_slot_ge,":cur_troop",slot_troop_type_num_in_town,1),               #If this troop type was deemed worty by the earlier for loop
          (val_add,":random_cycle",1),                                              #add 1 to the cycle variable
          (eq,":random_num",":random_cycle"),                                       #if random number we generated equals to cycle
          (assign,":troop",":cur_troop"),                                           #then this is the droid we are looking for
      (try_end),
      (assign, reg0, ":troop"),                                                     #Finally return it.
     ]),
  
   ("add_troops_back_to_garrison",
    [
        (try_for_agents,":cur_agent"),                                              #For loop between the agents in the scene
            (agent_get_troop_id,":troop_type", ":cur_agent"),
            (is_between, ":troop_type", soldiers_begin,soldiers_end),       #If the troop id of the agents in the scene are anything between faction soldiers
            # (neq,":troop_type","trp_swadian_prison_guard"),                         #except these guys.
            # (neq,":troop_type","trp_swadian_castle_guard"),
            # (neq,":troop_type","trp_vaegir_prison_guard"),
            # (neq,":troop_type","trp_vaegir_castle_guard"),
            # (neq,":troop_type","trp_khergit_prison_guard"),
            # (neq,":troop_type","trp_khergit_castle_guard"),
            # (neq,":troop_type","trp_nord_prison_guard"),
            # (neq,":troop_type","trp_nord_castle_guard"),
            # (neq,":troop_type","trp_rhodok_prison_guard"),
            # (neq,":troop_type","trp_rhodok_castle_guard"),
            # (neq,":troop_type","trp_sarranid_prison_guard"),
            # (neq,":troop_type","trp_sarranid_castle_guard"),                         #except these guys.
            (agent_get_team,":team_no", ":cur_agent"),                                #get their team
            (neq,":team_no",0),                                                      #if they are not at team 0(team 0 is player team) made it like this so we dont add our own soldiers to the castle garrison lol
            (try_begin),
                (agent_is_alive,":cur_agent"),                                      #if alive just add the troops back to the gorrison
                (party_add_members,"$current_town",":troop_type",1),
            (else_try),
                (agent_is_wounded,":cur_agent"),                                      #if wounded add the troops back to the gorrison and then wound them.
                (party_add_members,"$current_town",":troop_type",1),
                (party_wound_members,"$current_town",":troop_type",1),
            (try_end),
        (try_end),
     ]),
   ("remove_troops_from_garrison",
    [
        (store_script_param, ":troop", 1),
        (store_script_param, ":count", 2),

        (party_remove_members,"$current_town",":troop",":count"),
    ]),
   ("add_troops_back_to_garrison_menu",
    [
        (try_begin),
            (eq,"$all_doors_locked",0),
            (eq,"$troop_restore_offset",1),
            (store_current_scene,":cur_scene"),
            (gt,":cur_scene",0),
            (try_for_range, ":cur_town_slot", slot_town_center, slot_center_culture),
                (party_get_slot, ":town_scene", "$current_town", ":cur_town_slot"),
                (eq,":cur_scene",":town_scene"),
                (call_script, "script_add_troops_back_to_garrison"),
                (assign,reg1,":cur_scene"),
                (assign,reg2,":town_scene"),
                (display_message,"@works cur scene: {reg1} other scene: {reg2}"),
            (try_end),
        (try_end),
    ]),
    
####### NEW v3.1-KOMKE START- to fix siege bug: set all besiegers to guard center
  #script_order_lords_guard_center:
  # INPUT:
  # param1: defeated_center, param2: winner_faction
  # OUTPUT:
  # none
  ("order_lords_guard_center",
    [
    (store_script_param, ":defeated_center", 1),
    (store_script_param, ":winner_faction", 2),
    (try_for_range, ":kingdom_hero", active_npcs_begin, active_npcs_end),
        (troop_slot_eq, ":kingdom_hero", slot_troop_is_alive, 1),  ## he's alive/active
        (troop_get_slot, ":kingdom_hero_party", ":kingdom_hero", slot_troop_leaded_party),
        (gt, ":kingdom_hero_party", 0),
        (party_is_active, ":kingdom_hero_party"),
        (store_faction_of_party, ":kingdom_hero_party_faction", ":kingdom_hero_party"),
        (eq, ":winner_faction", ":kingdom_hero_party_faction"),
        (store_distance_to_party_from_party, ":dist", ":kingdom_hero_party", ":defeated_center"),
        (lt, ":dist", 5),
        (assign, ":has_besiege_ai", 0),
        (try_begin),
          (party_slot_eq, ":kingdom_hero_party", slot_party_ai_state, spai_besieging_center),
          (party_slot_eq, ":kingdom_hero_party", slot_party_ai_object, ":defeated_center"),
          (assign, ":has_besiege_ai", 1),
        (else_try),
          (party_slot_eq, ":kingdom_hero_party", slot_party_ai_state, spai_accompanying_army),
          (party_get_slot, ":kingdom_hero_party_commander_party", ":kingdom_hero_party", slot_party_ai_object),
          (party_slot_eq, ":kingdom_hero_party_commander_party", slot_party_ai_state, spai_besieging_center),
          (party_slot_eq, ":kingdom_hero_party_commander_party", slot_party_ai_object, ":defeated_center"),
          (assign, ":has_besiege_ai", 1),
        (try_end),
        (eq, ":has_besiege_ai", 1),
        (call_script, "script_party_set_ai_state", ":kingdom_hero_party", spai_holding_center, ":defeated_center"),
        # (party_set_slot, ":kingdom_hero_party", slot_party_commander_party, -1),
        (party_set_flags, ":kingdom_hero_party", pf_default_behavior, 1),
      (try_end),
  ]),


  #script_init_kingdoms_marshalls: at game start appoint marshall with highest renown for all initial factions
  # INPUT: none
  # OUTPUT: none
  # NOTES: call this script after lords have been initialized
  ("init_kingdoms_marshalls",
    [
    (try_for_range, ":cur_faction", npc_kingdoms_begin, enhanced_factions_begin),##only initial kingdoms
        (assign, ":highest_renown", 0),
        (try_for_range, ":cur_lord", lords_begin, "trp_enhanced_rnd_lord_1"),##only initial lords
            (store_faction_of_troop, ":cur_lord_faction", ":cur_lord"),
            (eq, ":cur_lord_faction", ":cur_faction"),
            (troop_get_slot, ":cur_lord_renown", ":cur_lord", slot_troop_renown),
            (gt, ":cur_lord_renown", ":highest_renown"),
            (assign, ":candidate", ":cur_lord"),
            (assign, ":highest_renown", ":cur_lord_renown"),
        (try_end),
        (gt, ":highest_renown", 0),
        (faction_set_slot, ":cur_faction", slot_faction_marshall, ":candidate"),
    (try_end),
  ]),

####### NEW v3.1-KOMKE END-
    
##Enhanced
############################################################################






############################ NEW v2.1
("get_random_name_for_lord_by_language",
  [
   (store_script_param, ":faction_no", 1),
   (store_script_param, ":cur_lord", 2),
   # (store_script_param, ":cur_lord_culture", 3),
   
   (str_clear, s1),  
   (str_clear, s2),  
   (str_clear, s3), 
   (str_clear, s4), 
   (str_clear, s5), 
   (assign, ":random_name", 0),  
   (assign, ":random_surname", 0),  
   
###########   
   (try_begin),      
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_finnish),    
       (store_random_in_range, ":random_name", "str_enhanced_name_finnish_1", "str_enhanced_name_serbian_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_finnish_1", "str_enhanced_name_serbian_1"), 
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_polish), 
       (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_serbian), 
       (store_random_in_range, ":random_name", "str_enhanced_name_serbian_1", "str_enhanced_surname_serbian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_serbian_1", "str_enhanced_name_welsh_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_welsh), 
       (store_random_in_range, ":random_name", "str_enhanced_name_welsh_1", "str_enhanced_surname_welsh_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_welsh_1", "str_enhanced_name_german_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_german), 
       (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_bulgarian), 
       (store_random_in_range, ":random_name", "str_enhanced_name_balkan_1", "str_enhanced_name_rus_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_balkan_1", "str_enhanced_name_rus_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_rus), 
       (store_random_in_range, ":random_name", "str_enhanced_name_rus_1", "str_enhanced_surname_rus_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_rus_1", "str_enhanced_name_danish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_danish),
       (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_norwegian),
       (store_random_in_range, ":random_name", "str_enhanced_name_norwegian_1", "str_enhanced_surname_norwegian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_norwegian_1", "str_enhanced_name_swedish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_swedish),
       (store_random_in_range, ":random_name", "str_enhanced_name_swedish_1", "str_enhanced_surname_swedish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_swedish_1", "str_enhanced_name_baltic_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_baltic), 
       (store_random_in_range, ":random_name", "str_enhanced_name_baltic_1", "str_enhanced_name_arab_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_baltic_1", "str_enhanced_name_french_1"), ### baltic nobles don't seem to have surnames
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"),   
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_arab), 
       (store_random_in_range, ":random_name", "str_enhanced_name_arab_1", "str_enhanced_surname_arab_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_arab_1", "str_enhanced_name_greek_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_greek), 
       (store_random_in_range, ":random_name", "str_enhanced_name_greek_1", "str_enhanced_surname_greek_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_greek_1", "str_enhanced_name_spanish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_spanish), 
       (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_portuguese), 
       (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_italian), 
       (store_random_in_range, ":random_name", "str_enhanced_name_italian_1", "str_enhanced_surname_italian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_italian_1", "str_enhanced_name_gaelic_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_gaelic), 
       (store_random_in_range, ":random_name", "str_enhanced_name_gaelic_1", "str_enhanced_surname_gaelic_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_gaelic_1", "str_enhanced_name_armenian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_armenian), 
       (store_random_in_range, ":random_name", "str_enhanced_name_armenian_1", "str_enhanced_surname_armenian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_armenian_1", "str_enhanced_name_turkish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_turkish), 
       (store_random_in_range, ":random_name", "str_enhanced_name_turkish_1", "str_enhanced_surname_turkish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_turkish_1", "str_enhanced_name_scottish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_scottish),
       (store_random_in_range, ":random_name", "str_enhanced_name_scottish_1", "str_enhanced_surname_scottish_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_scottish_1", "str_enhanced_name_polish_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"),  
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_hungarian),
       (store_random_in_range, ":random_name", "str_enhanced_name_hungarian_1", "str_enhanced_surname_hungarian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_hungarian_1", "str_enhanced_name_english_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_english),
       (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_french),
       (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_mongol),
       (store_random_in_range, ":random_name", "str_enhanced_name_mongolian_1", "str_enhanced_name_bohemian_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_mongolian_1", "str_enhanced_names_end"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_czech),
       (store_random_in_range, ":random_name", "str_enhanced_name_bohemian_1", "str_enhanced_surname_bohemian_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_bohemian_1", "str_enhanced_name_cuman_1"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
   ######## NEW v3.3   
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_cuman),
       (store_random_in_range, ":random_name", "str_enhanced_name_cuman_1", "str_enhanced_name_custom_1"),
       # (store_random_in_range, ":random_surname", "str_enhanced_surname_cuman_1", "str_enhanced_name_custom_1"),
       (str_store_string, s1, ":random_name"),  
       # (str_store_string, s2, ":random_surname"), 
   ########################
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_custom),
       (store_random_in_range, ":random_name", "str_enhanced_name_custom_1", "str_enhanced_surname_custom_1"),
       (store_random_in_range, ":random_surname", "str_enhanced_surname_custom_1", "str_enhanced_names_end"),
       (str_store_string, s1, ":random_name"),  
       (str_store_string, s2, ":random_surname"), 
   (else_try),
     (faction_slot_eq, ":faction_no", slot_faction_language, faction_language_mixed_euro),
     (call_script, "script_rand", 0, 100),  
     (try_begin), ### 20% english, 20% french, 20% german, 5% polish, 5% hungarian, 5% czech, 5% danish, 5% norwegian, 5% swedish, 10% iberian, 
       (lt, reg0, 20),
         (store_random_in_range, ":random_name", "str_enhanced_name_english_1", "str_enhanced_surname_english_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_english_1", "str_enhanced_name_french_1"),
      
     (else_try),
       (ge, reg0, 20),
       (lt, reg0, 40),
         (store_random_in_range, ":random_name", "str_enhanced_name_french_1", "str_enhanced_surname_french_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_french_1", "str_enhanced_name_mongolian_1"),
     
     (else_try),
       (ge, reg0, 40),
       (lt, reg0, 60),
         (store_random_in_range, ":random_name", "str_enhanced_name_german_1", "str_enhanced_surname_german_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_german_1", "str_enhanced_name_balkan_1"),
  
     (else_try),
       (ge, reg0, 60),
       (lt, reg0, 65),
         (store_random_in_range, ":random_name", "str_enhanced_name_polish_1", "str_enhanced_surname_polish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_polish_1", "str_enhanced_name_hungarian_1"),
     
     (else_try),
       (ge, reg0, 65),
       (lt, reg0, 70),
         (store_random_in_range, ":random_name", "str_enhanced_name_hungarian_1", "str_enhanced_surname_hungarian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_hungarian_1", "str_enhanced_name_english_1"),
    
     (else_try),
       (ge, reg0, 70),
       (lt, reg0, 75),
         (store_random_in_range, ":random_name", "str_enhanced_name_bohemian_1", "str_enhanced_surname_bohemian_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_bohemian_1", "str_enhanced_name_cuman_1"),
     
     (else_try),
       (ge, reg0, 75),
       (lt, reg0, 80),
         (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
     
     (else_try),
       (ge, reg0, 80),
       (lt, reg0, 85),
         (store_random_in_range, ":random_name", "str_enhanced_name_danish_1", "str_enhanced_surname_danish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_danish_1", "str_enhanced_name_norwegian_1"),
            
     (else_try),
       (ge, reg0, 85),
       (lt, reg0, 90),
         (store_random_in_range, ":random_name", "str_enhanced_name_swedish_1", "str_enhanced_surname_swedish_1"),
         (store_random_in_range, ":random_surname", "str_enhanced_surname_swedish_1", "str_enhanced_name_baltic_1"),
     
     (else_try),
       (call_script, "script_rand", 0, 100),  
       (try_begin), ### 70% spanish, 30% portuguese
         (lt, reg0, 30),
           (store_random_in_range, ":random_name", "str_enhanced_name_portuguese_1", "str_enhanced_surname_portuguese_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_portuguese_1", "str_enhanced_name_italian_1"),
       (else_try),
         (ge, reg0, 30),
           (store_random_in_range, ":random_name", "str_enhanced_name_spanish_1", "str_enhanced_surname_spanish_1"),
           (store_random_in_range, ":random_surname", "str_enhanced_surname_spanish_1", "str_enhanced_name_portuguese_1"),
       (try_end),        
     (try_end),        
     (str_store_string, s1, ":random_name"),  
     (str_store_string, s2, ":random_surname"), 
   (try_end),        
###########
   
   (troop_set_slot, ":cur_lord", slot_troop_original_name, ":random_name"),
   (troop_set_slot, ":cur_lord", slot_troop_original_surname, ":random_surname"),
   (faction_get_slot, ":faction_language", ":faction_no", slot_faction_language),   
   (call_script, "script_get_troop_title", ":cur_lord", ":faction_language"), ## gets a random title
   (troop_set_name, ":cur_lord", s3),
   (troop_set_plural_name, ":cur_lord", s3), ## script that gives the lord titles uses the plural  
   # (str_store_troop_name, s8, ":cur_lord"), 
   # (display_message, "@Gave {s8} a title (player faction)."), 
  ]),
###################################################################





######### NEW v3.3 - added randomization to lord's faces
("ee_set_random_face_for_hero_troop_by_culture",
  [
   (store_script_param, ":cur_lord", 1),
   (store_script_param, ":cur_lord_culture", 2),
   
   (str_clear, s45),
   ################# EURO
   (try_begin), 
     (this_or_next|eq, ":cur_lord_culture", fac_culture_finnish),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_mazovian),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_serbian),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_welsh),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_teutonic),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_balkan),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_rus),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_iberian),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_nordic),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_baltic),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_byzantium),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_italian),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_gaelic),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_scotish),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_western),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_templar),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_hospitaller),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_antioch),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_tripoli),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_ibelin),  
     ############## NEW v3.10
     (this_or_next|eq, ":cur_lord_culture", fac_culture_english),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_french),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_hungarian),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_polish),  
############################
     (this_or_next|eq, ":cur_lord_culture", fac_culture_player),   
     (eq, ":cur_lord_culture", fac_culture_jerusalem),
       # (call_script, "script_rand", "str_ee_face_key_euro_1", "str_ee_face_key_muslim_1"),   ### european
       (store_random_in_range, ":random", "str_ee_face_key_euro_1", "str_ee_face_key_muslim_1"),   ### european
       (str_store_string, s45, ":random"),  
   ################# MUSLIM
   (else_try), 
     (this_or_next|eq, ":cur_lord_culture", fac_culture_marinid),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_mamluke),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_andalus),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_anatolian_christian),  
     (this_or_next|eq, ":cur_lord_culture", fac_culture_cuman),  ####### NEW v3.3
     (eq, ":cur_lord_culture", fac_culture_anatolian),  
       # (call_script, "script_rand", "str_ee_face_key_muslim_1", "str_ee_face_key_asian_1"),   ### arab
       (store_random_in_range, ":random", "str_ee_face_key_muslim_1", "str_ee_face_key_asian_1"),   ### european
       (str_store_string, s45, ":random"),  
   ################# ASIAN
   (else_try), 
     (eq, ":cur_lord_culture", fac_culture_mongol), 
       # (call_script, "script_rand", "str_ee_face_key_asian_1", "str_ee_face_key_end"),   ### asian
       (store_random_in_range, ":random", "str_ee_face_key_asian_1", "str_ee_face_key_end"),   ### european
       (str_store_string, s45, ":random"),  
   (try_end), 
   
   (troop_set_slot, ":cur_lord", slot_troop_face_key, ":random"),  
   # (str_store_troop_name_link, s2, ":cur_lord"),  
   # (display_message, "@{s2} face key is {s1}"),  
   (troop_set_face_keys, ":cur_lord", ":random", 0),  
   (troop_set_face_keys, ":cur_lord", ":random", 1),  
]),
####################################





######### NEW v3.3 - if player decides to accept a lord spawn him in the map
("ee_spawn_lord_party",
  [
   (store_script_param, ":cur_lord", 1),
   (store_script_param, ":faction_no", 2),
     
   (troop_set_faction, ":cur_lord", ":faction_no"),  ## applies the faction

   (try_begin), ### CREATE PARTY 
     # (assign, ":break_loop", 0),
     (assign, ":upper_bound", walled_centers_end),
     (try_for_range, ":center_no", walled_centers_begin, ":upper_bound"),
       (store_faction_of_party, ":cur_center_faction", ":center_no"),
### NEW v3.1-KOMKE START-
       (try_begin),
            # (eq, ":faction_no", "fac_player_supporters_faction"),
            (faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"), ####### NEW v3.3
            (is_between, "$g_player_court", walled_centers_begin, walled_centers_end),
            (assign, ":center_no", "$g_player_court"),## so new lords are created at player court
            (assign, ":upper_bound", -1), ### breaks loop
        (else_try),
            (eq, ":cur_center_faction", ":faction_no"),
            (assign, ":upper_bound", -1), ### breaks loop
       (try_end),
       (eq, ":upper_bound", -1),## if a center is found
### NEW v3.1-KOMKE END- 
         # (str_store_troop_name, s6, ":cur_lord"),  
         # (str_store_faction_name, s7, ":cur_lord_culture"),  
         # (display_message, "@Found a center for him to spawn!"),
         # (assign, ":upper_bound", -1), ### breaks loop
         # (str_store_troop_name, s8, ":cur_lord"), 
         # (display_message, "@His name is {s8}."),
         (call_script, "script_create_kingdom_hero_party", ":cur_lord", ":center_no"),
         (assign, ":lords_party", "$pout_party"),
         # (display_message, "@Spawned him."),
         (party_attach_to_party, ":lords_party", ":center_no"),
         # (display_message, "@Attached him to center."),
         # (str_store_troop_name, s5, ":cur_lord"),  
         # (display_message, "@Stored his name."),
         # (party_set_name, "$pout_party", "str_s5_s_party"),  ### sets the party name
         (troop_set_slot, ":cur_lord", slot_troop_cur_center, ":center_no"),
         (party_set_faction, ":lords_party", ":faction_no"),  ## applies the faction
         
         # (display_message, "@{s6} party created at {s7}."),
   
         (troop_set_slot, ":cur_lord", slot_troop_occupation, slto_kingdom_hero), 
         (troop_set_slot, ":cur_lord", slot_troop_is_alive, 1),  ### he's active now
         # (display_message, "@He's alive!"),
                      
         ##### gives him some troops
         # (call_script, "script_rand", 15, 20), 
         # (assign, ":rand", reg0), 
         # (display_message, "@Gave him some troops."),   
         # (try_for_range, ":unused", 0, ":rand"),
           # (call_script, "script_hire_men_to_kingdom_hero_party", ":cur_lord"),
         # (try_end),
        ############### NEW v2.7 - the script above was giving incorrect troops so i changed it to this
        (faction_get_slot, ":reinforcements_a", ":faction_no", slot_faction_reinforcements_a),
        (faction_get_slot, ":reinforcements_b", ":faction_no", slot_faction_reinforcements_b),
        (faction_get_slot, ":reinforcements_c", ":faction_no", slot_faction_reinforcements_c),

        # (party_add_template, ":lords_party", ":reinforcements_a"),
        (party_add_template, ":lords_party", ":reinforcements_a"),
        (party_add_template, ":lords_party", ":reinforcements_c"),
        # (party_add_template, ":lords_party", ":reinforcements_b"),
        ####################tom
        # (party_add_template, ":lords_party", ":reinforcements_a"),
        (party_add_template, ":lords_party", ":reinforcements_b"),
        (party_add_template, ":lords_party", ":reinforcements_b"),
        # (party_add_template, ":lords_party", ":reinforcements_b"),
        ###############
         
         # (faction_get_slot, ":cur_faction_lord_count", ":faction_no", slot_faction_lord_count),  
         # (val_add, ":cur_faction_lord_count", 1),  
         # (faction_set_slot, ":faction_no", slot_faction_lord_count, ":cur_faction_lord_count"), 
   
         (call_script, "script_troop_set_title_according_to_faction", ":cur_lord", ":faction_no"), 
         (call_script, "script_update_troop_notes", ":cur_lord"),
         
         # (str_store_troop_name, s6, ":cur_lord"),  
         # (str_store_party_name, s7, ":center_no"),  
         # (str_store_faction_name, s8, ":faction_no"),  
         # (display_message, "@{s6} spawned at {s7} as part of {s8}."),   
         # (display_message, "@#########################"),
         
         (troop_set_note_available, ":cur_lord", 1),
### NEW v3.1-KOMKE START-send notification to player that new lord is created in that center
         # (try_begin),
           # (eq, ":faction_no", "fac_player_supporters_faction"),  
           # (call_script, "script_add_notification_menu", "mnu_notification_lord_created", ":cur_lord", ":center_no"),
         # (try_end),
### NEW v3.1-KOMKE END- 
    (try_end),
  (try_end),
]),
####################################


######### NEW v3.5 - moved this here from main script
("ee_setup_faction_troops",
  [
############################################################################
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_1_troop, "trp_teu_village_recruit"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_2_troop, "trp_teu_town_2_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_3_troop, "trp_teu_town_3_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_4_troop, "trp_teu_horse_3"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_5_troop, "trp_teu_horse_4"),
      
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_1_town_troop, "trp_teu_town_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_tier_1_castle_troop, "trp_teu_horse_1"),
      
      (faction_set_slot, "fac_culture_teutonic", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_teutonic", slot_faction_deserter_troop, "trp_teu_town_2_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_guard_troop, "trp_teu_town_2_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_messenger_troop, "trp_teu_horse_2"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_prison_guard_troop, "trp_teu_town_3_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_castle_guard_troop, "trp_teu_town_4_1"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_reinforcements_a, "pt_kingdom_teutonic_reinforcements_a"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_reinforcements_b, "pt_kingdom_teutonic_reinforcements_b"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_reinforcements_c, "pt_kingdom_teutonic_reinforcements_c"),
      (faction_set_slot, "fac_culture_teutonic", slot_faction_religion, religion_catholic),
############################################################################

############################################################################
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_1_troop, "trp_balt_recruit"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_2_troop, "trp_balt_footman"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_3_troop, "trp_balt_jav"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_4_troop, "trp_balt_veteran_jav"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_5_troop, "trp_balt_medium_cavalry"),
      
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_1_town_troop, "trp_balt_recruit_range"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_tier_1_castle_troop, "trp_balt_noble_recruit"),
      
      (faction_set_slot, "fac_culture_baltic", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_baltic", slot_faction_deserter_troop, "trp_balt_footman"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_guard_troop, "trp_balt_footman"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_messenger_troop, "trp_balt_mounted_skirmisher"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_prison_guard_troop, "trp_balt_billman"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_castle_guard_troop, "trp_balt_noble_2"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_reinforcements_a, "pt_kingdom_baltic_reinforcements_a"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_reinforcements_b, "pt_kingdom_baltic_reinforcements_b"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_reinforcements_c, "pt_kingdom_baltic_reinforcements_c"),
      (faction_set_slot, "fac_culture_baltic", slot_faction_religion, religion_pagan_balt),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_1_troop, "trp_tatar_tribesman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_2_troop, "trp_tatar_skirmisher"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_3_troop, "trp_tatar_horseman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_4_troop, "trp_tatar_horse_archer"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_5_troop, "trp_tatar_veteran_horse_archer"),
      
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_1_town_troop, "trp_tatar_tribesman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_tier_1_castle_troop, "trp_tatar_horseman"),
      
      (faction_set_slot, "fac_culture_mongol", slot_faction_town_walker_male_troop, "trp_khergit_townsman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_town_walker_female_troop, "trp_khergit_townswoman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_village_walker_male_troop, "trp_khergit_walker_1"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_village_walker_female_troop, "trp_khergit_walker_2"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_mongol", slot_faction_deserter_troop, "trp_tatar_skirmisher"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_guard_troop, "trp_tatar_skirmisher"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_messenger_troop, "trp_tatar_horseman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_prison_guard_troop, "trp_tatar_horseman"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_castle_guard_troop, "trp_tatar_heavy_lancer"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_reinforcements_a, "pt_kingdom_mongol_reinforcements_a"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_reinforcements_b, "pt_kingdom_mongol_reinforcements_b"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_reinforcements_c, "pt_kingdom_mongol_reinforcements_c"),
      (faction_set_slot, "fac_culture_mongol", slot_faction_religion, religion_pagan_mongol),
############################################################################



############################################################################
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_1_troop, "trp_nordic_village_recruit"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_2_troop, "trp_nordic_spearman"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_3_troop, "trp_nordic_veteran_spearman"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_4_troop, "trp_nordic_squire"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_5_troop, "trp_nordic_knight"),
      
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_1_town_troop, "trp_nordic_town_recruit"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_tier_1_castle_troop, "trp_nordic_light_cavalry"),
      
      (faction_set_slot, "fac_culture_nordic", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_nordic", slot_faction_deserter_troop, "trp_nordic_spearman"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_guard_troop, "trp_nordic_spearman"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_messenger_troop, "trp_nordic_light_cavalry"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_prison_guard_troop, "trp_nordic_veteran_spearman"),
      # (faction_set_slot, "fac_culture_nordic", slot_faction_castle_guard_troop, "trp_nordic_swords_sergeant"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_castle_guard_troop, "trp_nordic_spears_sergeant"), ###### NEW v3.9
      (faction_set_slot, "fac_culture_nordic", slot_faction_reinforcements_a, "pt_kingdom_nordic_reinforcements_a"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_reinforcements_b, "pt_kingdom_nordic_reinforcements_b"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_reinforcements_c, "pt_kingdom_nordic_reinforcements_c"),
      (faction_set_slot, "fac_culture_nordic", slot_faction_religion, religion_catholic),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_western", slot_faction_tier_1_troop, "trp_euro_village_recruit"),
      (faction_set_slot, "fac_culture_western", slot_faction_tier_2_troop, "trp_euro_spearman_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_tier_3_troop, "trp_euro_spearman_2"),
      (faction_set_slot, "fac_culture_western", slot_faction_tier_4_troop, "trp_euro_horse_3"),
      (faction_set_slot, "fac_culture_western", slot_faction_tier_5_troop, "trp_euro_horse_4"),
      
      (faction_set_slot, "fac_culture_western", slot_faction_tier_1_town_troop, "trp_euro_town_recruit"),
      (faction_set_slot, "fac_culture_western", slot_faction_tier_1_castle_troop, "trp_euro_horse_1"),

      (faction_set_slot, "fac_culture_western", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_western", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_western", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_western", slot_faction_deserter_troop, "trp_euro_spearman_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_guard_troop, "trp_euro_spearman_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_messenger_troop, "trp_euro_horse_1"),
      (faction_set_slot, "fac_culture_western", slot_faction_prison_guard_troop, "trp_euro_spearman_2"),
      (faction_set_slot, "fac_culture_western", slot_faction_castle_guard_troop, "trp_euro_spearman_3"),
      (faction_set_slot, "fac_culture_western", slot_faction_reinforcements_a, "pt_kingdom_western_reinforcements_a"),
      (faction_set_slot, "fac_culture_western", slot_faction_reinforcements_b, "pt_kingdom_western_reinforcements_b"),
      (faction_set_slot, "fac_culture_western", slot_faction_reinforcements_c, "pt_kingdom_western_reinforcements_c"),
      (faction_set_slot, "fac_culture_western", slot_faction_religion, religion_catholic),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_1_troop, "trp_scottish_village_recruit"),  #TOM
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_2_troop, "trp_scottish_clansman"), #TOM
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_3_troop, "trp_scottish_heavy_axeman"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_4_troop, "trp_scottish_heavy_swordsman"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_5_troop, "trp_euro_horse_4"),
      
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_1_town_troop, "trp_euro_village_recruit"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_tier_1_castle_troop, "trp_euro_horse_1"),
      
      (faction_set_slot, "fac_culture_scotish", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_scotish", slot_faction_deserter_troop, "trp_scottish_forinsec_spearman"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_guard_troop, "trp_scottish_forinsec_spearman"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_messenger_troop, "trp_euro_horse_2"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_prison_guard_troop, "trp_scottish_clansman"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_castle_guard_troop, "trp_scottish_heavy_swordsman"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_reinforcements_a, "pt_kingdom_scot_reinforcements_a"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_reinforcements_b, "pt_kingdom_scot_reinforcements_b"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_reinforcements_c, "pt_kingdom_scot_reinforcements_c"),
      (faction_set_slot, "fac_culture_scotish", slot_faction_religion, religion_catholic),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_1_troop, "trp_gaelic_village_recruit"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_2_troop, "trp_gaelic_village_footman"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_3_troop, "trp_gaelic_infantry_1"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_4_troop, "trp_gaelic_infantry_2"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_5_troop, "trp_gaelic_knight"),

      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_1_town_troop, "trp_gaelic_infantry_recruit"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_tier_1_castle_troop, "trp_gaelic_light_cavalry"),
      
      (faction_set_slot, "fac_culture_gaelic", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_gaelic", slot_faction_deserter_troop, "trp_gaelic_village_footman"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_guard_troop, "trp_gaelic_village_footman"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_messenger_troop, "trp_gaelic_light_cavalry"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_prison_guard_troop, "trp_gaelic_infantry_1"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_castle_guard_troop, "trp_gaelic_knight"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_reinforcements_a, "pt_kingdom_gaelic_reinforcements_a"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_reinforcements_b, "pt_kingdom_gaelic_reinforcements_b"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_reinforcements_c, "pt_kingdom_gaelic_reinforcements_c"),
      (faction_set_slot, "fac_culture_gaelic", slot_faction_religion, religion_catholic),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_1_troop, "trp_rus_vil_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_2_troop, "trp_rus_vil_2_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_3_troop, "trp_rus_town_3_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_4_troop, "trp_rus_town_4_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_5_troop, "trp_rus_horse_4"),
      
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_1_town_troop, "trp_rus_town_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_tier_1_castle_troop, "trp_rus_horse_1"),
      
      (faction_set_slot, "fac_culture_rus", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_rus", slot_faction_deserter_troop, "trp_rus_town_1"),
      (faction_set_slot, "fac_culture_rus", slot_faction_guard_troop, "trp_rus_town_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_messenger_troop, "trp_rus_horse_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_prison_guard_troop, "trp_rus_town_3_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_castle_guard_troop, "trp_rus_town_4_2"),
      (faction_set_slot, "fac_culture_rus", slot_faction_reinforcements_a, "pt_kingdom_rus_reinforcements_a"),
      (faction_set_slot, "fac_culture_rus", slot_faction_reinforcements_b, "pt_kingdom_rus_reinforcements_b"),
      (faction_set_slot, "fac_culture_rus", slot_faction_reinforcements_c, "pt_kingdom_rus_reinforcements_c"),
      (faction_set_slot, "fac_culture_rus", slot_faction_religion, religion_orthodox),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_1_troop, "trp_iberian_village_recruit"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_2_troop, "trp_iberian_village_footman"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_3_troop, "trp_iberian_veteran_spearman"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_4_troop, "trp_iberian_spears_sergeant"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_5_troop, "trp_iberian_knight"),
      
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_1_town_troop, "trp_iberian_town_recruit"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_tier_1_castle_troop, "trp_iberian_light_cavalry"),

      (faction_set_slot, "fac_culture_iberian", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_iberian", slot_faction_deserter_troop, "trp_iberian_town_footman_1"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_guard_troop, "trp_iberian_veteran_spearman"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_messenger_troop, "trp_iberian_medium_cavalry"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_prison_guard_troop, "trp_iberian_veteran_spearman"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_castle_guard_troop, "trp_iberian_spears_sergeant"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_reinforcements_a, "pt_kingdom_iberain_reinforcements_a"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_reinforcements_b, "pt_kingdom_iberain_reinforcements_b"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_reinforcements_c, "pt_kingdom_iberain_reinforcements_c"),
      (faction_set_slot, "fac_culture_iberian", slot_faction_religion, religion_catholic),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_1_troop, "trp_italian_village_recruit"),
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_2_troop, "trp_italian_village_footman"),
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_3_troop, "trp_italian_veteran_spearman"),
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_4_troop, "trp_italian_spears_sergeant"),
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_5_troop, "trp_italian_knight"),
      
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_1_town_troop, "trp_italian_town_recruit"),
      (faction_set_slot, "fac_culture_italian", slot_faction_tier_1_castle_troop, "trp_italian_light_cavalry"),

      (faction_set_slot, "fac_culture_italian", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_italian", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_italian", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_italian", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_italian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_italian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_italian", slot_faction_deserter_troop, "trp_italian_town_footman_1"),
      (faction_set_slot, "fac_culture_italian", slot_faction_guard_troop, "trp_italian_veteran_spearman"),
      (faction_set_slot, "fac_culture_italian", slot_faction_messenger_troop, "trp_italian_medium_cavalry"),
      (faction_set_slot, "fac_culture_italian", slot_faction_prison_guard_troop, "trp_italian_veteran_spearman"),
      (faction_set_slot, "fac_culture_italian", slot_faction_castle_guard_troop, "trp_italian_spears_sergeant"),
      (faction_set_slot, "fac_culture_italian", slot_faction_reinforcements_a, "pt_kingdom_italian_reinforcements_a"),
      (faction_set_slot, "fac_culture_italian", slot_faction_reinforcements_b, "pt_kingdom_italian_reinforcements_b"),
      (faction_set_slot, "fac_culture_italian", slot_faction_reinforcements_c, "pt_kingdom_italian_reinforcements_c"),
      (faction_set_slot, "fac_culture_italian", slot_faction_religion, religion_catholic),
############################################################################



############################################################################
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_1_troop, "trp_andalus_village_recruit"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_2_troop, "trp_andalus_village_footman"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_3_troop, "trp_andalus_village_infantry"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_4_troop, "trp_andalus_town_xbow_3"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_5_troop, "trp_andalus_horse_4"),
      
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_1_town_troop, "trp_andalus_town_recruit"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_tier_1_castle_troop, "trp_andalus_horse_1"),

      (faction_set_slot, "fac_culture_andalus", slot_faction_town_walker_male_troop, "trp_sarranid_townsman"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_town_walker_female_troop, "trp_sarranid_townswoman"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_village_walker_male_troop, "trp_sarranid_walker_1"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_village_walker_female_troop, "trp_sarranid_walker_2"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_andalus", slot_faction_deserter_troop, "trp_andalus_spearman_1"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_guard_troop, "trp_andalus_spearman_1"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_messenger_troop, "trp_andalus_horse_2"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_prison_guard_troop, "trp_andalus_spearman_2"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_castle_guard_troop, "trp_andalus_horse_3"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_reinforcements_a, "pt_kingdom_andalus_reinforcements_a"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_reinforcements_b, "pt_kingdom_andalus_reinforcements_b"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_reinforcements_c, "pt_kingdom_andalus_reinforcements_c"),
      (faction_set_slot, "fac_culture_andalus", slot_faction_religion, religion_muslim),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_1_troop, "trp_byz_village_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_2_troop, "trp_byz_town_2"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_3_troop, "trp_byz_town_3_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_4_troop, "trp_byz_castle_3"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_5_troop, "trp_byz_castle_4"),
      
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_1_town_troop, "trp_byz_town_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_tier_1_castle_troop, "trp_byz_castle_1"),
      
      (faction_set_slot, "fac_culture_byzantium", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_byzantium", slot_faction_deserter_troop, "trp_byz_town_2"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_guard_troop, "trp_byz_town_2"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_messenger_troop, "trp_byz_castle_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_prison_guard_troop, "trp_byz_town_3_1"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_castle_guard_troop, "trp_byz_castle_4"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_reinforcements_a, "pt_kingdom_byzantium_reinforcements_a"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_reinforcements_b, "pt_kingdom_byzantium_reinforcements_b"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_reinforcements_c, "pt_kingdom_byzantium_reinforcements_c"),
      (faction_set_slot, "fac_culture_byzantium", slot_faction_religion, religion_orthodox),
############################################################################


############################################################################
      ######## NEW v2.8
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_1_troop, "trp_bedouin_recruit"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_2_troop, "trp_halqa_archer"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_3_troop, "trp_bedouin_cavalry_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_4_troop, "trp_mamluk_cavalry_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_5_troop, "trp_ghulam_cavalry_2"),
      
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_1_town_troop, "trp_halqa_recruit"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_tier_1_castle_troop, "trp_slave_recruit"),
      ########      
      
      (faction_set_slot, "fac_culture_mamluke", slot_faction_town_walker_male_troop, "trp_sarranid_townsman"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_town_walker_female_troop, "trp_sarranid_townswoman"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_village_walker_male_troop, "trp_sarranid_walker_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_village_walker_female_troop, "trp_sarranid_walker_2"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_mamluke", slot_faction_deserter_troop, "trp_halqa_archer"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_guard_troop, "trp_bedouin_javelin_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_messenger_troop, "trp_ghulam_cavalry_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_prison_guard_troop, "trp_halqa_cavalry_1"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_castle_guard_troop, "trp_ghulam_cavalry_3"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_reinforcements_a, "pt_kingdom_mamluke_reinforcements_a"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_reinforcements_b, "pt_kingdom_mamluke_reinforcements_b"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_reinforcements_c, "pt_kingdom_mamluke_reinforcements_c"),
      (faction_set_slot, "fac_culture_mamluke", slot_faction_religion, religion_muslim),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_1_troop, "trp_anatolian_village_recruit_christ"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_2_troop, "trp_anatolian_christian_spearman_1"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_3_troop, "trp_anatolian_christian_spearman_2"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_4_troop, "trp_anatolian_medium_cavalry"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_5_troop, "trp_anatolian_heavy_cavalry"),
      
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_1_town_troop, "trp_anatolian_town_recruit_christ"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_tier_1_castle_troop, "trp_anatolian_castle_recruit_christ"),

      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_town_walker_male_troop, "trp_sarranid_townsman"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_town_walker_female_troop, "trp_sarranid_townswoman"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_village_walker_male_troop, "trp_sarranid_walker_1"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_village_walker_female_troop, "trp_sarranid_walker_2"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_deserter_troop, "trp_anatolian_christian_spearman_1"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_guard_troop, "trp_anatolian_christian_spearman_1"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_messenger_troop, "trp_anatolian_christian_archer_1"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_prison_guard_troop, "trp_anatolian_christian_spearman_2"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_castle_guard_troop, "trp_anatolian_medium_cavalry"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_reinforcements_a, "pt_kingdom_anatolian_christian_reinforcements_a"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_reinforcements_b, "pt_kingdom_anatolian_christian_reinforcements_b"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_reinforcements_c, "pt_kingdom_anatolian_christian_reinforcements_c"),
      (faction_set_slot, "fac_culture_anatolian_christian", slot_faction_religion, religion_catholic),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_1_troop, "trp_anatolian_village_recruit"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_2_troop, "trp_anatolian_muslim_infantry_1"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_3_troop, "trp_anatolian_muslim_infantry_2"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_4_troop, "trp_anatolian_turkoman_2"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_5_troop, "trp_anatolian_turkoman_3"),
      
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_1_town_troop, "trp_anatolian_town_recruit"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_tier_1_castle_troop, "trp_anatolian_castle_recruit"),
      
      (faction_set_slot, "fac_culture_anatolian", slot_faction_town_walker_male_troop, "trp_sarranid_townsman"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_town_walker_female_troop, "trp_sarranid_townswoman"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_village_walker_male_troop, "trp_sarranid_walker_1"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_village_walker_female_troop, "trp_sarranid_walker_2"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_anatolian", slot_faction_deserter_troop, "trp_anatolian_muslim_infantry_1"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_guard_troop, "trp_anatolian_muslim_infantry_1"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_messenger_troop, "trp_anatolian_muslim_javelineer"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_prison_guard_troop, "trp_anatolian_muslim_infantry_2"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_castle_guard_troop, "trp_anatolian_turkoman_2"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_reinforcements_a, "pt_kingdom_anatolian_reinforcements_a"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_reinforcements_b, "pt_kingdom_anatolian_reinforcements_a"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_reinforcements_c, "pt_kingdom_anatolian_reinforcements_a"),
      (faction_set_slot, "fac_culture_anatolian", slot_faction_religion, religion_muslim),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_1_troop, "trp_serbian_vil_recruit"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_2_troop, "trp_serbian_vil_spearman"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_3_troop, "trp_serbian_vil_spearman_veteran"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_4_troop, "trp_serbian_horse_3"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_5_troop, "trp_serbian_horse_4"),
      
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_1_town_troop, "trp_serbian_town_recruit"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_tier_1_castle_troop, "trp_serbian_horse_1"),
      
      (faction_set_slot, "fac_culture_serbian", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_serbian", slot_faction_deserter_troop, "trp_serbian_vil_spearman"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_guard_troop, "trp_serbian_vil_footman"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_messenger_troop, "trp_serbian_horse_2"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_prison_guard_troop, "trp_serbian_vil_spearman"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_castle_guard_troop, "trp_serbian_horse_3"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_reinforcements_a, "pt_kingdom_serbian_reinforcements_a"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_reinforcements_b, "pt_kingdom_serbian_reinforcements_b"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_reinforcements_c, "pt_kingdom_serbian_reinforcements_c"),
      (faction_set_slot, "fac_culture_serbian", slot_faction_religion, religion_orthodox),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_1_troop, "trp_balkan_vil_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_2_troop, "trp_balkan_town_2_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_3_troop, "trp_balkan_town_3_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_4_troop, "trp_balkan_horse_3"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_5_troop, "trp_balkan_horse_4"),
      
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_1_town_troop, "trp_balkan_town_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_tier_1_castle_troop, "trp_balkan_horse_1"),
      
      (faction_set_slot, "fac_culture_balkan", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_balkan", slot_faction_deserter_troop, "trp_balkan_town_2_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_guard_troop, "trp_balkan_town_2_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_messenger_troop, "trp_balkan_horse_2"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_prison_guard_troop, "trp_balkan_town_3_1"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_castle_guard_troop, "trp_balkan_horse_3"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_reinforcements_a, "pt_kingdom_balkan_reinforcements_a"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_reinforcements_b, "pt_kingdom_balkan_reinforcements_b"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_reinforcements_c, "pt_kingdom_balkan_reinforcements_c"),
      (faction_set_slot, "fac_culture_balkan", slot_faction_religion, religion_orthodox),
############################################################################


############################################################################
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_1_troop, "trp_marinid_village_rabble"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_2_troop, "trp_marinid_skirmishers"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_3_troop, "trp_marinid_javelin_infantry"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_4_troop, "trp_marinid_lancer"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_5_troop, "trp_marinid_mounted_skirmisher_3"),
      
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_1_town_troop, "trp_marinid_town_recruit"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_tier_1_castle_troop, "trp_marinid_mounted_skirmisher_1"),
      
      (faction_set_slot, "fac_culture_marinid", slot_faction_town_walker_male_troop, "trp_sarranid_townsman"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_town_walker_female_troop, "trp_sarranid_townswoman"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_village_walker_male_troop, "trp_sarranid_walker_1"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_village_walker_female_troop, "trp_sarranid_walker_2"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_marinid", slot_faction_deserter_troop, "trp_marinid_skirmishers"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_guard_troop, "trp_marinid_levy_spearman"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_messenger_troop, "trp_marinid_mounted_skirmisher_1"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_prison_guard_troop, "trp_marinid_light_spearmen"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_castle_guard_troop, "trp_marinid_lancer"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_reinforcements_a, "pt_kingdom_marinid_reinforcements_a"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_reinforcements_b, "pt_kingdom_marinid_reinforcements_b"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_reinforcements_c, "pt_kingdom_marinid_reinforcements_c"),
      (faction_set_slot, "fac_culture_marinid", slot_faction_religion, religion_muslim),
############################################################################

############################################################################
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_1_troop, "trp_welsh_archer_recruit"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_2_troop, "trp_welsh_spearman_1"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_3_troop, "trp_welsh_spearman_2"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_4_troop, "trp_welsh_horse_3"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_5_troop, "trp_welsh_horse_4"),
      
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_1_town_troop, "trp_welsh_recruit"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_tier_1_castle_troop, "trp_welsh_horse_1"),
      
      (faction_set_slot, "fac_culture_welsh", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
     
      (faction_set_slot, "fac_culture_welsh", slot_faction_deserter_troop, "trp_welsh_spearman_2"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_guard_troop, "trp_welsh_spearman_1"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_messenger_troop, "trp_welsh_horse_2"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_prison_guard_troop, "trp_welsh_spearman_2"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_castle_guard_troop, "trp_welsh_horse_4"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_reinforcements_a, "pt_kingdom_welsh_reinforcements_a"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_reinforcements_b, "pt_kingdom_welsh_reinforcements_b"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_reinforcements_c, "pt_kingdom_welsh_reinforcements_c"),
      (faction_set_slot, "fac_culture_welsh", slot_faction_religion, religion_catholic),
############################################################################

############################################################################

      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_1_troop, "trp_finn_village_recruit"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_2_troop, "trp_finn_footman"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_3_troop, "trp_finn_spearman"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_4_troop, "trp_finn_skirmisher"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_5_troop, "trp_finn_archer"),
      
      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_1_town_troop, "trp_finn_archer_recruit"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_tier_1_castle_troop, "trp_finn_noble_1"),
      
      (faction_set_slot, "fac_culture_finnish", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_finnish", slot_faction_deserter_troop, "trp_finn_footman"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_guard_troop, "trp_finn_footman"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_messenger_troop, "trp_finn_skirmisher"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_prison_guard_troop, "trp_finn_spearman"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_castle_guard_troop, "trp_finn_noble_3"),
      (faction_set_slot, "fac_culture_finnish",  slot_faction_reinforcements_a, "pt_kingdom_finnish_reinforcements_a"),
      (faction_set_slot, "fac_culture_finnish",  slot_faction_reinforcements_b, "pt_kingdom_finnish_reinforcements_b"),
      (faction_set_slot, "fac_culture_finnish",  slot_faction_reinforcements_c, "pt_kingdom_finnish_reinforcements_c"),
      (faction_set_slot, "fac_culture_finnish", slot_faction_religion, religion_catholic),
############################################################################



############################################################################
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_1_troop, "trp_mazovian_village_recruit"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_2_troop, "trp_mazovian_spearman_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_3_troop, "trp_mazovian_spearman_2"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_4_troop, "trp_mazovian_horse_3"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_5_troop, "trp_mazovian_horse_4"),
      
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_1_town_troop, "trp_mazovian_town_recruit"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_tier_1_castle_troop, "trp_mazovian_horse_1"),
      
      (faction_set_slot, "fac_culture_mazovian", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_mazovian", slot_faction_deserter_troop, "trp_mazovian_spearman_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_guard_troop, "trp_mazovian_spearman_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_messenger_troop, "trp_mazovian_archer_1"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_prison_guard_troop, "trp_mazovian_spearman_2"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_castle_guard_troop, "trp_mazovian_horse_3"),
      (faction_set_slot, "fac_culture_mazovian",  slot_faction_reinforcements_a, "pt_kingdom_mazovian_reinforcements_a"),
      (faction_set_slot, "fac_culture_mazovian",  slot_faction_reinforcements_b, "pt_kingdom_mazovian_reinforcements_b"),
      (faction_set_slot, "fac_culture_mazovian",  slot_faction_reinforcements_c, "pt_kingdom_mazovian_reinforcements_c"),
      (faction_set_slot, "fac_culture_mazovian", slot_faction_religion, religion_catholic),
############################################################################      
      
################################# NEW v1.8 - Crusader cultures
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_1_troop, "trp_euro_village_recruit_templar"), 
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_2_troop, "trp_euro_spearman_1_templar"), 
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_3_troop, "trp_templar_spearman_1"),
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_4_troop, "trp_templar_half_brother"),
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_5_troop, "trp_templar_knight"),
      
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_1_town_troop, "trp_euro_town_recruit_templar"),
      (faction_set_slot, "fac_culture_templar", slot_faction_tier_1_castle_troop, "trp_euro_horse_1_templar"),
      
      (faction_set_slot, "fac_culture_templar", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_templar", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_templar", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_templar", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_templar", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_templar", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_templar", slot_faction_deserter_troop, "trp_euro_spearman_1_templar"),
      (faction_set_slot, "fac_culture_templar", slot_faction_guard_troop, "trp_euro_spearman_1_templar"),
      (faction_set_slot, "fac_culture_templar", slot_faction_messenger_troop, "trp_euro_horse_2_templar"),
      (faction_set_slot, "fac_culture_templar", slot_faction_prison_guard_troop, "trp_templar_spearman_1"),
      (faction_set_slot, "fac_culture_templar", slot_faction_castle_guard_troop, "trp_templar_spearman_2"),
      (faction_set_slot, "fac_culture_templar", slot_faction_reinforcements_a, "pt_templar_reinforcements_a"),
      (faction_set_slot, "fac_culture_templar", slot_faction_reinforcements_b, "pt_templar_reinforcements_b"),
      (faction_set_slot, "fac_culture_templar", slot_faction_reinforcements_c, "pt_templar_reinforcements_c"),
      (faction_set_slot, "fac_culture_templar", slot_faction_religion, religion_catholic),
#####################################################################################

      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_1_troop, "trp_euro_village_recruit_hospitaller"), 
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_2_troop, "trp_euro_spearman_1"), 
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_3_troop, "trp_hospitaller_spearman_1"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_4_troop, "trp_hospitaller_half_brother"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_5_troop, "trp_hospitaller_knight"),
      
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_1_town_troop, "trp_euro_town_recruit_hospitaller"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_tier_1_castle_troop, "trp_euro_horse_1_hospitaller"),
      
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_deserter_troop, "trp_euro_spearman_1_hospitaller"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_guard_troop, "trp_euro_spearman_1_hospitaller"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_messenger_troop, "trp_euro_horse_2_hospitaller"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_prison_guard_troop, "trp_hospitaller_spearman_1"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_castle_guard_troop, "trp_hospitaller_spearman_2"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_reinforcements_a, "pt_hospitaller_reinforcements_a"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_reinforcements_b, "pt_hospitaller_reinforcements_b"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_reinforcements_c, "pt_hospitaller_reinforcements_c"),
      (faction_set_slot, "fac_culture_hospitaller", slot_faction_religion, religion_catholic),
######################################################################################



################################# NEW v2.1 - NEW CWE CRUSADER FACTIONS
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_1_troop, "trp_euro_village_recruit_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_2_troop, "trp_euro_spearman_1_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_3_troop, "trp_euro_spearman_2_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_4_troop, "trp_euro_horse_3_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_5_troop, "trp_euro_horse_4_antioch"),
                                      
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_1_town_troop, "trp_euro_town_recruit_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_tier_1_castle_troop, "trp_euro_horse_1_antioch"),
                                      
      (faction_set_slot, "fac_culture_antioch", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_antioch", slot_faction_deserter_troop, "trp_euro_spearman_1_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_guard_troop, "trp_euro_spearman_1_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_messenger_troop, "trp_euro_horse_1_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_prison_guard_troop, "trp_euro_spearman_2_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_castle_guard_troop, "trp_euro_spearman_3_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_reinforcements_a, "pt_kingdom_western_reinforcements_a_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_reinforcements_b, "pt_kingdom_western_reinforcements_b_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_reinforcements_c, "pt_kingdom_western_reinforcements_c_antioch"),
      (faction_set_slot, "fac_culture_antioch", slot_faction_religion, religion_catholic),
##########################################################################

      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_1_troop, "trp_euro_village_recruit_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_2_troop, "trp_euro_spearman_1_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_3_troop, "trp_euro_spearman_2_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_4_troop, "trp_euro_horse_3_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_5_troop, "trp_euro_horse_4_tripoli"),
                                      
      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_1_town_troop, "trp_euro_town_recruit_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_tier_1_castle_troop, "trp_euro_horse_1_tripoli"),
                                      
      (faction_set_slot, "fac_culture_tripoli", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_tripoli", slot_faction_deserter_troop, "trp_euro_spearman_1_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_guard_troop, "trp_euro_spearman_1_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_messenger_troop, "trp_euro_horse_1_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_prison_guard_troop, "trp_euro_spearman_2_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_castle_guard_troop, "trp_euro_spearman_3_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_reinforcements_a, "pt_kingdom_western_reinforcements_a_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_reinforcements_b, "pt_kingdom_western_reinforcements_b_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_reinforcements_c, "pt_kingdom_western_reinforcements_c_tripoli"),
      (faction_set_slot, "fac_culture_tripoli", slot_faction_religion, religion_catholic),
##########################################################################


      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_1_troop, "trp_euro_village_recruit_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_2_troop, "trp_euro_spearman_1_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_3_troop, "trp_euro_spearman_2_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_4_troop, "trp_euro_horse_3_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_5_troop, "trp_euro_horse_4_ibelin"),
                                      
      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_1_town_troop, "trp_euro_town_recruit_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_tier_1_castle_troop, "trp_euro_horse_1_ibelin"),
                                      
      (faction_set_slot, "fac_culture_ibelin", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_ibelin", slot_faction_deserter_troop, "trp_euro_spearman_1_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_guard_troop, "trp_euro_spearman_1_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_messenger_troop, "trp_euro_horse_1_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_prison_guard_troop, "trp_euro_spearman_2_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_castle_guard_troop, "trp_euro_spearman_3_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_reinforcements_a, "pt_kingdom_western_reinforcements_a_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_reinforcements_b, "pt_kingdom_western_reinforcements_b_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_reinforcements_c, "pt_kingdom_western_reinforcements_c_ibelin"),
      (faction_set_slot, "fac_culture_ibelin", slot_faction_religion, religion_catholic),
##########################################################################


      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_1_troop, "trp_euro_village_recruit_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_2_troop, "trp_euro_spearman_1_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_3_troop, "trp_euro_spearman_2_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_4_troop, "trp_euro_horse_3_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_5_troop, "trp_euro_horse_4_jerusalem"),
                                      
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_1_town_troop, "trp_euro_town_recruit_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_tier_1_castle_troop, "trp_euro_horse_1_jerusalem"),
                                      
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_deserter_troop, "trp_euro_spearman_1_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_guard_troop, "trp_euro_spearman_1_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_messenger_troop, "trp_euro_horse_1_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_prison_guard_troop, "trp_euro_spearman_2_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_castle_guard_troop, "trp_euro_spearman_3_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_reinforcements_a, "pt_kingdom_western_reinforcements_a_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_reinforcements_b, "pt_kingdom_western_reinforcements_b_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_reinforcements_c, "pt_kingdom_western_reinforcements_c_jerusalem"),
      (faction_set_slot, "fac_culture_jerusalem", slot_faction_religion, religion_catholic),
##########################################################################

########################### NEW v3.3
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_1_troop, "trp_euro_village_recruit"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_2_troop, "trp_euro_spearman_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_3_troop, "trp_euro_spearman_2"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_4_troop, "trp_euro_horse_3"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_5_troop, "trp_euro_horse_4"),
                                      
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_1_town_troop, "trp_euro_town_recruit"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_tier_1_castle_troop, "trp_euro_horse_1"),
                                      
      (faction_set_slot, "fac_culture_crusader", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_crusader", slot_faction_deserter_troop, "trp_euro_spearman_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_guard_troop, "trp_euro_spearman_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_messenger_troop, "trp_euro_horse_1"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_prison_guard_troop, "trp_euro_spearman_2"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_castle_guard_troop, "trp_euro_spearman_3"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_reinforcements_a, "pt_kingdom_western_reinforcements_a"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_reinforcements_b, "pt_kingdom_western_reinforcements_b"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_reinforcements_c, "pt_kingdom_western_reinforcements_c"),
      (faction_set_slot, "fac_culture_crusader", slot_faction_religion, religion_catholic),
###########################
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_1_troop, "trp_cuman_tribesman"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_2_troop, "trp_cuman_skirmisher"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_3_troop, "trp_cuman_horseman"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_4_troop, "trp_cuman_lancer"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_5_troop, "trp_cuman_heavy_lancer"),
                                      
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_1_town_troop, "trp_cuman_skirmisher"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_tier_1_castle_troop, "trp_cuman_horseman"),
                                      
      (faction_set_slot, "fac_culture_cuman", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_cuman", slot_faction_deserter_troop, "trp_cuman_skirmisher"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_guard_troop, "trp_cuman_skirmisher"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_messenger_troop, "trp_cuman_horseman"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_prison_guard_troop, "trp_cuman_horseman"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_castle_guard_troop, "trp_cuman_lancer"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_reinforcements_a, "pt_kingdom_cuman_reinforcements_a"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_reinforcements_b, "pt_kingdom_cuman_reinforcements_b"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_reinforcements_c, "pt_kingdom_cuman_reinforcements_c"),
      (faction_set_slot, "fac_culture_cuman", slot_faction_religion, religion_pagan_mongol),
############################################################################################################
############## NEW v3.10
      (faction_set_slot, "fac_culture_english", slot_faction_tier_1_troop, "trp_english_village_recruit"),
      (faction_set_slot, "fac_culture_english", slot_faction_tier_2_troop, "trp_english_levy_spearman"),
      (faction_set_slot, "fac_culture_english", slot_faction_tier_3_troop, "trp_english_demi_lancer"),
      (faction_set_slot, "fac_culture_english", slot_faction_tier_4_troop, "trp_english_squire"),
      (faction_set_slot, "fac_culture_english", slot_faction_tier_5_troop, "trp_english_knight"),
                                      
      (faction_set_slot, "fac_culture_english", slot_faction_tier_1_town_troop, "trp_english_town_recruit"),
      (faction_set_slot, "fac_culture_english", slot_faction_tier_1_castle_troop, "trp_english_hobilar"),
                                      
      (faction_set_slot, "fac_culture_english", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_english", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_english", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_english", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_english", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_english", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_english", slot_faction_deserter_troop, "trp_english_levy_spearman"),
      (faction_set_slot, "fac_culture_english", slot_faction_guard_troop, "trp_english_levy_spearman"),
      (faction_set_slot, "fac_culture_english", slot_faction_messenger_troop, "trp_english_demi_lancer"),
      (faction_set_slot, "fac_culture_english", slot_faction_prison_guard_troop, "trp_english_levy_spearman"),
      (faction_set_slot, "fac_culture_english", slot_faction_castle_guard_troop, "trp_english_armoured_swordsman"),
      (faction_set_slot, "fac_culture_english", slot_faction_reinforcements_a, "pt_kingdom_english_reinforcements_a"),
      (faction_set_slot, "fac_culture_english", slot_faction_reinforcements_b, "pt_kingdom_english_reinforcements_b"),
      (faction_set_slot, "fac_culture_english", slot_faction_reinforcements_c, "pt_kingdom_english_reinforcements_c"),
      (faction_set_slot, "fac_culture_english", slot_faction_religion, religion_catholic),
############################
      (faction_set_slot, "fac_culture_french", slot_faction_tier_1_troop, "trp_french_village_recruit"),
      (faction_set_slot, "fac_culture_french", slot_faction_tier_2_troop, "trp_french_levy_spearman"),
      (faction_set_slot, "fac_culture_french", slot_faction_tier_3_troop, "trp_french_mounted_sergeant"),
      (faction_set_slot, "fac_culture_french", slot_faction_tier_4_troop, "trp_french_squire"),
      (faction_set_slot, "fac_culture_french", slot_faction_tier_5_troop, "trp_french_knight"),
                                      
      (faction_set_slot, "fac_culture_french", slot_faction_tier_1_town_troop, "trp_french_town_recruit"),
      (faction_set_slot, "fac_culture_french", slot_faction_tier_1_castle_troop, "trp_french_mounted_archer"),
                                      
      (faction_set_slot, "fac_culture_french", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_french", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_french", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_french", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_french", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_french", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_french", slot_faction_deserter_troop, "trp_french_levy_spearman"),
      (faction_set_slot, "fac_culture_french", slot_faction_guard_troop, "trp_french_levy_spearman"),
      (faction_set_slot, "fac_culture_french", slot_faction_messenger_troop, "trp_french_mounted_archer"),
      (faction_set_slot, "fac_culture_french", slot_faction_prison_guard_troop, "trp_french_levy_spearman"),
      (faction_set_slot, "fac_culture_french", slot_faction_castle_guard_troop, "trp_french_armoured_sergeant"),
      (faction_set_slot, "fac_culture_french", slot_faction_reinforcements_a, "pt_kingdom_french_reinforcements_a"),
      (faction_set_slot, "fac_culture_french", slot_faction_reinforcements_b, "pt_kingdom_french_reinforcements_b"),
      (faction_set_slot, "fac_culture_french", slot_faction_reinforcements_c, "pt_kingdom_french_reinforcements_c"),
      (faction_set_slot, "fac_culture_french", slot_faction_religion, religion_catholic),
############################
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_1_troop, "trp_hungarian_village_recruit"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_2_troop, "trp_slav_levy"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_3_troop, "trp_hungarian_pavise_spearman"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_4_troop, "trp_hungarian_squire"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_5_troop, "trp_hungarian_knight"),
                                      
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_1_town_troop, "trp_hungarian_town_recruit"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_tier_1_castle_troop, "trp_hungarian_merchant_cavalry"),
                                      
      (faction_set_slot, "fac_culture_hungarian", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_hungarian", slot_faction_deserter_troop, "trp_slav_levy"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_guard_troop, "trp_hungarian_pavise_spearman"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_messenger_troop, "trp_hungarian_merchant_cavalry"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_prison_guard_troop, "trp_hungarian_pavise_spearman"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_castle_guard_troop, "trp_hungarian_battlefield_assassin"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_reinforcements_a, "pt_kingdom_hungarian_reinforcements_a"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_reinforcements_b, "pt_kingdom_hungarian_reinforcements_b"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_reinforcements_c, "pt_kingdom_hungarian_reinforcements_c"),
      (faction_set_slot, "fac_culture_hungarian", slot_faction_religion, religion_catholic),
############################
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_1_troop, "trp_polish_village_recruit"),
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_2_troop, "trp_polish_spear_levy"),
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_3_troop, "trp_dismounted_polish_noble"),
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_4_troop, "trp_polish_noble"),
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_5_troop, "trp_polish_guard"),
                                      
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_1_town_troop, "trp_polish_town_recruit"),
      (faction_set_slot, "fac_culture_polish", slot_faction_tier_1_castle_troop, "trp_polish_strzelcy"),
                                      
      (faction_set_slot, "fac_culture_polish", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_polish", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_polish", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_polish", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_polish", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_polish", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
                                      
      (faction_set_slot, "fac_culture_polish", slot_faction_deserter_troop, "trp_polish_spear_levy"),
      (faction_set_slot, "fac_culture_polish", slot_faction_guard_troop, "trp_polish_spear_levy"),
      (faction_set_slot, "fac_culture_polish", slot_faction_messenger_troop, "trp_polish_strzelcy"),
      (faction_set_slot, "fac_culture_polish", slot_faction_prison_guard_troop, "trp_polish_spear_levy"),
      (faction_set_slot, "fac_culture_polish", slot_faction_castle_guard_troop, "trp_polish_retainer"),
      (faction_set_slot, "fac_culture_polish", slot_faction_reinforcements_a, "pt_kingdom_polish_reinforcements_a"),
      (faction_set_slot, "fac_culture_polish", slot_faction_reinforcements_b, "pt_kingdom_polish_reinforcements_b"),
      (faction_set_slot, "fac_culture_polish", slot_faction_reinforcements_c, "pt_kingdom_polish_reinforcements_c"),
      (faction_set_slot, "fac_culture_polish", slot_faction_religion, religion_catholic),
############################
##########################################################################  NEW v2.5 - CTT now only has 1 tree with 3 branches
      (faction_set_slot, "fac_culture_player", slot_faction_tier_1_troop, "trp_cstm_custom_troop_3_tiers_0_0_0"), ##A1
      (faction_set_slot, "fac_culture_player", slot_faction_tier_2_troop, "trp_cstm_custom_troop_3_tiers_0_1_1"), ##B2
      (faction_set_slot, "fac_culture_player", slot_faction_tier_3_troop, "trp_cstm_custom_troop_3_tiers_0_1_2"),
      (faction_set_slot, "fac_culture_player", slot_faction_tier_4_troop, "trp_cstm_custom_troop_3_tiers_0_2_3"),
      (faction_set_slot, "fac_culture_player", slot_faction_tier_5_troop, "trp_cstm_custom_troop_3_tiers_0_2_4"),
      
      (faction_set_slot, "fac_culture_player", slot_faction_tier_1_town_troop, "trp_cstm_custom_troop_3_tiers_0_1_1"),
      (faction_set_slot, "fac_culture_player", slot_faction_tier_1_castle_troop, "trp_cstm_custom_troop_3_tiers_0_2_2"),
      
      (faction_set_slot, "fac_culture_player", slot_faction_town_walker_male_troop, "trp_town_walker_1"),
      (faction_set_slot, "fac_culture_player", slot_faction_town_walker_female_troop, "trp_town_walker_2"),
      (faction_set_slot, "fac_culture_player", slot_faction_village_walker_male_troop, "trp_village_walker_1"),
      (faction_set_slot, "fac_culture_player", slot_faction_village_walker_female_troop, "trp_village_walker_2"),
      (faction_set_slot, "fac_culture_player", slot_faction_town_spy_male_troop, "trp_spy_walker_1"),
      (faction_set_slot, "fac_culture_player", slot_faction_town_spy_female_troop, "trp_spy_walker_2"),
      
      (faction_set_slot, "fac_culture_player", slot_faction_deserter_troop, "trp_cstm_custom_troop_3_tiers_0_1_1"),  ##B2
      (faction_set_slot, "fac_culture_player", slot_faction_guard_troop, "trp_cstm_custom_troop_3_tiers_0_2_3"),           ##C4
      (faction_set_slot, "fac_culture_player", slot_faction_messenger_troop, "trp_cstm_custom_troop_3_tiers_0_2_2"),     ##C3
      (faction_set_slot, "fac_culture_player", slot_faction_prison_guard_troop, "trp_cstm_custom_troop_3_tiers_0_1_2"),            ##B3
      (faction_set_slot, "fac_culture_player", slot_faction_castle_guard_troop, "trp_cstm_custom_troop_3_tiers_0_2_3"),     ##C4
      
      (faction_set_slot, "fac_culture_player", slot_faction_reinforcements_a, "pt_cstm_kingdom_player_3_tiers_0_reinforcements_a"),
      (faction_set_slot, "fac_culture_player", slot_faction_reinforcements_b, "pt_cstm_kingdom_player_3_tiers_0_reinforcements_b"),
      (faction_set_slot, "fac_culture_player", slot_faction_reinforcements_c, "pt_cstm_kingdom_player_3_tiers_0_reinforcements_c"),
##########################################################################
]),
####################################

####################################
("ee_setup_global_defaults",
[
      (assign, "$g_player_party_icon", -1),
      #(assign, "$g_crusade", -1),
      (assign, "$crusade_time", 0),
      (assign, "$g_travel_speed", 100),
      (assign, "$g_last_payday", 0),
      (assign, "$g_player_crusading", 0),
      (assign, "$sp_shield_bash", 0),####### NEW v3.0-KOMKE start off to save time when testing
      (assign, "$sp_shield_bash_ai", 0),####### NEW v3.0-KOMKE start off to save time when testing
      (assign, "$setting_use_spearwall", 0),####### NEW v3.0-KOMKE start off to save time when testing
      #(assign, "$g_force_ranged", 0), #off by default!
      (assign, "$g_battle_preparation", -1),
      (assign, "$g_battle_preparation_phase", 0),
      (assign, "$g_rand_rain_limit", 10),
      (assign, "$g_reinforcement_waves", 20),
      (assign, "$tom_sand_storm_chance", 5),
      (assign, "$g_faction_names", 0),
      (assign, "$g_unit_names", 0),
      (assign, "$tom_use_banners", 0),
      (assign, "$tom_bonus_banners", 0),
      (assign, "$tom_use_battlefields", 1),
      (assign, "$tom_weapon_break", 0),
      (assign, "$tom_lance_breaking", 0), #off by default
      (assign, "$tom_generate_reduction", 2),
      (assign, "$tom_difficulty_wages", 1),
      (assign, "$tom_difficulty_fief", 1),
      (assign, "$tom_difficulty_enterprise", 1),
      (assign, "$feudal_inefficency", 0),
      (assign, "$start_player_crusade", 0),
      (assign, "$crusader_faction", -5),
      (assign, "$crusade_start", 0),
      (assign, "$crusade_target", 0),
      (assign, "$crusade_target_faction", 0),
      (assign, "$crusader_party_id", -1),
      (assign, "$crusader_state", -1), #-1 no crusade, 1 crusade started, 2 sieging, 3 storming
      (assign, "$men_are_pleased", 0),
      (assign, "$tom_use_longships", 1),
      (assign, "$use_feudal_lance", 1), #set as default now
      (assign, "$use_player_auxiliary", 1), #set as default now
      (assign, "$retinue_noble_balt", 0),
      (assign, "$retinue_noble_west", 0),
      (assign, "$retinue_noble_orthodox", 0),
      (assign, "$retinue_noble_muslim", 0),
      (assign, "$retinue_noble_mongol", 0),
      (assign, "$lance_troop_serving", 0),
      (assign, "$lance_troop_reserve", 0),
      (assign, "$crusader_order_joined", 0),
      (assign, "$culture_pool", 0),
      (assign, "$culture_pool_initialized", 0),
      (assign, "$historical_banners", 0),
      (assign, "$randomize_player_shield", 0),
      (assign, "$disable_sisterly_advice", 1),
      (assign, "$disable_local_histories", 1),
      (assign, "$player_crowned", 0),
      (assign, "$default_battle_size", 0),
      (assign, "$default_orignal_battle_size", 0),
      (assign, "$native_wages", 0),  ########### NEW v2.1
      
      ##################### NEW GLOBALS - PARTY MENU
      (assign, "$g_party_base_size", 30),
      (assign, "$g_party_size_leadership_bonus", 15),
      # (assign, "$g_party_size_leadership_bonus", 15),
      (assign, "$g_party_size_renown_bonus_divider", 10),
      (assign, "$g_party_size_king_bonus", 150),
      (assign, "$g_party_size_marshall_bonus", 80),
      (assign, "$g_party_size_castle_bonus", 40),
      
      (assign, "$g_party_garrison_reinforcement_rate", 24),
      (assign, "$g_party_garrison_max_size_castles", 600),
      (assign, "$g_party_garrison_max_size_towns", 800),
      (assign, "$g_party_npc_reinforcement_rate", 24),
      (assign, "$g_party_player_reinforcement_rate", 72),
      
      (assign, "$g_party_lances_max_village", 12),
      (assign, "$g_party_lances_max_castle", 18),
      (assign, "$g_party_lances_max_town", 15),
      (assign, "$g_party_town_merc_refill_rate", 168),
      
      (assign, "$g_party_npc_trainer", 1),
      (assign, "$g_prison_culling", 0),
      
      (assign, "$g_party_morale_per_leadership", 25),
      (assign, "$g_party_morale_per_leadership_king", 35),
      (assign, "$g_party_max_morale", 99),
      (assign, "$g_party_size_affects_morale", 1),####### NEW v3.0-KOMKE ON by default to affect morale
      (assign, "$g_party_prisoners_per_prisoner_management_point", 15),

      ##################### NEW GLOBALS - KINGDOM PARTY MENU
      (assign, "$g_party_faction_respawn_rate", 24),

      (assign, "$g_party_faction_parties_spawn_chance_foragers", 8),
      (assign, "$g_party_faction_parties_spawn_chance_scouts", 15),
      (assign, "$g_party_faction_parties_spawn_chance_patrols", 10),
      (assign, "$g_party_faction_parties_spawn_chance_caravans", 15),
      (assign, "$g_party_faction_parties_spawn_chance_prisoner_trains", 8),
      (assign, "$g_party_faction_parties_spawn_chance_war_parties", 5),
      (assign, "$g_party_faction_parties_spawn_chance_mercenary_companies", 5),

      (assign, "$g_party_faction_max_parties_foragers", 2),
      (assign, "$g_party_faction_max_parties_scouts", 3),
      (assign, "$g_party_faction_max_parties_patrols", 2),
      (assign, "$g_party_faction_max_parties_caravans", 2),
      (assign, "$g_party_faction_max_parties_prisoner_trains", 1),
      (assign, "$g_party_faction_max_parties_war_parties", 1),
      (assign, "$g_party_faction_max_parties_mercenary_companies", 1),
      
      ##################### NEW GLOBALS - NON KINGDOM PARTY MENU
      (assign, "$g_party_bandit_respawn_rate", 36),
      
      (assign, "$g_party_bandit_spawn_chance_looter", 60),
      (assign, "$g_party_bandit_spawn_chance_sea_raider", 40),
      (assign, "$g_party_bandit_spawn_chance_mountain_bandits", 50),
      (assign, "$g_party_bandit_spawn_chance_steppe_bandits", 50),
      (assign, "$g_party_bandit_spawn_chance_taiga_bandits", 50),
      (assign, "$g_party_bandit_spawn_chance_forest_bandits", 50),
      (assign, "$g_party_bandit_spawn_chance_desert_bandits", 50),
      (assign, "$g_party_bandit_spawn_chance_deserters", 40),
      
      (assign, "$g_party_bandit_max_parties_looter", 50),
      (assign, "$g_party_bandit_max_parties_sea_raider", 30),
      (assign, "$g_party_bandit_max_parties_mountain_bandits", 40),
      (assign, "$g_party_bandit_max_parties_steppe_bandits", 30),
      (assign, "$g_party_bandit_max_parties_taiga_bandits", 30),
      (assign, "$g_party_bandit_max_parties_forest_bandits", 40),
      (assign, "$g_party_bandit_max_parties_desert_bandits", 30),
      (assign, "$g_party_bandit_max_parties_deserters", 60),
    
      (assign, "$g_party_bandit_spawn_chance_roving_knights", 30),
      (assign, "$g_party_bandit_max_parties_roving_knights", 10),

      (assign, "$g_party_mercenary_company_spawn_rate", 72),
      (assign, "$g_party_mercenary_company_spawn_chance", 30),
      (assign, "$g_party_mercenary_company_max", 10),
      
      (assign, "$g_party_rebellion_respawn_rate", 168),
      (assign, "$g_party_rebellion_chance", 10),
      (assign, "$g_party_rebellion_max", 5),
      
      (assign, "$g_party_rebellion_strong_respawn_rate", 168),
      (assign, "$g_party_rebellion_strong_chance", 5),
      (assign, "$g_party_rebellion_strong_max", 5),
      
      (assign, "$g_party_fugitive_serf_respawn_rate", 36),
      (assign, "$g_party_fugitive_serf_chance", 20),
      (assign, "$g_party_fugitive_serf_max", 20),
          
      (assign, "$g_party_mercenary_warband_chance", 40),
      (assign, "$g_party_mercenary_warband_max", 40),


      ##################### NEW GLOBALS - MERCHANT MENU
      (assign, "$g_misc_merchant_respawn_rate", 72),
      
      (assign, "$g_misc_merchant_itp_type_goods", 35),
          
      (assign, "$g_misc_merchant_itp_type_body_armor", 6),
      (assign, "$g_misc_merchant_itp_type_head_armor", 6),
      (assign, "$g_misc_merchant_itp_type_foot_armor", 4),
      (assign, "$g_misc_merchant_itp_type_hand_armor", 3),
    
      (assign, "$g_misc_merchant_itp_type_one_handed_wpn", 2),
      (assign, "$g_misc_merchant_itp_type_two_handed_wpn", 2),
      (assign, "$g_misc_merchant_itp_type_polearm", 2),
      (assign, "$g_misc_merchant_itp_type_shield", 2),
      (assign, "$g_misc_merchant_itp_type_bow", 2),
      (assign, "$g_misc_merchant_itp_type_crossbow", 2),
      (assign, "$g_misc_merchant_itp_type_thrown", 1),
      (assign, "$g_misc_merchant_itp_type_arrows", 1),
      (assign, "$g_misc_merchant_itp_type_bolts", 1),
    
      (assign, "$g_misc_merchant_itp_type_horse", 8),
      (assign, "$g_misc_merchant_faction_itp_type_horse", 16),
    
      (assign, "$g_misc_merchant_faction_itp_type_body_armor", 12),
      (assign, "$g_misc_merchant_faction_itp_type_head_armor", 12),
      (assign, "$g_misc_merchant_faction_itp_type_foot_armor", 8),
      (assign, "$g_misc_merchant_faction_itp_type_hand_armor", 5),
                              
      (assign, "$g_misc_merchant_faction_itp_type_one_handed_wpn", 10),
      (assign, "$g_misc_merchant_faction_itp_type_two_handed_wpn", 6),
      (assign, "$g_misc_merchant_faction_itp_type_polearm", 8),
      (assign, "$g_misc_merchant_faction_itp_type_shield", 8),
      (assign, "$g_misc_merchant_faction_itp_type_bow", 4),
      (assign, "$g_misc_merchant_faction_itp_type_crossbow", 4),
      (assign, "$g_misc_merchant_faction_itp_type_thrown", 4),
      (assign, "$g_misc_merchant_faction_itp_type_arrows", 4),
      (assign, "$g_misc_merchant_faction_itp_type_bolts", 4),

      
      ##################### NEW GLOBALS - MISC MENU
      (assign, "$g_misc_remove_deserter_recruit_penalty", 0),
      (assign, "$g_misc_lord_random_build", 12),
      (assign, "$g_misc_lord_random_build_chance", 30),
      
      
      ################ 
      (assign, "$g_player_faction_last_marshal_appointment", 24),
      
            
      ################ NEW v1.9 - fixes presentation being displayed a few hours after game start
      (assign, "$do_once_budget_presentation", 0),
                  
      ################ NEW v2.1 - used for lord generation
      (assign, "$g_use_random_lords_until", 0),
      
      ################ NEW v2.1 - new misc menu
      (assign, "$g_lord_death_chance_battle", 30),
      (assign, "$g_lord_death_chance_battle_king", 15),
      (assign, "$g_lord_death_chance_assassination", 4), ### 1%
      (assign, "$g_lord_death_chance_assassination_king", 2),   ### 0.5%
      (assign, "$g_lord_death_chance_execution_base", 10),
      (assign, "$g_lord_death_chance_execution_king_variation", 20),
      (assign, "$g_lord_death_chance_execution_relation_divider", 3),
      
      (assign, "$g_lord_creation_rate", 120),
      (assign, "$g_lord_creation_minimum", 3),
      (assign, "$g_lord_creation_threshold_towns", 1),
      (assign, "$g_lord_creation_threshold_castles", 1),
      (assign, "$g_lord_creation_threshold_villages", 2),
      
      (assign, "$g_misc_crusade_daily_chance", 8),  ### 2%
      (assign, "$g_misc_garrison_dont_disband_troops_when_taking_control", 1),
      (assign, "$g_misc_troop_ratio_bar_and_kill_count", 3),
          
      (assign, "$g_misc_tavern_mercenaries_respawn_rate", 36),
      (assign, "$g_misc_tavern_mercenaries_min", 4),
      (assign, "$g_misc_tavern_mercenaries_max", 10),
          
      (assign, "$g_misc_max_tax_inneficiency", 65),
      # (assign, "$g_misc_faction_diplomacy_rate", 336), ### once every 2 weeks
      (assign, "$g_misc_faction_diplomacy_rate", 72), ### NEW v3.8 - once every 3 days 
      (assign, "$g_misc_disable_renown_weekly_reduction", 0), 
      (assign, "$g_misc_parties_drop_prisoners_to_walled_fief", 0), 
      
      (assign, "$g_misc_civil_war_chance", 30),
      (assign, "$g_misc_civil_war_rate", 168),
      (assign, "$g_misc_civil_war_lords_required", 40),
      (assign, "$g_misc_floris_bank_receive_directly", 1),
      (assign, "$ee_freelancer_upgrade_unequip", 0), ### disabled by default
      (assign, "$cheat_mode", 0), 
      
      ########## NEW v3.2
      (assign, "$g_party_mongol_camp_rate", 168),
      (assign, "$g_party_mongol_camp_max", 20),
      ##########
      
############################### NEW GLOBALS ###############################################      
      (assign, "$kaos_restore", 0),  
      (assign, "$rand_seed", 0),   ######## NEW v2.1 - https://forums.taleworlds.com/index.php?topic=59574.0

###########################################################################################

      (assign, "$crusade_target", -1),  ########## NEW v2.6
      
      (assign, "$g_minister_notification_hours", 0),  ###### NEW v2.8
      
      (assign, "$g_cur_belligerent_drunk", 0),  ###### NEW v3.0
      
      (assign, "$g_report_shot", 1),  ###### NEW v3.5
	  
	  ###### NEW v3.8
      (assign, "$g_current_horse", 0),  
      (assign, "$g_current_horse_imod", 0),  
      (assign, "$g_current_horse_price", 0),  
      (assign, "$g_current_horse_days", 0),  
	  
	  
      (assign, "$g_cstm_attribute_points_start", 20),  
	  
      (assign, "$g_cstm_proficiency_points_per_level", 20),  
      (assign, "$g_cstm_proficiency_per_wm", 15),  
      (assign, "$g_cstm_proficiency_per_agility", 10),  
      (assign, "$g_cstm_skill_points_start", 1),  
	  
      (assign, "$g_cstm_budget_per_level", 600),  
	  ##################
]),
####################################  NEW v3.5
("ee_setup_faction_info",
[
      # Factions:
      (faction_set_slot, "fac_kingdom_1", slot_faction_culture, "fac_culture_teutonic"), 
      (faction_set_slot, "fac_kingdom_1", slot_faction_leader, "trp_kingdom_1_lord"),
      (troop_set_slot, "trp_kingdom_1_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_2", slot_faction_culture, "fac_culture_baltic"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_leader, "trp_kingdom_2_lord"),
      (troop_set_slot, "trp_kingdom_2_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_3", slot_faction_culture, "fac_culture_mongol"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_leader, "trp_kingdom_3_lord"),
      (troop_set_slot, "trp_kingdom_3_lord", slot_troop_renown, 1500),
      
      (faction_set_slot, "fac_kingdom_4", slot_faction_culture, "fac_culture_nordic"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_leader, "trp_kingdom_4_lord"),
      (troop_set_slot, "trp_kingdom_4_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_5", slot_faction_culture, "fac_culture_polish"), ###### NEW v3.10 - 
      (faction_set_slot, "fac_kingdom_5", slot_faction_leader, "trp_kingdom_5_lord"),
      (troop_set_slot, "trp_kingdom_5_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_6", slot_faction_culture, "fac_culture_western"),
      (faction_set_slot, "fac_kingdom_6", slot_faction_leader, "trp_kingdom_6_lord"),
      (troop_set_slot, "trp_kingdom_6_lord", slot_troop_renown, 1500),
      
      (faction_set_slot, "fac_kingdom_7", slot_faction_culture, "fac_culture_hungarian"),  ###### NEW v3.10 - 
      (faction_set_slot, "fac_kingdom_7", slot_faction_leader, "trp_kingdom_7_lord"),
      (troop_set_slot, "trp_kingdom_7_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_8", slot_faction_culture, "fac_culture_rus"),
      (faction_set_slot, "fac_kingdom_8", slot_faction_leader, "trp_kingdom_8_lord"),
      (troop_set_slot, "trp_kingdom_8_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_9", slot_faction_culture, "fac_culture_english"), ###### NEW v3.10 - 
      (faction_set_slot, "fac_kingdom_9", slot_faction_leader, "trp_kingdom_9_lord"),
      (troop_set_slot, "trp_kingdom_9_lord", slot_troop_renown, 1500),
      
      (faction_set_slot, "fac_kingdom_10", slot_faction_culture, "fac_culture_french"), ###### NEW v3.10 - 
      (faction_set_slot, "fac_kingdom_10", slot_faction_leader, "trp_kingdom_10_lord"),
      (troop_set_slot, "trp_kingdom_10_lord", slot_troop_renown, 1500),
      
      (faction_set_slot, "fac_kingdom_11", slot_faction_culture, "fac_culture_nordic"),
      (faction_set_slot, "fac_kingdom_11", slot_faction_leader, "trp_kingdom_11_lord"),
      (troop_set_slot, "trp_kingdom_11_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_12", slot_faction_culture, "fac_culture_scotish"),
      (faction_set_slot, "fac_kingdom_12", slot_faction_leader, "trp_kingdom_12_lord"),
      (troop_set_slot, "trp_kingdom_12_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_13", slot_faction_culture, "fac_culture_gaelic"),
      (faction_set_slot, "fac_kingdom_13", slot_faction_leader, "trp_kingdom_13_lord"),
      (troop_set_slot, "trp_kingdom_13_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_14", slot_faction_culture, "fac_culture_nordic"),
      (faction_set_slot, "fac_kingdom_14", slot_faction_leader, "trp_kingdom_14_lord"),
      (troop_set_slot, "trp_kingdom_14_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_15", slot_faction_culture, "fac_culture_rus"),
      (faction_set_slot, "fac_kingdom_15", slot_faction_leader, "trp_kingdom_15_lord"),
      (troop_set_slot, "trp_kingdom_15_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_16", slot_faction_culture, "fac_culture_iberian"),
      (faction_set_slot, "fac_kingdom_16", slot_faction_leader, "trp_kingdom_16_lord"),
      (troop_set_slot, "trp_kingdom_16_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_17", slot_faction_culture, "fac_culture_iberian"),
      (faction_set_slot, "fac_kingdom_17", slot_faction_leader, "trp_kingdom_17_lord"),
      (troop_set_slot, "trp_kingdom_17_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_18", slot_faction_culture, "fac_culture_iberian"),
      (faction_set_slot, "fac_kingdom_18", slot_faction_leader, "trp_kingdom_18_lord"),
      (troop_set_slot, "trp_kingdom_18_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_19", slot_faction_culture, "fac_culture_western"),
      (faction_set_slot, "fac_kingdom_19", slot_faction_leader, "trp_kingdom_19_lord"),
      (troop_set_slot, "trp_kingdom_19_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_20", slot_faction_culture, "fac_culture_andalus"),
      (faction_set_slot, "fac_kingdom_20", slot_faction_leader, "trp_kingdom_20_lord"),
      (troop_set_slot, "trp_kingdom_20_lord", slot_troop_renown, 2400),
      
      (faction_set_slot, "fac_papacy", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_papacy", slot_faction_leader, "trp_pope"),
      (troop_set_slot, "trp_pope", slot_troop_renown, 1800),
      
      (faction_set_slot, "fac_kingdom_22", slot_faction_culture, "fac_culture_byzantium"),
      (faction_set_slot, "fac_kingdom_22", slot_faction_leader, "trp_kingdom_22_lord"),
      (troop_set_slot, "trp_kingdom_22_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_23", slot_faction_culture, "fac_culture_crusader"),
      (faction_set_slot, "fac_kingdom_23", slot_faction_leader, "trp_kingdom_23_lord"),
      (troop_set_slot, "trp_kingdom_23_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_24", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_kingdom_24", slot_faction_leader, "trp_kingdom_24_lord"),
      (troop_set_slot, "trp_kingdom_24_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_25", slot_faction_culture, "fac_culture_mamluke"),
      (faction_set_slot, "fac_kingdom_25", slot_faction_leader, "trp_kingdom_25_lord"),
      (troop_set_slot, "trp_kingdom_25_lord", slot_troop_renown, 1500),
      
      # (faction_set_slot, "fac_kingdom_26", slot_faction_culture, "fac_culture_byzantium"),
      (faction_set_slot, "fac_kingdom_26", slot_faction_culture, "fac_culture_italian"), ######### NEW v2.7
      (faction_set_slot, "fac_kingdom_26", slot_faction_leader, "trp_kingdom_26_lord"),
      (troop_set_slot, "trp_kingdom_26_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_27", slot_faction_culture, "fac_culture_mongol"),
      (faction_set_slot, "fac_kingdom_27", slot_faction_leader, "trp_kingdom_27_lord"),
      (troop_set_slot, "trp_kingdom_27_lord", slot_troop_renown, 1500),
      
      (faction_set_slot, "fac_kingdom_28", slot_faction_culture, "fac_culture_marinid"),
      (faction_set_slot, "fac_kingdom_28", slot_faction_leader, "trp_kingdom_28_lord"),
      (troop_set_slot, "trp_kingdom_28_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_29", slot_faction_culture, "fac_culture_serbian"),
      (faction_set_slot, "fac_kingdom_29", slot_faction_leader, "trp_kingdom_29_lord"),
      (troop_set_slot, "trp_kingdom_29_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_30", slot_faction_culture, "fac_culture_balkan"),
      (faction_set_slot, "fac_kingdom_30", slot_faction_leader, "trp_kingdom_30_lord"),
      (troop_set_slot, "trp_kingdom_30_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_31", slot_faction_culture, "fac_culture_marinid"),
      (faction_set_slot, "fac_kingdom_31", slot_faction_leader, "trp_kingdom_31_lord"),
      (troop_set_slot, "trp_kingdom_31_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_32", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_kingdom_32", slot_faction_leader, "trp_kingdom_32_lord"),
      (troop_set_slot, "trp_kingdom_32_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_33", slot_faction_culture, "fac_culture_baltic"),
      (faction_set_slot, "fac_kingdom_34", slot_faction_culture, "fac_culture_baltic"),
      (faction_set_slot, "fac_kingdom_35", slot_faction_culture, "fac_culture_baltic"),
      (faction_set_slot, "fac_kingdom_36", slot_faction_culture, "fac_culture_baltic"),
      (faction_set_slot, "fac_kingdom_34", slot_faction_leader, "trp_kingdom_34_lord"),
      (faction_set_slot, "fac_kingdom_35", slot_faction_leader, "trp_kingdom_35_lord"),
      (faction_set_slot, "fac_kingdom_36", slot_faction_leader, "trp_kingdom_36_lord"),
      (faction_set_slot, "fac_kingdom_33", slot_faction_leader, "trp_kingdom_33_lord"),
      (troop_set_slot, "trp_kingdom_33_lord", slot_troop_renown, 1200),
      (troop_set_slot, "trp_kingdom_34_lord", slot_troop_renown, 1200),
      (troop_set_slot, "trp_kingdom_35_lord", slot_troop_renown, 1200),
      (troop_set_slot, "trp_kingdom_36_lord", slot_troop_renown, 1200),
      # (faction_set_slot, "fac_kingdom_34", slot_faction_culture, "fac_culture_34"),
      # (faction_set_slot, "fac_kingdom_34", slot_faction_leader, "trp_kingdom_34_lord"),
      # (troop_set_slot, "trp_kingdom_34_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_37", slot_faction_culture, "fac_culture_welsh"),
      (faction_set_slot, "fac_kingdom_37", slot_faction_leader, "trp_kingdom_37_lord"),
      (troop_set_slot, "trp_kingdom_37_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_38", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_kingdom_38", slot_faction_leader, "trp_kingdom_38_lord"),
      (troop_set_slot, "trp_kingdom_38_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_39", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_kingdom_39", slot_faction_leader, "trp_kingdom_39_lord"),
      (troop_set_slot, "trp_kingdom_39_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_40", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_kingdom_40", slot_faction_leader, "trp_kingdom_40_lord"),
      (troop_set_slot, "trp_kingdom_40_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_41", slot_faction_culture, "fac_culture_italian"),
      (faction_set_slot, "fac_kingdom_41", slot_faction_leader, "trp_kingdom_41_lord"),
      (troop_set_slot, "trp_kingdom_41_lord", slot_troop_renown, 1200),
      
      (faction_set_slot, "fac_kingdom_42", slot_faction_culture, "fac_culture_western"),
      (faction_set_slot, "fac_kingdom_42", slot_faction_leader, "trp_kingdom_42_lord"),
      (troop_set_slot, "trp_kingdom_42_lord", slot_troop_renown, 1200),
      
      (assign, ":player_faction_culture", "fac_culture_player"),
      (assign, "$g_player_culture", "fac_culture_player"),
      (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":player_faction_culture"),
      (faction_set_slot, "fac_player_faction", slot_faction_culture, ":player_faction_culture"),
]),
####################################

####################################
("ee_setup_settlement_info",
[
      #village products -- at some point we might make it so that the villages supply raw materials to towns, and the towns produce manufactured goods
      #village products designate the raw materials produced in the vicinity
      #right now, just doing a test for grain produced in the swadian heartland
      
      # fill_village_bound_centers
      #pass 1: Give one village to each castle
      (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),  ### NEW v2.1
        (assign, ":start_towns", -1),
        (assign, ":end_towns", -1),
        (assign, ":start_castles", -1),
        (assign, ":end_castles", -1),
        (assign, ":start_villages", -1),
        (assign, ":end_villages", -1),
        (try_begin),
          (eq, ":cur_faction", "fac_kingdom_1"),
          (assign, ":start_towns", "p_town_1_1"),
          (assign, ":end_towns", "p_town_2_1"),
          (assign, ":start_castles", "p_castle_1_1"),
          (assign, ":end_castles", "p_castle_2_1"),
          (assign, ":start_villages", "p_village_1_1"),
          (assign, ":end_villages", "p_village_2_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_2"),
          (assign, ":start_towns", "p_town_2_1"),
          (assign, ":end_towns", "p_town_3_1"),
          (assign, ":start_castles", "p_castle_2_1"),
          (assign, ":end_castles", "p_castle_3_1"),
          (assign, ":start_villages", "p_village_2_1"),
          (assign, ":end_villages", "p_village_3_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_3"),
          (assign, ":start_towns", "p_town_3_1"),
          (assign, ":end_towns", "p_town_4_1"),
          (assign, ":start_castles", "p_castle_3_1"),
          (assign, ":end_castles", "p_castle_4_1"),
          (assign, ":start_villages", "p_village_3_1"),
          (assign, ":end_villages", "p_village_4_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_4"),
          (assign, ":start_towns", "p_town_4_1"),
          (assign, ":end_towns", "p_town_5_1"),
          (assign, ":start_castles", "p_castle_4_1"),
          (assign, ":end_castles", "p_castle_5_1"),
          (assign, ":start_villages", "p_village_4_1"),
          (assign, ":end_villages", "p_village_5_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_5"),
          (assign, ":start_towns", "p_town_5_1"),
          (assign, ":end_towns", "p_town_6_1"),
          (assign, ":start_castles", "p_castle_5_1"),
          (assign, ":end_castles", "p_castle_6_1"),
          (assign, ":start_villages", "p_village_5_1"),
          (assign, ":end_villages", "p_village_6_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_6"),
          (assign, ":start_towns", "p_town_6_1"),
          (assign, ":end_towns", "p_town_7_1"),
          (assign, ":start_castles", "p_castle_6_1"),
          (assign, ":end_castles", "p_castle_7_1"),
          (assign, ":start_villages", "p_village_6_1"),
          (assign, ":end_villages", "p_village_7_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_7"),
          (assign, ":start_towns", "p_town_7_1"),
          (assign, ":end_towns", "p_town_8_1"),
          (assign, ":start_castles", "p_castle_7_1"),
          (assign, ":end_castles", "p_castle_8_1"),
          (assign, ":start_villages", "p_village_7_1"),
          (assign, ":end_villages", "p_village_8_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_8"),
          (assign, ":start_towns", "p_town_8_1"),
          (assign, ":end_towns", "p_town_9_1"),
          (assign, ":start_castles", "p_castle_8_1"),
          (assign, ":end_castles", "p_castle_9_1"),
          (assign, ":start_villages", "p_village_8_1"),
          (assign, ":end_villages", "p_village_9_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_9"),
          (assign, ":start_towns", "p_town_9_1"),
          (assign, ":end_towns", "p_town_10_1"),
          (assign, ":start_castles", "p_castle_9_1"),
          (assign, ":end_castles", "p_castle_10_1"),
          (assign, ":start_villages", "p_village_9_1"),
          (assign, ":end_villages", "p_village_10_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_10"),
          (assign, ":start_towns", "p_town_10_1"),
          (assign, ":end_towns", "p_town_11_1"),
          (assign, ":start_castles", "p_castle_10_1"),
          (assign, ":end_castles", "p_castle_11_1"),
          (assign, ":start_villages", "p_village_10_1"),
          (assign, ":end_villages", "p_village_11_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_11"),
          (assign, ":start_towns", "p_town_11_1"),
          (assign, ":end_towns", "p_town_12_1"),
          (assign, ":start_castles", "p_castle_11_1"),
          (assign, ":end_castles", "p_castle_12_1"),
          (assign, ":start_villages", "p_village_11_1"),
          (assign, ":end_villages", "p_village_12_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_12"),
          (assign, ":start_towns", "p_town_12_1"),
          (assign, ":end_towns", "p_town_13_1"),
          (assign, ":start_castles", "p_castle_12_1"),
          (assign, ":end_castles", "p_castle_13_1"),
          (assign, ":start_villages", "p_village_12_1"),
          (assign, ":end_villages", "p_village_13_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_13"),
          (assign, ":start_towns", "p_town_13_1"),
          (assign, ":end_towns", "p_town_14_1"),
          (assign, ":start_castles", "p_castle_13_1"),
          (assign, ":end_castles", "p_castle_14_1"),
          (assign, ":start_villages", "p_village_13_1"),
          (assign, ":end_villages", "p_village_14_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_14"),
          (assign, ":start_towns", "p_town_14_1"),
          (assign, ":end_towns", "p_town_15_1"),
          (assign, ":start_castles", "p_castle_14_1"),
          (assign, ":end_castles", "p_castle_15_1"),
          (assign, ":start_villages", "p_village_14_1"),
          (assign, ":end_villages", "p_village_15_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_15"),
          (assign, ":start_towns", "p_town_15_1"),
          (assign, ":end_towns", "p_town_16_1"),
          (assign, ":start_castles", "p_castle_15_1"),
          (assign, ":end_castles", "p_castle_16_1"),
          (assign, ":start_villages", "p_village_15_1"),
          (assign, ":end_villages", "p_village_16_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_16"),
          (assign, ":start_towns", "p_town_16_1"),
          (assign, ":end_towns", "p_town_17_1"),
          (assign, ":start_castles", "p_castle_16_1"),
          (assign, ":end_castles", "p_castle_17_1"),
          (assign, ":start_villages", "p_village_16_1"),
          (assign, ":end_villages", "p_village_17_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_17"),
          (assign, ":start_towns", "p_town_17_1"),
          (assign, ":end_towns", "p_town_18_1"),
          (assign, ":start_castles", "p_castle_17_1"),
          (assign, ":end_castles", "p_castle_18_1"),
          (assign, ":start_villages", "p_village_17_1"),
          (assign, ":end_villages", "p_village_18_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_18"),
          (assign, ":start_towns", "p_town_18_1"),
          (assign, ":end_towns", "p_town_20_1"),
          (assign, ":start_castles", "p_castle_18_1"),
          (assign, ":end_castles", "p_castle_19_1"),
          (assign, ":start_villages", "p_village_18_1"),
          (assign, ":end_villages", "p_village_20_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_19"),
          (assign, ":start_towns", "p_town_19_1"),
          (assign, ":end_towns", "p_town_20_1"),
          (assign, ":start_castles", "p_castle_19_1"),
          (assign, ":end_castles", "p_castle_20_1"),
          (assign, ":start_villages", "p_village_19_1"),
          (assign, ":end_villages", "p_village_20_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_20"),
          (assign, ":start_towns", "p_town_20_1"),
          (assign, ":end_towns", "p_town_21_1"),
          (assign, ":start_castles", "p_castle_20_1"),
          (assign, ":end_castles", "p_castle_22_1"),
          (assign, ":start_villages", "p_village_20_1"),
          (assign, ":end_villages", "p_village_21_1"),
        (else_try),
          (eq, ":cur_faction", "fac_papacy"),
          (assign, ":start_towns", "p_town_21_1"),
          (assign, ":end_towns", "p_town_22_1"),
          (assign, ":start_villages", "p_village_21_1"),
          (assign, ":end_villages", "p_village_22_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_22"),
          (assign, ":start_towns", "p_town_22_1"),
          (assign, ":end_towns", "p_town_23_1"),
          (assign, ":start_castles", "p_castle_22_1"),
          (assign, ":end_castles", "p_castle_23_1"),
          (assign, ":start_villages", "p_village_22_1"),
          (assign, ":end_villages", "p_village_23_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_23"),
          (assign, ":start_towns", "p_town_23_1"),
          (assign, ":end_towns", "p_town_24_1"),
          (assign, ":start_castles", "p_castle_23_1"),
          (assign, ":end_castles", "p_castle_24_1"),
          (assign, ":start_villages", "p_village_23_1"),
          (assign, ":end_villages", "p_village_24_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_24"),
          (assign, ":start_towns", "p_town_24_1"),
          (assign, ":end_towns", "p_town_25_1"),
          (assign, ":start_castles", "p_castle_24_1"),
          (assign, ":end_castles", "p_castle_25_1"),
          (assign, ":start_villages", "p_village_24_1"),
          (assign, ":end_villages", "p_village_25_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_25"),
          (assign, ":start_towns", "p_town_25_1"),
          (assign, ":end_towns", "p_town_26_1"),
          (assign, ":start_castles", "p_castle_25_1"),
          (assign, ":end_castles", "p_castle_26_1"),
          (assign, ":start_villages", "p_village_25_1"),
          (assign, ":end_villages", "p_village_26_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_26"),
          (assign, ":start_towns", "p_town_26_1"),
          (assign, ":end_towns", "p_town_27_1"),
          (assign, ":start_castles", "p_castle_26_1"),
          (assign, ":end_castles", "p_castle_27_1"),
          (assign, ":start_villages", "p_village_26_1"),
          (assign, ":end_villages", "p_village_27_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_27"),
          (assign, ":start_towns", "p_town_27_1"),
          (assign, ":end_towns", "p_town_28_1"),
          (assign, ":start_castles", "p_castle_27_1"),
          (assign, ":end_castles", "p_castle_28_1"),
          (assign, ":start_villages", "p_village_27_1"),
          (assign, ":end_villages", "p_village_28_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_28"),
          (assign, ":start_towns", "p_town_28_1"),
          (assign, ":end_towns", "p_town_29_1"),
          (assign, ":start_castles", "p_castle_28_1"),
          (assign, ":end_castles", "p_castle_29_1"),
          (assign, ":start_villages", "p_village_28_1"),
          (assign, ":end_villages", "p_village_29_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_29"),
          (assign, ":start_towns", "p_town_29_1"),
          (assign, ":end_towns", "p_town_30_1"),
          (assign, ":start_castles", "p_castle_29_1"),
          (assign, ":end_castles", "p_castle_30_1"),
          (assign, ":start_villages", "p_village_29_1"),
          (assign, ":end_villages", "p_village_30_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_30"),
          (assign, ":start_towns", "p_town_30_1"),
          (assign, ":end_towns", "p_town_31_1"),
          (assign, ":start_castles", "p_castle_30_1"),
          (assign, ":end_castles", "p_castle_31_1"),
          (assign, ":start_villages", "p_village_30_1"),
          (assign, ":end_villages", "p_village_31_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_31"),
          (assign, ":start_towns", "p_town_31_1"),
          (assign, ":end_towns", "p_town_32_1"),
          (assign, ":start_castles", "p_castle_31_1"),
          (assign, ":end_castles", "p_castle_32_1"),
          (assign, ":start_villages", "p_village_31_1"),
          (assign, ":end_villages", "p_village_32_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_32"),
          (assign, ":start_towns", "p_town_32_1"),
          (assign, ":end_towns", "p_town_37_1"),
          (assign, ":start_castles", "p_castle_32_1"),
          (assign, ":end_castles", "p_castle_33_1"),
          (assign, ":start_villages", "p_village_32_1"),
          (assign, ":end_villages", "p_village_33_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_33"),
          #(assign, ":start_towns", "p_town_32_1"),
          #(assign, ":end_towns", "p_castle_1"),
          (assign, ":start_castles", "p_castle_33_1"),
          (assign, ":end_castles", "p_castle_34_1"),
          (assign, ":start_villages", "p_village_33_1"),
          (assign, ":end_villages", "p_village_34_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_34"),
          #(assign, ":start_towns", "p_town_32_1"),
          #(assign, ":end_towns", "p_castle_1"),
          (assign, ":start_castles", "p_castle_34_1"),
          (assign, ":end_castles", "p_castle_35_1"),
          (assign, ":start_villages", "p_village_34_1"),
          (assign, ":end_villages", "p_village_35_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_35"),
          #(assign, ":start_towns", "p_town_32_1"),
          #(assign, ":end_towns", "p_castle_1"),
          (assign, ":start_castles", "p_castle_35_1"),
          (assign, ":end_castles", "p_castle_36_1"),
          (assign, ":start_villages", "p_village_35_1"),
          (assign, ":end_villages", "p_village_36_1"),
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_36"),
          #(assign, ":start_towns", "p_town_32_1"),
          #(assign, ":end_towns", "p_castle_1"),
          (assign, ":start_castles", "p_castle_36_1"),
          (assign, ":end_castles", "p_castle_37_1"),
          (assign, ":start_villages", "p_village_36_1"),
          (assign, ":end_villages", "p_village_37_1"),          
        (else_try),
          (eq, ":cur_faction", "fac_kingdom_37"),
          (assign, ":start_towns", "p_town_37_1"),
          (assign, ":end_towns", "p_town_38_1"),
          (assign, ":start_castles", "p_castle_37_1"),
          (assign, ":end_castles", "p_castle_38_1"),
          (assign, ":start_villages", "p_village_37_1"),
          (assign, ":end_villages", "p_village_38_1"),
        (else_try),    
          (eq, ":cur_faction", "fac_kingdom_38"),
          (assign, ":start_towns", "p_town_38_1"),
          (assign, ":end_towns", "p_town_39_1"),
          (assign, ":start_castles", "p_castle_38_1"),
          (assign, ":end_castles", "p_castle_39_1"),
          (assign, ":start_villages", "p_village_38_1"),
          (assign, ":end_villages", "p_village_39_1"),
        (else_try),    
          (eq, ":cur_faction", "fac_kingdom_39"),
          (assign, ":start_towns", "p_town_39_1"),
          (assign, ":end_towns", "p_town_40_1"),
          (assign, ":start_castles", "p_castle_39_1"),
          (assign, ":end_castles", "p_castle_player"),
          (assign, ":start_villages", "p_village_39_1"),
          (assign, ":end_villages", "p_village_40_1"),
        (else_try),    
          (eq, ":cur_faction", "fac_kingdom_40"),
          (assign, ":start_towns", "p_town_40_1"),
          (assign, ":end_towns", "p_town_41_1"),
          # (assign, ":start_castles", "p_castle_40_1"),
          # (assign, ":end_castles", "p_castle_41_1"),
          (assign, ":start_villages", "p_village_40_1"),
          (assign, ":end_villages", "p_village_41_1"),
        (else_try),    
          (eq, ":cur_faction", "fac_kingdom_41"),
          (assign, ":start_towns", "p_town_41_1"),
          (assign, ":end_towns", "p_town_42_1"),
          # (assign, ":start_castles", "p_castle_41_1"),
          # (assign, ":end_castles", "p_castle_player"),
          (assign, ":start_villages", "p_village_41_1"),
          (assign, ":end_villages", "p_village_42_1"),
        (else_try),    
          (eq, ":cur_faction", "fac_kingdom_42"),
          (assign, ":start_towns", "p_town_42_1"),
          (assign, ":end_towns", "p_castle_1_1"),
          # (assign, ":start_castles", "p_castle_41_1"),
          # (assign, ":end_castles", "p_castle_player"),
          (assign, ":start_villages", "p_village_42_1"),
          (assign, ":end_villages", "p_village_player"),
        (try_end),

        ###################################################################################################################
        #### -- Manual assignments pre-loop/pre-autoscript for exceptions due to distance/location/etc. (by Khanor) -- ####
        ###################################################################################################################
        ### This might also save time on startup due to the village searching script having to run less.
        ### If this is indeed the case, utilizing manual village connections more often could benefit more than
        ### territorial and geographical modeling.
        ### Important:
        ### Prioritize castles here, as towns get a lot more messy. If doing one town, one often
        ### has to do every town that comes later too to avoid lopsided village handouts with three or more
        ### villages for one town, and just one for others. Castles first for each faction to keep the system working as intended.
        ### Full village connection-order goes: Manual castles --> manual towns --> autoscript castles --> autoscript towns
        (try_begin),
          ### Teutonic Order (Livonia and Prussia)
          (party_set_slot, "p_village_1_9", slot_village_bound_center, "p_castle_1_2"), ### Balga
          (store_faction_of_party, ":town_faction", "p_castle_1_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_1_9", ":town_faction"),

          ### Kingdom of Denmark
          (party_set_slot, "p_village_4_9", slot_village_bound_center, "p_castle_4_1"), ### Æggersburgh
          (store_faction_of_party, ":town_faction", "p_castle_4_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_4_9", ":town_faction"),

          (party_set_slot, "p_village_4_14", slot_village_bound_center, "p_castle_4_7"), ### Helsingiæburgh
          (store_faction_of_party, ":town_faction", "p_castle_4_7"),
          (call_script, "script_give_center_to_faction_aux", "p_village_4_14", ":town_faction"),

          (party_set_slot, "p_village_4_4", slot_village_bound_center, "p_town_4_1"), ### Lund
          (store_faction_of_party, ":town_faction", "p_town_4_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_4_4", ":town_faction"),

          (party_set_slot, "p_village_4_2", slot_village_bound_center, "p_town_4_2"), ### Roarskeldae
          (store_faction_of_party, ":town_faction", "p_town_4_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_4_2", ":town_faction"),

          (party_set_slot, "p_village_4_5", slot_village_bound_center, "p_town_4_3"), ### Reval
          (store_faction_of_party, ":town_faction", "p_town_4_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_4_5", ":town_faction"),

          (party_set_slot, "p_village_4_8", slot_village_bound_center, "p_town_4_4"), ### Wybærgh
          (store_faction_of_party, ":town_faction", "p_town_4_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_4_8", ":town_faction"),

          ### Polish Principalities
          (party_set_slot, "p_village_5_13", slot_village_bound_center, "p_town_5_3"), ### Gdańsk
          (store_faction_of_party, ":town_faction", "p_town_5_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_5_13", ":town_faction"),

          (party_set_slot, "p_village_5_7", slot_village_bound_center, "p_town_5_4"), ### Poznań
          (store_faction_of_party, ":town_faction", "p_town_5_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_5_7", ":town_faction"),

          ### Holy Roman Empire
          (party_set_slot, "p_village_6_13", slot_village_bound_center, "p_town_6_1"), ### Nürnberg
          (store_faction_of_party, ":town_faction", "p_town_6_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_13", ":town_faction"),

          (party_set_slot, "p_village_6_22", slot_village_bound_center, "p_town_6_2"), ### Köln
          (store_faction_of_party, ":town_faction", "p_town_6_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_22", ":town_faction"),

          (party_set_slot, "p_village_6_15", slot_village_bound_center, "p_town_6_3"), ### Frankfurt
          (store_faction_of_party, ":town_faction", "p_town_6_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_15", ":town_faction"),

          (party_set_slot, "p_village_6_26", slot_village_bound_center, "p_town_6_4"), ### Basel
          (store_faction_of_party, ":town_faction", "p_town_6_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_26", ":town_faction"),

          (party_set_slot, "p_village_6_5", slot_village_bound_center, "p_town_6_5"), ### Magdeburg
          (store_faction_of_party, ":town_faction", "p_town_6_5"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_5", ":town_faction"),

          (party_set_slot, "p_village_6_24", slot_village_bound_center, "p_town_6_6"), ### Lübeck
          (store_faction_of_party, ":town_faction", "p_town_6_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_24", ":town_faction"),

          (party_set_slot, "p_village_6_19", slot_village_bound_center, "p_castle_6_1"), ### Aachen
          (store_faction_of_party, ":town_faction", "p_castle_6_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_19", ":town_faction"),

          (party_set_slot, "p_village_6_10", slot_village_bound_center, "p_castle_6_2"), ### Trier
          (store_faction_of_party, ":town_faction", "p_castle_6_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_10", ":town_faction"),

          (party_set_slot, "p_village_6_16", slot_village_bound_center, "p_castle_6_3"), ### Wien
          (store_faction_of_party, ":town_faction", "p_castle_6_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_16", ":town_faction"),

          (party_set_slot, "p_village_6_3", slot_village_bound_center, "p_castle_6_4"), ### Mainz
          (store_faction_of_party, ":town_faction", "p_castle_6_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_3", ":town_faction"),

          (party_set_slot, "p_village_6_2", slot_village_bound_center, "p_castle_6_8"), ### Nancy
          (store_faction_of_party, ":town_faction", "p_castle_6_8"),
          (call_script, "script_give_center_to_faction_aux", "p_village_6_2", ":town_faction"),

          ### Novgorod Republic
          (party_set_slot, "p_village_8_2", slot_village_bound_center, "p_town_8_1"), ### Velikiy Novgorod
          (store_faction_of_party, ":town_faction", "p_town_8_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_8_2", ":town_faction"),

          (party_set_slot, "p_village_8_5", slot_village_bound_center, "p_town_8_2"), ### Russa
          (store_faction_of_party, ":town_faction", "p_town_8_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_8_5", ":town_faction"),

          (party_set_slot, "p_village_8_7", slot_village_bound_center, "p_castle_8_3"), ### Torzhok
          (store_faction_of_party, ":town_faction", "p_castle_8_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_8_7", ":town_faction"),

          (party_set_slot, "p_village_8_8", slot_village_bound_center, "p_castle_8_4"), ### Ladoga
          (store_faction_of_party, ":town_faction", "p_castle_8_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_8_8", ":town_faction"),

          ### Kingdom of England
          (party_set_slot, "p_village_9_1", slot_village_bound_center, "p_castle_9_1"), ### Beeston Castle
          (store_faction_of_party, ":town_faction", "p_castle_9_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_1", ":town_faction"),

          (party_set_slot, "p_village_9_4", slot_village_bound_center, "p_castle_9_2"), ### Lewes Castle
          (store_faction_of_party, ":town_faction", "p_castle_9_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_4", ":town_faction"),

          (party_set_slot, "p_village_9_3", slot_village_bound_center, "p_castle_9_4"), ### Dover Castle
          (store_faction_of_party, ":town_faction", "p_castle_9_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_3", ":town_faction"),

          (party_set_slot, "p_village_9_12", slot_village_bound_center, "p_town_9_1"), ### London
          (store_faction_of_party, ":town_faction", "p_town_9_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_12", ":town_faction"),

          (party_set_slot, "p_village_9_6", slot_village_bound_center, "p_town_9_2"), ### Bristol
          (store_faction_of_party, ":town_faction", "p_town_9_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_6", ":town_faction"),

          (party_set_slot, "p_village_9_9", slot_village_bound_center, "p_town_9_3"), ### Chester
          (store_faction_of_party, ":town_faction", "p_town_9_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_9", ":town_faction"),

          (party_set_slot, "p_village_9_11", slot_village_bound_center, "p_town_9_4"), ### York
          (store_faction_of_party, ":town_faction", "p_town_9_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_11", ":town_faction"),

          (party_set_slot, "p_village_9_18", slot_village_bound_center, "p_town_9_5"), ### Bordeaux
          (store_faction_of_party, ":town_faction", "p_town_9_5"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_18", ":town_faction"),

          (party_set_slot, "p_village_9_19", slot_village_bound_center, "p_town_9_6"), ### Dublin
          (store_faction_of_party, ":town_faction", "p_town_9_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_9_19", ":town_faction"),

          ### Kingdom of France
          (party_set_slot, "p_village_10_14", slot_village_bound_center, "p_castle_10_2"), ### Mortain
          (store_faction_of_party, ":town_faction", "p_castle_10_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_14", ":town_faction"),

          (party_set_slot, "p_village_10_20", slot_village_bound_center, "p_castle_10_4"), ### Châlons
          (store_faction_of_party, ":town_faction", "p_castle_10_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_20", ":town_faction"),

          (party_set_slot, "p_village_10_8", slot_village_bound_center, "p_castle_10_5"), ### Angoulême
          (store_faction_of_party, ":town_faction", "p_castle_10_5"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_8", ":town_faction"),

          (party_set_slot, "p_village_10_18", slot_village_bound_center, "p_castle_10_6"), ### Cahors
          (store_faction_of_party, ":town_faction", "p_castle_10_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_18", ":town_faction"),

          (party_set_slot, "p_village_10_23", slot_village_bound_center, "p_castle_10_7"), ### Clermont
          (store_faction_of_party, ":town_faction", "p_castle_10_7"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_23", ":town_faction"),

          (party_set_slot, "p_village_10_5", slot_village_bound_center, "p_castle_10_8"), ### Orléans
          (store_faction_of_party, ":town_faction", "p_castle_10_8"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_5", ":town_faction"),

          (party_set_slot, "p_village_10_1", slot_village_bound_center, "p_castle_10_10"), ### Chinon
          (store_faction_of_party, ":town_faction", "p_castle_10_10"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_1", ":town_faction"),

          (party_set_slot, "p_village_10_3", slot_village_bound_center, "p_town_10_1"), ### Paris
          (store_faction_of_party, ":town_faction", "p_town_10_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_3", ":town_faction"),

          (party_set_slot, "p_village_10_16", slot_village_bound_center, "p_town_10_2"), ### Nantes
          (store_faction_of_party, ":town_faction", "p_town_10_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_16", ":town_faction"),

          (party_set_slot, "p_village_10_24", slot_village_bound_center, "p_town_10_3"), ### Dijon
          (store_faction_of_party, ":town_faction", "p_town_10_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_24", ":town_faction"),

          (party_set_slot, "p_village_10_10", slot_village_bound_center, "p_town_10_4"), ### Toulouse
          (store_faction_of_party, ":town_faction", "p_town_10_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_10", ":town_faction"),

          (party_set_slot, "p_village_10_4", slot_village_bound_center, "p_town_10_5"), ### Rouen
          (store_faction_of_party, ":town_faction", "p_town_10_5"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_4", ":town_faction"),

          (party_set_slot, "p_village_10_17", slot_village_bound_center, "p_town_10_6"), ### Aix-en-Provence
          (store_faction_of_party, ":town_faction", "p_town_10_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_17", ":town_faction"),

          (party_set_slot, "p_village_10_19", slot_village_bound_center, "p_town_10_6"), ### Aix-en-Provence
          (store_faction_of_party, ":town_faction", "p_town_10_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_19", ":town_faction"),

          (party_set_slot, "p_village_10_21", slot_village_bound_center, "p_town_10_7"), ### Reims
          (store_faction_of_party, ":town_faction", "p_town_10_7"),
          (call_script, "script_give_center_to_faction_aux", "p_village_10_21", ":town_faction"),

          ### Kingdom of Norway
          (party_set_slot, "p_village_11_11", slot_village_bound_center, "p_castle_11_3"), ### Stafangr
          (store_faction_of_party, ":town_faction", "p_castle_11_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_11", ":town_faction"),

          (party_set_slot, "p_village_11_8", slot_village_bound_center, "p_castle_11_4"), ### Túnsberg
          (store_faction_of_party, ":town_faction", "p_castle_11_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_8", ":town_faction"),

          (party_set_slot, "p_village_11_2", slot_village_bound_center, "p_town_11_1"), ### Niðarós
          (store_faction_of_party, ":town_faction", "p_town_11_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_2", ":town_faction"),

          (party_set_slot, "p_village_11_3", slot_village_bound_center, "p_town_11_2"), ### Biǫrgyn
          (store_faction_of_party, ":town_faction", "p_town_11_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_3", ":town_faction"),

          (party_set_slot, "p_village_11_1", slot_village_bound_center, "p_town_11_2"), ### Biǫrgyn
          (store_faction_of_party, ":town_faction", "p_town_11_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_1", ":town_faction"),

          (party_set_slot, "p_village_11_4", slot_village_bound_center, "p_town_11_3"), ### Ásló
          (store_faction_of_party, ":town_faction", "p_town_11_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_4", ":town_faction"),

          (party_set_slot, "p_village_11_5", slot_village_bound_center, "p_town_11_3"), ### Ásló
          (store_faction_of_party, ":town_faction", "p_town_11_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_11_5", ":town_faction"),

          ### Kingdom of Scotland
          (party_set_slot, "p_village_12_1", slot_village_bound_center, "p_castle_12_1"), ### Urquhart
          (store_faction_of_party, ":town_faction", "p_castle_12_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_12_1", ":town_faction"),

          (party_set_slot, "p_village_12_3", slot_village_bound_center, "p_castle_12_2"), ### Dingwall
          (store_faction_of_party, ":town_faction", "p_castle_12_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_12_3", ":town_faction"),

          ### Kingdom of Sweden
          (party_set_slot, "p_village_14_7", slot_village_bound_center, "p_castle_14_1"), ### Kalmarnir
          (store_faction_of_party, ":town_faction", "p_castle_14_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_14_7", ":town_faction"),

          (party_set_slot, "p_village_14_8", slot_village_bound_center, "p_castle_14_6"), ### Linkøpang
          (store_faction_of_party, ":town_faction", "p_castle_14_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_14_8", ":town_faction"),

          ### Kingdom of Portugal
          (party_set_slot, "p_village_16_8", slot_village_bound_center, "p_castle_16_1"), ### Guimarães
          (store_faction_of_party, ":town_faction", "p_castle_16_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_16_8", ":town_faction"),

          (party_set_slot, "p_village_16_7", slot_village_bound_center, "p_castle_16_4"), ### Bragança
          (store_faction_of_party, ":town_faction", "p_castle_16_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_16_7", ":town_faction"),

          (party_set_slot, "p_village_16_3", slot_village_bound_center, "p_town_16_1"), ### Lisboa
          (store_faction_of_party, ":town_faction", "p_town_16_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_16_3", ":town_faction"),

          (party_set_slot, "p_village_16_2", slot_village_bound_center, "p_town_16_2"), ### Coimbra
          (store_faction_of_party, ":town_faction", "p_town_16_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_16_2", ":town_faction"),

          ### Crown of Aragon
          (party_set_slot, "p_village_17_5", slot_village_bound_center, "p_castle_17_1"), ### Zaragoza
          (store_faction_of_party, ":town_faction", "p_castle_17_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_5", ":town_faction"),

          (party_set_slot, "p_village_17_6", slot_village_bound_center, "p_castle_17_2"), ### Castellciutat
          (store_faction_of_party, ":town_faction", "p_castle_17_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_6", ":town_faction"),

          (party_set_slot, "p_village_17_1", slot_village_bound_center, "p_castle_17_5"), ### Tortosa
          (store_faction_of_party, ":town_faction", "p_castle_17_5"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_1", ":town_faction"),

          (party_set_slot, "p_village_17_10", slot_village_bound_center, "p_castle_17_6"), ### Jaca
          (store_faction_of_party, ":town_faction", "p_castle_17_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_10", ":town_faction"),

          (party_set_slot, "p_village_17_11", slot_village_bound_center, "p_castle_17_7"), ### Albarracín
          (store_faction_of_party, ":town_faction", "p_castle_17_7"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_11", ":town_faction"),

          (party_set_slot, "p_village_17_2", slot_village_bound_center, "p_town_17_1"), ### Barcelona
          (store_faction_of_party, ":town_faction", "p_town_17_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_2", ":town_faction"),

          (party_set_slot, "p_village_17_8", slot_village_bound_center, "p_town_17_2"), ### Valencia
          (store_faction_of_party, ":town_faction", "p_town_17_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_17_8", ":town_faction"),

          ### Kingdom of Navarra
          (party_set_slot, "p_village_19_3", slot_village_bound_center, "p_castle_19_1"), ### San Sebastian
          (store_faction_of_party, ":town_faction", "p_castle_19_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_19_3", ":town_faction"),

          ### Emirate of Granada
          (party_set_slot, "p_village_20_7", slot_village_bound_center, "p_castle_20_3"), ### Qasbat Wadi-Aci
          (store_faction_of_party, ":town_faction", "p_castle_20_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_7", ":town_faction"),

          (party_set_slot, "p_village_20_5", slot_village_bound_center, "p_castle_20_4"), ### Qasbat Al-Mariyya
          (store_faction_of_party, ":town_faction", "p_castle_20_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_5", ":town_faction"),

          (party_set_slot, "p_village_20_9", slot_village_bound_center, "p_castle_20_6"), ### Shalubānya
          (store_faction_of_party, ":town_faction", "p_castle_20_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_9", ":town_faction"),

          (party_set_slot, "p_village_20_10", slot_village_bound_center, "p_castle_20_7"), ### Baza
          (store_faction_of_party, ":town_faction", "p_castle_20_7"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_10", ":town_faction"),

          (party_set_slot, "p_village_20_11", slot_village_bound_center, "p_town_20_1"), ### Granada
          (store_faction_of_party, ":town_faction", "p_town_20_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_11", ":town_faction"),

          (party_set_slot, "p_village_20_2", slot_village_bound_center, "p_town_20_2"), ### Málaga
          (store_faction_of_party, ":town_faction", "p_town_20_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_2", ":town_faction"),

          (party_set_slot, "p_village_20_4", slot_village_bound_center, "p_town_20_2"), ### Málaga
          (store_faction_of_party, ":town_faction", "p_town_20_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_20_4", ":town_faction"),

          ### Kingdom of Sicily
          (party_set_slot, "p_village_24_3", slot_village_bound_center, "p_castle_24_1"), ### Scilla
          (store_faction_of_party, ":town_faction", "p_castle_24_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_24_3", ":town_faction"),

          ### Mamluk Sultanate
          (party_set_slot, "p_village_25_7", slot_village_bound_center, "p_castle_25_1"), ### Mansoura
          (store_faction_of_party, ":town_faction", "p_castle_25_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_7", ":town_faction"),

          (party_set_slot, "p_village_25_8", slot_village_bound_center, "p_castle_25_2"), ### Al`Arish
          (store_faction_of_party, ":town_faction", "p_castle_25_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_8", ":town_faction"),

          (party_set_slot, "p_village_25_9", slot_village_bound_center, "p_castle_25_3"), ### Ismailiya
          (store_faction_of_party, ":town_faction", "p_castle_25_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_9", ":town_faction"),

          (party_set_slot, "p_village_25_12", slot_village_bound_center, "p_castle_25_6"), ### Karak
          (store_faction_of_party, ":town_faction", "p_castle_25_6"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_12", ":town_faction"),

          (party_set_slot, "p_village_25_4", slot_village_bound_center, "p_town_25_2"), ### Alexandria
          (store_faction_of_party, ":town_faction", "p_town_25_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_4", ":town_faction"),

          (party_set_slot, "p_village_25_6", slot_village_bound_center, "p_town_25_3"), ### Damietta
          (store_faction_of_party, ":town_faction", "p_town_25_3"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_6", ":town_faction"),

          (party_set_slot, "p_village_25_14", slot_village_bound_center, "p_town_25_4"), ### Damascus
          (store_faction_of_party, ":town_faction", "p_town_25_4"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_14", ":town_faction"),

          (party_set_slot, "p_village_25_16", slot_village_bound_center, "p_town_25_5"), ### Jerusalem
          (store_faction_of_party, ":town_faction", "p_town_25_5"),
          (call_script, "script_give_center_to_faction_aux", "p_village_25_16", ":town_faction"),

          ### Kingdom of Bulgaria
          (party_set_slot, "p_village_30_4", slot_village_bound_center, "p_castle_30_1"), ### Drastar
          (store_faction_of_party, ":town_faction", "p_castle_30_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_30_4", ":town_faction"),

          (party_set_slot, "p_village_30_2", slot_village_bound_center, "p_town_30_1"), ### Tarnovo
          (store_faction_of_party, ":town_faction", "p_town_30_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_30_2", ":town_faction"),

          (party_set_slot, "p_village_30_5", slot_village_bound_center, "p_town_30_2"), ### Plovdiv
          (store_faction_of_party, ":town_faction", "p_town_30_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_30_5", ":town_faction"),

          ### Marinid Dynasty
          (party_set_slot, "p_village_31_8", slot_village_bound_center, "p_castle_31_2"), ### Algiers
          (store_faction_of_party, ":town_faction", "p_castle_31_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_31_8", ":town_faction"),

          ### Curonians
          (party_set_slot, "p_village_35_1", slot_village_bound_center, "p_castle_35_1"), ### Dzintare
          (store_faction_of_party, ":town_faction", "p_castle_35_1"),
          (call_script, "script_give_center_to_faction_aux", "p_village_35_1", ":town_faction"),

          (party_set_slot, "p_village_35_3", slot_village_bound_center, "p_castle_35_2"), ### Įpiltis
          (store_faction_of_party, ":town_faction", "p_castle_35_2"),
          (call_script, "script_give_center_to_faction_aux", "p_village_35_3", ":town_faction"),
        (try_end),
        ### End of manual assignments/exceptions pre-autoscript handouts.

        (try_for_range, ":cur_center", ":start_castles", ":end_castles"),
          (assign, ":min_dist", 999999),
          (assign, ":min_dist_village", -1),
          (try_for_range, ":cur_village", ":start_villages", ":end_villages"),
            (neg|party_slot_ge, ":cur_village", slot_village_bound_center, 1), ### Skip villages which are already bound.
            (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_center"),
            (lt, ":cur_dist", ":min_dist"),
            (assign, ":min_dist", ":cur_dist"),
            (assign, ":min_dist_village", ":cur_village"),
          (try_end),
          (assign, ":dontbind", 0),
          (try_for_range, ":cur_village", ":start_villages", ":end_villages"), ### And check if the castle has any bound villages already.
            (party_slot_eq, ":cur_village", slot_village_bound_center, ":cur_center"),
            (assign, ":dontbind", 1),
          (try_end),
          (try_begin),
            (eq, ":dontbind", 0),
            (neq, ":min_dist_village", -1), #tom
            (party_set_slot, ":min_dist_village", slot_village_bound_center, ":cur_center"),
            (store_faction_of_party, ":town_faction", ":cur_center"),
            (call_script, "script_give_center_to_faction_aux", ":min_dist_village", ":town_faction"),
          (try_end),
        (try_end), # castles
        
        (try_for_range, ":cur_center", ":start_towns", ":end_towns"),
          (assign, ":min_dist", 999999),
          (assign, ":min_dist_village", -1),
          (try_for_range, ":cur_village", ":start_villages", ":end_villages"),
            (neg|party_slot_ge, ":cur_village", slot_village_bound_center, 1), #skip villages which are already bound.
            (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_center"),
            (lt, ":cur_dist", ":min_dist"),
            (assign, ":min_dist", ":cur_dist"),
            (assign, ":min_dist_village", ":cur_village"),
          (try_end),
          (neq, ":min_dist_village", -1), #tom
          (party_set_slot, ":min_dist_village", slot_village_bound_center, ":cur_center"),
          (store_faction_of_party, ":town_faction", ":cur_center"),
          (call_script, "script_give_center_to_faction_aux", ":min_dist_village", ":town_faction"),
        (try_end), # towns
        
        (try_for_range, ":cur_center", ":start_towns", ":end_towns"),
          (assign, ":min_dist", 999999),
          (assign, ":min_dist_village", -1),
          (try_for_range, ":cur_village", ":start_villages", ":end_villages"),
            (neg|party_slot_ge, ":cur_village", slot_village_bound_center, 1), #skip villages which are already bound.
            (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_center"),
            (lt, ":cur_dist", ":min_dist"),
            (assign, ":min_dist", ":cur_dist"),
            (assign, ":min_dist_village", ":cur_village"),
          (try_end),
          (neq, ":min_dist_village", -1), #tom
          (party_set_slot, ":min_dist_village", slot_village_bound_center, ":cur_center"),
          (store_faction_of_party, ":town_faction", ":cur_center"),
          (call_script, "script_give_center_to_faction_aux", ":min_dist_village", ":town_faction"),
        (try_end), # towns
        
      (try_end), # kingdoms
      
      # Towns (loop)
      (store_sub, ":towns", towns_end, towns_begin),
      (store_sub, ":villages", villages_end, villages_begin),
      (store_sub, ":castles", castles_end, castles_begin),
      
      # (store_sub, ":seneschals", "trp_castle_1_seneschal", "trp_town_1_seneschal"),
      (store_sub, ":mayors", "trp_village_1_elder", "trp_town_1_mayor"),
      (store_sub, ":tavernkeepers", "trp_town_1_merchant", "trp_town_1_tavernkeeper"),
      (store_sub, ":weaponsmiths", "trp_town_1_tavernkeeper", "trp_town_1_weaponsmith"),
      (store_sub, ":armorers", "trp_town_1_weaponsmith", "trp_town_1_armorer"),
      (store_sub, ":merchants", "trp_salt_mine_merchant", "trp_town_1_merchant"),
      (store_sub, ":horse_merchants", "trp_town_1_mayor", "trp_town_1_horse_merchant"),
      (store_sub, ":arena_masters", "trp_town_1_armorer", "trp_town_1_arena_master"),
      (store_sub, ":craftsmen", "trp_zendar_chest", "trp_town_1_master_craftsman"),
      
      
      # (store_sub, ":castle_seneschals", "trp_town_1_arena_master", "trp_castle_1_seneschal"),
      
      (store_sub, ":village_elders", "trp_merchants_end", "trp_village_1_elder"),
      
      (assign, reg25, ":towns"),
      (assign, reg27, ":villages"),
      (assign, reg28, ":castles"),
      
      (store_mul, ":want_villages", ":towns", 2),
      (val_add, ":want_villages", ":castles"),
      (try_begin),
        (neq, ":want_villages", ":villages"),
        (assign, reg26, ":want_villages"),
####### NEW v3.0-KOMKE I guess when they were developing the mod they wanted 2 villages bounded per town + 1 bounded per castle
####### NEW v3.0-KOMKE  but whith so many factions they never did it. I think it's safe to comment this out, at least when a new version is released
        # (display_message, "@ERROR -- wrong number of villages, need towns {reg25} * 2 + castles {reg28} = villages {reg26} but have {reg27}"),
      (try_end),
      
      (try_begin),
        (neq, ":villages", ":village_elders"),
        (assign, reg26, ":village_elders"),
        (display_message, "@ERROR -- Villages: {reg27} elders: {reg26}"),
      (try_end),
      
      (try_begin),
        (neq, ":towns", ":mayors"),
        (assign, reg26, ":mayors"),
        (display_message, "@ERROR -- Towns: {reg25} mayors: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":tavernkeepers"),
        (assign, reg26, ":tavernkeepers"),
        (display_message, "@ERROR -- Towns: {reg25} tavern keepers: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":weaponsmiths"),
        (assign, reg26, ":weaponsmiths"),
        (display_message, "@ERROR -- Towns: {reg25} weaponsmiths: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":armorers"),
        (assign, reg26, ":armorers"),
        (display_message, "@ERROR -- Towns: {reg25} armorers: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":merchants"),
        (assign, reg26, ":merchants"),
        (display_message, "@ERROR -- Towns: {reg25} merchants: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":horse_merchants"),
        (assign, reg26, ":horse_merchants"),
        (display_message, "@ERROR -- Towns: {reg25} horse merchants: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":arena_masters"),
        (assign, reg26, ":arena_masters"),
        (display_message, "@ERROR -- Towns: {reg25} arena masters: {reg26}"),
      (try_end),
      (try_begin),
        (neq, ":towns", ":craftsmen"),
        (assign, reg26, ":craftsmen"),
        (display_message, "@ERROR -- Towns: {reg25} craftsmen: {reg26}"),
      (try_end),
      
      (try_for_range, ":town_no", towns_begin, towns_end),
        (store_sub, ":offset", ":town_no", towns_begin),
        (party_set_slot, ":town_no", slot_party_type, spt_town),
        
        
#####################################################################
# Test : Tavern recruitment Begin #################################
#####################################################################
        (store_add, ":cur_object_no", "p_town_merc_1", ":offset"),
        (party_set_slot, ":town_no", slot_town_mercs, ":cur_object_no"),
#####################################################################
# Test : Tavern recruitment End ###################################
#####################################################################
        (store_add, ":cur_object_no", "trp_town_1_mayor", ":offset"),
        (party_set_slot, ":town_no", slot_town_elder, ":cur_object_no"),
        
        (store_add, ":cur_object_no", "trp_town_1_tavernkeeper", ":offset"),
        (party_set_slot, ":town_no", slot_town_tavernkeeper, ":cur_object_no"),
        
        (store_add, ":cur_object_no", "trp_town_1_weaponsmith", ":offset"),
        (party_set_slot, ":town_no", slot_town_weaponsmith, ":cur_object_no"),
        
        (store_add, ":cur_object_no", "trp_town_1_armorer", ":offset"),
        (party_set_slot, ":town_no", slot_town_armorer, ":cur_object_no"),
        
        (store_add, ":cur_object_no", "trp_town_1_merchant", ":offset"),
        (party_set_slot, ":town_no", slot_town_merchant, ":cur_object_no"),
        
        (store_add, ":cur_object_no", "trp_town_1_horse_merchant", ":offset"),
        (party_set_slot, ":town_no", slot_town_horse_merchant, ":cur_object_no"),
        
        #(store_add, ":cur_object_no", "scn_town_1_center", ":offset"),
        (store_add, ":cur_object_no", "trp_town_1_arena_master", ":offset"),
        (party_set_slot, ":town_no", slot_town_arena_master, ":cur_object_no"),
        
        #(party_set_slot, ":town_no", slot_town_center, ":cur_object_no"),
        (party_set_slot, ":town_no", slot_town_reinforcement_party_template, "pt_center_reinforcements"),
      (try_end),
      
      # Castles
      (try_for_range, ":castle_no", castles_begin, castles_end),
        (store_sub, ":offset", ":castle_no", castles_begin),
        (val_mul, ":offset", 3),
        
        (party_set_slot, ":castle_no", slot_town_reinforcement_party_template, "pt_center_reinforcements"),
        (party_set_slot, ":castle_no", slot_party_type, spt_castle),
        (party_set_slot, ":castle_no", slot_center_is_besieged_by, -1),
      (try_end),
      
      # Villages characters
      (try_for_range, ":village_no", villages_begin, villages_end),
        (store_sub, ":offset", ":village_no", villages_begin),
       
        (store_add, ":store_troop_no", "trp_village_1_elder", ":offset"),
        (party_set_slot, ":village_no", slot_town_elder, ":store_troop_no"),
        
        (party_set_slot, ":village_no", slot_party_type, spt_village),
        (party_set_slot, ":village_no", slot_village_raided_by, -1),
        
        (call_script, "script_refresh_village_defenders", ":village_no"),
        (call_script, "script_refresh_village_defenders", ":village_no"),
        (call_script, "script_refresh_village_defenders", ":village_no"),
        (call_script, "script_refresh_village_defenders", ":village_no"),
      (try_end),
      
      (try_for_range, ":center_no", centers_begin, centers_end),
        (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
        (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
        (party_set_slot, ":center_no", slot_center_last_taken_by_troop, -1),
      (try_end),
]),
####################################

####################################
("ee_setup_lord_banners",
[
      # rafi - assigning own banners - pretty bad?
      #Bohemia
      (troop_set_slot, "trp_kingdom_42_lord", slot_troop_banner_scene_prop, "spr_banner_o06"),
      (troop_set_slot, "trp_knight_42_1", slot_troop_banner_scene_prop, "spr_banner_o01"),
      (troop_set_slot, "trp_knight_42_2", slot_troop_banner_scene_prop, "spr_banner_o02"),
      (troop_set_slot, "trp_knight_42_3", slot_troop_banner_scene_prop, "spr_banner_o03"),
      (troop_set_slot, "trp_knight_42_4", slot_troop_banner_scene_prop, "spr_banner_o04"),
      (troop_set_slot, "trp_knight_42_5", slot_troop_banner_scene_prop, "spr_banner_o05"),
      #ghibeline
      (troop_set_slot, "trp_kingdom_41_lord", slot_troop_banner_scene_prop, "spr_banner_s"),
      (troop_set_slot, "trp_knight_41_1", slot_troop_banner_scene_prop, "spr_banner_s"),
      (troop_set_slot, "trp_knight_41_2", slot_troop_banner_scene_prop, "spr_banner_s"),
      (troop_set_slot, "trp_knight_41_3", slot_troop_banner_scene_prop, "spr_banner_s"),
      (troop_set_slot, "trp_knight_41_4", slot_troop_banner_scene_prop, "spr_banner_s"),
      (troop_set_slot, "trp_knight_41_5", slot_troop_banner_scene_prop, "spr_banner_s"),
      #guelph
      (troop_set_slot, "trp_kingdom_40_lord", slot_troop_banner_scene_prop, "spr_banner_t"),
      (troop_set_slot, "trp_knight_40_1", slot_troop_banner_scene_prop, "spr_banner_t"),
      (troop_set_slot, "trp_knight_40_2", slot_troop_banner_scene_prop, "spr_banner_t"),
      (troop_set_slot, "trp_knight_40_3", slot_troop_banner_scene_prop, "spr_banner_t"),
      (troop_set_slot, "trp_knight_40_4", slot_troop_banner_scene_prop, "spr_banner_t"),
      (troop_set_slot, "trp_knight_40_5", slot_troop_banner_scene_prop, "spr_banner_t"),
      #pisa
      (troop_set_slot, "trp_kingdom_39_lord", slot_troop_banner_scene_prop, "spr_banner_x09"),
      (troop_set_slot, "trp_knight_39_1", slot_troop_banner_scene_prop, "spr_banner_r12"),
      (troop_set_slot, "trp_knight_39_2", slot_troop_banner_scene_prop, "spr_banner_r03"),
      (troop_set_slot, "trp_knight_39_3", slot_troop_banner_scene_prop, "spr_banner_k20"),
      (troop_set_slot, "trp_knight_39_4", slot_troop_banner_scene_prop, "spr_banner_r04"),
      (troop_set_slot, "trp_knight_39_5", slot_troop_banner_scene_prop, "spr_banner_r02"),
      #genoa
      (troop_set_slot, "trp_kingdom_38_lord", slot_troop_banner_scene_prop, "spr_banner_f18"),
      (troop_set_slot, "trp_knight_38_1", slot_troop_banner_scene_prop, "spr_banner_f18"),
      (troop_set_slot, "trp_knight_38_2", slot_troop_banner_scene_prop, "spr_banner_r08"),
      (troop_set_slot, "trp_knight_38_3", slot_troop_banner_scene_prop, "spr_banner_r07"),
      (troop_set_slot, "trp_knight_38_4", slot_troop_banner_scene_prop, "spr_banner_r06"),
      (troop_set_slot, "trp_knight_38_5", slot_troop_banner_scene_prop, "spr_banner_r05"),      
      
      (troop_set_slot, "trp_kingdom_37_lord", slot_troop_banner_scene_prop, "spr_banner_h"),
      (troop_set_slot, "trp_knight_37_1", slot_troop_banner_scene_prop, "spr_banner_h"),
      (troop_set_slot, "trp_knight_37_2", slot_troop_banner_scene_prop, "spr_banner_i"),
      (troop_set_slot, "trp_knight_37_3", slot_troop_banner_scene_prop, "spr_banner_i"),
      
      (troop_set_slot, "trp_kingdom_36_lord", slot_troop_banner_scene_prop, "spr_banner_p19"),
      (troop_set_slot, "trp_knight_36_1", slot_troop_banner_scene_prop, "spr_banner_p21"),
      (troop_set_slot, "trp_knight_36_2", slot_troop_banner_scene_prop, "spr_banner_p20"),
      (troop_set_slot, "trp_knight_36_3", slot_troop_banner_scene_prop, "spr_banner_p19"),
      
      (troop_set_slot, "trp_kingdom_35_lord", slot_troop_banner_scene_prop, "spr_banner_d"),   
      (troop_set_slot, "trp_knight_35_1", slot_troop_banner_scene_prop, "spr_banner_p18"),
      (troop_set_slot, "trp_knight_35_2", slot_troop_banner_scene_prop, "spr_banner_p17"),
      (troop_set_slot, "trp_knight_35_3", slot_troop_banner_scene_prop, "spr_banner_p16"),
       
      (troop_set_slot, "trp_kingdom_34_lord", slot_troop_banner_scene_prop, "spr_banner_l"),
      (troop_set_slot, "trp_knight_34_1", slot_troop_banner_scene_prop, "spr_banner_p15"),
      (troop_set_slot, "trp_knight_34_2", slot_troop_banner_scene_prop, "spr_banner_p14"),
      (troop_set_slot, "trp_knight_34_3", slot_troop_banner_scene_prop, "spr_banner_p13"),

      (troop_set_slot, "trp_kingdom_33_lord", slot_troop_banner_scene_prop, "spr_banner_p17"),
      (troop_set_slot, "trp_knight_33_1", slot_troop_banner_scene_prop, "spr_banner_p12"),
      (troop_set_slot, "trp_knight_33_2", slot_troop_banner_scene_prop, "spr_banner_p11"),
      (troop_set_slot, "trp_knight_33_3", slot_troop_banner_scene_prop, "spr_banner_p10"),
      
      (troop_set_slot, "trp_kingdom_32_lord", slot_troop_banner_scene_prop, "spr_banner_o"),
      (troop_set_slot, "trp_knight_32_1", slot_troop_banner_scene_prop, "spr_banner_j"),
      (troop_set_slot, "trp_knight_32_2", slot_troop_banner_scene_prop, "spr_banner_r10"),
      (troop_set_slot, "trp_knight_32_3", slot_troop_banner_scene_prop, "spr_banner_r"),
      (troop_set_slot, "trp_knight_32_4", slot_troop_banner_scene_prop, "spr_banner_q09"),
      (troop_set_slot, "trp_knight_32_5", slot_troop_banner_scene_prop, "spr_banner_j"),
      (troop_set_slot, "trp_knight_32_6", slot_troop_banner_scene_prop, "spr_banner_q"),
      (troop_set_slot, "trp_knight_32_7", slot_troop_banner_scene_prop, "spr_banner_r"),
      (troop_set_slot, "trp_knight_32_8", slot_troop_banner_scene_prop, "spr_banner_p"),
      (troop_set_slot, "trp_knight_32_9", slot_troop_banner_scene_prop, "spr_banner_j"),
      (troop_set_slot, "trp_knight_32_10", slot_troop_banner_scene_prop, "spr_banner_j"),
      
      (troop_set_slot, "trp_kingdom_31_lord", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_1", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_2", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_3", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_4", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_5", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_6", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_7", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_8", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_9", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_10", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_11", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_12", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_13", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_14", slot_troop_banner_scene_prop, "spr_banner_x19"),
      (troop_set_slot, "trp_knight_31_15", slot_troop_banner_scene_prop, "spr_banner_x19"),
      
      (troop_set_slot, "trp_kingdom_30_lord", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_1", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_2", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_3", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_4", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_5", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_6", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_7", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_8", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_9", slot_troop_banner_scene_prop, "spr_banner_x15"),
      (troop_set_slot, "trp_knight_30_10", slot_troop_banner_scene_prop, "spr_banner_x15"),
      
      
      (troop_set_slot, "trp_kingdom_29_lord", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_1", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_2", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_3", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_4", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_5", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_6", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_7", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_8", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_9", slot_troop_banner_scene_prop, "spr_banner_x16"),
      (troop_set_slot, "trp_knight_29_10", slot_troop_banner_scene_prop, "spr_banner_x16"),
      
      
      (troop_set_slot, "trp_kingdom_28_lord", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_1", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_2", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_3", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_4", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_5", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_6", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_7", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_8", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_9", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_10", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_11", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_12", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_13", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_14", slot_troop_banner_scene_prop, "spr_banner_x13"),
      (troop_set_slot, "trp_knight_28_15", slot_troop_banner_scene_prop, "spr_banner_x13"),
      
      (troop_set_slot, "trp_kingdom_27_lord", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_1", slot_troop_banner_scene_prop, "spr_banner_x14"),
      (troop_set_slot, "trp_knight_27_2", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_3", slot_troop_banner_scene_prop, "spr_banner_i18"),
      (troop_set_slot, "trp_knight_27_4", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_5", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_6", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_7", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_8", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_9", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_10", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_11", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_12", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_13", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_14", slot_troop_banner_scene_prop, "spr_banner_x12"),
      (troop_set_slot, "trp_knight_27_15", slot_troop_banner_scene_prop, "spr_banner_x12"),
      
      (troop_set_slot, "trp_kingdom_26_lord", slot_troop_banner_scene_prop, "spr_banner_x11"),
      (troop_set_slot, "trp_knight_26_1", slot_troop_banner_scene_prop, "spr_banner_i16"),
      (troop_set_slot, "trp_knight_26_2", slot_troop_banner_scene_prop, "spr_banner_i12"),
      (troop_set_slot, "trp_knight_26_3", slot_troop_banner_scene_prop, "spr_banner_i11"),
      (troop_set_slot, "trp_knight_26_4", slot_troop_banner_scene_prop, "spr_banner_i15"),
      (troop_set_slot, "trp_knight_26_5", slot_troop_banner_scene_prop, "spr_banner_x11"),
      (troop_set_slot, "trp_knight_26_6", slot_troop_banner_scene_prop, "spr_banner_i10"),
      (troop_set_slot, "trp_knight_26_7", slot_troop_banner_scene_prop, "spr_banner_i13"),
      (troop_set_slot, "trp_knight_26_8", slot_troop_banner_scene_prop, "spr_banner_x11"),
      (troop_set_slot, "trp_knight_26_9", slot_troop_banner_scene_prop, "spr_banner_i14"),
      (troop_set_slot, "trp_knight_26_10", slot_troop_banner_scene_prop, "spr_banner_x11"),
      
      (troop_set_slot, "trp_kingdom_25_lord", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_1", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_2", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_3", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_4", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_5", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_6", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_7", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_8", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_9", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_10", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_11", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_12", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_13", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_14", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_15", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_16", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_17", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_18", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_19", slot_troop_banner_scene_prop, "spr_banner_x10"),
      (troop_set_slot, "trp_knight_25_20", slot_troop_banner_scene_prop, "spr_banner_x10"),
      
      (troop_set_slot, "trp_kingdom_24_lord", slot_troop_banner_scene_prop, "spr_banner_f10"),
      (troop_set_slot, "trp_knight_24_1", slot_troop_banner_scene_prop, "spr_banner_r11"),
      (troop_set_slot, "trp_knight_24_2", slot_troop_banner_scene_prop, "spr_banner_f12"),
      (troop_set_slot, "trp_knight_24_3", slot_troop_banner_scene_prop, "spr_banner_f13"),
      (troop_set_slot, "trp_knight_24_4", slot_troop_banner_scene_prop, "spr_banner_f14"),
      (troop_set_slot, "trp_knight_24_5", slot_troop_banner_scene_prop, "spr_banner_f15"),
      (troop_set_slot, "trp_knight_24_6", slot_troop_banner_scene_prop, "spr_banner_f10"),
      (troop_set_slot, "trp_knight_24_7", slot_troop_banner_scene_prop, "spr_banner_f10"),
      (troop_set_slot, "trp_knight_24_8", slot_troop_banner_scene_prop, "spr_banner_f10"),
      (troop_set_slot, "trp_knight_24_9", slot_troop_banner_scene_prop, "spr_banner_f10"),
      (troop_set_slot, "trp_knight_24_10", slot_troop_banner_scene_prop, "spr_banner_f10"),
      
      (troop_set_slot, "trp_kingdom_23_lord", slot_troop_banner_scene_prop, "spr_banner_v05"),
      (troop_set_slot, "trp_knight_23_1", slot_troop_banner_scene_prop, "spr_banner_v07"), # hospitaller
      (troop_set_slot, "trp_knight_23_2", slot_troop_banner_scene_prop, "spr_banner_v08"), # templar
      (troop_set_slot, "trp_knight_23_3", slot_troop_banner_scene_prop, "spr_banner_x20"),
      (troop_set_slot, "trp_knight_23_4", slot_troop_banner_scene_prop, "spr_banner_v02"),
      (troop_set_slot, "trp_knight_23_5", slot_troop_banner_scene_prop, "spr_banner_v03"),
      (troop_set_slot, "trp_knight_23_6", slot_troop_banner_scene_prop, "spr_banner_v06"),
      (troop_set_slot, "trp_knight_23_7", slot_troop_banner_scene_prop, "spr_banner_v04"),
      (troop_set_slot, "trp_knight_23_8", slot_troop_banner_scene_prop, "spr_banner_v13"),
      (troop_set_slot, "trp_knight_23_9", slot_troop_banner_scene_prop, "spr_banner_x21"),
      (troop_set_slot, "trp_knight_23_10", slot_troop_banner_scene_prop, "spr_banner_v10"),
      (troop_set_slot, "trp_knight_23_11", slot_troop_banner_scene_prop, "spr_banner_v14"),
      (troop_set_slot, "trp_knight_23_12", slot_troop_banner_scene_prop, "spr_banner_v15"),
      (troop_set_slot, "trp_knight_23_13", slot_troop_banner_scene_prop, "spr_banner_v20"),
      (troop_set_slot, "trp_knight_23_14", slot_troop_banner_scene_prop, "spr_banner_x08"),
      (troop_set_slot, "trp_knight_23_15", slot_troop_banner_scene_prop, "spr_banner_x08"),
      
      (troop_set_slot, "trp_kingdom_22_lord", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_1", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_2", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_3", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_4", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_5", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_6", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_7", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_8", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_9", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_10", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_11", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_12", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_13", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_14", slot_troop_banner_scene_prop, "spr_banner_x07"),
      (troop_set_slot, "trp_knight_22_15", slot_troop_banner_scene_prop, "spr_banner_x07"),
      
      (troop_set_slot, "trp_pope", slot_troop_banner_scene_prop, "spr_banner_f16"),
      (troop_set_slot, "trp_knight_21_1", slot_troop_banner_scene_prop, "spr_banner_f17"),
      (troop_set_slot, "trp_knight_21_2", slot_troop_banner_scene_prop, "spr_banner_o09"),
      (troop_set_slot, "trp_knight_21_3", slot_troop_banner_scene_prop, "spr_banner_f19"),
      (troop_set_slot, "trp_knight_21_4", slot_troop_banner_scene_prop, "spr_banner_f20"),
      (troop_set_slot, "trp_knight_21_5", slot_troop_banner_scene_prop, "spr_banner_f21"),
      
      (troop_set_slot, "trp_kingdom_20_lord", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_1", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_2", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_3", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_4", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_5", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_6", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_7", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_8", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_9", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_10", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_11", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_12", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_13", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_14", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_15", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_16", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_17", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_18", slot_troop_banner_scene_prop, "spr_banner_x01"),
      (troop_set_slot, "trp_knight_20_19", slot_troop_banner_scene_prop, "spr_banner_x02"),
      (troop_set_slot, "trp_knight_20_20", slot_troop_banner_scene_prop, "spr_banner_x01"),
      
      (troop_set_slot, "trp_kingdom_19_lord", slot_troop_banner_scene_prop, "spr_banner_x04"),
      (troop_set_slot, "trp_knight_19_1", slot_troop_banner_scene_prop, "spr_banner_x04"),
      (troop_set_slot, "trp_knight_19_2", slot_troop_banner_scene_prop, "spr_banner_x04"),
      (troop_set_slot, "trp_knight_19_3", slot_troop_banner_scene_prop, "spr_banner_x04"),
      
      (troop_set_slot, "trp_kingdom_18_lord", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (troop_set_slot, "trp_knight_18_1", slot_troop_banner_scene_prop, "spr_banner_f02"),
      (troop_set_slot, "trp_knight_18_2", slot_troop_banner_scene_prop, "spr_banner_f03"),
      (troop_set_slot, "trp_knight_18_3", slot_troop_banner_scene_prop, "spr_banner_f04"),
      (troop_set_slot, "trp_knight_18_4", slot_troop_banner_scene_prop, "spr_banner_f05"),
      (troop_set_slot, "trp_knight_18_5", slot_troop_banner_scene_prop, "spr_banner_f06"),
      (troop_set_slot, "trp_knight_18_6", slot_troop_banner_scene_prop, "spr_banner_f07"),
      (troop_set_slot, "trp_knight_18_7", slot_troop_banner_scene_prop, "spr_banner_f08"),
      (troop_set_slot, "trp_knight_18_8", slot_troop_banner_scene_prop, "spr_banner_f09"),
      (troop_set_slot, "trp_knight_18_9", slot_troop_banner_scene_prop, "spr_banner_e18"),
      (troop_set_slot, "trp_knight_18_10", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (troop_set_slot, "trp_knight_18_11", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (troop_set_slot, "trp_knight_18_12", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (troop_set_slot, "trp_knight_18_13", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (troop_set_slot, "trp_knight_18_14", slot_troop_banner_scene_prop, "spr_banner_f01"),
      (troop_set_slot, "trp_knight_18_15", slot_troop_banner_scene_prop, "spr_banner_f01"),
      
      (troop_set_slot, "trp_kingdom_17_lord", slot_troop_banner_scene_prop, "spr_banner_e01"),
      (troop_set_slot, "trp_knight_17_1", slot_troop_banner_scene_prop, "spr_banner_e02"),
      (troop_set_slot, "trp_knight_17_2", slot_troop_banner_scene_prop, "spr_banner_e03"),
      (troop_set_slot, "trp_knight_17_3", slot_troop_banner_scene_prop, "spr_banner_e04"),
      (troop_set_slot, "trp_knight_17_4", slot_troop_banner_scene_prop, "spr_banner_e05"),
      (troop_set_slot, "trp_knight_17_5", slot_troop_banner_scene_prop, "spr_banner_e06"),
      (troop_set_slot, "trp_knight_17_6", slot_troop_banner_scene_prop, "spr_banner_e07"),
      (troop_set_slot, "trp_knight_17_7", slot_troop_banner_scene_prop, "spr_banner_e08"),
      (troop_set_slot, "trp_knight_17_8", slot_troop_banner_scene_prop, "spr_banner_e09"),
      (troop_set_slot, "trp_knight_17_9", slot_troop_banner_scene_prop, "spr_banner_e10"),
      (troop_set_slot, "trp_knight_17_10", slot_troop_banner_scene_prop, "spr_banner_e11"),
      (troop_set_slot, "trp_knight_17_11", slot_troop_banner_scene_prop, "spr_banner_e12"),
      (troop_set_slot, "trp_knight_17_12", slot_troop_banner_scene_prop, "spr_banner_e13"),
      (troop_set_slot, "trp_knight_17_13", slot_troop_banner_scene_prop, "spr_banner_e14"),
      (troop_set_slot, "trp_knight_17_14", slot_troop_banner_scene_prop, "spr_banner_e15"),
      (troop_set_slot, "trp_knight_17_15", slot_troop_banner_scene_prop, "spr_banner_e16"),
      
      (troop_set_slot, "trp_kingdom_16_lord", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_1", slot_troop_banner_scene_prop, "spr_banner_e21"),
      (troop_set_slot, "trp_knight_16_2", slot_troop_banner_scene_prop, "spr_banner_e19"),
      (troop_set_slot, "trp_knight_16_3", slot_troop_banner_scene_prop, "spr_banner_e20"),
      (troop_set_slot, "trp_knight_16_4", slot_troop_banner_scene_prop, "spr_banner_e21"),
      (troop_set_slot, "trp_knight_16_5", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_6", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_7", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_8", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_9", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_10", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_11", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_12", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_13", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_14", slot_troop_banner_scene_prop, "spr_banner_e17"),
      (troop_set_slot, "trp_knight_16_15", slot_troop_banner_scene_prop, "spr_banner_e17"),
      
      (troop_set_slot, "trp_kingdom_15_lord", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (troop_set_slot, "trp_knight_15_1", slot_troop_banner_scene_prop, "spr_banner_i06"),
      (troop_set_slot, "trp_knight_15_2", slot_troop_banner_scene_prop, "spr_banner_i07"),
      (troop_set_slot, "trp_knight_15_3", slot_troop_banner_scene_prop, "spr_banner_i08"),
      (troop_set_slot, "trp_knight_15_4", slot_troop_banner_scene_prop, "spr_banner_i09"),
      (troop_set_slot, "trp_knight_15_5", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (troop_set_slot, "trp_knight_15_6", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (troop_set_slot, "trp_knight_15_7", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (troop_set_slot, "trp_knight_15_8", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (troop_set_slot, "trp_knight_15_9", slot_troop_banner_scene_prop, "spr_banner_v01"),
      (troop_set_slot, "trp_knight_15_10", slot_troop_banner_scene_prop, "spr_banner_v01"),
      
      # Sweden
      (troop_set_slot, "trp_kingdom_14_lord", slot_troop_banner_scene_prop, "spr_banner_u01"),
      (troop_set_slot, "trp_knight_14_1", slot_troop_banner_scene_prop, "spr_banner_u02"),
      (troop_set_slot, "trp_knight_14_2", slot_troop_banner_scene_prop, "spr_banner_u03"),
      (troop_set_slot, "trp_knight_14_3", slot_troop_banner_scene_prop, "spr_banner_u04"),
      (troop_set_slot, "trp_knight_14_4", slot_troop_banner_scene_prop, "spr_banner_u05"),
      (troop_set_slot, "trp_knight_14_5", slot_troop_banner_scene_prop, "spr_banner_u06"),
      (troop_set_slot, "trp_knight_14_6", slot_troop_banner_scene_prop, "spr_banner_u07"),
      (troop_set_slot, "trp_knight_14_7", slot_troop_banner_scene_prop, "spr_banner_u08"),
      (troop_set_slot, "trp_knight_14_8", slot_troop_banner_scene_prop, "spr_banner_u09"),
      (troop_set_slot, "trp_knight_14_9", slot_troop_banner_scene_prop, "spr_banner_u10"),
      (troop_set_slot, "trp_knight_14_10", slot_troop_banner_scene_prop, "spr_banner_u11"),
      (troop_set_slot, "trp_knight_14_11", slot_troop_banner_scene_prop, "spr_banner_u12"),
      (troop_set_slot, "trp_knight_14_12", slot_troop_banner_scene_prop, "spr_banner_u13"),
      (troop_set_slot, "trp_knight_14_13", slot_troop_banner_scene_prop, "spr_banner_u14"),
      (troop_set_slot, "trp_knight_14_14", slot_troop_banner_scene_prop, "spr_banner_u15"),
      (troop_set_slot, "trp_knight_14_15", slot_troop_banner_scene_prop, "spr_banner_u16"),
      
      # Ireland
      (troop_set_slot, "trp_kingdom_13_lord", slot_troop_banner_scene_prop, "spr_banner_t02"),
      (troop_set_slot, "trp_knight_13_1", slot_troop_banner_scene_prop, "spr_banner_t01"),
      (troop_set_slot, "trp_knight_13_2", slot_troop_banner_scene_prop, "spr_banner_t03"),
      (troop_set_slot, "trp_knight_13_3", slot_troop_banner_scene_prop, "spr_banner_t04"),
      (troop_set_slot, "trp_knight_13_4", slot_troop_banner_scene_prop, "spr_banner_t05"),
      (troop_set_slot, "trp_knight_13_5", slot_troop_banner_scene_prop, "spr_banner_t06"),
      (troop_set_slot, "trp_knight_13_6", slot_troop_banner_scene_prop, "spr_banner_t07"),
      (troop_set_slot, "trp_knight_13_7", slot_troop_banner_scene_prop, "spr_banner_t08"),
      (troop_set_slot, "trp_knight_13_8", slot_troop_banner_scene_prop, "spr_banner_t09"),
      (troop_set_slot, "trp_knight_13_9", slot_troop_banner_scene_prop, "spr_banner_t10"),
      (troop_set_slot, "trp_knight_13_10", slot_troop_banner_scene_prop, "spr_banner_t11"),
      (troop_set_slot, "trp_kingdom_13_pretender", slot_troop_banner_scene_prop, "spr_banner_t01"),
      
      # Scotland
      (troop_set_slot, "trp_kingdom_12_lord", slot_troop_banner_scene_prop, "spr_banner_s01"),
      (troop_set_slot, "trp_knight_12_1", slot_troop_banner_scene_prop, "spr_banner_s02"),
      (troop_set_slot, "trp_knight_12_2", slot_troop_banner_scene_prop, "spr_banner_s03"),
      (troop_set_slot, "trp_knight_12_3", slot_troop_banner_scene_prop, "spr_banner_s04"),
      (troop_set_slot, "trp_knight_12_4", slot_troop_banner_scene_prop, "spr_banner_s05"),
      (troop_set_slot, "trp_knight_12_5", slot_troop_banner_scene_prop, "spr_banner_s06"),
      (troop_set_slot, "trp_knight_12_6", slot_troop_banner_scene_prop, "spr_banner_s07"),
      (troop_set_slot, "trp_knight_12_7", slot_troop_banner_scene_prop, "spr_banner_s08"),
      (troop_set_slot, "trp_knight_12_8", slot_troop_banner_scene_prop, "spr_banner_s09"),
      (troop_set_slot, "trp_knight_12_9", slot_troop_banner_scene_prop, "spr_banner_s10"),
      (troop_set_slot, "trp_knight_12_10", slot_troop_banner_scene_prop, "spr_banner_s11"),
      (troop_set_slot, "trp_kingdom_12_pretender", slot_troop_banner_scene_prop, "spr_banner_s01"),
      
      # Norway
      (troop_set_slot, "trp_kingdom_11_lord", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_1", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_2", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_3", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_4", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_5", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_6", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_7", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_8", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_9", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_10", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_11", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_12", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_13", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_14", slot_troop_banner_scene_prop, "spr_banner_r01"),
      (troop_set_slot, "trp_knight_11_15", slot_troop_banner_scene_prop, "spr_banner_r01"),
      
      # France
      (troop_set_slot, "trp_kingdom_10_lord", slot_troop_banner_scene_prop, "spr_banner_g01"),
      (troop_set_slot, "trp_knight_10_1", slot_troop_banner_scene_prop, "spr_banner_g02"),
      (troop_set_slot, "trp_knight_10_2", slot_troop_banner_scene_prop, "spr_banner_g03"),
      (troop_set_slot, "trp_knight_10_3", slot_troop_banner_scene_prop, "spr_banner_g04"),
      (troop_set_slot, "trp_knight_10_4", slot_troop_banner_scene_prop, "spr_banner_g05"),
      (troop_set_slot, "trp_knight_10_5", slot_troop_banner_scene_prop, "spr_banner_g06"),
      (troop_set_slot, "trp_knight_10_6", slot_troop_banner_scene_prop, "spr_banner_g07"),
      (troop_set_slot, "trp_knight_10_7", slot_troop_banner_scene_prop, "spr_banner_g08"),
      (troop_set_slot, "trp_knight_10_8", slot_troop_banner_scene_prop, "spr_banner_g09"),
      (troop_set_slot, "trp_knight_10_9", slot_troop_banner_scene_prop, "spr_banner_g10"),
      (troop_set_slot, "trp_knight_10_10", slot_troop_banner_scene_prop, "spr_banner_g11"),
      (troop_set_slot, "trp_knight_10_11", slot_troop_banner_scene_prop, "spr_banner_g12"),
      (troop_set_slot, "trp_knight_10_12", slot_troop_banner_scene_prop, "spr_banner_g13"),
      (troop_set_slot, "trp_knight_10_13", slot_troop_banner_scene_prop, "spr_banner_g14"),
      (troop_set_slot, "trp_knight_10_14", slot_troop_banner_scene_prop, "spr_banner_g15"),
      (troop_set_slot, "trp_knight_10_15", slot_troop_banner_scene_prop, "spr_banner_g16"),
      (troop_set_slot, "trp_knight_10_16", slot_troop_banner_scene_prop, "spr_banner_g17"),
      (troop_set_slot, "trp_knight_10_17", slot_troop_banner_scene_prop, "spr_banner_g18"),
      (troop_set_slot, "trp_knight_10_18", slot_troop_banner_scene_prop, "spr_banner_g19"),
      (troop_set_slot, "trp_knight_10_19", slot_troop_banner_scene_prop, "spr_banner_g20"),
      (troop_set_slot, "trp_knight_10_20", slot_troop_banner_scene_prop, "spr_banner_g21"),
      
      # England
      (troop_set_slot, "trp_kingdom_9_lord", slot_troop_banner_scene_prop, "spr_banner_h01"),
      (troop_set_slot, "trp_knight_9_1", slot_troop_banner_scene_prop, "spr_banner_h02"),
      (troop_set_slot, "trp_knight_9_2", slot_troop_banner_scene_prop, "spr_banner_h03"),
      (troop_set_slot, "trp_knight_9_3", slot_troop_banner_scene_prop, "spr_banner_h04"),
      (troop_set_slot, "trp_knight_9_4", slot_troop_banner_scene_prop, "spr_banner_h05"),
      (troop_set_slot, "trp_knight_9_5", slot_troop_banner_scene_prop, "spr_banner_h06"),
      (troop_set_slot, "trp_knight_9_6", slot_troop_banner_scene_prop, "spr_banner_h07"),
      (troop_set_slot, "trp_knight_9_7", slot_troop_banner_scene_prop, "spr_banner_h08"),
      (troop_set_slot, "trp_knight_9_8", slot_troop_banner_scene_prop, "spr_banner_h09"),
      (troop_set_slot, "trp_knight_9_9", slot_troop_banner_scene_prop, "spr_banner_h10"),
      (troop_set_slot, "trp_knight_9_10", slot_troop_banner_scene_prop, "spr_banner_h11"),
      (troop_set_slot, "trp_knight_9_11", slot_troop_banner_scene_prop, "spr_banner_h12"),
      (troop_set_slot, "trp_knight_9_12", slot_troop_banner_scene_prop, "spr_banner_h13"),
      (troop_set_slot, "trp_knight_9_13", slot_troop_banner_scene_prop, "spr_banner_h14"),
      (troop_set_slot, "trp_knight_9_14", slot_troop_banner_scene_prop, "spr_banner_h15"),
      (troop_set_slot, "trp_knight_9_15", slot_troop_banner_scene_prop, "spr_banner_h16"),
      (troop_set_slot, "trp_knight_9_16", slot_troop_banner_scene_prop, "spr_banner_h17"),
      (troop_set_slot, "trp_knight_9_17", slot_troop_banner_scene_prop, "spr_banner_h18"),
      (troop_set_slot, "trp_knight_9_18", slot_troop_banner_scene_prop, "spr_banner_h19"),
      (troop_set_slot, "trp_knight_9_19", slot_troop_banner_scene_prop, "spr_banner_h20"),
      (troop_set_slot, "trp_knight_9_20", slot_troop_banner_scene_prop, "spr_banner_h21"),
      
      (troop_set_slot, "trp_kingdom_9_pretender", slot_troop_banner_scene_prop, "spr_banner_h01"),
      
      # Novgorod
      (troop_set_slot, "trp_kingdom_8_lord", slot_troop_banner_scene_prop, "spr_banner_i01"),
      (troop_set_slot, "trp_knight_8_1", slot_troop_banner_scene_prop, "spr_banner_i02"),
      (troop_set_slot, "trp_knight_8_2", slot_troop_banner_scene_prop, "spr_banner_i03"),
      (troop_set_slot, "trp_knight_8_3", slot_troop_banner_scene_prop, "spr_banner_i04"),
      (troop_set_slot, "trp_knight_8_4", slot_troop_banner_scene_prop, "spr_banner_i05"),
      (troop_set_slot, "trp_knight_8_5", slot_troop_banner_scene_prop, "spr_banner_i06"),
      (troop_set_slot, "trp_knight_8_6", slot_troop_banner_scene_prop, "spr_banner_i07"),
      (troop_set_slot, "trp_knight_8_7", slot_troop_banner_scene_prop, "spr_banner_i08"),
      (troop_set_slot, "trp_knight_8_8", slot_troop_banner_scene_prop, "spr_banner_i09"),
      (troop_set_slot, "trp_knight_8_9", slot_troop_banner_scene_prop, "spr_banner_i10"),
      (troop_set_slot, "trp_knight_8_10", slot_troop_banner_scene_prop, "spr_banner_i11"),
      
      # Hungary
      (troop_set_slot, "trp_kingdom_7_lord", slot_troop_banner_scene_prop, "spr_banner_j01"),
      (troop_set_slot, "trp_knight_7_1", slot_troop_banner_scene_prop, "spr_banner_j02"),
      (troop_set_slot, "trp_knight_7_2", slot_troop_banner_scene_prop, "spr_banner_j03"),
      (troop_set_slot, "trp_knight_7_3", slot_troop_banner_scene_prop, "spr_banner_j04"),
      (troop_set_slot, "trp_knight_7_4", slot_troop_banner_scene_prop, "spr_banner_j05"),
      (troop_set_slot, "trp_knight_7_5", slot_troop_banner_scene_prop, "spr_banner_j06"),
      (troop_set_slot, "trp_knight_7_6", slot_troop_banner_scene_prop, "spr_banner_j07"),
      (troop_set_slot, "trp_knight_7_7", slot_troop_banner_scene_prop, "spr_banner_j08"),
      (troop_set_slot, "trp_knight_7_8", slot_troop_banner_scene_prop, "spr_banner_j09"),
      (troop_set_slot, "trp_knight_7_9", slot_troop_banner_scene_prop, "spr_banner_j10"),
      (troop_set_slot, "trp_knight_7_10", slot_troop_banner_scene_prop, "spr_banner_j11"),
      (troop_set_slot, "trp_knight_7_11", slot_troop_banner_scene_prop, "spr_banner_j12"),
      (troop_set_slot, "trp_knight_7_12", slot_troop_banner_scene_prop, "spr_banner_j13"),
      (troop_set_slot, "trp_knight_7_13", slot_troop_banner_scene_prop, "spr_banner_j14"),
      (troop_set_slot, "trp_knight_7_14", slot_troop_banner_scene_prop, "spr_banner_j15"),
      (troop_set_slot, "trp_knight_7_15", slot_troop_banner_scene_prop, "spr_banner_j16"),
      
      # HRE
      (troop_set_slot, "trp_kingdom_6_lord", slot_troop_banner_scene_prop, "spr_banner_k01"),
      (troop_set_slot, "trp_knight_6_1", slot_troop_banner_scene_prop, "spr_banner_k02"),
      (troop_set_slot, "trp_knight_6_2", slot_troop_banner_scene_prop, "spr_banner_k03"),
      (troop_set_slot, "trp_knight_6_3", slot_troop_banner_scene_prop, "spr_banner_k04"),
      (troop_set_slot, "trp_knight_6_4", slot_troop_banner_scene_prop, "spr_banner_k05"),
      (troop_set_slot, "trp_knight_6_5", slot_troop_banner_scene_prop, "spr_banner_k06"),
      (troop_set_slot, "trp_knight_6_6", slot_troop_banner_scene_prop, "spr_banner_k07"),
      (troop_set_slot, "trp_knight_6_7", slot_troop_banner_scene_prop, "spr_banner_k08"),
      (troop_set_slot, "trp_knight_6_8", slot_troop_banner_scene_prop, "spr_banner_k09"),
      (troop_set_slot, "trp_knight_6_9", slot_troop_banner_scene_prop, "spr_banner_k10"),
      (troop_set_slot, "trp_knight_6_10", slot_troop_banner_scene_prop, "spr_banner_k11"),
      (troop_set_slot, "trp_knight_6_11", slot_troop_banner_scene_prop, "spr_banner_k12"),
      (troop_set_slot, "trp_knight_6_12", slot_troop_banner_scene_prop, "spr_banner_k13"),
      (troop_set_slot, "trp_knight_6_13", slot_troop_banner_scene_prop, "spr_banner_k14"),
      (troop_set_slot, "trp_knight_6_14", slot_troop_banner_scene_prop, "spr_banner_k15"),
      (troop_set_slot, "trp_knight_6_15", slot_troop_banner_scene_prop, "spr_banner_k16"),
      (troop_set_slot, "trp_knight_6_16", slot_troop_banner_scene_prop, "spr_banner_k17"),
      (troop_set_slot, "trp_knight_6_17", slot_troop_banner_scene_prop, "spr_banner_k18"),
      (troop_set_slot, "trp_knight_6_18", slot_troop_banner_scene_prop, "spr_banner_k19"),
      (troop_set_slot, "trp_knight_6_19", slot_troop_banner_scene_prop, "spr_banner_k20"),
      (troop_set_slot, "trp_knight_6_20", slot_troop_banner_scene_prop, "spr_banner_k21"),
      
      
      # Poland
      (troop_set_slot, "trp_kingdom_5_lord", slot_troop_banner_scene_prop, "spr_banner_l01"),
      (troop_set_slot, "trp_knight_5_1", slot_troop_banner_scene_prop, "spr_banner_l02"),
      (troop_set_slot, "trp_knight_5_2", slot_troop_banner_scene_prop, "spr_banner_l16"),
      (troop_set_slot, "trp_knight_5_3", slot_troop_banner_scene_prop, "spr_banner_l07"),
      (troop_set_slot, "trp_knight_5_4", slot_troop_banner_scene_prop, "spr_banner_l15"),
      (troop_set_slot, "trp_knight_5_5", slot_troop_banner_scene_prop, "spr_banner_l10"),
      (troop_set_slot, "trp_knight_5_6", slot_troop_banner_scene_prop, "spr_banner_l03"),
      (troop_set_slot, "trp_knight_5_7", slot_troop_banner_scene_prop, "spr_banner_l09"),
      (troop_set_slot, "trp_knight_5_8", slot_troop_banner_scene_prop, "spr_banner_l11"),
      (troop_set_slot, "trp_knight_5_9", slot_troop_banner_scene_prop, "spr_banner_l14"),
      (troop_set_slot, "trp_knight_5_10", slot_troop_banner_scene_prop, "spr_banner_l02"),
      (troop_set_slot, "trp_knight_5_11", slot_troop_banner_scene_prop, "spr_banner_l09"),
      (troop_set_slot, "trp_knight_5_12", slot_troop_banner_scene_prop, "spr_banner_l06"),
      (troop_set_slot, "trp_knight_5_13", slot_troop_banner_scene_prop, "spr_banner_l08"),
      (troop_set_slot, "trp_knight_5_14", slot_troop_banner_scene_prop, "spr_banner_l17"),
      (troop_set_slot, "trp_knight_5_15", slot_troop_banner_scene_prop, "spr_banner_l06"),
      
      # Denmark
      (troop_set_slot, "trp_kingdom_4_lord", slot_troop_banner_scene_prop, "spr_banner_m01"),
      (troop_set_slot, "trp_knight_4_1", slot_troop_banner_scene_prop, "spr_banner_m02"),
      (troop_set_slot, "trp_knight_4_2", slot_troop_banner_scene_prop, "spr_banner_m03"),
      (troop_set_slot, "trp_knight_4_3", slot_troop_banner_scene_prop, "spr_banner_m04"),
      (troop_set_slot, "trp_knight_4_4", slot_troop_banner_scene_prop, "spr_banner_m05"),
      (troop_set_slot, "trp_knight_4_5", slot_troop_banner_scene_prop, "spr_banner_m06"),
      (troop_set_slot, "trp_knight_4_6", slot_troop_banner_scene_prop, "spr_banner_m07"),
      (troop_set_slot, "trp_knight_4_7", slot_troop_banner_scene_prop, "spr_banner_m08"),
      (troop_set_slot, "trp_knight_4_8", slot_troop_banner_scene_prop, "spr_banner_m09"),
      (troop_set_slot, "trp_knight_4_9", slot_troop_banner_scene_prop, "spr_banner_m10"),
      (troop_set_slot, "trp_knight_4_10", slot_troop_banner_scene_prop, "spr_banner_m11"),
      (troop_set_slot, "trp_knight_4_11", slot_troop_banner_scene_prop, "spr_banner_m12"),
      (troop_set_slot, "trp_knight_4_12", slot_troop_banner_scene_prop, "spr_banner_m13"),
      (troop_set_slot, "trp_knight_4_13", slot_troop_banner_scene_prop, "spr_banner_m14"),
      (troop_set_slot, "trp_knight_4_14", slot_troop_banner_scene_prop, "spr_banner_m15"),
      (troop_set_slot, "trp_knight_4_15", slot_troop_banner_scene_prop, "spr_banner_m16"),
      
      (troop_set_slot, "trp_kingdom_4_pretender", slot_troop_banner_scene_prop, "spr_banner_m01"),
      
      # tatar
      (troop_set_slot, "trp_kingdom_3_lord", slot_troop_banner_scene_prop, "spr_banner_n01"),
      (troop_set_slot, "trp_knight_3_1", slot_troop_banner_scene_prop, "spr_banner_n02"),
      (troop_set_slot, "trp_knight_3_2", slot_troop_banner_scene_prop, "spr_banner_n03"),
      (troop_set_slot, "trp_knight_3_3", slot_troop_banner_scene_prop, "spr_banner_n04"),
      (troop_set_slot, "trp_knight_3_4", slot_troop_banner_scene_prop, "spr_banner_n05"),
      (troop_set_slot, "trp_knight_3_5", slot_troop_banner_scene_prop, "spr_banner_n06"),
      (troop_set_slot, "trp_knight_3_6", slot_troop_banner_scene_prop, "spr_banner_n07"),
      (troop_set_slot, "trp_knight_3_7", slot_troop_banner_scene_prop, "spr_banner_n08"),
      (troop_set_slot, "trp_knight_3_8", slot_troop_banner_scene_prop, "spr_banner_n09"),
      (troop_set_slot, "trp_knight_3_9", slot_troop_banner_scene_prop, "spr_banner_n10"),
      (troop_set_slot, "trp_knight_3_10", slot_troop_banner_scene_prop, "spr_banner_n11"),
      (troop_set_slot, "trp_knight_3_11", slot_troop_banner_scene_prop, "spr_banner_n12"),
      (troop_set_slot, "trp_knight_3_12", slot_troop_banner_scene_prop, "spr_banner_n13"),
      (troop_set_slot, "trp_knight_3_13", slot_troop_banner_scene_prop, "spr_banner_n14"),
      (troop_set_slot, "trp_knight_3_14", slot_troop_banner_scene_prop, "spr_banner_n15"),
      (troop_set_slot, "trp_knight_3_15", slot_troop_banner_scene_prop, "spr_banner_n16"),
      (troop_set_slot, "trp_knight_3_16", slot_troop_banner_scene_prop, "spr_banner_n17"),
      (troop_set_slot, "trp_knight_3_17", slot_troop_banner_scene_prop, "spr_banner_n18"),
      (troop_set_slot, "trp_knight_3_18", slot_troop_banner_scene_prop, "spr_banner_n19"),
      (troop_set_slot, "trp_knight_3_19", slot_troop_banner_scene_prop, "spr_banner_n20"),
      (troop_set_slot, "trp_knight_3_20", slot_troop_banner_scene_prop, "spr_banner_o21"),
      
      # Lithuania
      (troop_set_slot, "trp_kingdom_2_lord", slot_troop_banner_scene_prop, "spr_banner_p01"),
      (troop_set_slot, "trp_knight_2_1", slot_troop_banner_scene_prop, "spr_banner_p02"),
      (troop_set_slot, "trp_knight_2_2", slot_troop_banner_scene_prop, "spr_banner_p03"),
      (troop_set_slot, "trp_knight_2_3", slot_troop_banner_scene_prop, "spr_banner_p04"),
      (troop_set_slot, "trp_knight_2_4", slot_troop_banner_scene_prop, "spr_banner_p05"),
      (troop_set_slot, "trp_knight_2_5", slot_troop_banner_scene_prop, "spr_banner_p06"),
      (troop_set_slot, "trp_knight_2_6", slot_troop_banner_scene_prop, "spr_banner_p07"),
      (troop_set_slot, "trp_knight_2_7", slot_troop_banner_scene_prop, "spr_banner_p08"),
      (troop_set_slot, "trp_knight_2_8", slot_troop_banner_scene_prop, "spr_banner_p09"),
      (troop_set_slot, "trp_knight_2_9", slot_troop_banner_scene_prop, "spr_banner_p10"),
      (troop_set_slot, "trp_knight_2_10", slot_troop_banner_scene_prop, "spr_banner_p11"),
      (troop_set_slot, "trp_knight_2_11", slot_troop_banner_scene_prop, "spr_banner_i12"),
      (troop_set_slot, "trp_knight_2_12", slot_troop_banner_scene_prop, "spr_banner_i13"),
      (troop_set_slot, "trp_knight_2_13", slot_troop_banner_scene_prop, "spr_banner_i14"),
      (troop_set_slot, "trp_knight_2_14", slot_troop_banner_scene_prop, "spr_banner_i15"),
      (troop_set_slot, "trp_knight_2_15", slot_troop_banner_scene_prop, "spr_banner_i16"),
      
      # Teutons
      (troop_set_slot, "trp_kingdom_1_lord", slot_troop_banner_scene_prop, "spr_banner_q01"),
      (troop_set_slot, "trp_knight_1_1", slot_troop_banner_scene_prop, "spr_banner_q02"),
      (troop_set_slot, "trp_knight_1_2", slot_troop_banner_scene_prop, "spr_banner_q03"),
      (troop_set_slot, "trp_knight_1_3", slot_troop_banner_scene_prop, "spr_banner_q04"),
      (troop_set_slot, "trp_knight_1_4", slot_troop_banner_scene_prop, "spr_banner_q05"),
      (troop_set_slot, "trp_knight_1_5", slot_troop_banner_scene_prop, "spr_banner_q06"),
      (troop_set_slot, "trp_knight_1_6", slot_troop_banner_scene_prop, "spr_banner_q07"),
      (troop_set_slot, "trp_knight_1_7", slot_troop_banner_scene_prop, "spr_banner_q08"),
      (troop_set_slot, "trp_knight_1_8", slot_troop_banner_scene_prop, "spr_banner_q09"),
      (troop_set_slot, "trp_knight_1_9", slot_troop_banner_scene_prop, "spr_banner_q10"),
      (troop_set_slot, "trp_knight_1_10", slot_troop_banner_scene_prop, "spr_banner_q11"),
      (troop_set_slot, "trp_knight_1_11", slot_troop_banner_scene_prop, "spr_banner_q12"),
      (troop_set_slot, "trp_knight_1_12", slot_troop_banner_scene_prop, "spr_banner_q13"),
      (troop_set_slot, "trp_knight_1_13", slot_troop_banner_scene_prop, "spr_banner_q14"),
      (troop_set_slot, "trp_knight_1_14", slot_troop_banner_scene_prop, "spr_banner_q15"),
      (troop_set_slot, "trp_knight_1_15", slot_troop_banner_scene_prop, "spr_banner_q16"),
]),
####################################

####################################
("ee_give_centers_to_factions",
[      #Give centers to factions first, to ensure more equal distributions
      (call_script, "script_give_center_to_faction_aux", "p_town_5_1", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_town_5_2", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_town_5_3", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_town_5_4", "fac_kingdom_5"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_1_1", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_town_1_2", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_town_1_3", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_town_1_4", "fac_kingdom_1"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_2_1", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_town_2_2", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_town_2_3", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_town_2_4", "fac_kingdom_2"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_8_1", "fac_kingdom_8"),
      (call_script, "script_give_center_to_faction_aux", "p_town_8_2", "fac_kingdom_8"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_3_1", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_town_3_2", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_town_3_3", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_town_3_4", "fac_kingdom_3"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_4_1", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_town_4_2", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_town_4_3", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_town_4_4", "fac_kingdom_4"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_14_1", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_town_14_2", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_town_14_3", "fac_kingdom_14"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_11_1", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_town_11_2", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_town_11_3", "fac_kingdom_11"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_7_1", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_town_7_2", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_town_7_3", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_town_7_4", "fac_kingdom_7"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_6_1", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_town_6_2", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_town_6_3", "fac_kingdom_6"),
      #(call_script, "script_give_center_to_faction_aux", "p_town_6_4", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_town_6_5", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_town_6_6", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_town_6_4", "fac_kingdom_6"),
      
      
      (call_script, "script_give_center_to_faction_aux", "p_town_9_1", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_town_9_2", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_town_9_3", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_town_9_4", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_town_9_6", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_town_9_5", "fac_kingdom_9"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_10_1", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_town_10_2", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_town_10_3", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_town_10_4", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_town_10_5", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_town_10_6", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_town_10_7", "fac_kingdom_10"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_12_1", "fac_kingdom_12"),
      (call_script, "script_give_center_to_faction_aux", "p_town_12_2", "fac_kingdom_12"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_13_1", "fac_kingdom_13"),
      (call_script, "script_give_center_to_faction_aux", "p_town_13_2", "fac_kingdom_13"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_15_1", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_town_15_2", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_town_15_3", "fac_kingdom_15"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_16_1", "fac_kingdom_16"),
      (call_script, "script_give_center_to_faction_aux", "p_town_16_2", "fac_kingdom_16"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_17_1", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_town_17_2", "fac_kingdom_17"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_18_1", "fac_kingdom_18"),
      (call_script, "script_give_center_to_faction_aux", "p_town_18_2", "fac_kingdom_18"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_19_1", "fac_kingdom_19"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_20_1", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_town_20_2", "fac_kingdom_20"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_21_1", "fac_papacy"),
      (call_script, "script_give_center_to_faction_aux", "p_town_21_2", "fac_papacy"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_22_1", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_town_22_2", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_town_22_3", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_town_22_4", "fac_kingdom_22"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_23_1", "fac_kingdom_23"),
      (call_script, "script_give_center_to_faction_aux", "p_town_23_2", "fac_kingdom_23"),
      (call_script, "script_give_center_to_faction_aux", "p_town_23_4", "fac_kingdom_23"),
      (call_script, "script_give_center_to_faction_aux", "p_town_23_5", "fac_kingdom_23"),
      (call_script, "script_give_center_to_faction_aux", "p_town_23_6", "fac_kingdom_23"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_24_1", "fac_kingdom_24"),
      (call_script, "script_give_center_to_faction_aux", "p_town_24_2", "fac_kingdom_24"),
     # (call_script, "script_give_center_to_faction_aux", "p_town_24_3", "fac_kingdom_24"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_25_1", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_town_25_2", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_town_25_3", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_town_25_4", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_town_25_5", "fac_kingdom_25"),
       
      (call_script, "script_give_center_to_faction_aux", "p_town_26_1", "fac_kingdom_26"),
      (call_script, "script_give_center_to_faction_aux", "p_town_26_2", "fac_kingdom_26"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_27_1", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_town_27_2", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_town_27_3", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_town_27_4", "fac_kingdom_27"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_28_1", "fac_kingdom_28"),
      (call_script, "script_give_center_to_faction_aux", "p_town_28_2", "fac_kingdom_28"),
      
      
      (call_script, "script_give_center_to_faction_aux", "p_town_29_1", "fac_kingdom_29"),
      (call_script, "script_give_center_to_faction_aux", "p_town_29_2", "fac_kingdom_29"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_30_1", "fac_kingdom_30"),
      (call_script, "script_give_center_to_faction_aux", "p_town_30_2", "fac_kingdom_30"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_31_1", "fac_kingdom_31"),
      (call_script, "script_give_center_to_faction_aux", "p_town_31_2", "fac_kingdom_31"),
      (call_script, "script_give_center_to_faction_aux", "p_town_31_3", "fac_kingdom_31"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_32_1", "fac_kingdom_32"),
      (call_script, "script_give_center_to_faction_aux", "p_town_32_2", "fac_kingdom_32"),
      (call_script, "script_give_center_to_faction_aux", "p_town_32_3", "fac_kingdom_32"),

      (call_script, "script_give_center_to_faction_aux", "p_town_37_1", "fac_kingdom_37"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_38_1", "fac_kingdom_38"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_39_1", "fac_kingdom_39"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_40_1", "fac_kingdom_40"),
      (call_script, "script_give_center_to_faction_aux", "p_town_40_2", "fac_kingdom_40"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_41_1", "fac_kingdom_41"),
      (call_script, "script_give_center_to_faction_aux", "p_town_41_2", "fac_kingdom_41"),
      
      (call_script, "script_give_center_to_faction_aux", "p_town_42_1", "fac_kingdom_42"),
      (call_script, "script_give_center_to_faction_aux", "p_town_42_2", "fac_kingdom_42"),
      
      # Poland
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_1", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_2", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_3", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_4", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_5", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_6", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_7", "fac_kingdom_5"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_5_8", "fac_kingdom_5"),
      
      
      # Crusaders
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_1", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_2", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_3", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_4", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_5", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_6", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_7", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_8", "fac_kingdom_1"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_1_9", "fac_kingdom_1"),
      # Lithuania
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_1", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_2", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_3", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_4", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_5", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_6", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_7", "fac_kingdom_2"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_2_8", "fac_kingdom_2"),
      
      # Russians
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_1", "fac_kingdom_3"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_8_1", "fac_kingdom_8"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_8_2", "fac_kingdom_8"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_8_3", "fac_kingdom_8"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_8_4", "fac_kingdom_8"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_2", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_3", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_4", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_5", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_6", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_7", "fac_kingdom_3"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_3_8", "fac_kingdom_3"),
      
      # Hungary
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_1", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_2", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_3", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_4", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_5", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_6", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_7", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_8", "fac_kingdom_7"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_7_9", "fac_kingdom_7"),
      
      # HRE
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_1", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_2", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_3", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_4", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_5", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_6", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_7", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_8", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_9", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_10", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_11", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_12", "fac_kingdom_6"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_6_13", "fac_kingdom_6"),
      #(call_script, "script_give_center_to_faction_aux", "p_village_7_8", "fac_kingdom_6"),
      
      # Denmark
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_1", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_2", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_3", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_4", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_5", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_6", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_7", "fac_kingdom_4"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_4_8", "fac_kingdom_4"),
      
      # Norway
      (call_script, "script_give_center_to_faction_aux", "p_castle_11_1", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_11_2", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_11_3", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_11_4", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_11_5", "fac_kingdom_11"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_11_6", "fac_kingdom_11"),
      
      # England
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_1", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_2", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_3", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_4", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_5", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_6", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_7", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_8", "fac_kingdom_9"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_9_9", "fac_kingdom_9"),
      
      # France
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_1", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_2", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_3", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_4", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_5", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_6", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_7", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_8", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_9", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_10", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_11", "fac_kingdom_10"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_10_12", "fac_kingdom_10"),
      
      
      
      # Scotland
      (call_script, "script_give_center_to_faction_aux", "p_castle_12_1", "fac_kingdom_12"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_12_2", "fac_kingdom_12"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_12_3", "fac_kingdom_12"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_12_4", "fac_kingdom_12"),
      
      # Ireland
      (call_script, "script_give_center_to_faction_aux", "p_castle_13_1", "fac_kingdom_13"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_13_2", "fac_kingdom_13"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_13_3", "fac_kingdom_13"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_13_4", "fac_kingdom_13"),
      
      
      # Sweden
      (call_script, "script_give_center_to_faction_aux", "p_castle_14_1", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_14_2", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_14_3", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_14_4", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_14_5", "fac_kingdom_14"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_14_6", "fac_kingdom_14"),
      
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_15_1", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_15_2", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_15_3", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_15_4", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_15_5", "fac_kingdom_15"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_15_6", "fac_kingdom_15"),
      
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_16_1", "fac_kingdom_16"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_16_2", "fac_kingdom_16"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_16_3", "fac_kingdom_16"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_16_4", "fac_kingdom_16"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_1", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_2", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_3", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_4", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_5", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_6", "fac_kingdom_17"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_17_7", "fac_kingdom_17"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_18_1", "fac_kingdom_18"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_18_2", "fac_kingdom_18"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_18_3", "fac_kingdom_18"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_18_4", "fac_kingdom_18"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_18_5", "fac_kingdom_18"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_18_6", "fac_kingdom_18"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_19_1", "fac_kingdom_19"),      
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_1", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_2", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_3", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_4", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_5", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_6", "fac_kingdom_20"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_20_7", "fac_kingdom_20"),
      
      #(call_script, "script_give_center_to_faction_aux", "p_castle_21_1", "fac_papacy"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_22_1", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_22_2", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_22_3", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_22_4", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_22_5", "fac_kingdom_22"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_22_6", "fac_kingdom_22"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_23_1", "fac_kingdom_23"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_23_2", "fac_kingdom_23"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_23_3", "fac_kingdom_23"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_24_1", "fac_kingdom_24"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_24_2", "fac_kingdom_24"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_24_3", "fac_kingdom_24"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_24_4", "fac_kingdom_24"),
      #(call_script, "script_give_center_to_faction_aux", "p_castle_24_5", "fac_kingdom_24"),
     #(call_script, "script_give_center_to_faction_aux", "p_castle_24_6", "fac_kingdom_24"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_1", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_2", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_3", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_4", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_5", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_6", "fac_kingdom_25"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_25_7", "fac_kingdom_25"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_26_1", "fac_kingdom_26"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_26_2", "fac_kingdom_26"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_26_3", "fac_kingdom_26"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_26_4", "fac_kingdom_26"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_27_1", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_27_2", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_27_3", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_27_4", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_27_5", "fac_kingdom_27"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_27_6", "fac_kingdom_27"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_28_1", "fac_kingdom_28"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_28_2", "fac_kingdom_28"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_28_3", "fac_kingdom_28"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_28_4", "fac_kingdom_28"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_28_5", "fac_kingdom_28"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_28_6", "fac_kingdom_28"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_29_1", "fac_kingdom_29"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_29_2", "fac_kingdom_29"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_30_1", "fac_kingdom_30"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_30_2", "fac_kingdom_30"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_30_3", "fac_kingdom_30"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_31_1", "fac_kingdom_31"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_31_2", "fac_kingdom_31"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_32_1", "fac_kingdom_32"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_32_2", "fac_kingdom_32"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_33_1", "fac_kingdom_33"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_33_2", "fac_kingdom_33"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_33_3", "fac_kingdom_33"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_34_1", "fac_kingdom_34"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_34_2", "fac_kingdom_34"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_34_3", "fac_kingdom_34"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_35_1", "fac_kingdom_35"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_35_2", "fac_kingdom_35"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_35_3", "fac_kingdom_35"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_36_1", "fac_kingdom_36"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_36_2", "fac_kingdom_36"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_36_3", "fac_kingdom_36"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_37_1", "fac_kingdom_37"),
      
      (call_script, "script_give_center_to_faction_aux", "p_castle_38_1", "fac_kingdom_38"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_38_2", "fac_kingdom_38"),
     
       (call_script, "script_give_center_to_faction_aux", "p_castle_39_1", "fac_kingdom_39"),
      (call_script, "script_give_center_to_faction_aux", "p_castle_39_2", "fac_kingdom_39"),
      
      # (call_script, "script_give_center_to_faction_aux", "p_castle_34_1", "fac_kingdom_34"),
      # (call_script, "script_give_center_to_faction_aux", "p_castle_34_2", "fac_kingdom_34"),
      
      (call_script, "script_give_center_to_lord", "p_castle_player", "trp_temp_lord", 0), #tom
      #(call_script, "script_give_center_to_lord", "p_crapy_castle", "trp_temp_lord", 0), #tom
      (call_script, "script_give_center_to_lord", "p_village_player", "trp_temp_lord", 0), #tom
      # (party_set_slot, "p_village_player", slot_village_bound_center, "p_castle_player"),####### NEW v3.0-KOMKE commented out
      ##KOMKE above disabled village (crap) was bounded to player castle even if player builds castle from another village causing BUG 
]),
####################################

#################################### NEW v3.5
  #script_dplmc_player_can_give_troops_to_troop  (Warning, clobbers {s11}!)
  #
  # INPUT: arg1 = troop_id
  # OUTPUT: reg0 = 1 or more is yes, 0 or less is no
  #
  # This script does not take into account things like whether the troop
  # is a prisoner of a party, so it can be used for checking whether troops
  # can be added to a garrison.
  #
  # The general logic is that you can give troops to a member of your
  # own faction if any of the following are true:
  #   - You are the faction leader or marshall
  #   - You are the spouse of the faction leader, and the faction
  #     leader is not on bad terms with you
  #   - The troop is an affiliated family member
  #   - The troop is your spouse, and is either pliable or not on bad terms
  #   - The troop is a former companion with whom you are on good terms
  #   - The troop is related to you by marriage and you are on good terms
  #
  # For allied factions, the conditions are similar to the above.
  # However, being the marshall or leader of your own faction does not
  # guarantee cooperation from lords who dislike you.
  #
  # For non-allied other factions, the check for faction leader or
  # marshall are not relevant, and the faction must not be at war
  # with the player's faction.
  ("dplmc_player_can_give_troops_to_troop",
  [
    (store_script_param, ":troop_id", 1), #Party_id
    (assign, ":can_give_troops", 0),
    (assign, ":save_reg1", reg1),

    (try_begin),
        (this_or_next|eq, ":troop_id", "trp_kingdom_heroes_including_player_begin"),
        (eq, ":troop_id", "trp_player"),
        (assign, ":can_give_troops", 1),
    (else_try),
        (lt, ":troop_id", 1),
        (assign, ":can_give_troops", 0),
    (else_try),
        (store_faction_of_troop, ":troop_faction", ":troop_id"),

        (call_script, "script_troop_get_player_relation", ":troop_id"),
        (assign, ":troop_relation", reg0),
        (troop_get_slot, ":troop_reputation", ":troop_id", slot_lord_reputation_type),

        (try_begin),
            #Troop is member of player supporters faction
            (eq, ":troop_faction", "fac_player_supporters_faction"),
            ##Always yes in Native, but if centralization is negative allow non-compliance
            (gt, ":troop_relation", reg0),
            (assign, ":can_give_troops", 1),
        (else_try),
            #Troop is a member of the same faction as the player
            (eq, ":troop_faction", "$players_kingdom"),
            (faction_get_slot, ":troop_faction_leader", ":troop_faction", slot_faction_leader),
            (try_begin),
                #Leader or marshall
                (this_or_next|eq, ":troop_faction_leader", "trp_player"),
                    (faction_slot_eq, ":troop_faction", slot_faction_marshall, "trp_player"),
                (gt, ":troop_relation", reg0),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Spouse of leader
                (gt, ":troop_faction_leader", 1),
                (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),
                (this_or_next|troop_slot_eq, ":troop_faction_leader", slot_troop_spouse, "trp_player"),
                    (troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_faction_leader"),
                (call_script, "script_troop_get_player_relation", ":troop_faction_leader"),
                (ge, reg0, 0),
                (gt, ":troop_relation", reg0),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Spouse of troop
                (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),
                (this_or_next|troop_slot_eq, ":troop_id", slot_troop_spouse, "trp_player"),
                    (troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_id"),
                (this_or_next|ge, ":troop_relation", 0),
                (this_or_next|eq, ":troop_reputation", lrep_conventional),
                (this_or_next|eq, ":troop_reputation", lrep_moralist),
                    (eq, ":troop_reputation", lrep_otherworldly),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Affiliated family member
                (call_script, "script_ee_is_affiliated_family_member", ":troop_id"),
                (ge, reg0, 1),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Close companion previously under arms
                (this_or_next|is_between, ":troop_id", companions_begin, companions_end),
                    (is_between, ":troop_id", pretenders_begin, pretenders_end),
                # (neg|troop_slot_eq, ":troop_id", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
                (ge, ":troop_relation", 20),
                (assign, ":can_give_troops", 1),
            (else_try),
                #In-law (or hypothetically a blood relative) who is close with the player
                # (call_script, "script_dplmc_troop_get_family_relation_to_troop", ":troop_id", "trp_player"),
                # (ge, reg0, 2),#<-- deliberately set the cutoff to 2, not 1
                (ge, ":troop_relation", 20),
                # (this_or_next|ge, reg0, 10),
                    # (ge, ":troop_relation", 20),
                (assign, ":can_give_troops", 1),
            (try_end),
        (else_try),
            #Troop is member of a faction allied with the player's
            (call_script, "script_dplmc_get_faction_truce_length_with_faction", "$players_kingdom", ":troop_faction"),
            (gt, reg0, 1),
            (faction_get_slot, ":player_faction_leader", "$players_kingdom", slot_faction_leader),
            (try_begin),
                #Leader or marshall
                (this_or_next|eq, ":player_faction_leader", "trp_player"),
                    (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
                (ge, ":troop_relation", 0),#only for allied factions, not for the player's own faction
                (assign, ":can_give_troops", 1),
            (else_try),
                #Spouse of leader
                (gt, ":player_faction_leader", 1),
                (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),
                (this_or_next|troop_slot_eq, ":player_faction_leader", slot_troop_spouse, "trp_player"),
                    (troop_slot_eq, "trp_player", slot_troop_spouse, ":player_faction_leader"),
                (ge, ":troop_relation", 0),#only for allied factions, not for the player's own faction
                (call_script, "script_troop_get_player_relation", ":player_faction_leader"),
                (ge, reg0, 0),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Spouse of troop
                (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),
                (this_or_next|troop_slot_eq, ":troop_id", slot_troop_spouse, "trp_player"),
                    (troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_id"),
                (this_or_next|ge, ":troop_relation", 0),
                (this_or_next|eq, ":troop_reputation", lrep_conventional),
                (this_or_next|eq, ":troop_reputation", lrep_moralist),
                    (eq, ":troop_reputation", lrep_otherworldly),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Affiliated family member
                (call_script, "script_ee_is_affiliated_family_member", ":troop_id"),
                (ge, reg0, 1),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Close companion previously under arms
                (this_or_next|is_between, ":troop_id", companions_begin, companions_end),
                    (is_between, ":troop_id", pretenders_begin, pretenders_end),
                # (neg|troop_slot_eq, ":troop_id", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
                (ge, ":troop_relation", 20),
                (assign, ":can_give_troops", 1),
            (else_try),
                #In-law (or hypothetically a blood relative) who is close with the player
                # (call_script, "script_dplmc_troop_get_family_relation_to_troop", ":troop_id", "trp_player"),
                # (ge, reg0, 2),#<-- deliberately set the cutoff to 2, not 1
                (ge, ":troop_relation", 20),
                # (this_or_next|ge, reg0, 10),
                    # (ge, ":troop_relation", 20),
                (assign, ":can_give_troops", 1),
            (try_end),
        (else_try),
            #Troop is a member of a faction that isn't hostile to the player's
            (store_relation, reg0, ":troop_faction", "fac_player_faction"),
            (ge, reg0, 0),
            (store_relation, reg0, ":troop_faction", "$players_kingdom"),
            (ge, reg0, 0),
            (try_begin),
                #Spouse of troop
                (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),
                (this_or_next|troop_slot_eq, ":troop_id", slot_troop_spouse, "trp_player"),
                    (troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_id"),
                (this_or_next|ge, ":troop_relation", 0),
                (this_or_next|eq, ":troop_reputation", lrep_conventional),
                (this_or_next|eq, ":troop_reputation", lrep_moralist),
                    (eq, ":troop_reputation", lrep_otherworldly),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Affiliated family member
                (call_script, "script_ee_is_affiliated_family_member", ":troop_id"),
                (ge, reg0, 1),
                (assign, ":can_give_troops", 1),
            (else_try),
                #Close companion previously under arms
                (this_or_next|is_between, ":troop_id", companions_begin, companions_end),
                    (is_between, ":troop_id", pretenders_begin, pretenders_end),
                # (neg|troop_slot_eq, ":troop_id", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
                (ge, ":troop_relation", 20),
                (assign, ":can_give_troops", 1),
            (else_try),
                #In-law (or hypothetically a blood relative) who is close with the player
                # (call_script, "script_dplmc_troop_get_family_relation_to_troop", ":troop_id", "trp_player"),
                # (ge, reg0, 2),#<-- deliberately set the cutoff to 2, not 1
                (ge, ":troop_relation", 20),
                # (this_or_next|ge, reg0, 10),
                    # (ge, ":troop_relation", 20),
                (assign, ":can_give_troops", 1),
            (try_end),
        (try_end),
    (try_end),

    (assign, reg1, ":save_reg1"),
    (assign, reg0, ":can_give_troops"),
  ]),
####################################
  ("ee_is_affiliated_family_member",
  [
      (store_script_param, ":troop_id", 1),

      (assign, ":is_affiliated_family_member", 0),
      ##nested diplomacy start+
      (assign, ":save_reg1", reg1),#<- Save reg1 which gets overwritten by script_dplmc_troop_get_family_relation_to_troop
      ##nested diplomacy end+
      (try_begin),
        (this_or_next|troop_slot_eq, ":troop_id", slot_troop_mother, trp_player),
        (troop_slot_eq, "trp_player", slot_troop_mother, ":troop_id"),
          (assign, ":is_affiliated_family_member", 1),
      (else_try),
        (this_or_next|troop_slot_eq, ":troop_id", slot_troop_father, trp_player),
        (troop_slot_eq, "trp_player", slot_troop_father, ":troop_id"),
          (assign, ":is_affiliated_family_member", 1),
      (else_try),
        (this_or_next|troop_slot_eq, ":troop_id", slot_troop_guardian, trp_player),
        (troop_slot_eq, "trp_player", slot_troop_guardian, ":troop_id"),
          (assign, ":is_affiliated_family_member", 1),
      (else_try),
        (this_or_next|troop_slot_eq, ":troop_id", slot_troop_spouse, trp_player),
        (troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_id"),
          (assign, ":is_affiliated_family_member", 1),
      (else_try),
        (assign, ":is_affiliated_family_member", 0),
      (try_end),
      ##nested diplomacy start+
      (assign, reg1, ":save_reg1"),#revert register
      ##nested diplomacy end+
      (assign, reg0, ":is_affiliated_family_member"),
  ]),
####################################    
# script_dplmc_get_faction_truce_length_with_faction
    # INPUT
    #   arg1:  faction_1
    #   arg2:  faction_2
    # OUTPUT
    #   reg0:  The length in days of faction_1's truce with faction_2, if any.
    #          If no truce exists, the appropriate value to return is zero.
    ("dplmc_get_faction_truce_length_with_faction",
       [
        (store_script_param, ":faction_1", 1),
        (store_script_param, ":faction_2", 2),

        (assign, ":truce_length", 0),

        (try_begin),
            (is_between, ":faction_1", kingdoms_begin, kingdoms_end),
            (is_between, ":faction_2", kingdoms_begin, kingdoms_end),
            (neq, ":faction_1", ":faction_2"),
            (store_add, ":truce_slot", ":faction_2", slot_faction_truce_days_with_factions_begin),
            (val_sub, ":truce_slot", kingdoms_begin),
            (faction_get_slot, ":truce_length", ":faction_1", ":truce_slot"),
        (try_end),
        (assign, reg0, ":truce_length"),
       ]),
####################################

####################################
    ("ee_activate_player_faction",
      [
        (store_script_param, ":liege", 1),
        (store_script_param, ":original_faction", 2),
        
        #This moved to top, so that mnu_notification does not occur twice
        (try_begin),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
          (neg|is_between, ":liege", pretenders_begin, pretenders_end),
          (call_script, "script_add_notification_menu", "mnu_notification_player_faction_active", 0, 0),
        (try_end),
        
        (assign, "$g_player_cur_role", role_king),  ####### NEW v3.0 - player role
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, ":liege"),
        # rafi - religion
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_religion, religion_catholic),
        # end rafi
####### NEW v3.1-KOMKE START- player culture is assigned to prevent kingdom parties spawning before the kingdom has a culture and thus having no slot reinforcements causing bug
        # (assign, "$g_player_culture", "fac_culture_western"),
        # (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, "fac_culture_western"),
        #### NEW v3.5 - player takes the original faction's culture, language and religion now
        (faction_get_slot, ":faction_culture", ":original_faction", slot_faction_culture),
        (faction_get_slot, ":faction_religion", ":original_faction", slot_faction_religion),
        (faction_get_slot, ":faction_language", ":original_faction", slot_faction_language),
        
        (assign, "$g_player_culture", ":faction_culture"),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_culture, ":faction_culture"),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_religion, ":faction_religion"),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_language, ":faction_language"),
        
        (str_store_faction_name, s2, ":original_faction"),
        # (display_message, "@Faction is {s2}"),
        # #####(display_debug_message, "@Line 91364"),
        # #####(display_debug_message, "@Line 91365"),
        # #####(display_debug_message, "@Line 91366"),
        ################################
        (call_script, "script_initialize_faction_troop_types_player"),        

####### NEW v3.1-KOMKE END-
        (assign, ":original_kingdom", "$players_kingdom"),
        
        (try_begin),
          (is_between, ":original_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
          (call_script, "script_player_leave_faction", 0), #Ends quests, transfers control of centers
        (try_end),
        
        #Name faction
        (try_begin),
          (is_between, ":liege", active_npcs_begin, active_npcs_end),
          (troop_slot_eq, ":liege", slot_troop_is_alive, 1),  ## he's alive/active
          (store_faction_of_troop, ":liege_faction"),
          (is_between, ":liege_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (faction_get_slot, ":adjective_string", ":liege_faction", slot_faction_adjective),
          (str_store_string, s1, ":adjective_string"),
          (faction_set_name, "fac_player_supporters_faction", "@{s1} Rebels"),
        (else_try),
          (str_store_troop_name, s2, ":liege"),
          (str_store_string, s1, "str_s2s_rebellion"),
        (try_end),
        #(faction_set_color, "fac_player_supporters_faction", 0xFF0000), #rafi remove this
        ############### NEW 3.7
        (assign, "$players_kingdom", "fac_player_supporters_faction"),
        (troop_set_faction, "trp_player", "fac_player_supporters_faction"),
		###############
        (assign, "$g_player_banner_granted", 1),
        
        #Any oaths renounced?
        (try_begin),
          (is_between, ":original_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
          
          (faction_get_slot, ":old_leader", ":original_kingdom", slot_faction_leader),
          (call_script, "script_add_log_entry", logent_renounced_allegiance, "trp_player",  -1, ":old_leader", "$players_kingdom"),
          
          #Initializing renounce war variables
          (assign, "$players_oath_renounced_against_kingdom", ":original_kingdom"),
          (assign, "$players_oath_renounced_given_center", 0),
          (store_current_hours, "$players_oath_renounced_begin_time"),
          
          (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
            (store_faction_of_party, ":cur_center_faction", ":cur_center"),
            (party_set_slot, ":cur_center", slot_center_faction_when_oath_renounced, ":cur_center_faction"),
          (try_end),
          (party_set_slot, "$g_center_to_give_to_player", slot_center_faction_when_oath_renounced, "$players_oath_renounced_against_kingdom"),
          
          (store_relation, ":relation", ":original_kingdom", "fac_player_supporters_faction"),
          (ge, ":relation", 0),
          (call_script, "script_diplomacy_start_war_between_kingdoms", ":original_kingdom", "fac_player_supporters_faction", 1),
        (try_end),
        
        (try_begin),
          (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
          (is_between, ":spouse", kingdom_ladies_begin, kingdom_ladies_end),
          
          (try_begin),
            (ge, "$cheat_mode", 1),
            (str_store_troop_name, s4, ":spouse"),
            (display_message, "@{!}DEBUG - {s4} faction changed by marriage, case 3"),
          (try_end),
          
          (troop_set_faction, ":spouse", "fac_player_supporters_faction"),
        (try_end),
        
        #(call_script, "script_store_average_center_value_per_faction"),
        (call_script, "script_update_all_notes"),
        # (assign, "$g_recalculate_ais", 1),
                             #####(display_debug_message, "@Line 91327"),
        # (call_script, "script_recalculate_ais_for_faction", "fac_player_supporters_faction"), ###### NEW v3.8
        # (call_script, "script_raf_set_ai_recalculation_flags", "fac_player_supporters_faction"),
        
    ]),
####################################
  ("update_wpn_slot_itp", [
      (store_script_param, ":slot", 1),
      (store_script_param, ":value", 2),
      (troop_get_slot, ":item_type", "trp_temp_array_c", ":value"),
      (troop_get_slot, ":slot_value", "$temp", ":slot"),
      (try_begin), #if new value supports metamods, inherit
        # (call_script, "script_cf_item_type_has_advanced_autoloot", ":item_type"),
        (this_or_next|is_between, ":item_type", itp_type_one_handed_wpn, itp_type_shield),
        (eq, ":item_type", itp_type_thrown), #throwing axe vs jaridss vs rocks
        (store_mod, ":original_value", ":slot_value", meta_itp_mask),
        (val_sub, ":slot_value", ":original_value"), #remove original itp
        (val_add, ":slot_value", ":item_type"), #add new
      (else_try), #otherwise replace value
        (assign, ":slot_value", ":item_type"),
      (try_end),
      (troop_set_slot, "$temp", ":slot", ":slot_value"),
      (assign, "$temp_2", ":slot"),
      #restart presentation instead of updating overlay value (because we can't)
      (start_presentation, "prsnt_dplmc_autoloot_upgrade_management"),
  ]),
####################################
("dplmc_copy_upgrade_to_all_heroes",
  [
    (store_script_param_1, ":troop"),
    (store_script_param_2, ":type"),

    (try_begin),
      (eq, ":type", wpn_setting_1),
      (troop_get_slot,":upg_wpn0", ":troop", slot_upgrade_wpn_0),
      (troop_get_slot,":upg_wpn1", ":troop", slot_upgrade_wpn_1),
      (troop_get_slot,":upg_wpn2", ":troop", slot_upgrade_wpn_2),
      (troop_get_slot,":upg_wpn3", ":troop", slot_upgrade_wpn_3),
      (try_for_range, ":hero", companions_begin, companions_end),
        (troop_set_slot,":hero", slot_upgrade_wpn_0,":upg_wpn0"),
        (troop_set_slot,":hero", slot_upgrade_wpn_1,":upg_wpn1"),
        (troop_set_slot,":hero", slot_upgrade_wpn_2,":upg_wpn2"),
        (troop_set_slot,":hero", slot_upgrade_wpn_3,":upg_wpn3"),
      (try_end),
    (else_try),
      (eq, ":type", armor_setting),
      (troop_get_slot,":upg_armor", ":troop",slot_upgrade_armor),
      (try_for_range, ":hero", companions_begin, companions_end),
        (troop_set_slot,":hero",slot_upgrade_armor,":upg_armor"),
      (try_end),
    (else_try),
      (eq, ":type", horse_setting),
      (troop_get_slot,":upg_horse", ":troop",slot_upgrade_horse),
      (try_for_range, ":hero", companions_begin, companions_end),
        (troop_set_slot,":hero",slot_upgrade_horse,":upg_horse"),
      (try_end),
    (try_end),
  ]),
#######################################
  ("dplmc_get_current_item_for_autoloot",
  [
    (store_script_param_1, ":slot_no"),

    (assign, ":dest_slot", ":slot_no"),
    (troop_get_inventory_slot, ":item", "$temp", ":dest_slot"),
    (try_begin),
      (ge, ":item", 0),
      (str_store_item_name, s10, ":item"),
    (else_try),
      (str_store_string, s10, "str_dplmc_none"),
    (try_end),
  ]),
#######################################
  ("dplmc_get_troop_max_hp",
   [
    (store_script_param_1, ":troop"),

    (store_skill_level, ":skill", skl_ironflesh, ":troop"),
    (store_attribute_level, ":attrib", ":troop", ca_strength),
    (val_mul, ":skill", 2),
    (val_add, ":skill", ":attrib"),
    (val_add, ":skill", 35),
    (assign, reg0, ":skill"),
  ]),
#######################################
    ("create_wpn_slot_overlay", [
      (store_script_param, ":slot", 1),
      (store_script_param, ":pos", 2),
      (init_position, pos1),
      (position_set_x, pos1, 270),
      (position_set_y, pos1, ":pos"),
      (create_combo_button_overlay, ":obj"),
      (overlay_set_position, ":obj", pos1),
      (assign, ":sub_overlay_id", 0),
      (store_add, ":upgrade_slot", ":slot", slot_upgrade_wpn_0),

      (call_script, "script_dplmc_get_current_item_for_autoloot", ":slot"), #goes to "keep current", s10
      (try_for_range_backwards, ":item_type", 0, itp_type_animal),
        (this_or_next|is_between, ":item_type", itp_type_one_handed_wpn, itp_type_goods),
        (this_or_next|is_between, ":item_type", itp_type_pistol, itp_type_animal),
        (eq, ":item_type", 0),
        (store_add, ":out_string", "str_dplmc_hero_wpn_slot_none", ":item_type"),
        (overlay_add_item, ":obj", ":out_string"),
        (try_begin), #find base type
          (troop_get_slot, ":cur_value", "$temp", ":upgrade_slot"),
          (val_mod, ":cur_value", meta_itp_mask),
          (eq, ":cur_value", ":item_type"),
          (overlay_set_val, ":obj", ":sub_overlay_id"),
        (try_end),
        (val_add, ":sub_overlay_id", 1),
      (try_end),

      #store id in slot
      (troop_set_slot, "trp_stack_selection_ids", ":slot", ":obj"),
      # # only works for original button, not drop-down lists
      # (overlay_set_additional_render_height, ":obj", 99),

      (assign, reg1, ":obj"), #return overlay id
  ]),
####################################


  # script_dplmc_calculate_troop_score_for_center_aux
  #  Similar to script_calculate_troop_score_for_center
  #
  # slot_troop_temp_slot must already be loaded with center points;
  # dplmc_slot_troop_temp_slot must already be loaded with distance.
  #
  # Input: arg1 = evaluator
  #        arg2 = troop_no
  #        arg3 = center_no
  # Output: reg0 = score
  #         reg1 = explanation string
  ("dplmc_calculate_troop_score_for_center_aux",
   [(store_script_param, ":troop_1", 1),
    (store_script_param, ":troop_2", 2),
	 (store_script_param, ":center_no", 3),

	 (assign, ":explanation", "str_political_explanation_most_deserving_in_faction"),
	 (assign, ":explanation_priority", -1),

   (try_begin),
      (lt, ":troop_1", 0),
      (assign, ":relation", 0),
      (assign, ":reputation", lrep_none),
   (else_try),
      (eq, ":troop_1", ":troop_2"),
      (assign, ":relation", 50),
	   (troop_get_slot, ":reputation", ":troop_1", slot_lord_reputation_type),
   (else_try),
      (call_script, "script_troop_get_relation_with_troop", ":troop_1", ":troop_2"),
      (assign, ":relation", reg0),
      (troop_get_slot, ":reputation", ":troop_1", slot_lord_reputation_type),
   (try_end),
   (val_clamp, ":relation", -100, 101),

   (troop_get_slot, reg0, ":troop_2", slot_troop_renown),
   (val_max, reg0, 0),
   (store_add, ":score", 500, reg0),
	(troop_get_slot, ":num_center_points", ":troop_2", slot_troop_temp_slot),
	(val_max, ":num_center_points", 0),
	(val_add, ":num_center_points", 1),

	#Subtract distance from closest other fief owned, except when
	#considering the lord's original holdings.
	(try_begin),
	  (troop_slot_ge, ":troop_2", slot_troop_temp_slot, 1),
	  (neg|troop_slot_eq, ":troop_2", slot_troop_home, ":center_no"),
	  (neg|party_slot_eq, ":center_no", dplmc_slot_center_original_lord, ":troop_2"),

	  (troop_get_slot, reg0, ":troop_2", slot_troop_temp_slot),
	  (gt, reg0, 1),
	  (val_min, reg0, 250),#upper cap on distance effect (bear in mind that this is subtracted from 500 + troop renown)
	  (val_sub, ":score", reg0),
	(try_end),

   #(store_random_in_range, ":random", 50, 100),
   #(val_mul, ":score", ":random"),
	(val_mul, ":score", 75),
   (val_div, ":score", ":num_center_points"),

	(assign, ":fiefless_bonus_used", 0),
	(try_begin),
	   #Bonus for lords with no other fiefs when a village is being considered.
      (lt, ":num_center_points", 2),
	  (party_slot_eq, ":center_no", slot_party_type, spt_village),
      (neq, ":reputation", lrep_debauched),
      (neq, ":reputation", lrep_selfrighteous),
      (neq, ":reputation", lrep_quarrelsome),
		(val_mul, ":score", 2),
		(try_begin),
		  (lt, ":explanation_priority", 100),
		  (assign, ":explanation_priority", 100),
		  (assign, ":explanation", "str_political_explanation_lord_lacks_center"),
		(try_end),
	 (assign, ":fiefless_bonus_used", 1),#because it has already been applied
	(try_end),

	(assign, ":troop_2_slot_alias", ":troop_2"),
	(try_begin),
		(eq, ":troop_2", "trp_player"),
		(assign, ":troop_2_slot_alias", "trp_kingdom_heroes_including_player_begin"),
	(try_end),

   (try_begin),
	#Bonus for conquerer
		(neq, ":reputation",  lrep_debauched),
		(this_or_next|neq, ":reputation", lrep_selfrighteous),
		   (eq, ":troop_1", ":troop_2"),
		(neq, ":reputation", lrep_cunning),
	  (neg|party_slot_eq, ":center_no", slot_party_type, spt_village),
      (party_slot_eq, ":center_no", slot_center_last_taken_by_troop, ":troop_2_slot_alias"),
	  (try_begin),
		 (lt, ":num_center_points", 2),
		 (eq, ":fiefless_bonus_used", 0),
		 (assign, reg1, 50),#50% increase
	  (else_try),
	     (this_or_next|troop_slot_eq, ":troop_2", slot_troop_home, ":center_no"),
		 (this_or_next|party_slot_eq, ":center_no", dplmc_slot_center_original_lord, ":troop_2_slot_alias"),
		 (this_or_next|party_slot_eq, ":center_no", dplmc_slot_center_ex_lord, ":troop_2_slot_alias"),
			(eq, ":reputation", lrep_martial),
		 (assign, reg1, 50),#50% increase
	  (else_try),
		 (assign, reg1, 25),#25% increase
	  (try_end),
	  (store_add, reg0, 100, reg1),
	  (val_mul, ":score", reg0),
	  (val_div, ":score", 100),
		(try_begin),
		  (ge, reg1, ":explanation_priority"),
		  (assign, ":explanation_priority", reg1),
		  (assign, ":explanation", "str_political_explanation_lord_took_center"),
 		(try_end),
	(else_try),
	#Bonus for original owner
		(gt, ":troop_2", 0),
		(party_slot_eq, ":center_no", dplmc_slot_center_original_lord, ":troop_2_slot_alias"),
		(try_begin),
			(lt, ":num_center_points", 2),
			(eq, ":fiefless_bonus_used", 0),
			(assign, reg1, 50),#50% increase
		(else_try),
			(this_or_next|eq, ":troop_2", ":troop_1"),
			(this_or_next|troop_slot_eq, ":troop_2", slot_troop_home, ":center_no"),
				(party_slot_eq, ":center_no", dplmc_slot_center_ex_lord, ":troop_2_slot_alias"),
			(assign, reg1, 50),#50% increase
		(else_try),
			(assign, reg1, 25),#25% increase
		(try_end),
		(store_add, reg0, 100, reg1),
		(val_mul, ":score", reg0),
		(val_div, ":score", 100),
		(try_begin),
		  (ge, reg1, ":explanation_priority"),
		  (assign, ":explanation_priority", reg1),
        (assign, ":explanation", "str_dplmc_political_explanation_original_lord"),
 		(try_end),
	(else_try),
	#Bonus for previous owner, lord
		(gt, ":troop_2", 0),
		(party_slot_eq, ":center_no", dplmc_slot_center_ex_lord, ":troop_2_slot_alias"),
		(try_begin),
			(lt, ":num_center_points", 2),
			(eq, ":fiefless_bonus_used", 0),
			(assign, reg1, 50),#50% increase
		(else_try),
		(troop_slot_eq, ":troop_2", slot_troop_home, ":center_no"),
			(assign, reg1, 50),
		(else_try),
			(assign, reg1, 25),#25% increase
		(try_end),
		(store_add, reg0, 100, reg1),
		(val_mul, ":score", reg0),
		(val_div, ":score", 100),
		(try_begin),
		  (ge, reg1, ":explanation_priority"),
		  (assign, ":explanation_priority", reg1),
        (assign, ":explanation", "str_dplmc_political_explanation_original_lord"),
 		(try_end),
	(else_try),
	#Bonus for lord claiming the center as home
		(troop_slot_eq, ":troop_2", slot_troop_home, ":center_no"),
		(val_mul, ":score", 5),
		(val_div, ":score", 4),
		(try_begin),
		  (ge, 25, ":explanation_priority"),
		  (assign, ":explanation_priority", 25),
        (assign, ":explanation", "str_dplmc_political_explanation_original_lord"),
 		(try_end),
	(else_try),
	#Aesthetic penalty (doesn't apply when there was a bonus)
	#To try to make the late game less mixed, have a preference towards
	#assigning lords to their own faction types.
		(troop_get_slot, reg0, ":troop_2", slot_troop_original_faction),
		(party_get_slot, reg1, ":center_no", slot_center_original_faction),
		(neq, reg0, reg1),
	#These extra checks are to avoid penalizing the player or promoted companions
	#unintentionally.
		(is_between, reg0, npc_kingdoms_begin, npc_kingdoms_end),
		(is_between, reg1, npc_kingdoms_begin, npc_kingdoms_end),
		#Take 95% of score
		(val_mul, ":score", 19),
		(val_add, ":score", 10),
		(val_div, ":score", 20),
   (try_end),

	#add 2 x relation (minus controversy) to score
   (troop_get_slot, ":controversy", ":troop_2", slot_troop_controversy),
   (val_clamp, ":controversy", 0, 101),
	(store_mul, ":relation_mod", ":relation", 2),
	(val_sub, ":relation_mod", ":controversy"),
	#this modifier will not raise the score by more than 50%
	(store_add, reg0, ":score", 1),
	(val_div, reg0, 2),
	(val_max, reg0, 1),
	(val_min, ":relation_mod", reg0),

	(store_mul, reg0, ":score", 100),#rego has pre-relationship modified score
	(val_add, ":score", ":relation_mod"),
	(val_div, reg0, ":score"),
	(store_sub, reg1, ":score", 100),#reg1 has percentage change (i.e. 1.5 times becomes 50% change) from relation/controversy

	(try_begin),
		(ge, reg1, 0),
		(ge, reg1, ":explanation_priority"),
		  (ge, ":relation", 15),
		(assign, ":explanation_priority", reg1),
		  (assign, ":explanation", "str_political_explanation_most_deserving_friend"),
	(try_end),

   (assign, reg0, ":score"),
	(assign, reg1, ":explanation"),
   ]),
####################################  NEW v3.5
    # script_consume_food
    # Input: arg1: order of the food to be consumed
    # Output: none
    ("consume_drinks",
      [(store_script_param, ":selected_food", 1),
        (troop_get_inventory_capacity, ":capacity", "trp_player"),
        (try_for_range, ":cur_slot", 0, ":capacity"),
          (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
          (is_between, ":cur_item", itm_wine, itm_smoked_fish),
          # (troop_get_inventory_slot_modifier, ":item_modifier", "trp_player", ":cur_slot"),
          # (neq, ":item_modifier", imod_rotten),
          (item_slot_eq, ":cur_item", slot_item_is_checked, 0),
          (item_set_slot, ":cur_item", slot_item_is_checked, 1),
          (val_sub, ":selected_food", 1),
          (lt, ":selected_food", 0),
          (assign, ":capacity", 0),
          (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":cur_slot"),
          (val_sub, ":cur_amount", 1),
          (troop_inventory_slot_set_item_amount, "trp_player", ":cur_slot", ":cur_amount"),
        (try_end),
    ]),
    
################ NEW v3.5 Fixes kingdom parties remaining on the map even after their faction is defeated
    # Output: none
    ("ee_fix_defeated_faction_parties",
      [
        (try_for_parties, ":party"),
          (party_is_active, ":party"),
          (store_faction_of_party, ":party_faction", ":party"),
          (is_between, ":party_faction", kingdoms_begin, kingdoms_end),
          (neg|faction_slot_eq, ":party_faction", slot_faction_state, sfs_active),
          (this_or_next|neg|party_slot_eq, ":party", slot_party_type, spt_village),
          (this_or_next|neg|party_slot_eq, ":party", slot_party_type, spt_castle),
          (neg|party_slot_eq, ":party", slot_party_type, spt_town),
          (remove_party, ":party"),
        (try_end),
    ]),
####################################
### Raises an attribute/skill/proficiency until the value desired ### (NEW 3.7)
    ("ee_raise_actor_attribute",
      [
      (store_script_param, ":attribute", 1),
      (store_script_param, ":actor", 2),
      (store_script_param, ":value", 3),
        
        (store_attribute_level, ":cur_value", ":actor", ":attribute"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (lt, ":cur_value", ":value"),
              (troop_raise_attribute, ":actor", ":attribute", 1),
              (val_add, ":cur_value", 1),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),
    ]),
################
    ("ee_raise_actor_skill",
      [
	    (store_script_param, ":skill", 1),
	    (store_script_param, ":actor", 2),
	    (store_script_param, ":value", 3),
		
        (store_skill_level, ":cur_value", ":actor", ":skill"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (lt, ":cur_value", ":value"),
              (troop_raise_skill, ":actor", ":skill", 1),
              (val_add, ":cur_value", 1),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),
    ]),
################
    ("ee_raise_actor_proficiency",
      [
	    (store_script_param, ":proficiency", 1),
	    (store_script_param, ":actor", 2),
	    (store_script_param, ":value", 3),
        
        (store_proficiency_level, ":cur_value", ":actor", ":proficiency"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (lt, ":cur_value", ":value"),
              (troop_raise_proficiency_linear, ":actor", ":proficiency", 5),
              (val_add, ":cur_value", 5),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),

        ### Light correction in the other direction to catch cases where proficiency is not a multiple of 5 ### (NEW 3.9.2a, by Khanor)
        (store_proficiency_level, ":cur_value", ":actor", ":proficiency"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (gt, ":cur_value", ":value"),
              (troop_raise_proficiency_linear, ":actor", ":proficiency", -1),
              (val_add, ":cur_value", -1),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),
    ]),
### Lowers an attribute/skill/proficiency until the value desired ### (NEW 3.9.2, by Khanor)
    ("ee_lower_actor_attribute",
      [
      (store_script_param, ":attribute", 1),
      (store_script_param, ":actor", 2),
      (store_script_param, ":value", 3),
        
        (store_attribute_level, ":cur_value", ":actor", ":attribute"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (gt, ":cur_value", ":value"), ### The "lt" stands for "less than", thus in these reversed operations we must use "gt" for "greater than." - Khanor
              (troop_raise_attribute, ":actor", ":attribute", -1),
              (val_add, ":cur_value", -1),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),
    ]),

    ("ee_lower_actor_skill",
      [
	    (store_script_param, ":skill", 1),
	    (store_script_param, ":actor", 2),
	    (store_script_param, ":value", 3),
		
        (store_skill_level, ":cur_value", ":actor", ":skill"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (gt, ":cur_value", ":value"),
              (troop_raise_skill, ":actor", ":skill", -1),
              (val_add, ":cur_value", -1),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),
    ]),

    ("ee_lower_actor_proficiency",
      [
	    (store_script_param, ":proficiency", 1),
	    (store_script_param, ":actor", 2),
	    (store_script_param, ":value", 3),
        
        (store_proficiency_level, ":cur_value", ":actor", ":proficiency"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (gt, ":cur_value", ":value"),
              (troop_raise_proficiency_linear, ":actor", ":proficiency", -5),
              (val_add, ":cur_value", -5),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),

        ### Light correction in the other direction to catch cases where proficiency is not a multiple of 5 ### (NEW 3.9.2a, by Khanor)
        (store_proficiency_level, ":cur_value", ":actor", ":proficiency"),
        (assign, ":end", ":value"),
        (try_for_range, ":unused", 0, ":end"),
          (try_begin),
            (lt, ":cur_value", ":value"),
              (troop_raise_proficiency_linear, ":actor", ":proficiency", 1),
              (val_add, ":cur_value", 1),
          (else_try),
            (ge, ":cur_value", ":value"),
              (assign, ":end", -1),
          (try_end),
        (try_end),
    ]),
####################################  NEW v3.7
    ("ee_lord_find_faction_to_defect", 
    [
      (store_script_param, ":troop_no", 1),
	  
      (assign, ":new_faction", -1),
      # (store_faction_of_troop, ":orig_faction", ":troop_no"),
      (call_script, "script_ee_find_nearest_faction_for_troop_with_same_religion", ":troop_no"),
      (assign, ":new_faction", reg0),
      (try_begin),
        (gt, ":new_faction", -1),    
          (assign, reg0, ":new_faction"),    
      (else_try),
        (call_script, "script_lord_find_alternative_faction", ":troop_no"),
      (try_end),
    ]),
	
#################################
    ("ee_find_nearest_faction_for_troop_with_same_religion", 
    [
      (store_script_param, ":troop_no", 1),
      (store_faction_of_troop, ":orig_faction", ":troop_no"),
      (faction_get_slot, ":troop_religion", ":orig_faction", slot_faction_religion), 
      (assign, ":new_faction", -1),    
      (assign, ":score_to_beat", 1000),    
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),      
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (faction_slot_eq, ":faction_no", slot_faction_religion, ":troop_religion"), 
        (call_script, "script_distance_between_factions", ":faction_no", ":orig_faction"),
        (assign, ":fac_distance", reg0),
        (gt, ":fac_distance", -1),
        (lt, ":fac_distance", ":score_to_beat"),
          (assign, ":score_to_beat", ":fac_distance"),
          (assign, ":new_faction", ":faction_no"),
      (try_end),
      
      (assign, reg0, ":new_faction"),    
    ]),
	
	################## NEW 3.7 - as Deadpool once said, "IT'S SO BORING!" -------- not necessary. Just make the original lords not get their names and titles changed when they change factions.
    ("ee_assign_names_to_lords", 
    [
      # (try_for_range, ":faction_no", active_npcs_begin, active_npcs_end),      
      (try_begin),
      (try_end),
    ]),
####################################
################ NEW v3.8 gets the player horse and imod
("ee_get_troop_horse_imod",
  [
   (store_script_param, ":troop_no", 1),    

   (assign, ":horse_item", -1),
   (assign, ":cur_item_imod", -1),
   (try_begin),
     (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
     (gt, ":horse_item", 0),
       (troop_get_inventory_slot_modifier, ":cur_item_imod", ":troop_no", ek_horse),
   (try_end),
   (assign, reg0, ":horse_item"),
   (assign, reg1, ":cur_item_imod"),
]),
#################################################################

############### NEW v3.8
("ee_player_learn_new_culture",
[
   (store_script_param, ":fief", 1),  
   (party_get_slot, ":cur_fief_culture", ":fief", slot_center_culture),
   (try_begin),
     (eq, ":cur_fief_culture", "fac_culture_finnish"),
       (neq, "$g_player_know_culture_finnish", 1),
         (assign, "$g_player_know_culture_finnish", 1),
		 (display_message, "@You learned a new culture (finnish)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_mazovian"),
       (neq, "$g_player_know_culture_mazovian", 1),
       (assign, "$g_player_know_culture_mazovian", 1),
		 (display_message, "@You learned a new culture (mazovian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_serbian"),
       (neq, "$g_player_know_culture_serbian", 1),
       (assign, "$g_player_know_culture_serbian", 1),
		 (display_message, "@You learned a new culture (serbian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_welsh"),
       (neq, "$g_player_know_culture_welsh", 1),
       (assign, "$g_player_know_culture_welsh", 1),
		 (display_message, "@You learned a new culture (welsh)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_teutonic"),
       (neq, "$g_player_know_culture_teutonic", 1),
       (assign, "$g_player_know_culture_teutonic", 1),
		 (display_message, "@You learned a new culture (teutonic)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_balkan"),
       (neq, "$g_player_know_culture_balkan", 1),
       (assign, "$g_player_know_culture_balkan", 1),
		 (display_message, "@You learned a new culture (balkan)!"),
       
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_rus"),
       (neq, "$g_player_know_culture_rus", 1),
       (assign, "$g_player_know_culture_rus", 1),
		 (display_message, "@You learned a new culture (rus)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_nordic"),
       (neq, "$g_player_know_culture_nordic", 1),
       (assign, "$g_player_know_culture_nordic", 1),
		 (display_message, "@You learned a new culture (nordic)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_baltic"),
       (neq, "$g_player_know_culture_baltic", 1),
       (assign, "$g_player_know_culture_baltic", 1),
		 (display_message, "@You learned a new culture (baltic)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_marinid"),
       (neq, "$g_player_know_culture_marinid", 1),
       (assign, "$g_player_know_culture_marinid", 1),
		 (display_message, "@You learned a new culture (marinid)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_mamluke"),
       (neq, "$g_player_know_culture_mamluke", 1),
       (assign, "$g_player_know_culture_mamluke", 1),
		 (display_message, "@You learned a new culture (mamluke)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_byzantium"),
       (neq, "$g_player_know_culture_byzantium", 1),
       (assign, "$g_player_know_culture_byzantium", 1),
		 (display_message, "@You learned a new culture (byzantium)!"),
       
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_iberian"),
       (neq, "$g_player_know_culture_iberian", 1), 
       (assign, "$g_player_know_culture_iberian", 1), 
		 (display_message, "@You learned a new culture (iberian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_italian"),
       (neq, "$g_player_know_culture_italian", 1),
       (assign, "$g_player_know_culture_italian", 1),
		 (display_message, "@You learned a new culture (italian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_andalus"),
       (neq, "$g_player_know_culture_andalus", 1),
       (assign, "$g_player_know_culture_andalus", 1),
		 (display_message, "@You learned a new culture (andalus)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_gaelic"),
       (neq, "$g_player_know_culture_gaelic", 1),
       (assign, "$g_player_know_culture_gaelic", 1),
		 (display_message, "@You learned a new culture (gaelic)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_anatolian_christian"),
       (neq, "$g_player_know_culture_anatolian_christian", 1),
       (assign, "$g_player_know_culture_anatolian_christian", 1),
		 (display_message, "@You learned a new culture (anatolian christian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_anatolian"),
       (neq, "$g_player_know_culture_anatolian", 1),
       (assign, "$g_player_know_culture_anatolian", 1),
		 (display_message, "@You learned a new culture (anatolian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_western"),
       (neq, "$g_player_know_culture_western", 1),
       (assign, "$g_player_know_culture_western", 1),
		 (display_message, "@You learned a new culture (western)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_mongol"),
       (neq, "$g_player_know_culture_mongol", 1),
       (assign, "$g_player_know_culture_mongol", 1),
		 (display_message, "@You learned a new culture (mongol)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_templar"),
       (neq, "$g_player_know_culture_templar", 1),
       (assign, "$g_player_know_culture_templar", 1),
		 (display_message, "@You learned a new culture (templar)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_hospitaller"),
       (neq, "$g_player_know_culture_hospitaller", 1),
       (assign, "$g_player_know_culture_hospitaller", 1),
		 (display_message, "@You learned a new culture (hospitaller)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_antioch"),
       (neq, "$g_player_know_culture_antiochian", 1),
       (assign, "$g_player_know_culture_antiochian", 1),
		 (display_message, "@You learned a new culture (antioch)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_tripoli"),
       (neq, "$g_player_know_culture_tripoli", 1),
       (assign, "$g_player_know_culture_tripoli", 1),
		 (display_message, "@You learned a new culture (Finnish)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_ibelin"),
       (neq, "$g_player_know_culture_ibelin", 1),
       (assign, "$g_player_know_culture_ibelin", 1),
		 (display_message, "@You learned a new culture (ibelin)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_jerusalem"),
       (neq, "$g_player_know_culture_jerusalem", 1),
       (assign, "$g_player_know_culture_jerusalem", 1),
		 (display_message, "@You learned a new culture (jerusalem)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_crusader"),
       (neq, "$g_player_know_culture_crusader", 1),
       (assign, "$g_player_know_culture_crusader", 1),
		 (display_message, "@You learned a new culture (crusader)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_cuman"),
       (neq, "$g_player_know_culture_cuman", 1),
       (assign, "$g_player_know_culture_cuman", 1),
		 (display_message, "@You learned a new culture (cuman)!"),
############## NEW v3.10
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_english"),
       (neq, "$g_player_know_culture_english", 1),
       (assign, "$g_player_know_culture_english", 1),
		 (display_message, "@You learned a new culture (english)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_french"),
       (neq, "$g_player_know_culture_french", 1),
       (assign, "$g_player_know_culture_french", 1),
		 (display_message, "@You learned a new culture (french)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_hungarian"),
       (neq, "$g_player_know_culture_hungarian", 1),
       (assign, "$g_player_know_culture_hungarian", 1),
		 (display_message, "@You learned a new culture (hungarian)!"),
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_polish"),
       (neq, "$g_player_know_culture_polish", 1),
       (assign, "$g_player_know_culture_polish", 1),
		 (display_message, "@You learned a new culture (polish)!"),
############################
   (else_try),
     (eq, ":cur_fief_culture", "fac_culture_player"),
       (neq, "$g_player_know_culture_player", 1),
       (assign, "$g_player_know_culture_player", 1),
		 (display_message, "@You learned a new culture (player)!"),      
   (try_end),
]),
####################################
  # script_lance_use_backup_weapon
  # Input: arg1: agent
  # Output: none
  ("lance_use_backup_weapon",   
    [    
     # Find non-lance/spear/bow item in inventory
    (store_script_param_1, ":agent"),
    (agent_get_troop_id, ":troop",":agent"),     
    (assign,":has_choice",0),
    (try_begin),
        (troop_is_hero, ":troop"),
        (assign, ":end", ek_head),
        (try_for_range, ":i", ek_item_0, ":end"),
	        (troop_get_inventory_slot,":item",":troop",":i"),
            (gt, ":item", 0),
            (item_get_type, ":weapontype", ":item"),
            (is_between, ":weapontype", itp_type_one_handed_wpn, itp_type_polearm),#one or two handed
            (assign,":has_choice",1),
            (assign, ":end", ek_item_0),#loop breaker
        (try_end),
    (else_try),#regular troops
        (troop_get_inventory_capacity,":cap",":troop"),
        (try_for_range, ":i", 0, ":cap"),#not sure if reg. troops have equipped items (slots < 10), but w/e
            (troop_get_inventory_slot,":item",":troop",":i"),
            (gt, ":item", 0),
            (item_get_type, ":weapontype", ":item"),
            (is_between, ":weapontype", itp_type_one_handed_wpn, itp_type_polearm),#one or two handed
            (agent_has_item_equipped, ":agent", ":item"),#this step is essential,
            (assign,":has_choice",1),#but I'm not sure if this would work or not
            (assign, ":cap", 0),
        (try_end),
    (try_end),
    (try_begin),# Equip their backup weapon.
        (eq, ":has_choice",1),
        (agent_set_wielded_item, ":agent", ":item"),
    (try_end),
    ]),    
      
  # script_lance_use_classify_agent
  # Input: None
  # Output: None
("lance_use_classify_agent", [     
   (try_for_agents, ":agent"),
        (agent_is_alive, ":agent"),
    # Isn't a player.
        (agent_is_non_player, ":agent"),
   # Isn't a horse.
        (agent_is_human, ":agent"),
   # They riding a horse?
        (agent_get_horse, ":horse", ":agent"),
        (gt, ":horse", 0),  # Is riding a horse.
    # Not a horsearcher
		(agent_get_troop_id, ":troop",":agent"),
		(neg|troop_is_guarantee_ranged, ":troop"), 
	# Get wielded item.
        (agent_get_wielded_item, ":wielded", ":agent", 0),
        (try_begin),
            # (this_or_next|is_between, ":wielded", "itm_jousting_lance","itm_glaive"), # Is it a lance?
            # (is_between, ":wielded", "itm_light_lance","itm_pike"), # Is it a lance?
            (this_or_next|is_between, ":wielded", "itm_light_lance", "itm_bamboo_spear"), # Is it a lance?
            (is_between, ":wielded", "itm_crusader_knight_spear_a", "itm_crusader_spear_a"), # adjust as needed
            (agent_set_slot, ":agent", slot_agent_lance, ":wielded"),
        (else_try),    
   # Force the NPC to wield a lance, but this will only happen if they
   # actually have a lance equipped.  Otherwise this does nothing.
            (assign, ":end", "itm_bamboo_spear"),  # adjust as needed
            (try_for_range, ":item", "itm_light_lance",":end"),
                (agent_has_item_equipped, ":agent", ":item"),
                (agent_set_wielded_item, ":agent", ":item"),
                (agent_set_slot, ":agent", slot_agent_lance, ":item"), #Mark lancers for later use
                (assign, ":end", "itm_light_lance"),#loop breaker      
            (try_end),
            (assign, ":end", "itm_crusader_spear_a"), # adjust as needed
            (try_for_range, ":item", "itm_crusader_knight_spear_a",":end"),
	          (agent_has_item_equipped, ":agent", ":item"),
              (agent_set_wielded_item, ":agent", ":item"),
              (agent_set_slot, ":agent", slot_agent_lance, ":item"), #Mark lancers for later use
              (assign, ":end", "itm_crusader_knight_spear_a"),#loop breaker      
            (try_end),
        (try_end),
   (try_end), #Agent Loop
    ]),
####################################
# ("",
# [
# ]),
####################################

	
############################
("update_mercenaries_in_fief",
      [
        (store_script_param, ":town_no", 1),
        (store_script_param, ":culture", 2),
		
        (try_begin),
		  (this_or_next|eq, ":culture", "fac_culture_finnish"),
		  (eq, ":culture", "fac_culture_nordic"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_scandinavian),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_scan"),
        (else_try),
		  (eq, ":culture", "fac_culture_mazovian"),
            (party_set_slot, ":town_no", slot_regional_mercs, merc_mordovians),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_company_mordovian"),
        (else_try),
		  (this_or_next|eq, ":culture", "fac_culture_serbian"),
		  (this_or_next|eq, ":culture", "fac_culture_balkan"),
		  (eq, ":culture", "fac_culture_byzantium"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_balkan),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_balkan"),
        (else_try),
		  (eq, ":culture", "fac_culture_welsh"),
            (party_set_slot, ":town_no", slot_regional_mercs, merc_welsh),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_gaelic_1"),
        (else_try),
		  (this_or_next|eq, ":culture", "fac_culture_teutonic"),
		  (this_or_next|eq, ":culture", "fac_culture_western"),
		  (this_or_next|eq, ":culture", "fac_culture_templar"),
		  (this_or_next|eq, ":culture", "fac_culture_hospitaller"),
		  (this_or_next|eq, ":culture", "fac_culture_antioch"),
		  (this_or_next|eq, ":culture", "fac_culture_teutonic"),
		  (this_or_next|eq, ":culture", "fac_culture_tripoli"),
		  (this_or_next|eq, ":culture", "fac_culture_ibelin"),
		  (this_or_next|eq, ":culture", "fac_culture_jerusalem"),
		  (eq, ":culture", "fac_culture_crusader"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_euro),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_euro"),
        (else_try),
		  (eq, ":culture", "fac_culture_rus"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_rus),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_rus"),
        (else_try),
		  (eq, ":culture", "fac_culture_baltic"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_balt),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_balt"),
        (else_try),
		  (this_or_next|eq, ":culture", "fac_culture_marinid"),
		  (eq, ":culture", "fac_culture_andalus"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_maghreb),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_maghreb"),
        (else_try),
		  (this_or_next|eq, ":culture", "fac_culture_mamluke"),
		  (eq, ":culture", "fac_culture_anatolian"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_mamluk),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_mamluk"),
        (else_try),
		  (this_or_next|eq, ":culture", "fac_culture_iberian"),
		  (eq, ":culture", "fac_culture_italian"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_latin),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_latin"),
        (else_try),
		  (this_or_next|eq, ":culture", "fac_culture_gaelic"),
		  (eq, ":culture", "fac_culture_scotish"),
            (party_set_slot, ":town_no", slot_regional_mercs, generic_gaelic),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_generic_gaelic_1"),
        (else_try),
		  (eq, ":culture", "fac_culture_anatolian_christian"),
            (party_set_slot, ":town_no", slot_regional_mercs, merc_turkopoles),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_company_turkopoles_1"),
        (else_try),
		  (eq, ":culture", "fac_culture_mongol"),
            (party_set_slot, ":town_no", slot_regional_mercs, merc_kipchaks),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_company_kipchak_1"),
        (else_try),
		  (eq, ":culture", "fac_culture_cuman"),
            (party_set_slot, ":town_no", slot_regional_mercs, merc_cumans),
            (party_set_slot, ":town_no", slot_regional_party_template, "pt_company_cuman_1"),
        (try_end),
          # (party_set_slot, ":special2", ":town_no", slot_spec_mercs2),
          # (party_set_slot, ":special2", ":town_no", slot_spec_mercs2),
        (party_set_slot, ":town_no", slot_regional_mercs_number, 0),
		(display_message, "@Regional mercs will be updated next time they respawn."),
		
		# (call_script, "script_ee_update_mercenary_units_of_town", ":center_no"),
]),


############### NEW v3.9
("ee_get_chance_of_execution",
[
  (store_script_param, ":prisoner_troop_id", 1),  
  (store_script_param, ":town_lord", 2),
  
  (store_troop_faction, ":prisoner_faction", ":prisoner_troop_id"), ######## gets faction relations - the lower the greater the chance of execution
  (store_faction_of_troop, ":troop_faction", ":town_lord"), 
  (try_begin),
    (neq, ":prisoner_faction", ":troop_faction"),
      (store_relation, ":faction_relation", ":troop_faction", ":prisoner_faction"),
      (store_mul, ":chance_of_execution", ":faction_relation", "$g_lord_death_chance_execution_relation_divider"), ######### every 3 minus points increase chance by 1%
  (try_end),
  
  (val_add, ":chance_of_execution", "$g_lord_death_chance_execution_base"), ######### 10% base chance
 
  (call_script, "script_troop_get_relation_with_troop", ":town_lord", ":prisoner_troop_id"),
  (assign, ":relation", reg0),
  (try_begin),
    (gt, ":relation", 0),
      # (store_div, ":relation_change", ":relation", 2),
	  (val_sub, ":chance_of_execution", ":relation"),
  (else_try),
    (lt, ":relation", 0),
      (store_mul, ":relation_change", ":relation", -1), # 1
	  (val_add, ":chance_of_execution", ":relation_change"),
  (try_end),
 
  (troop_get_slot, ":reputation", ":town_lord", slot_lord_reputation_type), 
  (try_begin),   ######### asshole lords have a greater chance of executing someone - martial is neutral
    (eq, ":reputation", lrep_debauched),  
      (val_add, ":chance_of_execution", 30),  
  (else_try),              
    (eq, ":reputation", lrep_quarrelsome),  
      (val_add, ":chance_of_execution", 22),  
  (else_try),              
    (eq, ":reputation", lrep_selfrighteous),  
      (val_add, ":chance_of_execution", 14),  
  (else_try),              
    (eq, ":reputation", lrep_cunning),  
      (val_add, ":chance_of_execution", 8),  
  (else_try),              
    (eq, ":reputation", lrep_upstanding),  
      (val_sub, ":chance_of_execution", 5),  
  (else_try),              
    (eq, ":reputation", lrep_goodnatured),  
      (val_sub, ":chance_of_execution", 10),  
  (try_end),  
  
  (try_begin),   ######### kings have different chance
    (faction_slot_eq, ":prisoner_faction", slot_faction_leader, ":prisoner_troop_id"),
      (val_sub, ":chance_of_execution", "$g_lord_death_chance_execution_king_variation"),  
  (try_end),  
  
  (assign, reg0, ":chance_of_execution"),
]),
####################################

############### NEW v3.9
("ee_get_execution_method",
[
  (store_script_param, ":lord", 1),  
  
  # (party_get_slot, ":town_lord", "$g_execute_lord_cur_center", slot_town_lord),
  (troop_get_slot, ":reputation", ":lord", slot_lord_reputation_type), 
  (assign, ":cruelty", 30),  ########## base for martial
  (try_begin),   
    (eq, ":reputation", lrep_debauched),  
    (call_script, "script_rand", 30, 60), #### best days = burn/worst days = quarter
    (val_add, ":cruelty", reg0),  
  (else_try),              
    (eq, ":reputation", lrep_quarrelsome), 
    (call_script, "script_rand", 20, 40),  #### best days = hang/worst days = burn
    (val_add, ":cruelty", reg0),  
  (else_try),              
    (eq, ":reputation", lrep_selfrighteous), 
    (call_script, "script_rand", 0, 30), #### best days = behead/worst days = burn
    (val_add, ":cruelty", reg0),  
  (else_try),              
    (eq, ":reputation", lrep_cunning),  
    (call_script, "script_rand", 5, 20), #### best days = behead/worst days = hang
    (val_add, ":cruelty", reg0),  
  (else_try),              
    (eq, ":reputation", lrep_upstanding), 
    (call_script, "script_rand", 0, 15), #### best days = behead/worst days = hang
    (val_add, ":cruelty", reg0),  
  (else_try),              
    (eq, ":reputation", lrep_goodnatured),  
    (call_script, "script_rand", 0, 8), ### best days = behead/worst days = behead
    (val_sub, ":cruelty", reg0),  
  (try_end),  
  ########################
  (assign, ":execution_method", 1),
  (try_begin),   ######### Now determine method of execution
    (lt, ":cruelty", 40),  
      # (assign, ":execution_method", 1),  ########### beheading
  (else_try),              
    (ge, ":cruelty", 40),  
    (lt, ":cruelty", 60),  
      (assign, ":execution_method", 2),  ########### hanging
  (else_try),              
    (ge, ":cruelty", 60),  
    (lt, ":cruelty", 80),  
      (assign, ":execution_method", 3),  ########### Burning
  (else_try),              
    (ge, ":cruelty", 80),  
      (assign, ":execution_method", 4),  ########### Hung, Strung and Quartered
  (try_end),  
  
  (assign, reg0, ":execution_method"),
]),


############## NEW v3.9.1 - gets a quest
    ("ee_get_quest",
      [
        (store_script_param_1, ":quest_no"),
        (store_script_param_2, ":giver_troop"),
        
        (store_character_level, ":player_level", "trp_player"),
        (store_troop_faction, ":giver_faction_no", ":giver_troop"),
        
        (troop_get_slot, ":giver_party_no", ":giver_troop", slot_troop_leaded_party),
        (troop_get_slot, ":giver_reputation", ":giver_troop", slot_lord_reputation_type),
        
        (assign, ":giver_center_no", -1),
        (try_begin),
          (gt, ":giver_party_no", 0),
            (party_get_attached_to, ":giver_center_no", ":giver_party_no"),
        (else_try),
          (is_between, ":giver_troop", village_elders_begin, village_elders_end),
            (store_sub, ":offset", ":giver_troop", villages_begin),            
            (store_add, ":giver_center_no", villages_begin, ":offset"),
        (else_try),
          (is_between, ":giver_troop", mayors_begin, mayors_end),
            (store_sub, ":offset", ":giver_troop", towns_begin),            
            (store_add, ":giver_center_no", towns_begin, ":offset"),     
        (else_try),
          (is_between, ":giver_troop", kingdom_ladies_begin, kingdom_ladies_end),
		    (troop_get_slot, ":giver_center_no", ":giver_troop", slot_troop_cur_center),
        (try_end),
        
        # (try_begin),
          # (troop_slot_eq, ":giver_troop", slot_troop_occupation, slto_kingdom_hero),
          # (try_begin),
            # (ge, "$g_talk_troop_faction_relation", 0),
            # (assign, ":quests_begin", lord_quests_begin),
            # (assign, ":quests_end", lord_quests_end),
            # (assign, ":quests_begin_2", lord_quests_begin_2),
            # (assign, ":quests_end_2", lord_quests_end_2),
          # (else_try),
            # (assign, ":quests_begin", enemy_lord_quests_begin),
            # (assign, ":quests_end", enemy_lord_quests_end),
            # (assign, ":quests_begin_2", 0),
            # (assign, ":quests_end_2", 0),
          # (try_end),
        # (else_try),
          # (is_between, ":giver_troop", village_elders_begin, village_elders_end),
          # (assign, ":quests_begin", village_elder_quests_begin),
          # (assign, ":quests_end", village_elder_quests_end),
          # (assign, ":quests_begin_2", village_elder_quests_begin_2),
          # (assign, ":quests_end_2", village_elder_quests_end_2),
        # (else_try),
          # (is_between, ":giver_troop", mayors_begin, mayors_end),
          # (assign, ":quests_begin", mayor_quests_begin),
          # (assign, ":quests_end", mayor_quests_end),
          # (assign, ":quests_begin_2", mayor_quests_begin_2),
          # (assign, ":quests_end_2", mayor_quests_end_2),
        # (else_try),
          # (assign, ":quests_begin", lady_quests_begin),
          # (assign, ":quests_end", lady_quests_end),
          # (assign, ":quests_begin_2", lady_quests_begin_2),
          # (assign, ":quests_end_2", lady_quests_end_2),
        # (try_end),
        
        (assign, ":result", -1),
        (assign, ":quest_target_troop", -1),
        (assign, ":quest_target_center", -1),
        (assign, ":quest_target_faction", -1),
        (assign, ":quest_object_faction", -1),
        (assign, ":quest_object_troop", -1),
        (assign, ":quest_object_center", -1),
        (assign, ":quest_target_party", -1),
        (assign, ":quest_target_party_template", -1),
        (assign, ":quest_target_amount", -1),
        (assign, ":quest_target_dna", -1),
        (assign, ":quest_target_item", -1),
        (assign, ":quest_importance", 1),
        (assign, ":quest_xp_reward", 0),
        (assign, ":quest_gold_reward", 0),
        (assign, ":quest_convince_value", 0),
        (assign, ":quest_expiration_days", 0),
        (assign, ":quest_dont_give_again_period", 0),
        
        (try_begin), #get dynamic quest is a separate script, so that we can scan a number of different troops at once for it
          (call_script, "script_ee_get_dynamic_quest", ":giver_troop", ":quest_no"),
          
          (assign, ":result", reg0),
          (assign, ":relevant_troop", reg1),
          (assign, ":relevant_party", reg2),
          (assign, ":relevant_faction", reg3),
          
          #GUILDMASTER QUESTS
          (try_begin),
            (eq, ":quest_no", "qst_track_down_bandits"),
            (assign, ":quest_target_party", ":relevant_party"),
            (assign , ":quest_expiration_days", 60),
            (assign, ":quest_xp_reward", 1000),
            (assign, ":quest_gold_reward", 1000),
            
          (else_try),
            (eq, ":quest_no", "qst_retaliate_for_border_incident"),
            (assign, ":quest_target_troop", ":relevant_troop"),
            (assign, ":quest_target_faction", ":relevant_faction"),
            
            (assign , ":quest_expiration_days", 30),
            (assign, ":quest_xp_reward", 1000),
            (assign, ":quest_gold_reward", 1000),
            
          #KINGDOM LORD QUESTS
          (else_try),
            (eq, ":quest_no", "qst_cause_provocation"),
            (assign, ":quest_target_faction", ":relevant_faction"),
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 100),
            (assign, ":quest_xp_reward", 1000),
            (assign, ":quest_gold_reward", 1000),
            
          (else_try),
            (eq, ":quest_no", "qst_destroy_bandit_lair"),
            (assign, ":quest_target_party", ":relevant_party"),
            (assign , ":quest_expiration_days", 60),
            (assign, ":quest_xp_reward", 3000),
            (assign, ":quest_gold_reward", 1500),
            
            #KINGDOM LADY OR KINGDOM HERO QUESTS
          (else_try),
            (eq, ":quest_no", "qst_rescue_prisoner"),
            (assign, ":quest_target_troop", ":relevant_troop"),
            (assign, ":quest_target_center", ":relevant_party"),
            
            (assign, ":quest_expiration_days", 30),
            (assign, ":quest_dont_give_again_period", 5),
            (assign, ":quest_xp_reward", 1500),
            (assign, ":quest_gold_reward", 3000),
          (try_end),
        (try_end),
        
        #no dynamic quest available
        (try_begin),
          # (eq, ":result", -1),
          
          # (try_for_range, ":unused", 0, 20), #Repeat trial twenty times
            # (eq, ":result", -1),
            (assign, ":quest_target_troop", -1),
            (assign, ":quest_target_center", -1),
            (assign, ":quest_target_faction", -1),
            (assign, ":quest_object_faction", -1),
            (assign, ":quest_object_troop", -1),
            (assign, ":quest_object_center", -1),
            (assign, ":quest_target_party", -1),
            (assign, ":quest_target_party_template", -1),
            (assign, ":quest_target_amount", -1),
            (assign, ":quest_target_dna", -1),
            (assign, ":quest_target_item", -1),
            (assign, ":quest_importance", 1),
            (assign, ":quest_xp_reward", 0),
            (assign, ":quest_gold_reward", 0),
            (assign, ":quest_convince_value", 0),
            (assign, ":quest_expiration_days", 0),
            (assign, ":quest_dont_give_again_period", 0),
            
            # (store_sub, ":num_possible_old_quests", ":quests_end", ":quests_begin"),
            # (store_sub, ":num_possible_new_quests", ":quests_end_2", ":quests_begin_2"),
            # (store_add, ":num_possible_total_quests", ":num_possible_old_quests", ":num_possible_new_quests"),
            
            # (store_random_in_range, ":quest_no", 0, ":num_possible_total_quests"),
            # (try_begin),
              # (lt, ":quest_no", ":num_possible_old_quests"),
              # (store_random_in_range, ":quest_no", ":quests_begin", ":quests_end"),
            # (else_try),
              # (store_random_in_range, ":quest_no", ":quests_begin_2", ":quests_end_2"),
            # (try_end),
            
            #TODO: Remove this when test is done
            #       (assign, ":quest_no", "qst_meet_spy_in_enemy_town"),
            #TODO: Remove this when test is done end
            (neg|check_quest_active, ":quest_no"),
            # (neg|quest_slot_ge, ":quest_no", slot_quest_dont_give_again_remaining_days, 1),
            (try_begin),
              # Village Elder quests
              (eq, ":quest_no", "qst_deliver_grain"),
              (try_begin),
                (is_between, ":giver_center_no", villages_begin, villages_end),
                #The quest giver is the village elder
                (call_script, "script_get_troop_item_amount", ":giver_troop", "itm_grain"),
                (eq, reg0, 0),
                (neg|party_slot_ge, ":giver_center_no", slot_town_prosperity, 40),
                (assign, ":quest_target_center", ":giver_center_no"),
                (store_random_in_range, ":quest_target_amount", 4, 8),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 20),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_deliver_cattle"),
              (try_begin),
                (is_between, ":giver_center_no", villages_begin, villages_end),
                #The quest giver is the village elder
                (party_get_slot, ":num_cattle", ":giver_center_no", slot_village_number_of_cattle),
                (lt, ":num_cattle", 50),
                (assign, ":quest_target_center", ":giver_center_no"),
                (store_random_in_range, ":quest_target_amount", 5, 10),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 20),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_train_peasants_against_bandits"),
              (try_begin),
                (is_between, ":giver_center_no", villages_begin, villages_end),
                #The quest giver is the village elder
                (store_skill_level, ":player_trainer", "skl_trainer", "trp_player"),
                (gt, ":player_trainer", 0),
                (store_random_in_range, ":quest_target_amount", 5, 8),
                (assign, ":quest_target_center", ":giver_center_no"),
                (assign, ":quest_expiration_days", 20),
                (assign, ":quest_dont_give_again_period", 40),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              # Mayor quests
              (eq, ":quest_no", "qst_escort_merchant_caravan"),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (store_random_party_in_range, ":quest_target_center", towns_begin, towns_end),
              (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
              (assign, ":quest_gold_reward", ":dist"),
              # rafi 15 denars/unit traveled
              (store_mul, ":quest_gold_reward", ":dist", 15),
              # (val_add, ":quest_gold_reward", 25),
              # (val_mul, ":quest_gold_reward", 25),
              # (val_div, ":quest_gold_reward", 20),
              (store_random_in_range, ":quest_target_amount", 6, 12),
              (assign, "$escort_merchant_caravan_mode", 0),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_deliver_wine"),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (store_random_party_in_range, ":quest_target_center", towns_begin, towns_end),
              (store_random_in_range, ":random_no", 0, 2),
              (try_begin),
                (eq, ":random_no", 0),
                (assign, ":quest_target_item", "itm_quest_wine"),
              (else_try),
                (assign, ":quest_target_item", "itm_quest_ale"),
              (try_end),
              (store_random_in_range, ":quest_target_amount", 6, 12),
              (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
              (assign, ":quest_gold_reward", ":dist"),
              # rafi
              (val_mul, ":quest_gold_reward", 10), # 10 denars per unit traveled
              # end rafi
              #(val_add, ":quest_gold_reward", 2),
              #(assign, ":multiplier", 5),
              #(val_add, ":multiplier", ":quest_target_amount"),
              #(val_mul, ":quest_gold_reward", ":multiplier"),
              #(val_div, ":quest_gold_reward", 100),
              #(val_mul, ":quest_gold_reward", 10),
              (store_item_value, "$qst_deliver_wine_debt", ":quest_target_item"),
              (val_mul, "$qst_deliver_wine_debt", ":quest_target_amount"),
              (val_mul, "$qst_deliver_wine_debt", 6),
              (val_div, "$qst_deliver_wine_debt",5),
              (assign, ":quest_expiration_days", 7),
              (assign, ":quest_dont_give_again_period", 20),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_troublesome_bandits"),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (store_character_level, ":quest_gold_reward", "trp_player"),
              (val_add, ":quest_gold_reward", 20),
              (val_mul, ":quest_gold_reward", 35),
              (val_div, ":quest_gold_reward",100),
              (val_mul, ":quest_gold_reward", 10),
              (assign, ":quest_expiration_days", 30),
              (assign, ":quest_dont_give_again_period", 30),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_kidnapped_girl"),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              # rafi
              (assign, ":i_max", 99),
              (try_for_range, ":unused", 0, ":i_max"),
                (store_random_in_range, ":quest_target_center", villages_begin, villages_end),
                (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
                (le, ":dist", 50),
                (assign, ":i_max", 0),
              (try_end),
              (assign, reg21, ":dist"),
              (str_store_party_name, s21, ":quest_target_center"),
              (display_message, "@DEBUG -- {s21} distance {reg21}"),
              # rafi
              #(store_random_in_range, ":quest_target_center", villages_begin, villages_end),
              (store_character_level, ":quest_target_amount"),
              (val_add, ":quest_target_amount", 15),
              (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
              (val_add, ":dist", 15),
              (val_mul, ":dist", 2),
              (val_mul, ":quest_target_amount", ":dist"),
              (val_div, ":quest_target_amount",100),
              (val_mul, ":quest_target_amount",10),
              (assign, ":quest_gold_reward", ":quest_target_amount"),
              (val_div, ":quest_gold_reward", 40),
              (val_mul, ":quest_gold_reward", 10),
              (assign, ":quest_expiration_days", 15),
              (assign, ":quest_dont_give_again_period", 30),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_move_cattle_herd"),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (call_script, "script_cf_select_random_town_at_peace_with_faction", ":giver_faction_no"),
              (neq, ":giver_center_no", reg0),
              (assign, ":quest_target_center", reg0),
              (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
              # rafi 10 denars per unit traveled
              (store_mul, ":quest_gold_reward", ":dist", 10),
              #(assign, ":quest_gold_reward", ":dist"),
              # (val_add, ":quest_gold_reward", 25),
              # (val_mul, ":quest_gold_reward", 50),
              # (val_div, ":quest_gold_reward", 20),
              (assign, ":quest_expiration_days", 30),
              (assign, ":quest_dont_give_again_period", 20),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_persuade_lords_to_make_peace"),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (store_faction_of_party, ":cur_object_faction", ":giver_center_no"),
              (call_script, "script_cf_faction_get_random_enemy_faction", ":cur_object_faction"),
              (assign, ":cur_target_faction", reg0),
              (call_script, "script_cf_get_random_lord_except_king_with_faction", ":cur_object_faction"),
              (assign, ":cur_object_troop", reg0),
              (this_or_next|troop_slot_eq, ":cur_object_troop", slot_lord_reputation_type, lrep_quarrelsome),
              (this_or_next|troop_slot_eq, ":cur_object_troop", slot_lord_reputation_type, lrep_selfrighteous),
              (this_or_next|troop_slot_eq, ":cur_object_troop", slot_lord_reputation_type, lrep_martial),
              (troop_slot_eq, ":cur_object_troop", slot_lord_reputation_type, lrep_debauched),
              
              (call_script, "script_cf_get_random_lord_except_king_with_faction", ":cur_target_faction"),
              (assign, ":quest_target_troop", reg0),
              (this_or_next|troop_slot_eq, ":quest_target_troop", slot_lord_reputation_type, lrep_quarrelsome),
              (this_or_next|troop_slot_eq, ":quest_target_troop", slot_lord_reputation_type, lrep_selfrighteous),
              (this_or_next|troop_slot_eq, ":quest_target_troop", slot_lord_reputation_type, lrep_martial),
              (troop_slot_eq, ":quest_target_troop", slot_lord_reputation_type, lrep_debauched),
              
              (assign, ":quest_object_troop", ":cur_object_troop"),
              (assign, ":quest_target_faction", ":cur_target_faction"),
              (assign, ":quest_object_faction", ":cur_object_faction"),
              (assign, ":quest_gold_reward", 12000),
              (assign, ":quest_convince_value", 7000),
              (assign, ":quest_expiration_days", 30),
              (assign, ":quest_dont_give_again_period", 100),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_deal_with_looters"),
              (is_between, ":player_level", 0, 15),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (store_faction_of_party, ":cur_object_faction", ":giver_center_no"),
              (store_num_parties_destroyed_by_player, ":num_looters_destroyed", "pt_looters"),
              (party_template_set_slot, "pt_looters",slot_party_template_num_killed, ":num_looters_destroyed"),
              (quest_set_slot, ":quest_no",slot_quest_current_state,0),
              (quest_set_slot, ":quest_no",slot_quest_target_party_template, "pt_looters"),
              (assign, ":quest_gold_reward", 500),
              (assign, ":quest_xp_reward", 500),
              (assign, ":quest_expiration_days", 20),
              (assign, ":quest_dont_give_again_period", 30),
              (assign, ":result", ":quest_no"),
            (else_try),
              (eq, ":quest_no", "qst_deal_with_night_bandits"),
              (is_between, ":player_level", 0, 15),
              (is_between, ":giver_center_no", centers_begin, centers_end),
              (party_slot_ge, ":giver_center_no", slot_center_has_bandits, 1),
              (assign, ":quest_target_center", ":giver_center_no"),
              (assign, ":quest_expiration_days", 4),
              (assign, ":quest_dont_give_again_period", 15),
              (assign, ":result", ":quest_no"),
            (else_try),
              # Lady quests
              (eq, ":quest_no", "qst_rescue_lord_by_replace"),
              (eq, 1, 0),
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (is_between, ":player_level", 5, 25),
                
                (assign, ":prisoner_relative", -1),
                
                (try_begin),
                  (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_father), #get giver_troop's father
                  (gt, ":cur_target_troop", 0), #if giver_troop has a father as a troop in game
                  (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0), #if giver_troop's father is in a prison
                  (assign, ":prisoner_relative", ":cur_target_troop"),
                (try_end),
                
                (try_begin),
                  (eq, ":prisoner_relative", -1), #if giver_troop has no father or giver_troop's father is not in prison.
                  (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_spouse), #get giver_troop's spouse
                  (gt, ":cur_target_troop", 0), #if giver_troop has a spouse as a troop in game
                  (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0), #if giver_troop's spouse is in a prison
                  (assign, ":prisoner_relative", ":cur_target_troop"),
                (try_end),
                
                (try_begin),
                  (eq, ":prisoner_relative", -1), #if ((giver_troop has no father) or (giver_troop's father is not in prison)) and ((giver_troop has no spouse) or (giver_troop's spouse is not in prison)).
                  (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_guardian), #get giver_troop's spouse
                  (gt, ":cur_target_troop", 0), #if giver_troop has a guardian as a troop in game
                  (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0), #if giver_troop's guardian is in a prison
                  (assign, ":prisoner_relative", ":cur_target_troop"),
                (try_end),
                
                (try_begin),
                  (eq, "$cheat_mode", 1),
                  (assign, reg0, ":prisoner_relative"),
                  (display_message, "str_prisoner_relative_is_reg0"),
                (try_end),
                
                (gt, ":prisoner_relative", -1),
                #(changed 2) no need to this anymore (troop_slot_ge, ":prisoner_relative", slot_troop_prisoner_of_party, 0),
                (call_script, "script_search_troop_prisoner_of_party", ":prisoner_relative"),
                (assign, ":cur_target_center", reg0),
                
                #(changed 3) no need to check only towns anymore (is_between, ":cur_target_center", towns_begin, towns_end),#Skip if he is not in a town
                (is_between, ":cur_target_center", walled_centers_begin, walled_centers_end), #Skip if he is not in a walled center
                
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":quest_target_troop", ":prisoner_relative"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 73),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_deliver_message_to_prisoner_lord"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (is_between, ":player_level", 5, 25),
                (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_father),
                (try_begin),
                  (eq, ":cur_target_troop", 0),
                  (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_spouse),
                (try_end),
                #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 1),#Skip if the lady's father/husband is not in prison
                (gt, ":cur_target_troop", -1),
                (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
                (call_script, "script_search_troop_prisoner_of_party", ":cur_target_troop"),
                (assign, ":cur_target_center", reg0),
                (is_between, ":cur_target_center", towns_begin, towns_end),#Skip if he is not in a town
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 30),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_duel_for_lady"),
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (ge, ":player_level", 10),
                (call_script, "script_cf_troop_get_random_enemy_troop_with_occupation", ":giver_troop", slto_kingdom_hero),#Can fail
                (assign, ":cur_target_troop", reg0),
                (neg|troop_slot_eq, ":giver_troop", slot_troop_spouse, ":cur_target_troop"), #must not be in the family
                (neg|troop_slot_eq, ":giver_troop", slot_troop_father, ":cur_target_troop"),
                (neg|troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
                (troop_slot_ge, ":cur_target_troop", slot_troop_leaded_party, 0),
                (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_goodnatured),
                (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_upstanding),
                (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_martial),
                
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 50),
                (assign, ":result", ":quest_no"),
              (try_end),
              # Enemy Lord Quests
            (else_try),
              (eq, ":quest_no", "qst_lend_surgeon"),
              (try_begin),
                (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
                (neq, ":giver_reputation", lrep_quarrelsome),
                (neq, ":giver_reputation", lrep_debauched),
                (assign, ":max_surgery_level", 0),
                (assign, ":best_surgeon", -1),
                (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
                (try_for_range, ":i_stack", 1, ":num_stacks"),
                  (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
                  (troop_is_hero, ":stack_troop"),
                  (store_skill_level, ":cur_surgery_skill", skl_surgery, ":stack_troop"),
                  (gt, ":cur_surgery_skill", ":max_surgery_level"),
                  (assign, ":max_surgery_level", ":cur_surgery_skill"),
                  (assign, ":best_surgeon", ":stack_troop"),
                (try_end),
                
                (store_character_level, ":cur_level", "trp_player"),
                (assign, ":required_skill", 5),
                (val_div, ":cur_level", 10),
                (val_add, ":required_skill", ":cur_level"),
                (ge, ":max_surgery_level", ":required_skill"), #Skip if party skill level is less than the required value
                
                (assign, ":quest_object_troop", ":best_surgeon"),
                (assign, ":quest_importance", 1),
                (assign, ":quest_xp_reward", 10),
                (assign, ":quest_gold_reward", 10),
                (assign, ":quest_dont_give_again_period", 50),
                (assign, ":result", ":quest_no"),
              (try_end),
              # Lord Quests
            (else_try),
              (eq, ":quest_no", "qst_meet_spy_in_enemy_town"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (eq, "$players_kingdom", ":giver_faction_no"),
                (neq, ":giver_reputation", lrep_goodnatured),
                (neq, ":giver_reputation", lrep_martial),
                
                (call_script, "script_troop_get_player_relation", ":giver_troop"),
                (assign, ":giver_relation", reg0),
                (gt, ":giver_relation", 3),
                (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),
                (assign, ":enemy_faction", reg0),
                # (store_relation, ":reln", ":enemy_faction", "fac_player_supporters_faction"),
                (store_relation, ":reln", ":enemy_faction", "$players_kingdom"),
                (lt, ":reln", 0),
                (call_script, "script_cf_select_random_town_with_faction", ":enemy_faction"),
                (assign, ":cur_target_center", reg0),
                #Just to make sure that there is a free walker
                (call_script, "script_cf_center_get_free_walker", ":cur_target_center"),
                (assign, ":quest_target_center", ":cur_target_center"),
                (store_random_in_range, ":quest_target_amount", secret_signs_begin, secret_signs_end),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_gold_reward", 500),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 50),
                (quest_set_slot, "qst_meet_spy_in_enemy_town", slot_quest_gold_reward, 500),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_raid_caravan_to_start_war"),
              (eq, 1, 0), #disable this as a random quest
              
              (try_begin),
                (eq, "$players_kingdom", ":giver_faction_no"),
                (this_or_next|eq, ":giver_reputation", lrep_cunning),
                (this_or_next|eq, ":giver_reputation", lrep_quarrelsome),
                (             eq, ":giver_reputation", lrep_debauched),
                (gt, ":player_level", 10),
                (eq, 1, 0), #disable this as a random quest
                
                (neg|faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),#Can not take the quest from the king
                (call_script, "script_cf_faction_get_random_friendly_faction", ":giver_faction_no"),#Can fail
                (assign, ":quest_target_faction", reg0),
                (store_troop_faction, ":quest_object_faction", ":giver_troop"),
                (assign, ":quest_target_party_template", "pt_kingdom_caravan_party"),
                (assign, ":quest_target_amount", 2),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 100),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_deliver_message"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (lt, ":player_level", 20),
                (neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
                (call_script, "script_cf_get_random_lord_in_a_center_with_faction", ":giver_faction_no"),#Can fail
                (assign, ":cur_target_troop", reg0),
                (neq, ":cur_target_troop", ":giver_troop"),#Skip himself
                (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
                (assign, ":cur_target_center", reg0),#cur_target_center will definitely be a valid center
                (neq, ":giver_center_no", ":cur_target_center"),#Skip current center
                
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (assign, ":quest_xp_reward", 30),
                (assign, ":quest_gold_reward", 40),
                (assign, ":quest_dont_give_again_period", 10),
                
                (assign, ":result", ":quest_no"),
                
                (assign, ":quest_expiration_days", 30),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_escort_lady"),
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (ge, ":player_level", 10),

                (ge, ":giver_troop", 0), #skip troops without fathers in range                

                (assign, ":cur_object_troop", -1),
                (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
                  (troop_slot_eq, ":lady", slot_troop_father, ":giver_troop"),
                  (assign, ":cur_object_troop", ":lady"),
                (try_end),

                (ge, ":cur_object_troop", 0),
                            
                (troop_get_slot, ":giver_troop_confirm", ":cur_object_troop", slot_troop_father),  # just to make sure
                (eq, ":giver_troop", ":giver_troop_confirm"), # just to make sure

                (store_random_in_range, ":random_no", 0, 2),
                (try_begin),
                  (eq, ":random_no", 0),
                  (troop_get_slot, ":cur_object_troop_2", ":giver_troop", slot_troop_spouse),
                  (is_between, ":cur_object_troop_2", kingdom_ladies_begin, kingdom_ladies_end),
                  (troop_get_slot, ":giver_troop_confirm", ":cur_object_troop_2", slot_troop_spouse),  # just to make sure
                  (eq, ":giver_troop", ":giver_troop_confirm"), # just to make sure
                  (assign, ":cur_object_troop", ":cur_object_troop_2"),
                (try_end),
                (gt, ":cur_object_troop", 0),#Skip lords without a lady
                (troop_get_type, ":cur_troop_gender", ":cur_object_troop"),
                (eq, ":cur_troop_gender", 1),#Skip if it is not female
                (gt, ":giver_center_no", 0),#Skip if lord is outside the center
                (troop_slot_eq, ":cur_object_troop", slot_troop_cur_center, ":giver_center_no"),#Skip if the lady is not at the same center
                (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),#Can fail
                (assign, ":cur_target_center", reg0),
                (neq, ":cur_target_center", ":giver_center_no"),
                (hero_can_join),#Skip if player has no available slots

                (assign, ":quest_object_troop", ":cur_object_troop"),
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":quest_expiration_days", 20),
                (assign, ":quest_dont_give_again_period", 30),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_deliver_message_to_enemy_lord"),
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (is_between, ":player_level", 5,25),
                (call_script, "script_cf_get_random_lord_from_another_faction_in_a_center", ":giver_faction_no"),#Can fail
                (assign, ":cur_target_troop", reg0),
                (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
                (assign, ":quest_target_center", reg0),#quest_target_center will definitely be a valid center
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (assign, ":quest_importance", 1),
                (assign, ":quest_xp_reward", 200),
                (assign, ":quest_gold_reward", 0),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 40),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
              (try_begin),
                (neq, ":giver_reputation", lrep_debauched),
                (neq, ":giver_reputation", lrep_quarrelsome),
                (ge, "$g_talk_troop_faction_relation", 0),
                (assign, ":end_cond", villages_end),
                (assign, ":cur_target_center", -1),
                (try_for_range, ":cur_village", villages_begin, ":end_cond"),
                  (party_slot_eq, ":cur_village", slot_town_lord, ":giver_troop"),
                  (party_slot_eq, ":cur_village", slot_village_infested_by_bandits, 1),
                  (party_slot_eq, ":cur_village", slot_village_state, svs_normal),
                  (assign, ":cur_target_center", ":cur_village"),
                  (assign, ":end_cond", 0),
                (try_end),
                (ge, ":cur_target_center", 0),
                (neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 30),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_raise_troops"),
              (try_begin),
                (neq, ":giver_reputation", lrep_martial),
                (neq, ":giver_faction_no", "fac_player_supporters_faction"), #we need tier_1_troop a valid value
                (ge, "$g_talk_troop_faction_relation", 0),
                (store_character_level, ":cur_level", "trp_player"),
                (gt, ":cur_level", 5),
                (troop_slot_ge, "trp_player", slot_troop_renown, 100),
                
                (store_random_in_range, ":quest_target_amount", 5, 8),
                (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
                (le, ":quest_target_amount", ":free_capacity"),
                (faction_get_slot, ":quest_object_troop", ":giver_faction_no", slot_faction_tier_1_troop),
                (store_random_in_range, ":level_up", 20, 40),
                (val_add, ":level_up", ":cur_level"),
                (val_div, ":level_up", 10),
                
                (store_mul, ":quest_gold_reward", ":quest_target_amount", 10),
                
                (assign, ":quest_target_troop", ":quest_object_troop"),
                (try_for_range, ":unused", 0, ":level_up"),
                  (troop_get_upgrade_troop, ":level_up_troop", ":quest_target_troop", 0),
                  (gt, ":level_up_troop", 0),
                  (assign, ":quest_target_troop", ":level_up_troop"),
                  (val_mul, ":quest_gold_reward", ":quest_gold_reward", 7),
                  (val_div, ":quest_gold_reward", ":quest_gold_reward", 4),
                (try_end),
                
                (assign, ":quest_xp_reward", ":quest_gold_reward"),
                (val_mul, ":quest_xp_reward", 3),
                (val_div, ":quest_xp_reward", 10),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 120),
                (assign, ":quest_dont_give_again_period", 15),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_collect_taxes"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (neq, ":giver_reputation", lrep_goodnatured),
                (neq, ":giver_reputation", lrep_upstanding),
                (ge, "$g_talk_troop_faction_relation", 0),
                (call_script, "script_cf_troop_get_random_leaded_town_or_village_except_center", ":giver_troop", ":giver_center_no"),
                (assign, ":quest_target_center", reg0),
                (assign, ":quest_importance", 1),
                (assign, ":quest_gold_reward", 0),
                (assign, ":quest_xp_reward", 100),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 50),
                (assign, ":quest_dont_give_again_period", 20),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_hunt_down_fugitive"),
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
                (assign, ":quest_target_center", reg0),
                (store_random_in_range, ":quest_target_dna", 0, 1000000),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 30),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_kill_local_merchant"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (this_or_next|eq, ":giver_reputation", lrep_quarrelsome),
                (this_or_next|eq, ":giver_reputation", lrep_cunning),
                (             eq, ":giver_reputation", lrep_debauched),
                (neg|faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),#Can not take the quest from the king
                (ge, "$g_talk_troop_faction_relation", 0),
                (gt, ":player_level", 5),
                (is_between, ":giver_center_no", towns_begin, towns_end),
                (assign, ":quest_importance", 1),
                (assign, ":quest_xp_reward", 300),
                (assign, ":quest_gold_reward", 1000),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 10),
                (assign, ":quest_dont_give_again_period", 30),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_bring_back_runaway_serfs"),
              (try_begin),
                (neq, ":giver_reputation", lrep_goodnatured),
                (neq, ":giver_reputation", lrep_upstanding),
                (ge, "$g_talk_troop_faction_relation", 0),
                (ge, ":player_level", 5),
                (gt, ":giver_center_no", 0),#Skip if lord is outside the center
                (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
                
                (assign, ":cur_object_center", -1),
                (try_for_range, ":cur_village", villages_begin, villages_end),
                  (party_slot_eq, ":cur_village", slot_town_lord, ":giver_troop"),
                  (store_distance_to_party_from_party, ":dist", ":cur_village", ":giver_center_no"),
                  (lt, ":dist", 25),
                  (assign, ":cur_object_center", ":cur_village"),
                (try_end),
                (ge, ":cur_object_center", 0),#Skip if the quest giver is not the owner of any villages around the center
                (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),
                (assign, ":cur_target_center", reg0),
                (neq, ":cur_target_center", ":giver_center_no"),#Skip current center
                (store_distance_to_party_from_party, ":dist", ":cur_target_center", ":giver_center_no"),
                (ge, ":dist", 20),
                (assign, ":quest_target_party_template", "pt_runaway_serfs"),
                (assign, ":quest_object_center", ":cur_object_center"),
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":quest_importance", 1),
                (assign, ":quest_xp_reward", 200),
                (assign, ":quest_gold_reward", 150),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 20),
                (assign, "$qst_bring_back_runaway_serfs_num_parties_returned", 0),
                (assign, "$qst_bring_back_runaway_serfs_num_parties_fleed", 0),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_follow_spy"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (neq, ":giver_reputation", lrep_goodnatured),
                (party_get_skill_level, ":tracking_skill", "p_main_party", "skl_tracking"),
                (ge, ":tracking_skill", 2),
                (ge, ":player_level", 10),
                (eq, "$g_defending_against_siege", 0), #Skip if the center is under siege (because of resting)
                (gt, ":giver_party_no", 0), #Skip if the quest giver doesn't have a party
                (gt, ":giver_center_no", 0), #skip if the quest giver is not in a center
                (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town), #skip if we are not in a town.
                (party_get_position, pos2, "p_main_party"),
                (assign, ":min_distance", 99999),
                (assign, ":cur_object_center", -1),
                (try_for_range, ":unused_2", 0, 10),
                  (call_script, "script_cf_get_random_enemy_center", ":giver_party_no"),
                  (assign, ":random_object_center", reg0),
                  (party_get_position, pos3, ":random_object_center"),
                  (map_get_random_position_around_position, pos4, pos3, 6),
                  (get_distance_between_positions, ":cur_distance", pos2, pos4),
                  (lt, ":cur_distance", ":min_distance"),
                  (assign, ":min_distance", ":cur_distance"),
                  (assign, ":cur_object_center", ":random_object_center"),
                  (copy_position, pos63, pos4), #Do not change pos63 until quest is accepted
                (try_end),
                (gt, ":cur_object_center", 0), #Skip if there are no enemy centers
                
                (assign, ":quest_object_center", ":cur_object_center"),
                (assign, ":quest_dont_give_again_period", 50),
                (assign, ":result", ":quest_no"),
                (assign, "$qst_follow_spy_run_away", 0),
                (assign, "$qst_follow_spy_meeting_state", 0),
                (assign, "$qst_follow_spy_meeting_counter", 0),
                (assign, "$qst_follow_spy_spy_back_in_town", 0),
                (assign, "$qst_follow_spy_partner_back_in_town", 0),
                (assign, "$qst_follow_spy_no_active_parties", 0),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_capture_enemy_hero"),
              (try_begin),
                (eq, "$players_kingdom", ":giver_faction_no"),
                (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
                (ge, ":player_level", 15),
                (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
                (assign, ":quest_target_faction", reg0),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 80),
                (assign, ":quest_gold_reward", 2000),
                (assign, ":result", ":quest_no"),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_lend_companion"),
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                (assign, ":total_heroes", 0),
                (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
                (try_for_range, ":i_stack", 0, ":num_stacks"),
                  (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
                  (troop_is_hero, ":stack_troop"),
                  (is_between, ":stack_troop", companions_begin, companions_end),
                  (store_character_level, ":stack_level", ":stack_troop"),
                  (ge, ":stack_level", 15),
                  (assign, ":is_quest_hero", 0),
                  (try_for_range, ":i_quest", 0, all_quests_end),
                    (check_quest_active, ":i_quest"),
                    (this_or_next|quest_slot_eq, ":i_quest", slot_quest_target_troop, ":stack_troop"),
                    (quest_slot_eq, ":i_quest", slot_quest_object_troop, ":stack_troop"),
                    (assign, ":is_quest_hero", 1),
                  (try_end),
                  (eq, ":is_quest_hero", 0),
                  (val_add, ":total_heroes", 1),
                (try_end),
                (gt, ":total_heroes", 0),#Skip if party has no eligible heroes
                (store_random_in_range, ":random_hero", 0, ":total_heroes"),
                (assign, ":total_heroes", 0),
                (assign, ":cur_target_troop", -1),
                (try_for_range, ":i_stack", 0, ":num_stacks"),
                  (eq, ":cur_target_troop", -1),
                  (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
                  (troop_is_hero, ":stack_troop"),
                  (is_between, ":stack_troop", companions_begin, companions_end),
                  (neq, ":stack_troop", "trp_player"),
                  (store_character_level, ":stack_level", ":stack_troop"),
                  (ge, ":stack_level", 15),
                  (assign, ":is_quest_hero", 0),
                  (try_for_range, ":i_quest", 0, all_quests_end),
                    (check_quest_active, ":i_quest"),
                    (this_or_next|quest_slot_eq, ":i_quest", slot_quest_target_troop, ":stack_troop"),
                    (quest_slot_eq, ":i_quest", slot_quest_object_troop, ":stack_troop"),
                    (assign, ":is_quest_hero", 1),
                  (try_end),
                  (eq, ":is_quest_hero", 0),
                  (val_add, ":total_heroes", 1),
                  (gt, ":total_heroes", ":random_hero"),
                  (assign, ":cur_target_troop", ":stack_troop"),
                (try_end),
                (is_between, ":cur_target_troop", companions_begin, companions_end),
                
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (store_current_day, ":quest_target_amount"),
                (val_add, ":quest_target_amount", 8),
                
                (assign, ":quest_importance", 1),
                (assign, ":quest_xp_reward", 300),
                (assign, ":quest_gold_reward", 400),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_dont_give_again_period", 30),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_collect_debt"),
              (eq, 1, 0), #disable this quest pending talk with armagan
              (try_begin),
                (ge, "$g_talk_troop_faction_relation", 0),
                # Find a vassal (within the same kingdom?)
                (call_script, "script_cf_get_random_lord_in_a_center_with_faction", ":giver_faction_no"),#Can fail
                (assign, ":quest_target_troop", reg0),
                (neq, ":quest_target_troop", ":giver_troop"),#Skip himself
                (call_script, "script_get_troop_attached_party", ":quest_target_troop"),
                (assign, ":quest_target_center", reg0),#cur_target_center will definitely be a valid center
                (neq, ":giver_center_no", ":quest_target_center"),#Skip current center
                
                (assign, ":quest_xp_reward", 30),
                (assign, ":quest_gold_reward", 40),
                (assign, ":result", ":quest_no"),
                (store_random_in_range, ":quest_target_amount", 6, 9),
                (val_mul, ":quest_target_amount", 500),
                (store_div, ":quest_convince_value", ":quest_target_amount", 5),
                (assign, ":quest_expiration_days", 90),
                (assign, ":quest_dont_give_again_period", 20),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_incriminate_loyal_commander"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (neq, ":giver_reputation", lrep_upstanding),
                (neq, ":giver_reputation", lrep_goodnatured),
                (eq, "$players_kingdom", ":giver_faction_no"),
                (ge, ":player_level", 10),
                (faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),
                (assign, ":try_times", 1),
                (assign, ":found", 0),
                (try_for_range, ":unused", 0, ":try_times"),
                  (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
                  (assign, ":cur_target_faction", reg0),
                  
                  (faction_get_slot, ":cur_target_troop", ":cur_target_faction", slot_faction_leader),
                  (assign, ":num_centerless_heroes", 0),
                  (try_for_range, ":cur_kingdom_hero", active_npcs_begin, active_npcs_end),
                    (troop_slot_eq, ":cur_kingdom_hero", slot_troop_is_alive, 1),  ## he's alive/active
                    (troop_slot_eq, ":cur_kingdom_hero", slot_troop_occupation, slto_kingdom_hero),
                    #(troop_slot_eq, ":cur_kingdom_hero", slot_troop_is_prisoner, 0),
                    (neg|troop_slot_ge, ":cur_kingdom_hero", slot_troop_prisoner_of_party, 0),
                    (neq, ":cur_target_troop", ":cur_kingdom_hero"),
                    (store_troop_faction, ":cur_kingdom_hero_faction", ":cur_kingdom_hero"),
                    (eq, ":cur_target_faction", ":cur_kingdom_hero_faction"),
                    ##                (call_script, "script_get_number_of_hero_centers", ":cur_kingdom_hero"),
                    ##                (eq, reg0, 0),
                    (val_add, ":num_centerless_heroes", 1),
                  (try_end),
                  (gt, ":num_centerless_heroes", 0),
                  (assign, ":cur_object_troop", -1),
                  (store_random_in_range, ":random_kingdom_hero", 0, ":num_centerless_heroes"),
                  (try_for_range, ":cur_kingdom_hero", active_npcs_begin, active_npcs_end),
                    (troop_slot_eq, ":cur_kingdom_hero", slot_troop_is_alive, 1),  ## he's alive/active
                    (eq, ":cur_object_troop", -1),
                    (troop_slot_eq, ":cur_kingdom_hero", slot_troop_occupation, slto_kingdom_hero),
                    (neq, ":cur_target_troop", ":cur_kingdom_hero"),
                    (store_troop_faction, ":cur_kingdom_hero_faction", ":cur_kingdom_hero"),
                    (eq, ":cur_target_faction", ":cur_kingdom_hero_faction"),
                    ##                (call_script, "script_get_number_of_hero_centers", ":cur_kingdom_hero"),
                    ##                (eq, reg0, 0),
                    (val_sub, ":random_kingdom_hero", 1),
                    (lt, ":random_kingdom_hero", 0),
                    (assign, ":cur_object_troop", ":cur_kingdom_hero"),
                  (try_end),
                  
                  (assign, ":cur_target_center", -1),
                  (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
                  (is_between, reg0, towns_begin, towns_end),
                  (party_slot_eq, reg0, slot_town_lord, ":cur_target_troop"),
                  (assign, ":cur_target_center", reg0),
                  
                  (assign, ":try_times", -1),#Exit the second loop
                  (assign, ":found", 1),
                (try_end),
                (eq, ":found", 1),
                
                (assign, "$incriminate_quest_sacrificed_troop", 0),
                
                (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
                (try_for_range, ":i_stack", 1, ":num_stacks"),
                  (eq , "$incriminate_quest_sacrificed_troop", 0),
                  (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
                  (neg|troop_is_hero, ":stack_troop"),
                  (store_character_level, ":stack_troop_level", ":stack_troop"),
                  (ge, ":stack_troop_level", 25),
                  (assign, "$incriminate_quest_sacrificed_troop", ":stack_troop"),
                (try_end),
                (gt, "$incriminate_quest_sacrificed_troop", 0),
                
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (assign, ":quest_object_troop", ":cur_object_troop"),
                (assign, ":quest_target_center", ":cur_target_center"),
                (assign, ":quest_target_faction", ":cur_target_faction"),
                
                (assign, ":quest_importance", 1),
                (assign, ":quest_xp_reward", 700),
                (assign, ":quest_gold_reward", 1000),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 180),
              (try_end),
            (else_try),
              (eq, ":quest_no", "qst_capture_prisoners"),
              (eq, "$player_has_homage", 0),
              
              (try_begin),
                (eq, "$players_kingdom", ":giver_faction_no"),
                (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
                (assign, ":cur_target_faction", reg0),
                (store_add, ":max_tier_no", slot_faction_tier_5_troop, 1),
                (store_random_in_range, ":random_tier_no", slot_faction_tier_2_troop, ":max_tier_no"),
                (faction_get_slot, ":cur_target_troop", ":cur_target_faction", ":random_tier_no"),
                (gt, ":cur_target_troop", 0),
                (store_random_in_range, ":quest_target_amount", 3, 7),
                (assign, ":quest_target_troop", ":cur_target_troop"),
                (assign, ":quest_target_faction", ":cur_target_faction"),
                (assign, ":quest_importance", 1),
                (store_character_level, ":quest_gold_reward", ":cur_target_troop"),
                (val_add, ":quest_gold_reward", 5),
                (val_mul, ":quest_gold_reward", ":quest_gold_reward"),
                (val_div, ":quest_gold_reward", 5),
                (val_mul, ":quest_gold_reward", ":quest_target_amount"),
                (assign, ":quest_xp_reward", ":quest_gold_reward"),
                (assign, ":result", ":quest_no"),
                (assign, ":quest_expiration_days", 90),
                (assign, ":quest_dont_give_again_period", 20),
              (try_end),
            (try_end),
          # (try_end),
        (try_end),
        #end of quest finding
        
        
        (try_begin),
          (neq, ":result", -1),
          
          (try_begin),
            (party_is_active, ":quest_target_center"),
            (store_faction_of_party, ":quest_target_faction", ":quest_target_center"),
          (try_end),
          
          (quest_set_slot, ":result", slot_quest_target_troop, ":quest_target_troop"),
          (quest_set_slot, ":result", slot_quest_target_center, ":quest_target_center"),
          (quest_set_slot, ":result", slot_quest_object_troop, ":quest_object_troop"),
          (quest_set_slot, ":result", slot_quest_target_faction, ":quest_target_faction"),
          (quest_set_slot, ":result", slot_quest_object_faction, ":quest_object_faction"),
          (quest_set_slot, ":result", slot_quest_object_center, ":quest_object_center"),
          (quest_set_slot, ":result", slot_quest_target_party, ":quest_target_party"),
          (quest_set_slot, ":result", slot_quest_target_party_template, ":quest_target_party_template"),
          (quest_set_slot, ":result", slot_quest_target_amount, ":quest_target_amount"),
          (quest_set_slot, ":result", slot_quest_importance, ":quest_importance"),
          (quest_set_slot, ":result", slot_quest_xp_reward, ":quest_xp_reward"),
          (quest_set_slot, ":result", slot_quest_gold_reward, ":quest_gold_reward"),
          (quest_set_slot, ":result", slot_quest_convince_value, ":quest_convince_value"),
          (quest_set_slot, ":result", slot_quest_expiration_days, ":quest_expiration_days"),
          (quest_set_slot, ":result", slot_quest_dont_give_again_period, ":quest_dont_give_again_period"),
          (quest_set_slot, ":result", slot_quest_current_state, 0),
          (quest_set_slot, ":result", slot_quest_giver_troop, ":giver_troop"),
          (quest_set_slot, ":result", slot_quest_giver_center, ":giver_center_no"),
          (quest_set_slot, ":result", slot_quest_target_dna, ":quest_target_dna"),
          (quest_set_slot, ":result", slot_quest_target_item, ":quest_target_item"),
        (try_end),
        
        (assign, reg0, ":result"),
    ]),
############################




############## NEW v3.9.1 - 
    ("ee_get_dynamic_quest",
      #Dynamic quests are rarer, more important quests
      #this is a separate script from get_quest, so that tavern keepers can scan all NPCs for quests
      [
        (store_script_param_1, ":giver_troop"),
        (store_script_param_2, ":quest_no"),
        
        (assign, ":result", -1),
        (assign, ":relevant_troop", -1),
        (assign, ":relevant_party", -1),
        (assign, ":relevant_faction", -1),
        
        (try_begin),
          (eq, ":giver_troop", -1),
          
        (else_try),
          #1 rescue prisoner,
          (eq, ":quest_no", "qst_rescue_prisoner"),
          (neg|check_quest_active, "qst_rescue_prisoner"),
		  
          (assign, ":target_troop", -1),
          (try_for_range, ":possible_prisoner", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":possible_prisoner", slot_troop_is_alive, 1),  ## he's alive/active
            (troop_get_slot, ":captor_location", ":possible_prisoner", slot_troop_prisoner_of_party),
            (is_between, ":captor_location", walled_centers_begin, walled_centers_end),
            (store_troop_faction, ":giver_troop_faction_no", ":giver_troop"),
            (store_faction_of_party, ":captor_location_faction_no", ":captor_location"),
            (store_relation, ":giver_captor_relation", ":giver_troop_faction_no", ":captor_location_faction_no"),
            (lt, ":giver_captor_relation", 0),
            
            (call_script, "script_troop_get_family_relation_to_troop", ":giver_troop", ":possible_prisoner"),
            (ge, reg0, 10),
            
            (assign, ":offered_parole", 0),
            (try_begin),
              (call_script, "script_cf_prisoner_offered_parole", ":possible_prisoner"),
              (assign, ":offered_parole", 1),
            (try_end),
            (eq, ":offered_parole", 0),
            
            (neg|party_slot_eq, ":captor_location", slot_town_lord, "trp_player"),
            
            (assign, ":target_troop", ":possible_prisoner"),
            (assign, ":target_party", ":captor_location"),
          (try_end),
          
          (gt, ":target_troop", -1),
          (assign, ":result", "qst_rescue_prisoner"),
          (assign, ":relevant_troop", ":target_troop"),
          (assign, ":relevant_party", ":target_party"),
          
        (else_try),
          #2 retaliate for border incident
          (eq, ":quest_no", "qst_retaliate_for_border_incident"),
          (neg|check_quest_active, "qst_retaliate_for_border_incident"),
		  
          (is_between, ":giver_troop", mayors_begin, mayors_end),
          (store_faction_of_troop, ":giver_faction", ":giver_troop"),
          (assign, ":target_leader", 0),
          
          (try_for_range, ":kingdom", "fac_kingdom_1", kingdoms_end),
            (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", ":giver_faction", ":kingdom"),
            (assign, ":diplomatic_status", reg0),
            (eq, ":diplomatic_status", -1),
            (assign, ":duration", reg1),
            (ge, ":duration", 10),
            
            
            (try_for_range, ":lord", active_npcs_begin, active_npcs_end),
              (troop_slot_eq, ":lord", slot_troop_is_alive, 1),  ## he's alive/active
              (store_faction_of_troop, ":lord_faction", ":lord"),
              (eq, ":lord_faction", ":kingdom"),
              
              (troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_debauched),
              
              (assign, ":target_leader", ":lord"),
              (assign, ":target_faction", ":kingdom"),
            (try_end),
          (try_end),
          (is_between, ":target_leader", active_npcs_begin, active_npcs_end),
          
          (assign, ":result", "qst_retaliate_for_border_incident"),
          (assign, ":relevant_troop", ":target_leader"),
          (assign, ":relevant_faction", ":target_faction"),
        (else_try), #Find bandit hideout
          (eq, ":quest_no", "qst_destroy_bandit_lair"),
          (neg|check_quest_active, "qst_destroy_bandit_lair"),
          
          #        (display_message, "@Checking for bandit lair quest"),
          
          (assign, ":lair_found", -1),
          
          (try_for_range, ":bandit_template", "pt_steppe_bandits", "pt_deserters"),
            (party_template_get_slot, ":bandit_lair", ":bandit_template", slot_party_template_lair_party),
            
            #No party is active because bandit lairs are removed as soon as they are attacked, by the player -- but can only be removed by the player. This will reset bandit lair to zero
            (gt, ":bandit_lair", "p_spawn_points_end"),
            
            (assign, ":closest_town", -1),
            (assign, ":score_to_beat", 99999),
            
            (try_for_range, ":town_no", towns_begin, towns_end),
              (store_distance_to_party_from_party, ":distance", ":bandit_lair", ":town_no"),
              (lt, ":distance", ":score_to_beat"),
              (assign, ":closest_town", ":town_no"),
              (assign, ":score_to_beat", ":distance"),
            (try_end),
            
            #(str_store_party_name, s7, ":closest_town"),
            #(party_get_slot, ":closest_town_lord", ":closest_town", slot_town_lord),
            #(str_store_troop_name, s8, ":closest_town_lord"),
            
            (party_slot_eq, ":closest_town", slot_town_lord, ":giver_troop"),
            (assign, ":lair_found", ":bandit_lair"),
          (try_end),
          
          (gt, ":lair_found", "p_spawn_points_end"),
          
          (assign , ":result", "qst_destroy_bandit_lair"),
          (assign, ":relevant_party", ":lair_found"),
        (else_try),  #3 - bounty on bandit party
          (eq, ":quest_no", "qst_track_down_bandits"),
          (neg|check_quest_active, "qst_track_down_bandits"),
		  
          (is_between, ":giver_troop", mayors_begin, mayors_end),
          
          (assign, ":cur_town", -1),
          (try_for_range, ":town", towns_begin, towns_end),
            (party_slot_eq, ":town", slot_town_elder, ":giver_troop"),
            (assign, ":cur_town", ":town"),
          (try_end),
          (gt, ":cur_town", -1),
          
          (call_script, "script_merchant_road_info_to_s42", ":cur_town"),
          (assign, ":bandit_party_found", reg0),
          (party_is_active, ":bandit_party_found"),
          (gt, ":bandit_party_found", 0),
          
          (try_begin),
            (eq, "$cheat_mode", 1),
            (display_message, "str_traveller_attack_found"),
          (try_end),
          
          (assign , ":result", "qst_track_down_bandits"),
          (assign, ":relevant_party", ":bandit_party_found"),
        (else_try),  #raid a caravan to start war
          (eq, ":quest_no", "qst_cause_provocation"),
          (neg|check_quest_active, "qst_cause_provocation"),
		  
          (store_faction_of_troop, ":giver_troop_faction", ":giver_troop"),
          
          (assign, ":junior_debauched_lord_in_faction", -1),
          (try_for_range, ":lord_in_faction", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":lord_in_faction", slot_troop_is_alive, 1),  ## he's alive/active
            (troop_slot_eq, ":lord_in_faction", slot_lord_reputation_type, lrep_debauched),
            (store_faction_of_troop, ":debauched_lord_faction", ":lord_in_faction"),
            (eq, ":debauched_lord_faction", ":giver_troop_faction"),
            (assign, ":junior_debauched_lord_in_faction", ":lord_in_faction"),
          (try_end),
          (eq, ":giver_troop", ":junior_debauched_lord_in_faction"),
          
          (assign, ":faction_to_attack", 0),
          (assign, ":faction_to_attack_score", 0),
          
          (try_for_range, ":faction_candidate", kingdoms_begin, kingdoms_end),
            (neq, ":faction_to_attack", -1),
            (neq, ":faction_candidate", ":giver_troop_faction"),
            (faction_slot_eq, ":faction_candidate", slot_faction_state, sfs_active),
            (neq, ":faction_candidate", "$players_kingdom"),
            
            (store_relation, ":relation", ":faction_candidate", ":giver_troop_faction"),
            
            (store_add, ":provocation_slot", ":giver_troop_faction", slot_faction_provocation_days_with_factions_begin),
            (val_sub, ":provocation_slot", kingdoms_begin),
            (faction_get_slot, ":provocation_days", ":faction_candidate", ":provocation_slot"),
            
            (try_begin),
              (lt, ":relation", 0),
              (assign, ":faction_to_attack", -1), #disqualifies if thefaction is already at war
            (else_try),
              (ge, ":provocation_days", 1),
              (assign, ":faction_to_attack", -1), #disqualifies if the faction has already provoked someone
            (else_try),
              (ge, ":relation", 0),
              (assign, ":faction_to_attack_temp_score", 2),
              #add in scores - no truce?
              
              (gt, ":faction_to_attack_temp_score", ":faction_to_attack_score"),
              
              (assign, ":faction_to_attack", ":faction_candidate"),
              (assign, ":faction_to_attack_temp_score", ":faction_to_attack_score"),
            (try_end),
          (try_end),
          
          (is_between, ":faction_to_attack", kingdoms_begin, kingdoms_end),
          
          (assign , ":result", "qst_cause_provocation"),
          (assign, ":relevant_faction", ":faction_to_attack"),
          
        (try_end),
        
        (assign, reg0, ":result"),
        (assign, reg1, ":relevant_troop"),
        (assign, reg2, ":relevant_party"),
        (assign, reg3, ":relevant_faction"),
    ]),
############################
############################
("ee_set_garrison_size",
  #
  [
      (store_script_param_1, ":garrison_strength"),
      (store_script_param_2, ":create_lords"),
        
        
      # (assign, reg23, ":garrison_strength"),
	  # (display_message, "@#######################################################"),      
	  # (display_message, "@garrison strength is {reg23}."),      
      (assign, ":garrison_strength_orig", ":garrison_strength"),
      
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),#add town garrisons
        (neq, ":center_no", "p_castle_player"),
        # (assign, ":garrison_strength", 32),
        # (assign, ":garrison_strength", 10),
        (assign, ":garrison_strength", ":garrison_strength_orig"),  ###### prevents the garrison_strength from snowballing and causing massive garrison sizes
        
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_town),
          #(assign, ":garrison_strength", 40),
          (val_add, ":garrison_strength", 10), 
          
          # (assign, reg23, ":garrison_strength"),
	      # (display_message, "@garrison strength for town is {reg23}."),      
          #tom
          (try_begin),
            (this_or_next|eq, ":center_no", "p_town_21_1"),
            (this_or_next|eq, ":center_no", "p_town_19_1"),
            (eq, ":center_no", "p_town_37_1"),
            # (assign, ":garrison_strength", 80),
            (val_add, ":garrison_strength", 40), 
          (try_end),
          #tom
          # rafi
          (try_begin),
            (eq, ":center_no", "p_town_26_1"),
            # (assign, ":garrison_strength", 80),
            (val_add, ":garrison_strength", 40), 
          (try_end),
          # rafi
        (try_end),
        
        # (str_store_party_name, s20, ":center_no"),
        (try_for_range, ":unused", 0, ":garrison_strength"),
          (call_script, "script_cf_reinforce_party", ":center_no"),
          
          # (party_get_num_companions, reg23, ":center_no"),
	      # (display_message, "@garrison size for {s20} is {reg23}."),      
        (try_end),
        
        ## ADD some XP initially
        (store_div, ":xp_rounds", ":garrison_strength", 5),
        (val_add, ":xp_rounds", 2),
        
        (game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
        # rafi no xp for joo
        (try_begin), #hard
          (eq, ":reduce_campaign_ai", 0),
          (assign, ":xp_addition_for_centers", 15000),
        (else_try), #moderate
          (eq, ":reduce_campaign_ai", 1),
          (assign, ":xp_addition_for_centers", 10000),
        (else_try), #easy
          (eq, ":reduce_campaign_ai", 2),
          (assign, ":xp_addition_for_centers", 5000),
        (try_end),
        
        (try_for_range, ":unused", 0, ":xp_rounds"),
          (party_upgrade_with_xp, ":center_no", ":xp_addition_for_centers", 0),
        (try_end),
        
        #Fill town food stores upto half the limit
        (call_script, "script_center_get_food_store_limit", ":center_no"),
        (assign, ":food_store_limit", reg0),
        (val_div, ":food_store_limit", 2),
        (party_set_slot, ":center_no", slot_party_food_store, ":food_store_limit"),
        
        #create lord parties
        
        (try_begin),
          (eq, ":create_lords", 1),
            (party_get_slot, ":center_lord", ":center_no", slot_town_lord),
            (ge, ":center_lord", 1),
            (troop_slot_eq, ":center_lord", slot_troop_leaded_party, 0),
            (call_script, "script_create_kingdom_hero_party", ":center_lord", ":center_no"),
            (assign, ":lords_party", "$pout_party"),
            (party_attach_to_party, ":lords_party", ":center_no"),
            (party_set_slot, ":center_no", slot_town_player_odds, 1000),
        (try_end),
        
      (try_end),
]),
####################################

####################
]###################
####################

from util_wrappers import *
from util_scripts import *
########################################
scripts_directives = [
]
########################################

############################################################
def modmerge_scripts(orig_scripts):
    # process script directives first
    process_script_directives(orig_scripts, scripts_directives)
    # add remaining scripts
    add_scripts(orig_scripts, scripts, True)
    
# Used by modmerger framework version >= 200 to merge stuff
# This function will be looked for and called by modmerger if this mod is active
# Do not rename the function, though you can insert your own merging calls where indicated
def modmerge(var_set):
    try:
        var_name_1 = "scripts"
        orig_scripts = var_set[var_name_1]
    
        
        # START do your own stuff to do merging
        
        modmerge_scripts(orig_scripts)

        # END do your own stuff
        
    except KeyError:
        errstring = "Variable set does not contain expected variable: \"%s\"." % var_name_1
        raise ValueError(errstring)