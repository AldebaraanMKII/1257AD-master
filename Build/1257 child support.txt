
players_children_begin = "trp_child_m"
players_children_end = "trp_kingdom_1_lord"

npc_children_female_begin = "trp_npc_child_f"
npc_children_female_end   = "trp_child_m"

npc_children_male_begin = "trp_npc_child_m"
npc_children_male_end   = "trp_npc_child_f"





   ["npc_bastard","Bastard","Bastard",tf_hero|tf_unmoveable_in_party_window, 0, reserved,  fac_commoners,[itm_tribal_warrior_outfit_b,itm_nomad_boots, itm_dagger, itm_throwing_knives],
   str_7|agi_11|int_8|cha_7|level(2),wp(80),knows_tracker_npc|
   knows_power_throw_3|knows_athletics_2|knows_power_strike_1,
   0x00000004bf0475c85f4e9592de4e574c00000000001e369c0000000000000000],


 # ##NPC CHILDREN
  ["npc_child_m","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m2","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m3","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m4","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m5","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m6","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m7","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m8","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m9","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m10","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m11","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m12","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m13","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m14","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m15","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m16","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m17","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m18","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m19","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m20","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m21","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m22","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m23","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m24","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m25","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m26","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m27","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m28","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m29","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m30","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m31","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m32","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m33","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m34","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m35","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m36","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m37","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m38","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m39","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["npc_child_m40","{!}Son","{!}Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],

  ["npc_child_f","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f2","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f3","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common|knows_trainer_3, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f4","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f5","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f6","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f7","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f8","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f9","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f10","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f11","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f12","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f13","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f14","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f15","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f16","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f17","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f18","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f19","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],

  ["npc_child_f20","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f21","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f22","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f23","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f24","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f25","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f26","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f27","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f28","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f29","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],

  ["npc_child_f30","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f31","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f32","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f33","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f34","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f35","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f36","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f37","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f38","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["npc_child_f39","{!}Daughter","{!}Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],


  ##PLAYER CHILDREN
  ["child_m","{!}Your Son","{!}Your Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["child_m2","{!}Your Son","{!}Your Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["child_m3","{!}Your Son","{!}Your Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_linen_shirt, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],
  ["child_m4","{!}Your Son","{!}Your Child",tf_child|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[itm_short_tunic, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, boys_face_younger_1, boys_face_younger_2],

  ["child_f","{!}Your Daughter","{!}Your Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["child_f2","{!}Your Daughter","{!}Your Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_b, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["child_f3","{!}Your Daughter","{!}Your Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_c, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
  ["child_f4","{!}Your Daughter","{!}Your Child",tf_child_f|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_child_dress_a, itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
                                                                                                                                                                                                                                                                                                                                                                                                                            
  ["child_f5","player children end","{!}Your Child",tf_child|tf_female|tf_hero|tf_randomize_face, 0, reserved, fac_commoners,[ itm_leather_boots], def_attrib|level(2),wp(20),knows_common, girls_face_younger_1, girls_face_younger_2],
##children end /\



############################### SIMPLE TRIGGERS
    (240.1,        # SEASONS (Check all 10 days) 116
      [
      
       (try_begin), 
  (eq, "$cheat_mode", 1), 
  (display_message, "@{!}CRASH debug - firing trigger 116"), 
  (try_end),
    
        (store_current_hours, ":hours"),
        (call_script, "script_game_get_date_text",0, ":hours"),
        
        (try_begin),
        (eq, "$game_date_speed", 0), 
          (is_between, "$g_cur_month", 3, 6), # spring
          (neq, "$shader_season", shader_spring),
          (assign, "$shader_season", shader_spring),
          (jump_to_menu, "mnu_season_change"),
        (else_try),
        (eq, "$game_date_speed", 0), 
          (is_between, "$g_cur_month", 6, 9), # summer
          (neq, "$shader_season", shader_summer),
          (assign, "$shader_season", shader_summer),
          (jump_to_menu, "mnu_season_change"),
        (else_try),
        (eq, "$game_date_speed", 0), 
          (is_between, "$g_cur_month", 9, 12), # autumn
          (neq, "$shader_season", shader_autumn),
          (assign, "$shader_season", shader_autumn),
          (jump_to_menu, "mnu_season_change"),
        (else_try),
        (eq, "$game_date_speed", 0), 
          (this_or_next|eq, "$g_cur_month", 12), # winter
          (is_between, "$g_cur_month", 1, 3), # winter
          (neq, "$shader_season", shader_winter),
          (assign, "$shader_season", shader_winter),
          (jump_to_menu, "mnu_season_change"),
        (end_try),
        
        ##ashley piggy-backing check if child is ready to grow-up
        (try_for_range, ":troop_no", players_children_begin, players_children_end), ##ashley TODO add more troops for ai children and create a new range in module_constants
        
        (troop_slot_eq, ":troop_no", slot_troop_occupation, cam_slto_child), ##only do this once
        # (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_retirement), ##don't do for dead or retired
        # (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, dplmc_slto_dead),
        (troop_get_slot, ":age", ":troop_no", slot_troop_age),
        (ge, ":age", 12), ##only continue if child old enough
        #(store_troop_faction, ":faction", ":troop_no),
        (try_begin),
        # (this_or_next|neq, ":faction", "$players_kingdom"), 
        # (neq, ":faction", "fac_player_supporters_faction"),    
        # (call_script, "script_activate_child", ":troop_no",1), ##1 = rival faction, 2 = players child make companion, 3 = players child make lord or lady
        # (else_try)
        (troop_slot_eq, ":troop_no", slot_troop_father, "trp_player"),
        (assign, "$child_var", ":troop_no"),
        (jump_to_menu, "mnu_ative_child_choice_father"),
        (else_try),
        (troop_slot_eq, ":troop_no", slot_troop_mother, "trp_player"), 
        (assign, "$child_var", ":troop_no"),
        (jump_to_menu, "mnu_ative_child_choice_mother"),    
        (else_try),
        (neg|troop_slot_eq, ":troop_no", slot_troop_father, "trp_player"),
        (neg|troop_slot_eq, ":troop_no", slot_troop_mother, "trp_player"), 
        (call_script, "script_cf_activate_child", ":troop_no",1), ##in case player is lord in a faction and child is not theirs
        (try_end),
        (else_try),
        #nothing
        (try_end),
        
        ##do the same for npc_child
        (try_for_range, ":troop", npc_children_male_begin, npc_children_female_end), ##ashley TODO add more troops for ai children and create a new range in module_constants
        
        (troop_slot_eq, ":troop", slot_troop_occupation, cam_slto_child), ##only do this once
        (troop_get_slot, ":age", ":troop", slot_troop_age),
        (try_begin),
        (ge, ":age", 12), ##only continue if child old enough
        (call_script, "script_cf_activate_child", ":troop",1),
        (try_end), 
        (try_end), 
        
        ##new 3.0 support activate_npc that start game as children. 
        (try_begin), 
        (troop_slot_eq, "trp_knight_40_3", slot_troop_occupation, cam_slto_child), 
        (troop_get_slot, ":age", "trp_knight_40_3", slot_troop_age), 
        (ge, ":age", 12), 
        (call_script, "script_cf_activate_child", "trp_knight_40_3",1),
        (try_end), 
        
        (try_begin), 
        (troop_slot_eq, "trp_knight_45_5", slot_troop_occupation, cam_slto_child), 
        (troop_get_slot, ":age", "trp_knight_45_5", slot_troop_age), 
        (ge, ":age", 12), 
        (call_script, "script_cf_activate_child", "trp_knight_45_5",1),
        (try_end), 
        
        (try_begin), 
        (troop_slot_eq, "trp_knight_48_2", slot_troop_occupation, cam_slto_child), 
        (troop_get_slot, ":age", "trp_knight_48_2", slot_troop_age), 
        (ge, ":age", 12), 
        (call_script, "script_cf_activate_child", "trp_knight_48_2",1),
        (try_end), 
        
        (try_begin), 
        (troop_slot_eq, "trp_knight_49_3", slot_troop_occupation, cam_slto_child), 
        (troop_get_slot, ":age", "trp_knight_49_3", slot_troop_age), 
        (ge, ":age", 12), 
        (call_script, "script_cf_activate_child", "trp_knight_49_3",1),
        (try_end), 
        
        (try_begin), 
        (troop_slot_eq, "trp_kingdom_48_lady_2", slot_troop_occupation, cam_slto_child), 
        (troop_get_slot, ":age", "trp_kingdom_48_lady_2", slot_troop_age), 
        (ge, ":age", 13), 
        (call_script, "script_cf_activate_child", "trp_kingdom_48_lady_2",1),
        (try_end), 
        
        ##4.3 forgot we can now use dead lords for children spawning if run out, need to expand search. 
         (try_for_range, ":troop", heroes_begin, heroes_end), ##ashley TODO add more troops for ai children and create a new range in module_constants
        
        (troop_slot_eq, ":troop", slot_troop_occupation, cam_slto_child), ##only do this once
        (troop_get_slot, ":age", ":troop", slot_troop_age),
        (try_begin),
        (is_between, ":age", 12, 14), ##only continue if child old enough
        (call_script, "script_cf_activate_child", ":troop",1),
        (try_end), 
        (try_end),    
        
        
        (try_begin), 
  (eq, "$cheat_mode", 1), 
  (display_message, "@{!}CRASH debug - DONE trigger 116"), 
  (try_end),
        
        
        
    ]),





  ##ashey new warn player village court is under attack.. 144 & destroy faction if looted
  (1, 
  [(map_free), #
  
  (try_begin), 
  (faction_slot_eq, "fac_player_supporters_faction",  slot_faction_state, sfs_active),
  (eq, "$warning_given", 0), 
  (neq, "$g_player_court", -1), 
  (party_slot_eq, "$g_player_court", slot_party_type, spt_village),
  (party_slot_eq, "$g_player_court", slot_village_state, svs_being_raided),
  (str_store_party_name, s6, "$g_player_court"), 
   #####
          (str_clear,s1),
          (assign, "$warning_given", 1), 
          (str_store_string,s1,"@Your village of {s6} where you keep your court is being raided! If it burns your new young kingdom is lost..."),
          (display_message, "@{s1}"),
          (jump_to_menu, "mnu_random_normal_events"),
          
    (else_try),
    (faction_slot_eq, "fac_player_supporters_faction",  slot_faction_state, sfs_active),
    (neq, "$g_player_court", -1),    
     (party_slot_eq, "$g_player_court", slot_party_type, spt_village),
     (party_slot_eq, "$g_player_court", slot_village_state, svs_looted), 
     (party_set_faction, "$g_player_court", "fac_no_faction"),  
     (disable_party, "$g_player_court"),  
     (party_relocate_near_party,"p_burnt_court","$g_player_court",0),
     (enable_party, "p_burnt_court"), 
     (val_sub, "$total_villages_founded", 1),
     (assign, ":center_found", 0),
       (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
        (party_is_active, ":walled_center"),
         (eq, ":center_found", 0),
         (store_faction_of_party, ":court_faction", ":walled_center"),
         (eq, ":court_faction", "fac_player_supporters_faction"),
         (assign, ":center_found", ":walled_center"),
       (try_end),
       (try_begin), 
       (ge, ":center_found", 1),
       (call_script, "script_add_notification_menu", "mnu_notification_court_lost", 0, 0),
       (else_try), 
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        #(faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, -1),
        (assign, "$g_player_court", -1),
        ##search for any other built villages...
        (try_for_range, ":built_village", "p_village_240", villages_end),
        (party_is_active, ":built_village"), 
        (neg|party_slot_ge,":built_village", slot_village_bound_center, 1), #only ones not bound to anywhere
        (store_faction_of_party, ":faction", ":built_village"),
        (eq, ":faction", "fac_player_supporters_faction"), 
        #(call_script, "script_give_center_to_lord", ":built_village", -1, 0),
        (party_set_slot, ":built_village", slot_town_lord, stl_unassigned), 
        (party_set_faction, ":built_village", "fac_no_faction"),  
        (val_sub, "$total_villages_founded", 1),
        (party_get_slot, ":farmer_party_no", ":built_village", slot_village_farmer_party),
          (try_begin),
            (gt, ":farmer_party_no", 0),
            (party_is_active, ":farmer_party_no"),
            (remove_party, ":farmer_party_no"),
          (try_end),
        (disable_party, ":built_village"),  
        (try_end), 
        
        ##disable built castle if still owned by player...
        (try_begin), 
        (party_is_active, "p_castle_89"), 
        (store_faction_of_party, ":faction", "p_castle_89"),
        (eq, ":faction", "fac_player_supporters_faction"), 
        (try_begin), 
        (eq, "$lair_on", 1),
        #(call_script, "script_give_center_to_lord", "p_castle_89", -1, 0),
        (party_set_slot, "p_castle_89", slot_town_lord, stl_unassigned), 
        (party_set_faction, "p_castle_89", "fac_no_faction"),  
        (disable_party, "p_castle_89"),  
        (else_try), 
        (party_relocate_near_party,"p_yourlair","p_castle_89",0),    
        (call_script, "script_give_center_to_faction_aux", "p_yourlair", "fac_player_faction"),
          (call_script, "script_give_center_to_lord", "p_yourlair", "trp_player", 0),
          (enable_party, "p_yourlair"),
          (assign, "$lair_on", 1),
          #(call_script, "script_give_center_to_lord", "p_castle_89", -1, 0),
          (party_set_slot, "p_castle_89", slot_town_lord, stl_unassigned),
          (party_set_faction, "p_castle_89", "fac_no_faction"),  
        (disable_party, "p_castle_89"),  
        (try_end), 
       (try_end),    
       
       
       
       (call_script, "script_appoint_faction_marshall", "fac_player_supporters_faction", "trp_player"), 
       (call_script, "script_check_and_finish_active_army_quests_for_faction", "fac_player_supporters_faction"),
       
       (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse), 
       
        (try_for_range, ":troop_no", heroes_begin, heroes_end), 
       (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
      #  (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_retirement),
        #  (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, dplmc_slto_dead),  #can't choose a dead hero!
          (store_troop_faction, ":lords_faction", ":troop_no"),
          (eq, ":lords_faction", "fac_player_supporters_faction"),
           (assign, ":new_faction", "fac_outlaws"),
          (try_begin),
        (eq, ":troop_no", "trp_player"),
        (assign, ":new_faction", 0), #kicked out of faction
    (else_try), 
    (neq, ":spouse", ":troop_no"), 
    (call_script, "script_troop_get_family_relation_to_troop", ":troop_no", "trp_player"), 
    (ge, reg0, 15), 
    (assign, ":new_faction", "fac_adventurers"), 
    (else_try),    
        (call_script, "script_lord_find_alternative_faction", ":troop_no"),        
        (assign, ":new_faction", reg0),
    (try_end),
    
    (try_begin),
        (is_between, ":new_faction", kingdoms_begin, kingdoms_end),
        
        (try_begin), 
        (eq, ":troop_no", ":spouse"),  
        (str_store_faction_name, s7, ":new_faction"), 
        (display_log_message, "@Rumors say your {reg59?husband:wife} has partitioned to join {s7}.", color_hero_news), 
        (assign, "$player_spouse_offer_new_faction", 1), 
        (try_end), 
                
        
        (call_script, "script_change_troop_faction", ":troop_no", ":new_faction"),
        (try_begin), #new-begin
          (neq, ":new_faction", "fac_player_supporters_faction"),
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_inactive), 
          (troop_set_slot, ":troop_no", slot_troop_occupation, slto_kingdom_hero), 
        (try_end), #new-end
        (str_store_faction_name, s10, ":new_faction"),
        (str_store_string, s11, "str_with_the_s10"),
    (else_try),
    (eq, ":new_faction", "fac_adventurers"), 
    (troop_set_faction, ":troop_no", "fac_adventurers"), 
     (call_script, "script_troop_set_title_according_to_faction", ":troop_no", "fac_outlaws"), #removes their title
    (else_try), 
        (neq, ":troop_no", "trp_player"),
        (call_script, "script_change_troop_faction", ":troop_no", "fac_outlaws"),
         (call_script, "script_troop_set_title_according_to_faction", ":troop_no", "fac_outlaws"),
        (str_store_string, s11, "str_outside_calradia"),
    (try_end),
    
     (try_for_range, ":kingdom_lady", heroes_begin, heroes_end),
     (this_or_next|is_between, ":kingdom_lady", npc_children_female_begin, players_children_end), #new 3.0 line
      (is_between, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end), #new 3.0 line
    #  (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
     ##new end
        (call_script, "script_get_kingdom_lady_social_determinants", ":kingdom_lady"),
        (assign, ":closest_male_relative", reg0),
        (assign, ":new_center", reg1),
        
        (eq, ":closest_male_relative", ":troop_no"),
        
        (troop_set_faction, ":kingdom_lady", ":new_faction"),
        (troop_slot_eq, ":kingdom_lady", slot_troop_prisoner_of_party, -1),
        (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, ":new_center"),
         # Jrider + TITLES v0.0 change ladies title
         (neq, ":new_faction", "fac_adventurers"), 
          (call_script, "script_troop_set_title_according_to_faction", ":kingdom_lady", ":new_faction"),
          # Jrider -
      (try_end),
        
        (try_begin), 
        (neq, ":new_faction", "fac_adventurers"), 
     # Jrider + TITLES v0.0 change ladies title
          (call_script, "script_troop_set_title_according_to_faction", ":troop_no", ":new_faction"),
          # Jrider -
      (try_end), 
      
    #Indictments, cont: Remove party 
    (troop_get_slot, ":led_party", ":troop_no", slot_troop_leaded_party),
    (try_begin),
        (party_is_active, ":led_party"),
        (try_begin), 
        (neq, ":led_party", "p_main_party"),
        (eq, ":new_faction", "fac_adventurers"), 
         (party_set_slot, ":led_party", slot_party_type, spt_kingdom_hero_party),
        (troop_set_slot, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        (party_set_faction, ":led_party", "fac_adventurers"),
        (store_random_in_range,":random_gold",1500,5000),
        (troop_get_slot, ":wealth", ":troop_no", slot_troop_wealth),
        (val_add, ":wealth", ":random_gold"),
        (troop_set_slot, ":troop_no", slot_troop_wealth, ":wealth"),
        (party_set_ai_behavior, ":led_party", ai_bhvr_hold),
        (party_set_banner_icon, ":led_party", 0),  
        (else_try), 
        (neq, ":led_party", "p_main_party"),
        (remove_party, ":led_party"),
        (troop_set_slot, ":troop_no", slot_troop_leaded_party, -1),
    (try_end),
   (try_end),     
       
     (try_end),       

        ##search for any remaining kingdom ladies that didn't switch factions... daughters and ladies with no male relative?
         (try_for_range, ":kingdom_lady", heroes_begin, heroes_end),
     (this_or_next|is_between, ":kingdom_lady", npc_children_male_begin, players_children_end), #include all possible children
      (is_between, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end), #
      (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_occupation, cam_slto_child), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
      (store_troop_faction, ":faction", ":kingdom_lady"), 
      (eq, ":faction", "fac_player_supporters_faction"), 
      (try_begin), 
      (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_father, "trp_player"), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_mother, "trp_player"), 
      (troop_set_faction, ":kingdom_lady", "fac_commoners"), 
      (troop_join, ":kingdom_lady"), 
      (troop_set_slot, ":kingdom_lady", slot_troop_occupation, slto_player_companion), 
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (else_try), 
      (is_between, ":kingdom_lady", npc_children_male_begin, players_children_end), #special situation for children 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, cam_slto_child), 
      (troop_get_slot, ":father", ":kingdom_lady", slot_troop_father), 
      (assign, ":found_relative", 0), 
        (try_begin), 
        (is_between, ":father", heroes_begin, heroes_end), 
        (troop_slot_eq, ":father", slot_troop_occupation, slto_kingdom_hero), 
        (store_troop_faction, ":father_fac", ":father"), 
        (is_between, ":father_fac", npc_kingdoms_begin, npc_kingdoms_end),  #exclude player faction
        (faction_slot_eq, ":father_fac", slot_faction_state, sfs_active), 
        (troop_set_faction, ":kingdom_lady", ":father_fac"), 
         (assign, ":found_relative", 1),         
        (else_try), 
        (troop_get_slot, ":mother", ":kingdom_lady", slot_troop_mother), 
        (is_between, ":mother", heroes_begin, heroes_end),
        (this_or_next|troop_slot_eq, ":mother", slot_troop_occupation, slto_kingdom_lady), 
        (troop_slot_eq, ":mother", slot_troop_occupation, slto_kingdom_hero), 
        (store_troop_faction, ":mother_fac", ":mother"), 
        (is_between, ":mother_fac", npc_kingdoms_begin, npc_kingdoms_end),
        (faction_slot_eq, ":mother_fac", slot_faction_state, sfs_active), 
        (troop_set_faction, ":kingdom_lady", ":mother_fac"), 
         (assign, ":found_relative", 1),     
        (try_end),  
      (eq, ":found_relative", 1),
      (else_try),
      (troop_slot_eq, ":kingdom_lady", slot_troop_spouse, "trp_player"),
      (neg|troop_slot_ge, ":kingdom_lady", slot_troop_prisoner_of_party, 1),
      (troop_set_faction, ":kingdom_lady", "fac_commoners"), 
      (troop_join, ":kingdom_lady"), 
      (troop_set_slot, ":kingdom_lady", slot_troop_occupation, slto_player_companion), 
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (else_try),
      (troop_set_faction, ":kingdom_lady", "fac_no_faction"),     
      (troop_set_slot, ":kingdom_lady", slot_troop_occupation, dplmc_slto_dead),
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (str_store_troop_name, s7, ":kingdom_lady"), 
      (display_log_message, "@You hear {s7} committed suicide rather then being taken hostage!", color_bad_news), 
            (try_begin), 
            (troop_slot_eq, ":kingdom_lady", slot_troop_spouse, "trp_player"),
            (troop_set_slot, ":kingdom_lady", slot_troop_spouse, -1),  
            (troop_set_slot, "trp_player", slot_troop_spouse, -1), 
            (try_end), 
      (try_end), 
     (try_end),  
      
        
              (assign, "$control_tax", 0),
              (call_script, "script_add_notification_menu", "mnu_notification_court_lost", 0, 0),
              (call_script, "script_deactivate_player_faction"), 
        (try_end),   
        (try_end), 
  
 
  ]), 





###################### SCRIPTS
##ashleys activate_child this script works for both player and npc children #TESTED 
##moves from child to adult
    ("cf_activate_child", 
    [
    (store_script_param, ":troop_no", 1),
    (store_script_param, ":choice", 2),  ##1 = AI child, 2 = player child become companion, 3 = player child all other
    
    (troop_slot_ge, ":troop_no", slot_troop_age, 12),
    
    (assign,":possible_result", -1),
    (assign, ":probable_result", -1),
    (assign, ":result", -1),
    

    
    ##FIRST WE NEED TO CHANGE TYPE FOR ALL FROM CHILDREN TO ADULTS...
    (store_random_in_range, ":rand", 1,6),
    (troop_get_type, ":is_female", ":troop_no"),
    (val_mod, ":is_female", 2),
    (try_begin), 
    (eq, ":is_female", 0), 
    (try_begin), 
    (eq, ":rand", 1), 
    (troop_set_type, ":troop_no", tf_tall_m), 
    (troop_raise_attribute, ":troop_no",ca_charisma,2),
    (else_try), 
    (eq, ":rand", 2),
    (troop_set_type, ":troop_no", tf_short), 
    (troop_raise_attribute, ":troop_no",ca_charisma,-1),
    (else_try), 
    (eq, ":rand", 3),
    (troop_set_type, ":troop_no", tf_fat), 
    (troop_raise_attribute, ":troop_no",ca_charisma,-2),
    (else_try), #two chances of being regular
    (troop_set_type, ":troop_no", tf_male), 
    (try_end), 
    (else_try), 
    (eq, ":is_female", 1), 
    (try_begin), 
    (eq, ":rand", 1), 
    (troop_set_type, ":troop_no", tf_tall_f), 
    (troop_raise_attribute, ":troop_no",ca_charisma,2),
    (else_try), 
    (eq, ":rand", 2),
    (troop_set_type, ":troop_no", tf_short_f), 
    (troop_raise_attribute, ":troop_no",ca_charisma,-1),
    (else_try), 
    (eq, ":rand", 3),
    (troop_set_type, ":troop_no", tf_fat_f), 
    (troop_raise_attribute, ":troop_no",ca_charisma,-3),
    (else_try), #two chances of being regular
    (troop_set_type, ":troop_no", tf_female), 
    (troop_raise_attribute, ":troop_no",ca_charisma,1),
    (try_end),
   (try_end),     
   
    (troop_get_slot, ":age", ":troop_no", slot_troop_age), 
      (troop_set_slot, ":troop_no", slot_troop_age_appearance, ":age"), 
      (troop_set_age, ":troop_no", ":age"), 
   
   ##set religion early...
   (try_begin), 
   (ge, ":choice", 2), #player child
   (troop_get_slot, ":religion", "trp_player", slot_troop_religion),    
   (troop_set_slot, ":troop_no", slot_troop_religion, ":religion"), 
   (else_try),
    (troop_get_slot, ":troops_father", ":troop_no", slot_troop_father), 
    (gt, ":troops_father", 0),      
     (troop_get_slot, ":religion", ":troops_father", slot_troop_religion),
     (troop_set_slot, ":troop_no", slot_troop_religion, ":religion"), 
    (else_try), 
     (troop_set_slot, ":troop_no", slot_troop_religion, 1),     
     (try_end), 
    
    (try_begin),
    (eq, ":choice", 1), ##only notification if rival lord 
    
      
    (troop_get_slot, ":troops_father", ":troop_no", slot_troop_father), 
    
    ##account for if father is dead. 
    (try_begin), 
    (troop_slot_eq, ":troops_father", slot_troop_occupation, dplmc_slto_dead),  
    (troop_get_slot, ":orig_faction", ":troop_no", slot_troop_original_faction_save), 
    (assign, ":kingdom", ":orig_faction"), 
    (assign, ":dead_father", 1), 
    (else_try),  
    (store_troop_faction, ":kingdom", ":troops_father"), 
    (assign, ":dead_father", 0), 
    (try_end), 
    
    ##we can now reset these slots as they have served there purpose
    (faction_set_slot, ":kingdom", slot_faction_father, -1),  
    (faction_set_slot, ":kingdom", slot_faction_mother, -1), 
    ##
    
    (call_script, "script_add_notification_menu", "mnu_notification_new_lord", ":kingdom", ":troop_no"), #
    
     
    (troop_set_faction, ":troop_no", ":kingdom"), ##should be set already, but just in case father has switched kingdoms while child was growing up
    (try_end), 
    
    ##AI LORD PERSONALITY CHILDREN START
    
    (troop_get_type, ":is_female", ":troop_no"),
    (val_mod, ":is_female", 2),
    ##here we randomize childs personality based off father and mother
   (try_begin), ##son 
    (eq, ":choice", 1), ##only lords son, player children will have to be done differently
    (eq, ":is_female", 0), 
    
    (try_begin), 
    (eq, ":dead_father", 0), 
    (troop_get_slot, ":fathers_personality", ":troops_father", slot_lord_reputation_type), 
    (troop_get_slot, ":kings_personality", ":troops_father", slot_king_reputation_type), #new incase father is king
    (else_try), 
    (troop_get_slot, ":fathers_personality", ":troops_father", remember_reputation_type), 
    (troop_get_slot, ":kings_personality", ":troops_father", remember_reputation_type), #new incase father is king
    (try_end), 
    
    
    (try_begin), 
    (this_or_next|eq, ":fathers_personality", lrep_martial),  #chiv
    (this_or_next|eq, ":kings_personality", cam_lrep_martial),
    (this_or_next|eq, ":kings_personality", cam_lrep_good),
    (eq, ":fathers_personality", lrep_goodnatured), 
    (assign, ":possible_result", 1), 
    (else_try), 
    (this_or_next|eq, ":fathers_personality", lrep_selfrighteous),  #cold blooded / mean types
    (this_or_next|eq, ":fathers_personality", lrep_quarrelsome),
    (this_or_next|eq, ":kings_personality", cam_lrep_cunning),
    (eq, ":fathers_personality", lrep_cunning), 
    (assign, ":possible_result", 2),
    (else_try), 
    (this_or_next|eq, ":kings_personality", cam_lrep_debauched),
    (eq, ":fathers_personality", lrep_debauched),    ##down right crazy
    (assign, ":possible_result", 3),
    (else_try),
    (this_or_next|eq, ":kings_personality", cam_lrep_upstanding),
    (eq, ":fathers_personality", lrep_upstanding),
    (assign, ":possible_result", 4),  ##good
    (else_try), 
    (this_or_next|eq, ":kings_personality", lrep_none),
    (eq, ":fathers_personality", lrep_none),
    (assign, ":probable_result", 0),
    (else_try),
    (assign, ":possible_result", 4),  ##good
    (try_end), 

    (try_begin), 
    (eq, ":possible_result", 1), 
    (store_random_in_range, ":rand", 1,4),
        (try_begin), 
        (eq, ":rand", 1), 
        (assign, ":probable_result", lrep_martial), 
        (else_try), 
        (eq, ":rand", 2),
        (assign, ":probable_result", lrep_goodnatured),
        (else_try), 
        (assign, ":probable_result", 0), ##somtimes father doesn't matter
        (try_end), 
    (else_try), 
    (eq, ":possible_result", 2),
    (store_random_in_range, ":rand", 1,5),
    (try_begin), 
        (eq, ":rand", 1), 
        (assign, ":probable_result", lrep_selfrighteous), 
        (else_try), 
        (eq, ":rand", 2),
        (assign, ":probable_result", lrep_quarrelsome),
        (else_try), 
        (eq, ":rand", 3),
        (assign, ":probable_result", lrep_cunning),
        (else_try), 
        (assign, ":probable_result", 0), ##somtimes father doesn't matter
        (try_end), 
    (else_try), 
    (eq, ":possible_result", 3),
    (assign, ":probable_result", lrep_debauched),    #cause crazy breeds crazy :)
    (else_try), 
    (eq, ":possible_result", 4),
    (store_random_in_range, ":rand", 1,3),
        (try_begin), 
        (eq, ":rand", 1), 
        (assign, ":probable_result", lrep_upstanding), 
        (else_try), 
        (assign, ":probable_result", 0), 
        (try_end), 
    (else_try), 
        (assign, ":probable_result", 0),     
    (try_end), 
    
        ##ADD MOTHERS INFLUENCE...
        
        (troop_get_slot, ":troops_mother", ":troop_no", slot_troop_mother),
        
        (try_begin), 
        (gt, ":troops_mother", 0), 
        (troop_get_slot, ":mothers_personality", ":troops_mother", slot_lord_reputation_type), 
        (else_try), 
        (store_random_in_range, ":mothers_personality", lrep_conventional, lrep_moralist), 
        (try_end), 
        
        #SET CHIV
        (try_begin), 
        (eq, ":probable_result", lrep_martial), 
        (try_begin),
        (eq, ":mothers_personality", lrep_moralist),
        (assign, ":result", lrep_goodnatured),
        (else_try), 
        #(eq, ":probable_result", lrep_martial), 
        (assign, ":result", lrep_martial),
        (try_end),
       (try_end),        
        
        (try_begin), 
        (eq, ":probable_result", lrep_goodnatured),
        (try_begin),
        (eq, ":mothers_personality", lrep_conventional), 
        (assign, ":result", lrep_martial),
        (else_try), 
        #(eq, ":probable_result", lrep_goodnatured),
        (assign, ":result", lrep_goodnatured),
        (try_end), 
        (try_end),
        
        ##SET COLD BLOODED / MEAN
        (try_begin), 
        (eq, ":probable_result", lrep_selfrighteous), 
        (try_begin), 
        (eq, ":mothers_personality", lrep_moralist),
        (assign, ":result", lrep_martial),
        (else_try), 
        (eq, ":probable_result", lrep_selfrighteous), 
        (eq, ":mothers_personality", lrep_ambitious),
        (assign, ":result", lrep_cunning),
        (else_try), 
        #(eq, ":probable_result", lrep_selfrighteous), 
        (assign, ":result", lrep_selfrighteous),
        (try_end), 
        (try_end),
        
        (try_begin), 
        (eq, ":probable_result", lrep_quarrelsome),
        (try_begin),
        (eq, ":mothers_personality", lrep_moralist),
        (assign, ":result", lrep_martial),
        (else_try), 
        #(eq, ":probable_result", lrep_quarrelsome),
        (assign, ":result", lrep_quarrelsome),
        (try_end), 
        (try_end),
        
        (try_begin), 
        (eq,  ":probable_result", lrep_cunning),
        (try_begin), 
        (eq, ":mothers_personality", lrep_moralist),
        (assign, ":result", lrep_martial),
        (else_try), 
        (eq,  ":probable_result", lrep_cunning),
        (eq, ":mothers_personality", lrep_conventional),
        (assign, ":result", lrep_selfrighteous),
        (else_try), 
        #(eq,  ":probable_result", lrep_cunning),
        (assign,  ":result", lrep_cunning),
        (try_end), 
        (try_end),
        
        #SET CRAZY
        (try_begin),
        (eq, ":probable_result", lrep_debauched),
        (eq, ":mothers_personality", lrep_moralist),
        (store_random_in_range, ":rand", 1,4), 
         (try_begin), 
         (eq, ":rand", 1), 
         (assign, ":result", lrep_quarrelsome),
         (else_try),
         (assign, ":result", lrep_cunning), 
         (try_end), 
        (else_try),
         (eq, ":probable_result", lrep_debauched),
        # (neq, ":mothers_personality", lrep_moralist), ##only a moralist can save them... but not completely
        (assign, ":result", lrep_debauched),     
      (try_end), 
      
      ##SET GOOD 
      (try_begin), 
      (eq, ":probable_result", lrep_upstanding),
      (assign, ":result", lrep_upstanding),
      (try_end), 
      
      ##RANSOMIZE SOME WITHOUT PARENT INFLUENCE BECAUSE IT HAPPENS IN LIFE
      (try_begin), 
      (eq,  ":probable_result", 0),
      (store_random_in_range, ":rand", 1, 6), 
      (try_begin), 
      (eq,  ":rand", 1),  
      (assign, ":result", lrep_martial), 
      (else_try), 
      (eq,  ":rand", 2),  
      (assign, ":result", lrep_selfrighteous),
      (else_try), 
      (eq,  ":rand", 3),  
      (assign, ":result", lrep_debauched),
      (else_try), 
      (eq,  ":rand", 4),  
      (assign, ":result", lrep_cunning),
      (else_try), 
      (assign, ":result", lrep_goodnatured),
      (try_end), 
     (try_end), 
    
     (try_begin),    
     (eq, ":result", -1), ##wasn't set by above..,
      (assign, ":result", lrep_martial),
    (try_end),  
    
      (troop_set_slot, ":troop_no", slot_lord_reputation_type, ":result"), 
      
      #banners!
      (faction_get_slot, ":faction_leader", ":kingdom", slot_faction_leader), 
        (faction_get_slot, ":cur_faction_banner", ":kingdom", slot_faction_banner),
        (val_sub, ":cur_faction_banner", banner_meshes_begin),
        (val_add, ":cur_faction_banner", banner_scene_props_begin),
        (val_add, ":cur_faction_banner", 1), ##lords banner
        (try_begin), 
        (this_or_next|troop_slot_eq, ":troop_no", slot_troop_father, ":faction_leader"), 
        (troop_slot_eq, ":troop_no", slot_troop_mother, ":faction_leader"), 
        (val_add, ":cur_faction_banner", 1), ##special extra banner for king/queen children
        (try_end), 
        
        (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, ":cur_faction_banner"),
        
        ##change hair style...
    (str_store_troop_face_keys, s3, ":troop_no"),
          (face_keys_get_hair, ":hair", s3),
          (store_random_in_range, ":hair", 1, 18), 
          (face_keys_set_hair, s3, ":hair"),
      (troop_set_face_keys, ":troop_no", s3),
      
      ##set titles! 
      (store_troop_faction, ":faction", ":troop_no"), 
      (call_script, "script_troop_set_title_according_to_faction", ":troop_no", ":faction"),   
      
      ##NOW FEMALE SIDE
                
     (else_try), 
     (eq, ":choice", 1), ##only a lords, player will have to be done differently 
     (eq, ":is_female", 1),     
     ##ancient women tended to follow in their mothers footsteps, but will randomize some with my own logic
     ##now moved to npc child grows, but give them their items now...
     
    (troop_clear_inventory, ":troop_no"), 
    (call_script, "script_add_lady_items", ":troop_no"),
    (troop_add_item, ":troop_no", "itm_leather_boots"), 
    (troop_equip_items, ":troop_no"), 
    
    ##change hair style...
    (str_store_troop_face_keys, s3, ":troop_no"),
          (face_keys_get_hair, ":hair", s3),
          (store_random_in_range, ":hair", 1, 18), 
          (face_keys_set_hair, s3, ":hair"),
      (troop_set_face_keys, ":troop_no", s3),
      
      (store_troop_faction, ":faction", ":troop_no"), 
      (call_script, "script_troop_set_title_according_to_faction", ":troop_no", ":faction"),   
    
    (try_end), 
    
    
        
    ###AI LORD PERSONALITY SETTING END    
    
    ##CHILD ACTIVATION START
    
    (try_begin),
    (this_or_next|eq, ":choice", 1),
    (eq, ":choice", 3), ##same code for both
    (troop_get_type, ":is_female", ":troop_no"),
    (val_mod, ":is_female", 2),
    (try_begin),
    (eq, ":is_female", 0), 
    (troop_set_slot, ":troop_no",  slot_troop_occupation, slto_kingdom_hero), 
    ##give banner to male child ##old
          # (assign, ":banner_offset", banners_end_offset),
          # (val_sub, ":banner_offset", 1),
          # (val_sub, ":banner_offset", "$g_companions_banner_id"),                            #
          # (store_add, ":banner_id", banner_scene_props_begin, ":banner_offset"),                    
          # (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, ":banner_id"),          
          # (val_add, "$g_companions_banner_id", 1), 
          
          ##new
        (faction_get_slot, ":faction_leader", ":kingdom", slot_faction_leader), 
        (faction_get_slot, ":cur_faction_banner", ":kingdom", slot_faction_banner),
        (val_sub, ":cur_faction_banner", banner_meshes_begin),
        (val_add, ":cur_faction_banner", banner_scene_props_begin),
        (val_add, ":cur_faction_banner", 1), ##lords banner
        (try_begin), 
        (this_or_next|troop_slot_eq, ":troop_no", slot_troop_father, ":faction_leader"), 
        (troop_slot_eq, ":troop_no", slot_troop_mother, ":faction_leader"), 
        (val_add, ":cur_faction_banner", 1), ##special extra banner for king/queen children
        (try_end), 
        
        ##new support for companions children use companions banners 
        (try_begin), 
        (is_between, ":troops_father", companions_begin, companions_end), 
        (troop_get_slot, ":companion_banner", ":troops_father", slot_troop_banner_scene_prop), 
        (gt, ":companion_banner", 0), 
        (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, ":companion_banner"), 
        (else_try), 
        (is_between, ":troops_mother", companions_begin, companions_end),
        (troop_get_slot, ":companion_banner", ":troops_mother", slot_troop_banner_scene_prop), 
        (gt, ":companion_banner", 0), 
        (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, ":companion_banner"), 
        (else_try), 
        (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, ":cur_faction_banner"),   
        (try_end), 
         ##new end 
          
        (str_store_troop_name_plural, s12, ":troop_no"),
          
          
          (try_begin),
            # (troop_add_item, ":troop_no", "itm_saddle_horse", 0),
            # (troop_add_item, ":troop_no", "itm_courser", 0),
            # (troop_add_item, ":troop_no", "itm_courtly_outfit",0),
            # (troop_add_item, ":troop_no", "itm_haubergeon",0),
            # (troop_add_item, ":troop_no", "itm_gambeson",0),
            # (troop_add_item, ":troop_no", "itm_sword_medieval_c",0),
            # (troop_add_item, ":troop_no", "itm_wooden_shield",0),
            
            ##new 4.3 we need to ranomize this a bit so all children don't dress the same...
            (troop_clear_inventory, ":troop_no"),
            (troop_get_slot, ":npc_race", ":troop_no", slot_troop_race),
            (troop_get_inventory_slot,":cur_item1",":troop_no",ek_body),
            (try_begin),
              (gt, ":cur_item1", 0),
              (troop_remove_item, ":troop_no", ":cur_item1"),
            (try_end), 
             (troop_get_inventory_slot,":cur_item12",":troop_no",ek_head),
            (try_begin),
              (gt, ":cur_item12", 0),
              (troop_remove_item, ":troop_no", ":cur_item12"),
            (try_end),  
            (troop_get_inventory_slot,":cur_item13",":troop_no",ek_foot),
            (try_begin),
              (gt, ":cur_item13", 0),
              (troop_remove_item, ":troop_no", ":cur_item13"),
            (try_end), 
            (try_begin), 
            (eq, ":npc_race", cb7_foreigner),
            (troop_add_item, ":troop_no", "itm_arabian_horse_a", 0),
            (store_random_in_range, ":new_shirt", "itm_roman_shirt", "itm_roman_scal_arm"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_roman_scal_arm", "itm_romanbreastplate"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_red_plum", "itm_briton_helm"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_rich_roman_sandal", "itm_saxon_boots"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_roman_long_sh", "itm_briton_long_sh"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_roman_long_sword", "itm_scimitar_b"),
            (troop_add_item, ":troop_no", ":new_sword"),
            (troop_add_item, ":troop_no", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_anglesaxon),
            (troop_add_item, ":troop_no", "itm_sumpter_horse", 0),
            (store_random_in_range, ":new_shirt", "itm_saxon_shirt_red", "itm_saxon_padded"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_saxon_rich_jerkin", "itm_north_scotti_paint"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_saxon_warmask_main_b", "itm_frank_furcap"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_saxon_boots", "itm_common_roman_sandal"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_wood_medium_d", "itm_wood_small_a"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_saxon_long_seax", "itm_pic_sword"),
            (troop_add_item, ":troop_no", ":new_sword"),
            (troop_add_item, ":troop_no", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_scotopict),
            (store_random_in_range, ":new_horse", "itm_pic_saddle_feather", "itm_arrows"),
            (troop_add_item, ":troop_no", ":new_horse"),
            (store_random_in_range, ":new_shirt", "itm_pic_shirt", "itm_pic_celtic"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_pic_padded", "itm_irish_shirt"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_pic_helmet", "itm_saxon_cap_a"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_nomad_boots", "itm_mail_chausses"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_new_pic_ssh", "itm_nordic_shield"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_pic_sword", "itm_north_brit_sword"),
            (troop_add_item, ":troop_no", ":new_sword"),
            (troop_add_item, ":troop_no", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_irish),
            (troop_add_item, ":troop_no", "itm_steppe_horse", 0),
            (store_random_in_range, ":new_shirt", "itm_irish_shirt", "itm_irish_robed_b"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_irish_light_arm", "itm_frank_shirt"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_ev_coif_c", "itm_ev_cap_nas"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_ankle_boots", "itm_splinted_leather_greaves"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_new_irish_rsh", "itm_new_wood_medium"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_irish_celtic_sword", "itm_frank_basterd_sword"),
            (troop_add_item, ":troop_no", ":new_sword"),
            (troop_add_item, ":troop_no", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_frank),
            (store_random_in_range, ":new_horse", "itm_sumpter_horse2", "itm_mule"),
            (troop_add_item, ":troop_no", ":new_horse"),
            (store_random_in_range, ":new_shirt", "itm_frank_shirt", "itm_frank_padded"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_frank_robed", "itm_frank_byrnie_b"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_frank_carol", "itm_frank_boar_cap"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_splinted_leather_greaves", "itm_sarranid_boots_a"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_wood_large_a", "itm_wood_medium_a"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_frank_basterd_sword", "itm_danes_two_handed_b"),
            (troop_add_item, ":troop_no", ":new_sword"),
            (troop_add_item, ":troop_no", "itm_heavy_francisca_axes", 0),
            (else_try), 
            (eq, ":npc_race", cb7_scot),
            (troop_add_item, ":troop_no", "itm_n_briton_hunter", 0),
            (store_random_in_range, ":new_shirt", "itm_north_scotti_paint_cloth", "itm_scotti_light_padded"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_scotti_rich_padded", "itm_pic_naked"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_new_briton_helmm_b", "itm_pic_helmet_b"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_black_greaves", "itm_rich_roman_sandal"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_basic_sheild_leather", "itm_roman_long_sh"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (troop_add_item, ":troop_no", "itm_north_brit_sword"),
            (troop_add_item, ":troop_no", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_briton),
            (troop_add_item, ":troop_no", "itm_courser", 0),
            (store_random_in_range, ":new_shirt", "itm_briton_shirt", "itm_briton_shirt_north_b"),
            (troop_add_item, ":troop_no", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_briton_lightarmor_a", "itm_briton_old_mail"),
            (troop_add_item, ":troop_no", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_briton_helm", "itm_pic_helmet"),
            (troop_add_item, ":troop_no", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_hunter_boots", "itm_splinted_leather_greaves"),
            (troop_add_item, ":troop_no", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_wood_large_d", "itm_dragon_wood_sheild"),
            (troop_add_item, ":troop_no", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_briton_celtic_sword", "itm_arthurs_sword"),
            (troop_add_item, ":troop_no", ":new_sword"),
            (troop_add_item, ":troop_no", "itm_javelin", 0),
            (else_try), 
            (call_script, "script_equip_new_noble", ":troop_no"), 
            
            (try_end), 
            
        (try_end),
        (troop_equip_items, ":troop_no"),
         
        (troop_set_slot, ":troop_no", slot_troop_wealth, 2500),     
        
     (else_try), ##is female
        (troop_set_slot, ":troop_no",  slot_troop_occupation, slto_kingdom_lady), 
        (str_store_string, s14, "str_lady_s12"),
     (try_end),  
    
    (call_script, "script_change_troop_renown", ":troop_no", 50), ##more renown for all now older
    
    
    
    
    ##set culture for all if not already done
    (try_begin), 
     (troop_slot_eq, ":troop_no", slot_troop_original_faction, 0),
    (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
     (party_is_active, ":walled_center"),
    (party_get_slot, ":castle_lord", ":walled_center", slot_town_lord),
    (eq, ":castle_lord", ":troops_father"), 
    (party_get_slot, ":fief_culture", ":walled_center", slot_center_original_faction),
     (troop_set_slot, ":troop_no", slot_troop_original_faction, ":fief_culture"),
     (try_end), 
     (try_end), 
     
    
    (else_try),     
        #
    (try_end),     
        
    ###CHILD ACTIVATION END    
    
    ##SETTING PLAYER CHILD START VARIBLE 
    (troop_get_slot, ":child_personality", ":troop_no", slot_lord_reputation_type), 
    
    (try_begin), ##here it gets tricky we need to consider if the player is a ruler, a lord, or neither??    
    (this_or_next|eq, ":choice", 2), 
    (eq, ":choice", 3),
    
    ##change hair style...
    (str_store_troop_face_keys, s3, ":troop_no"),
          (face_keys_get_hair, ":hair", s3),
          (store_random_in_range, ":hair", 1, 18), 
          (face_keys_set_hair, s3, ":hair"),
      (troop_set_face_keys, ":troop_no", s3),
    
    #banners!
    (try_begin), 
    (troop_get_type, ":is_female", ":troop_no"),
    (val_mod, ":is_female", 2),
    (eq, ":is_female", 0), 
    
      (assign, ":child_banners_start", "mesh_banner_player_child01"), 
        (val_sub, ":child_banners_start", banner_meshes_begin),
        (val_add, ":child_banners_start", banner_scene_props_begin),
        
        (try_begin), 
        (eq, "$total_children", 1),
        (else_try), 
        (eq, "$total_children", 2),
        (val_add, ":child_banners_start", 1),
        (else_try), 
        (eq, "$total_children", 3),
        (val_add, ":child_banners_start", 2),
        (else_try), 
        (eq, "$total_children", 4),
        (val_add, ":child_banners_start", 3),
        (else_try), 
        (val_add, ":child_banners_start", 4),
        (try_end), 
        
        (troop_set_slot, ":troop_no", slot_troop_banner_scene_prop, ":child_banners_start"),
      (else_try), 
      (call_script, "script_add_player_daughter_items", ":troop_no"),
    (try_end),     
    
    
    (this_or_next|eq, ":child_personality", 0),
    (this_or_next|eq, ":child_personality", lrep_none),
    (eq, ":child_personality", -1),  ##dont set if already done by random events...
    
    
    ##HERE WE SET PLAYERS CHILD PERSONALITY
    (assign, ":player_honor_var", "$player_honor"), 
    (troop_get_type, ":is_female", ":troop_no"),
    (val_mod, ":is_female", 2),
    # (try_begin), ##4.0 changes, lets add some more variety like we did with npc children...
    # (lt, ":player_honor_var", -20), 
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_debauched),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_ambitious), 
    # (try_end), 
    # (else_try), 
    # (lt, ":player_honor_var", -10), 
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_cunning),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_adventurous), 
    # (try_end), 
    # (else_try), 
    # (lt, ":player_honor_var", -5), 
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_quarrelsome),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_adventurous), 
    # (try_end), 
    # (else_try), 
    # (lt, ":player_honor_var", 0),
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_selfrighteous),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_conventional), 
    # (try_end), 
    # (else_try),
    # (ge, ":player_honor_var", 30),
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_upstanding),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_moralist), 
    # (try_end), 
    # (else_try), 
    # (gt, ":player_honor_var", 10),
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_goodnatured),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_otherworldly), 
    # (try_end), 
    # (else_try),
    # (ge, ":player_honor_var", 0),
    # (try_begin),
    # (eq, ":is_female", 0),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_martial),    
    # (else_try), 
    # (eq, ":is_female", 1),
    # (troop_set_slot, ":troop_no", slot_lord_reputation_type, lrep_conventional), 
    # (try_end), 
    # (try_end),
    (try_begin), 
    (ge, ":player_honor_var", 30), #good
    (assign, ":possible_result", 1), #good
    (else_try), 
    (gt, ":player_honor_var", 10),
    (assign, ":possible_result", 2), #chiv
    (else_try), 
    (ge, ":player_honor_var", 0), #standard
    (assign, ":possible_result", 0),
    (else_try),
    (lt, ":player_honor_var", -25), 
    (assign, ":possible_result", 3),  ##mean / crazy
    (else_try), 
    (le, ":player_honor_var", -10), #self-righteous
    (assign, ":probable_result", 4),
    (else_try),
    (assign, ":possible_result", 5),  ##
    (try_end), 
    
    (try_begin), 
    (this_or_next|eq, ":is_female", tf_male), 
    (eq, ":is_female", 0),
    
    (try_begin), 
    (eq, ":possible_result", 1), 
    (store_random_in_range, ":rand", 1,4),
    
        (try_begin), 
        (eq, ":rand", 1), 
        (assign, ":probable_result", lrep_upstanding), 
        (else_try), 
        (eq, ":rand", 2),
        (assign, ":probable_result", lrep_goodnatured),
        (else_try), 
        (assign, ":probable_result", 0), ##sometimes father doesn't matter
        (try_end), 
        
    (else_try), 
    (eq, ":possible_result", 2),
    (store_random_in_range, ":rand", 1,5),
    
    (try_begin), 
        (eq, ":rand", 1), 
        (assign, ":probable_result", lrep_martial), 
        (else_try), 
        (eq, ":rand", 2),
        (assign, ":probable_result", lrep_selfrighteous),
        (else_try), 
        (eq, ":rand", 3),
        (assign, ":probable_result", lrep_martial),
        (else_try), 
        (assign, ":probable_result", 0), ##sometimes father doesn't matter
        (try_end), 
        
    (else_try), 
    (eq, ":possible_result", 3),
    (assign, ":probable_result", lrep_debauched),    #cause crazy breeds crazy :)
    (else_try), 
    (eq, ":possible_result", 4),
    (store_random_in_range, ":rand", 1,4),
    
        (try_begin), 
        (eq, ":rand", 1), 
        (assign, ":probable_result", lrep_cunning), 
        (else_try), 
        (eq, ":rand", 2), 
        (assign, ":probable_result", lrep_selfrighteous), 
        (else_try), 
        (assign, ":probable_result", lrep_quarrelsome), 
        (try_end), 
        
    (else_try), 
        (assign, ":probable_result", 0),     
     (try_end), 
    
    ##ADD SPOUSES INFLUENCE...
        
        (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
        
        (try_begin), 
        (lt, ":player_spouse", 0), 
        (assign, ":player_spouse", "$previous_wife"), 
        (try_end),     
        
        (try_begin), 
        (gt, ":player_spouse", 0), 
        (troop_get_slot, ":wife_personality", ":player_spouse", slot_lord_reputation_type), 
        (else_try), 
        (store_random_in_range, ":wife_personality", lrep_conventional, lrep_moralist), #teachers personality random
        (try_end), 
        
        #SET CHIV
        (try_begin), 
        (eq, ":probable_result", lrep_martial), 
        
        (try_begin),
        (this_or_next|eq, ":wife_personality", lrep_upstanding), 
        (this_or_next|eq, ":wife_personality", lrep_benefactor), 
        (eq, ":wife_personality", lrep_moralist),
        (assign, ":result", lrep_goodnatured),
        (else_try), 
        (assign, ":result", lrep_martial),
        (try_end),
        
        (else_try), 
        (eq, ":probable_result", lrep_goodnatured),
        
        (try_begin),
        (this_or_next|eq, ":wife_personality", lrep_martial), 
        (eq, ":wife_personality", lrep_conventional), 
        (assign, ":result", lrep_martial),
        (else_try), 
        (assign, ":result", lrep_goodnatured),
        (try_end), 
        
        (else_try), 
        (eq, ":probable_result", lrep_selfrighteous), 
        
        (try_begin), 
        (this_or_next|eq, ":wife_personality", lrep_upstanding), 
        (this_or_next|eq, ":wife_personality", lrep_benefactor), 
        (eq, ":wife_personality", lrep_moralist),
        (assign, ":result", lrep_martial),
        (else_try), 
        (this_or_next|eq, ":wife_personality", lrep_cunning),
        (this_or_next|eq, ":wife_personality", lrep_roguish),
        (eq, ":wife_personality", lrep_ambitious),
        (assign, ":result", lrep_cunning),
        (else_try), 
        (assign, ":result", lrep_selfrighteous),
        (try_end), 
        
        (else_try), 
        (eq, ":probable_result", lrep_quarrelsome),
        
        (try_begin),
        (this_or_next|eq, ":wife_personality", lrep_upstanding), 
        (this_or_next|eq, ":wife_personality", lrep_goodnatured), 
        (eq, ":wife_personality", lrep_moralist),
        (assign, ":result", lrep_martial),
        (else_try), 
        (this_or_next|eq, ":wife_personality", lrep_cunning),
        (this_or_next|eq, ":wife_personality", lrep_roguish),
        (eq, ":wife_personality", lrep_ambitious),
        (assign, ":result", lrep_cunning),
        (else_try), 
        (assign, ":result", lrep_quarrelsome),
        (try_end), 
        
        (else_try), 
        (eq,  ":probable_result", lrep_cunning),
        
        (try_begin), 
        (this_or_next|eq, ":wife_personality", lrep_upstanding), 
        (eq, ":wife_personality", lrep_moralist),
        (assign, ":result", lrep_quarrelsome),
        (else_try), 
        (this_or_next|eq, ":wife_personality", lrep_goodnatured), 
        (eq, ":wife_personality", lrep_conventional),
        (assign, ":result", lrep_selfrighteous),
        (else_try), 
        (assign,  ":result", lrep_cunning),
        (try_end), 
        
        (else_try), 
        (eq, ":probable_result", lrep_debauched),
        (this_or_next|eq, ":wife_personality", lrep_upstanding), 
        (eq, ":wife_personality", lrep_moralist),
        (store_random_in_range, ":rand", 1,4), 
        
         (try_begin), 
         (eq, ":rand", 1), 
         (assign, ":result", lrep_quarrelsome),
         (else_try),
         (assign, ":result", lrep_cunning), 
         (try_end), 
         
        (else_try),
        (eq, ":probable_result", lrep_debauched),
        (assign, ":result", lrep_debauched),     
     
      (else_try), 
        (eq, ":probable_result", lrep_upstanding),
        
        (try_begin),
        (this_or_next|eq, ":wife_personality", lrep_cunning),
        (this_or_next|eq, ":wife_personality", lrep_roguish),
        (this_or_next|eq, ":wife_personality", lrep_debauched),
        (eq, ":wife_personality", lrep_ambitious),
        (store_random_in_range, ":rand", 0, 2), 
        (try_begin), 
        (eq, ":rand", 0), 
         (assign, ":result", lrep_goodnatured),     
         (else_try), 
          (assign, ":result", lrep_selfrighteous), 
        (try_end), 
        
        (else_try), 
      (assign, ":result", lrep_upstanding),
       (try_end),    
        ##RANSOMIZE SOME WITHOUT PARENT INFLUENCE BECAUSE IT HAPPENS IN LIFE
      (else_try), 
      (eq,  ":probable_result", 0),
      (store_random_in_range, ":rand", 1, 6), 
      
      (try_begin), 
      (eq,  ":rand", 1),  
      (assign, ":result", lrep_martial), 
      (else_try), 
      (eq,  ":rand", 2),  
      (assign, ":result", lrep_selfrighteous),
      (else_try), 
      (eq,  ":rand", 3),  
      (assign, ":result", lrep_debauched),
      (else_try), 
      (eq,  ":rand", 4),  
      (assign, ":result", lrep_cunning),
      (else_try), 
      (assign, ":result", lrep_goodnatured),
      (try_end), 
      
     (else_try), 
      (assign, ":result", lrep_martial),
    (try_end),  
    (troop_set_slot, ":troop_no", slot_lord_reputation_type, ":result"), 
    (try_end), 
    (else_try), ##now do for daughters
    ###done in menu
    (try_end),
    #(store_troop_faction, ":faction", ":troop_no"),         (assign, "$temp2", 1),     
    
    
    (try_begin),
    (eq, ":choice", 3),
    #(store_troop_faction, ":players_faction", "trp_player"),
    (try_begin), 
    (eq, "$temp2", 3), ##do nothing lady will join players court
    (troop_set_slot, ":troop_no", slot_troop_occupation, slto_kingdom_lady), 
    (else_try), 
    (this_or_next|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active), ##easy player is king/queen
    (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
    (eq, "$temp2", 1), 
    (troop_set_faction, ":troop_no", "$players_kingdom"), 
    (troop_set_slot, ":troop_no", slot_troop_occupation, slto_kingdom_hero), 
    (assign, "$kid_feith_talk", 1),
    #(call_script, "script_setup_troop_meeting", ":troop_no", -1),
    (else_try), 
    (eq, "$temp2", 2), 
    (troop_set_faction, ":troop_no", "fac_adventurers"),
    (assign, "$kid_bye_talk", 1),
    (troop_set_slot, ":troop_no", slot_troop_occupation, slto_kingdom_hero), 
    #(call_script, "script_setup_troop_meeting", ":troop_no", -1),
    (else_try), #they are a lord and need to ask king for permission
    (troop_set_faction, ":troop_no", "$players_kingdom"), 
    #(faction_get_slot, ":players_king", "$players_kingdom", slot_faction_leader), 
    (assign, "$king_ask_kid", 1), 
    #(call_script, "script_setup_troop_meeting", ":players_king", -1),
    (display_message, "@You need to talk to your ruler about granting your child a fief"),
    (try_end),
    
    (else_try), 
    (eq, ":choice", 2), #easy, join as companion...
    (troop_set_slot, ":troop_no", slot_troop_occupation, slto_player_companion), 
    (troop_join, ":troop_no"),
    (try_end), 
        
    ]
  ),
  
  
  
##ashleys kill lord TESTED 
	("kill_lord",
  [
	(store_script_param_1, ":lord"),
	#(store_script_param_2, ":length"),
	
	(assign, ":save_reg0", reg0), 
	
	(store_troop_faction, ":faction", ":lord"), 
	(troop_set_slot, ":lord", slot_troop_original_faction_save, ":faction"), ##save for child codes
	
	(faction_get_slot, ":faction_leader", ":faction", slot_faction_leader), 
	(faction_get_slot, ":marshall", ":faction", slot_faction_marshall),
	
   
	
	
	# free up the decease's fief
      (try_for_range, ":fief", centers_begin, centers_end),
	  (party_is_active, ":fief"),
        (party_get_slot, ":town_lord", ":fief", slot_town_lord),
        (eq, ":town_lord", ":lord"),
		(party_set_slot, ":fief", slot_town_lord, stl_unassigned),
        (call_script, "script_give_center_to_faction", ":fief", ":faction"),
      (try_end),

	  (try_begin), 
	(gt, ":marshall", -1),
	#(neq, ":faction_leader", ":lord"),
	(eq, ":marshall", ":lord"),  
	(call_script, "script_appoint_faction_marshall", ":faction", -1), 
	(try_end), 
	
	(try_begin), #new 3.0 free up child slots
	(is_between, ":lord", players_children_begin, players_children_end), 
	(try_begin), 
	(eq, "$player_is_child", 1), 
	(this_or_next|eq, ":lord", "trp_child_f"), 
	(eq, ":lord", "trp_child_m"), 
	(troop_set_age,  ":lord", 1), 
	(troop_set_name, ":lord", "@Your child"), 
	(troop_set_note_available, ":lord", 0),
	(troop_set_slot, ":lord", slot_lord_reputation_type, -1), 
	(troop_set_slot, ":lord", slot_lady_last_suitor, -1),
	(troop_set_slot, ":lord", slot_troop_father, -1), 
	(troop_set_slot, ":lord", slot_troop_mother, -1),
	(else_try), 
	(troop_set_slot, ":lord", slot_lord_reputation_type, -1), 
	 (troop_set_slot, ":lord", slot_lady_last_suitor, -1),
	#(troop_set_note_available, ":lord", 0),   
	(try_end), 
	 (try_begin), 
	 (eq, ":lord", "trp_child_m"), 
	 (assign, "$first_son_set", 0),
	# (else_try),  ##outdated
	# (eq, ":lord", "trp_child_m2"),
	# (assign, "$2nd_son_set", 0),
	# (else_try), 
	# (eq, ":lord", "trp_child_m3"),
	# (assign, "$3rd_son_set", 0),
	# (else_try),
	# (eq, ":lord", "trp_child_m4"),
	# (assign, "$4th_son_set", 0),
	# (else_try),
	# (eq, ":lord", "trp_child_f"),
	# (assign, "$first_daughter_set", 0),
	# (else_try),
	# (eq, ":lord", "trp_child_f2"),
	# (assign, "$2nd_daughter_set", 0),
	# (else_try),
	# (eq, ":lord", "trp_child_f3"),
	# (assign, "$3rd_daughter_set", 0),
	# (else_try),
	# (eq, ":lord", "trp_child_f4"),
	# (assign, "$4th_daughter_set", 0),
	 (try_end), 
   (try_end), 	
   
   (try_begin), 
  (is_between, ":lord", npc_children_male_begin, players_children_end),  
	 (this_or_next|troop_slot_eq, ":lord", slot_troop_mother, "trp_player"), 
	 (troop_slot_eq, ":lord", slot_troop_father, "trp_player"), 
	 (val_sub, "$total_children", 1), 
	 (val_max, "$total_children", 0),  
   (try_end), 
   
   
   
   ##new handle if lord had un-grown children and was their last living parent. 
   (try_for_range, ":children", npc_children_male_begin, npc_children_female_end), 
   (troop_slot_eq, ":children", slot_troop_occupation, cam_slto_child), 
   (is_between, ":children", heroes_begin, heroes_end),
   (troop_get_slot, ":mother", ":children", slot_troop_mother), 
   (troop_get_slot, ":father", ":children", slot_troop_father), 	
   
   (try_begin), 
   (eq, ":mother", ":lord"), #dead was mother
   (is_between, ":father", heroes_begin, heroes_end),  
   (troop_slot_ge, ":father", slot_troop_occupation, slto_retirement), ##father dead also. 
   (call_script, "script_troop_get_family_relation_to_troop", ":children", "trp_player"), ##make sure not players grandchild / or nephews etc
   
   (try_begin), 
   (lt, reg0, 4), 
   (troop_set_slot, ":children", slot_troop_occupation, slto_inactive),  
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (str_store_troop_name, s6, ":children"), 
   (display_message, "@{s6} has become an orphan, and disappears.", color_bad_news), 
   (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1), 	
   (else_try), 
   (ge, reg0, 4), #4.4 bug fix 
   (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),    
   (display_message, "@Your {s11} {s6}, has become an orphan, and joined your faction.", color_hero_news),
   (troop_set_faction, ":children", "$players_kingdom"), 
   (else_try), 
    (troop_set_slot, ":children", slot_troop_occupation, slto_inactive), 
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (try_end), 
   
   (else_try), 
   (eq, ":mother", ":lord"),
   (lt, ":father", 0), 
   (call_script, "script_troop_get_family_relation_to_troop", ":children", "trp_player"), ##make sure not players grandchild / or nephews etc
	
   (try_begin), 
   (lt, reg0, 4), 
   (troop_set_slot, ":children", slot_troop_occupation, slto_inactive), 
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (str_store_troop_name, s6, ":children"), 
   (display_message, "@{s6} has become an orphan, and disappears.", color_bad_news),
   (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (else_try), ##was related to player... 
   (ge, reg0, 4), #4.4 bug fix 
   (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),    
   (display_message, "@Your {s11} {s6}, has become an orphan, and joined your faction.", color_hero_news),
   (troop_set_faction, ":children", "$players_kingdom"), 
   (else_try), 
    (troop_set_slot, ":children", slot_troop_occupation, slto_inactive), 
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (try_end), 
   
   (else_try), 
   (eq, ":father", ":lord"),
   (is_between, ":mother", heroes_begin, heroes_end),  
   (troop_slot_ge, ":mother", slot_troop_occupation, slto_retirement), #
   (call_script, "script_troop_get_family_relation_to_troop", ":children", "trp_player"), ##make sure not players grandchild / or nephews 
   
   (try_begin), 
   (lt, reg0, 4), 
   (troop_set_slot, ":children", slot_troop_occupation, slto_inactive),
    (troop_set_slot, ":children", slot_troop_age, 1),    
	(troop_set_note_available, ":children", 0),
	(str_store_troop_name, s6, ":children"), 
   (display_message, "@{s6} has become an orphan, and disappears.", color_bad_news), 
    (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (else_try), ##was related to player... 
   (ge, reg0, 4), #4.4 bug fix 
   (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),    
   (display_message, "@Your {s11} {s6}, has become an orphan, and joined your faction.", color_hero_news),
   (troop_set_faction, ":children", "$players_kingdom"), 
   (else_try), 
    (troop_set_slot, ":children", slot_troop_occupation, slto_inactive), 
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (try_end), 
   
   (else_try), 
   (eq, ":father", ":lord"),
   (lt, ":mother", 0), 
   (call_script, "script_troop_get_family_relation_to_troop", ":children", "trp_player"), ##make sure not players grandchild / or nephews 
   
   (try_begin), 
   (lt, reg0, 4), 
   (troop_set_slot, ":children", slot_troop_occupation, slto_inactive), 
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (str_store_troop_name, s6, ":children"), 
   (display_message, "@{s6} has become an orphan, and disappears.", color_bad_news), 
     (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (else_try), ##was related to player... 
   (ge, reg0, 4), #4.4 bug fix 
   (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),    
   (display_message, "@Your {s11} {s6}, has become an orphan, and joined your faction.", color_hero_news),
   (troop_set_faction, ":children", "$players_kingdom"), 
   (else_try), 
    (troop_set_slot, ":children", slot_troop_occupation, slto_inactive), 
   (troop_set_slot, ":children", slot_troop_age, 1), 
   (troop_set_note_available, ":children", 0),
   (troop_set_slot, ":children", slot_troop_mother, -1), 
   (troop_set_slot, ":children", slot_troop_father, -1),  
   (try_end),
   
   (try_end),    
   
  (try_end),  #child loop
	  
	
	
	
	  
	  (try_begin), 
	  (check_quest_active, "qst_freelancer_enlisted"), 
	  (eq, ":lord", "$enlisted_lord"), 
	 # (call_script, "script_end_quest", "qst_freelancer_enlisted"),
	 (display_log_message, "@Your enlisted lord has died, you are released from service.", color_bad_news),
		(call_script, "script_event_player_discharge"),
	  (try_end), 
	
	##remove from faction...and or find new leader, just don't do it for Arthur father I like seeing him in the notes.
	##but first set original faction as we will need this for child scripts
   (try_begin), 
	(eq, ":faction_leader", ":lord"),  
	(call_script, "script_find_new_leader", ":faction", ":lord"), 
	(else_try), 
	(neq, ":lord", "trp_knight_1_8"),
	 (troop_set_faction, ":lord", "fac_no_faction"), 
	(try_end), 
	
	
	
	
	 
	 ##check for kill Arthur quest
	 (try_begin), 
	 (check_quest_active, "qst_kill_arthur"), 
	 (quest_slot_eq, "qst_kill_arthur", slot_quest_current_state, 2),
	 (eq, ":lord", "trp_kingdom_1_lord"), 
	 (eq, ":lord", "$g_talk_troop"), #make sure this was a player kill
	 (call_script, "script_succeed_quest", "qst_kill_arthur"), 
	 (quest_set_slot, "qst_kill_arthur", slot_quest_current_state, 3), 
	 (str_store_string, s2, "@Arthur is dead. Bring the news to the jarl."),
      (add_quest_note_from_sreg, "qst_kill_arthur", 6, s2, 0),
	 (else_try), 
	 (check_quest_active, "qst_kill_arthur"), 
	 (quest_slot_eq, "qst_kill_arthur", slot_quest_current_state, 2),
	 (eq, ":lord", "trp_kingdom_1_lord"), #but not a player kill
	 (call_script, "script_end_quest", "qst_kill_arthur"), 
	 (display_log_message, "@Arthur has been killed by another, your quest has canceled.",color_hero_news), 
	 (try_end), 
	
     
     
     (try_begin), 
     (troop_slot_eq, ":lord", slot_lord_granted_courtship_permission, 4), 
     (troop_set_slot, ":lord", slot_lord_granted_courtship_permission, 0),
     (try_begin), 
        (troop_slot_eq, ":lord", slot_troop_betrothed, "trp_player"),
        (troop_set_slot, ":lord", slot_troop_betrothed, -1),
        (troop_set_slot, "trp_player", slot_troop_betrothed, -1),
        (str_store_troop_name, s6, ":lord"), 
        (display_log_message, "@As {s6} has died before your vows could be carried out, your engagement is cancelled!", color_terrible_news),  
        (try_end), 
       (try_begin), 
       (check_quest_active, "qst_wed_betrothed_female"), 
       (quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, ":lord"), 
       (call_script, "script_abort_quest", "qst_wed_betrothed_female", 0), 
       (try_end), 
     (else_try), 
     (troop_slot_ge, ":lord", slot_lord_granted_courtship_permission, 1), 
     (troop_set_slot, ":lord", slot_lord_granted_courtship_permission, 0),   
     (try_end), 
     
     ##handle quests
      #(troop_get_slot, ":led_party", ":lord", slot_troop_leaded_party),
	 ##remove any active quests from this person...slot_quest_object_troop
	  (try_for_range, ":quest", "qst_deliver_message", "qst_quests_end"), 
   (check_quest_active, ":quest"), 
   (quest_get_slot, ":giver", ":quest", slot_quest_giver_troop),
   (quest_get_slot, ":target", ":quest", slot_quest_target_troop),   
   (quest_get_slot, ":object", ":quest", slot_quest_object_troop), 
  # (quest_get_slot, ":party", ":quest", slot_quest_target_party), 
   (try_begin),
   (eq, ":target", ":lord"),
   (eq, ":quest", "qst_kill_arthur"), 
   #skip
   (else_try),
   (assign, ":quest_to_cancel", -1), 
   (try_begin), 
   (this_or_next|eq, ":giver", ":lord"), 
   (this_or_next|eq, ":object", ":lord"), 
   #(this_or_next|eq, ":party", ":led_party"), 
   (eq, ":target", ":lord"),  
   (assign, ":quest_to_cancel", ":quest"), 
   (try_end), 
   (gt, ":quest_to_cancel", -1), 
   (call_script, "script_cancel_quest", ":quest_to_cancel"), 
   (try_end), 
   (try_end), 
	 
	
    #: Remove party 
	(try_begin),
	(troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero), 
	(troop_get_slot, ":led_party", ":lord", slot_troop_leaded_party),
		(party_is_active, ":led_party"),
		(try_begin), 
		 (party_get_attached_to, ":led_party_attached", ":led_party"),
        (is_between, ":led_party_attached", centers_begin, centers_end),
		(party_detach, ":led_party"),
		(try_end), 
		(neq, ":led_party", "p_main_party"),
		(remove_party, ":led_party"),
		(troop_set_slot, ":lord", slot_troop_leaded_party, -1),
		
	(try_end),
    
    (troop_set_slot, ":lord", slot_troop_occupation, dplmc_slto_dead),
     
     (troop_get_slot, ":spouse", ":lord", slot_troop_spouse),
	 
	(try_begin), 
    (eq, ":spouse", -1),  	##only do if not married
	  # (try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),  ##ash off not right place as will just assign new love interests
          # (troop_get_slot, ":courted_lady", ":lord", ":love_interest_slot"),
		  # (is_between,":courted_lady", kingdom_ladies_begin, kingdom_ladies_end),  
		  # (neg|troop_slot_ge, ":courted_lady", slot_troop_occupation, slto_retirement),
          # (call_script, "script_courtship_event_lady_break_relation_with_suitor", ":courted_lady", ":lord"),
        # (try_end),
		##new 
		(try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
							 (troop_get_slot, ":courted_lady", ":lord", ":love_interest_slot"),
							 (this_or_next|is_between,":courted_lady", players_children_begin, players_children_end), 
							 (is_between,":courted_lady", kingdom_ladies_begin, kingdom_ladies_end),  
							(troop_set_slot, ":lord", ":love_interest_slot", -1),

						(try_end),
						
			(try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
							(troop_set_slot, ":lord", ":love_interest_slot", -1),
						(try_end),			
						
				##
				#Break any ladies romantic relations with lord
						(try_for_range, ":active_npc", heroes_begin, heroes_end),
							(try_for_range, ":love_interest_slot", slot_troop_love_interest_1, slot_troop_love_interests_end),
								(troop_slot_eq, ":active_npc", ":love_interest_slot", ":lord"),
								(call_script, "script_courtship_event_lady_break_relation_with_suitor", ":lord", ":active_npc"),
							(try_end),
						(try_end),		
						
						(troop_get_slot, ":betrothed", ":lord", slot_troop_betrothed), 
						(try_begin),
						(ge, ":betrothed", 0), 	
							(troop_set_slot, ":betrothed", slot_troop_betrothed, -1),
							(troop_set_slot, ":lord", slot_troop_betrothed, -1),
	
						(try_end),
				(try_end), 		
						
	### deal with any spouses 
	
			(try_begin), 
			(ge, ":spouse", 0), 
			(troop_set_slot, ":spouse", slot_troop_spouse, -1),
			(troop_set_slot, ":lord", slot_troop_spouse, -1),
			
			(is_between, ":spouse", heroes_begin, heroes_end), ##exclude player!!
			(troop_slot_eq, ":spouse", slot_troop_occupation, slto_kingdom_lady), ##is a lady!!
			(call_script, "script_get_kingdom_lady_social_determinants", ":spouse"), 
	(assign, ":closest_male_relative", reg0),
	#(assign, ":new_center", reg1),
	
	(try_begin), 
	(this_or_next|eq, ":closest_male_relative", ":spouse"), #speaks for herself 
	(eq, ":closest_male_relative", -1), ##she has no one else!!
	
	(try_begin), ##see if her faction is still active. 
	(store_troop_faction, ":lady_faction", ":spouse"), 
	(faction_slot_eq, ":lady_faction", slot_faction_state, sfs_active), 
	(faction_get_slot, ":leader", ":lady_faction", slot_faction_leader),
	(ge, ":leader", 0), 
	(call_script, "script_lord_get_home_center", ":leader"),
	(assign, ":center", reg0),
	##skip prisoner check in this case as she has no family to ransom her
	(troop_set_slot, ":spouse", slot_troop_cur_center, ":center"), #is fine, as lady can now speak for herself
	(else_try), 
	(this_or_next|faction_slot_eq, ":lady_faction", slot_faction_state, sfs_inactive), 
    (faction_slot_eq, ":lady_faction", slot_faction_state, sfs_defeated), 
	(troop_set_slot, ":spouse", slot_troop_cur_center, -1),
	(troop_set_slot, ":spouse", slot_troop_occupation, dplmc_slto_dead), #free her up for respawn scripts
	(try_end), 
	
	(else_try), 
	
	(is_between, ":closest_male_relative", heroes_begin, heroes_end),  
	(call_script, "script_lord_get_home_center", ":closest_male_relative"),
	(assign, ":center", reg0),
	(store_troop_faction, ":new_faction", ":closest_male_relative"), 
	(troop_set_faction, ":spouse", ":new_faction"),
	(call_script, "script_troop_set_title_according_to_faction", ":spouse", ":new_faction"), 
	
	 (try_begin), 
	(neg|troop_slot_ge, ":spouse", slot_troop_prisoner_of_party, 0), 
	(troop_set_slot, ":spouse", slot_troop_cur_center, ":center"),
	 (try_end), 
	 
	(else_try),
	(eq, ":closest_male_relative", "trp_player"), 
	(store_troop_faction, ":new_faction", "trp_player"), 
	(troop_set_faction, ":spouse", ":new_faction"),
	(call_script, "script_troop_set_title_according_to_faction", ":spouse", ":new_faction"), 
	
	(else_try), #fake relative? shouldn't be possible here though
	
	(troop_set_slot, ":spouse", slot_troop_cur_center, -1),
	(troop_set_slot, ":spouse", slot_troop_occupation, dplmc_slto_dead), #free her up for respawn scripts
	(try_end), 
	
	
	 (try_end),		
 
	
	(try_begin), 
	 (this_or_next|is_between, ":lord", npc_children_female_begin, players_children_end), #new 3.0 line
	(is_between, ":lord", kingdom_ladies_begin, kingdom_ladies_end), 
	(troop_set_slot, ":lord", slot_troop_cur_center, -1), ##will reset new center when recycled  
	(try_end), 
	
	
	##new 3.0 account for if was a guardian
	(try_begin), 
	(is_between, ":lord", active_npcs_begin, active_npcs_end), 
	
	(try_for_range, ":lady", npc_children_female_begin, kingdom_ladies_end), 
	  (this_or_next|is_between, ":lady", npc_children_female_begin, players_children_end), #new 3.0 line
	  (is_between, ":lady", kingdom_ladies_begin, kingdom_ladies_end), #new 3.0 line
	  (troop_slot_eq, ":lady", slot_troop_occupation, slto_kingdom_lady), 
	(troop_slot_eq, ":lady", slot_troop_guardian, ":lord"), 
	(troop_set_slot, ":lady", slot_troop_guardian, -1), #reset
	#first see if they have anyone else...
	(call_script, "script_get_kingdom_lady_social_determinants", ":lady"), 
	(assign, ":male_relative", reg0), 
	
	(try_begin), 
	(this_or_next|eq, ":male_relative", ":lady"),
	(eq, ":male_relative", -1), ##she has no one else!!
	
	(try_begin), ##see if her faction is still active. 
	(store_troop_faction, ":lady_faction", ":lady"), 
	(faction_slot_eq, ":lady_faction", slot_faction_state, sfs_active), 
	(faction_get_slot, ":leader", ":lady_faction", slot_faction_leader),
	(ge, ":leader", 0),  
	(call_script, "script_lord_get_home_center", ":leader"),
	(assign, ":center", reg0),
	##skip prisoner check in this case as she has no family to ransom her
	(troop_set_slot, ":lady", slot_troop_cur_center, ":center"), #is fine, as lady can now speak for herself
	(else_try), 
	(faction_slot_eq, ":lady_faction", slot_faction_state, sfs_inactive), 
	(troop_set_slot, ":lady", slot_troop_cur_center, -1),
	(troop_set_slot, ":lady", slot_troop_occupation, dplmc_slto_dead), #free her up for respawn scripts
	(try_end), 
	
	(else_try), 
	(is_between, ":male_relative", heroes_begin, heroes_end),  
	(call_script, "script_lord_get_home_center", ":male_relative"),
	(assign, ":center", reg0),
	(store_troop_faction, ":new_faction", ":male_relative"), 
	(troop_set_faction, ":lady", ":new_faction"),
	(call_script, "script_troop_set_title_according_to_faction", ":lady", ":new_faction"), 
	
	(try_begin), 
	(neg|troop_slot_ge, ":lady", slot_troop_prisoner_of_party, 0), 
	(troop_set_slot, ":lady", slot_troop_cur_center, ":center"),
	 (try_end), 
	 
	(else_try),
	(eq, ":male_relative", "trp_player"), 
	(store_troop_faction, ":new_faction", "trp_player"), 
	(troop_set_faction, ":lady", ":new_faction"),
	(call_script, "script_troop_set_title_according_to_faction", ":lady", ":new_faction"), 
	
	(else_try), #fake relative? shouldn't be possible here though
	(troop_set_slot, ":lady", slot_troop_cur_center, -1),
	(troop_set_slot, ":lady", slot_troop_occupation, dplmc_slto_dead), #free her up for respawn scripts
	(try_end), 
   (try_end),	#loop
	##new 3.0 end
	(try_end), 
	
	
	
	
	#(call_script, "script_reset_player_relation_with_troop", ":lord"), ##NEW why so complicated?
	(troop_set_slot, ":lord", slot_troop_player_relation, 0), #there done lol
	 (troop_set_slot, ":lord", slot_troop_met, 0),
	 
	 ##also reset for all other lords too...
	 (try_for_range, ":heroes", heroes_begin, heroes_end), 
	 (neq, ":heroes", ":lord"), 
	 
	 	(store_add, ":troop1_slot_for_troop2", ":heroes", slot_troop_relations_begin),
		(troop_set_slot, ":lord", ":troop1_slot_for_troop2", 0),
	
		(store_add, ":troop2_slot_for_troop1", ":lord", slot_troop_relations_begin),
		(troop_set_slot, ":heroes", ":troop2_slot_for_troop1", 0),
	(try_end), 	
	
	# (troop_get_slot, ":renown", ":lord", slot_troop_renown),
    # (store_add, ":return_renown", ":renown"),
    # (troop_set_slot, ":lord", slot_troop_return_renown, ":return_renown"),
	(troop_set_slot, ":lord", slot_troop_renown, 0),
    (troop_set_slot, ":lord", slot_troop_wealth, 500), #new 4.4 reset their wealth to say 500 
	(call_script, "script_update_troop_notes", ":lord"),
	(add_troop_note_tableau_mesh, ":lord", "tableau_troop_note_mesh"), ##removes their pic
	
	(assign, reg0, ":save_reg0"),
	
	]), 
	
  
  #ashleys npc_child_grows script TESTED
  ##this script allows npc lords to have children , we do not worry about child as baby, player only needs to see child as young adult preparing them for child activate script above...
  #moves from baby to child
  ("npc_child_grows",
  [
  
  (store_script_param, ":child_father", 1), 
  (store_script_param, ":king_or_lord_child", 2), ##1=lord, 2=king 
  
  (assign, ":has_boy", 0),
  (assign, ":has_girl", 0), 
  
  
  
  ##first randomize boy or girl...
  (store_random_in_range, ":rand", 1, 101), 
  
  (try_begin),
        (gt, ":rand", 55), ##45% chance
        (assign, ":has_boy", 1), 
        (else_try),
        (assign, ":has_girl", 1), 
      (try_end),

      ####FIND A CHILD FOR THEM...
      
      (try_begin), #boy
      (eq, ":has_boy", 1),
      (assign, ":male_child", -1), 
      (assign, ":end_cond", npc_children_male_end), 
     (try_for_range, ":child", npc_children_male_begin, ":end_cond"),
     (neg|troop_slot_eq, ":child", slot_troop_occupation, cam_slto_child),  
     (neg|troop_slot_eq, ":child", slot_troop_occupation, slto_kingdom_hero), 
     (assign, ":male_child", ":child"), 
     (assign, ":end_cond", ":child"), 
     (try_end), 
      (else_try), #girl
      (eq, ":has_girl", 1), 
        (assign, ":female_child", -1), 
        (assign, ":end_cond", npc_children_female_end), 
      (try_for_range, ":child", npc_children_female_begin, ":end_cond"),
     (neg|troop_slot_eq, ":child", slot_troop_occupation, cam_slto_child), 
     (neg|troop_slot_eq, ":child", slot_troop_occupation, slto_kingdom_hero), 
     (neg|troop_slot_eq, ":child", slot_troop_occupation, slto_kingdom_lady),
     #(store_random_in_range, ":child", npc_children_female_begin, npc_children_female_end),
     (assign, ":female_child", ":child"), 
      (assign, ":end_cond", ":child"),     
     (try_end), 
    (try_end), 
    
    ##4.0 add if run out of children, use dead lords
    (try_begin), 
    (eq, ":has_boy", 1),
    (eq, ":male_child", -1), ##couldn't find any
    (try_for_range, ":dead", lords_begin, lords_end), 
    (troop_slot_eq, ":dead", slot_troop_occupation, dplmc_slto_dead), 
    (neq, ":dead", "trp_kingdom_17_lord"),
  (troop_get_slot, ":orig_saved", ":dead", slot_troop_original_faction_save), ##need to get old faction
  (faction_get_slot, ":has_baby", ":orig_saved", child_father_slot), 
  (faction_get_slot, ":dead_wife", ":orig_saved", slot_remember_wife),
  (faction_get_slot, ":father", ":orig_saved", slot_faction_father),
  (faction_get_slot, ":mother", ":orig_saved", slot_faction_mother), 
  (neq, ":father", ":dead"), 
  (neq, ":mother", ":dead"),   
  (neq, ":has_baby", ":dead"), 
  (neq, ":dead_wife", ":dead"),  
    
    (assign, ":male_child", ":dead"), 
    (try_end), 
    (gt, ":male_child", 0), 
    (call_script, "script_build_new_family_tree", ":male_child"), 
    (troop_set_type, ":male_child", tf_child), 
    (else_try), 
    (eq, ":has_girl", 1), 
    (eq, ":female_child", -1), 
    (try_for_range, ":dead2", kingdom_ladies_begin, kingdom_ladies_end), 
    (troop_slot_eq, ":dead2", slot_troop_occupation, dplmc_slto_dead), 
    
    (troop_get_slot, ":orig_saved", ":dead2", slot_troop_original_faction_save), ##need to get old faction
  (faction_get_slot, ":has_baby", ":orig_saved", child_father_slot), 
  (faction_get_slot, ":dead_wife", ":orig_saved", slot_remember_wife),
  (faction_get_slot, ":father", ":orig_saved", slot_faction_father),
  (faction_get_slot, ":mother", ":orig_saved", slot_faction_mother), 
  (neq, ":father", ":dead2"), 
  (neq, ":mother", ":dead2"),   
  (neq, ":has_baby", ":dead2"), 
  (neq, ":dead_wife", ":dead2"),  
    
    (assign, ":female_child", ":dead2"), 
    (try_end), 
    (gt, ":female_child", 0), 
    (call_script, "script_build_new_family_tree", ":female_child"), 
    (troop_set_type, ":female_child", tf_child_f), 
    (try_end),     
       
       ###FIND FATHERS FACTION
       (try_begin), 
       (troop_slot_eq, ":child_father", slot_troop_occupation, dplmc_slto_dead), 
       (troop_get_slot, ":old_faction", ":child_father", slot_troop_original_faction_save), 
       (assign, ":faction", ":old_faction"), 
       (else_try), 
        (store_troop_faction, ":faction", ":child_father"), 
       (try_end),
      
     ##FIND WIFE    
     (troop_get_slot, ":lords_wife", ":child_father", slot_troop_spouse),
     (faction_get_slot, ":dead_wife", ":faction", slot_remember_wife), 
     
     ##save new faction slot to remember mother and father, if they are killed this is to prevent recycaling them until next level        
      (faction_set_slot, ":faction", slot_faction_father, ":child_father"), 
      
      (troop_get_slot, ":npc_race", ":child_father", slot_troop_race),

      (assign, ":wife_dead", 0),       
      (try_begin), 
      (neq, ":dead_wife", -1),  #chk if wife/mother is dead.
      (is_between, ":dead_wife", kingdom_ladies_begin, kingdom_ladies_end), ##there is someone there 
      (faction_set_slot, ":faction", slot_faction_mother, ":dead_wife"), 
      (assign, ":lords_wife", ":dead_wife"), 
      (faction_set_slot, ":faction", slot_remember_wife, -1), 
      (assign, ":wife_dead", 1), 
      (else_try), 
      (faction_set_slot, ":faction", slot_faction_mother, ":lords_wife"), 
       (try_end), 
       
      (try_begin), 
      (eq, ":has_boy", 1),
      (neq, ":male_child", -1), 
      (call_script, "script_troop_change_relation_with_troop", ":lords_wife", ":male_child", 20), 
      (else_try), 
      (neq, ":female_child", -1),
      (call_script, "script_troop_change_relation_with_troop", ":lords_wife", ":female_child", 20),
      (try_end), 
      
    ##ACTIVATE THE CHILD     
       
    (try_begin), ##male
    (eq, ":has_boy", 1),
    (gt, ":male_child", 0),
    (troop_set_type, ":male_child", tf_child), 
    ##ASSIGN PARENTS
    
    ##child father slot might not be male... need to check
    (troop_get_type, ":father_gender", ":child_father"), 
    (val_mod, ":father_gender", 2), 

    (try_begin), 
    (eq, ":father_gender", tf_male), ##is male    
    (troop_set_slot, ":male_child", slot_troop_father, ":child_father"),
    (troop_set_slot, ":male_child", slot_troop_mother, ":lords_wife"),
    (else_try), 
    (troop_set_slot, ":male_child", slot_troop_father, ":lords_wife"),
    (troop_set_slot, ":male_child", slot_troop_mother, ":child_father"),
    (try_end), 
    

    ###SET AGE / OCCUPATIONS    
    (troop_set_slot, ":male_child", slot_troop_age, 8), 
    (troop_set_slot,  ":male_child", slot_troop_occupation, cam_slto_child),     
    
    
    #set faction
    (troop_set_faction, ":male_child", ":faction"),  
    
    ##set race
    (troop_set_slot, ":male_child", slot_troop_race, ":npc_race"),
    
    ##SET NAME
    (str_clear, s5),
    (str_clear, s6),
     (str_clear, s7),
    
    ##remove fathers title
    # (assign,  ":title_index", 0), 
     # (str_store_troop_name, s0, ":child_father"),
      # (val_add, ":title_index", "str_lord_name_no_title"),
     # (str_store_string, s1, ":title_index"),
     # (troop_set_name, ":child_father", s1),  
      # (str_store_troop_name, s5, ":child_father"),
      (call_script, "script_troop_set_title_according_to_faction", ":child_father", "fac_outlaws"),
      (str_store_troop_name, s5, ":child_father"),
     
    ##here we randomize child's name so different everytime...
        #(store_random_in_range, ":child_name", "str_child_name_1", "str_child_names_end"), #old 4.4 use new culture ranges
        (faction_get_slot, ":culture", ":faction", slot_faction_culture),
         (try_begin), 
       (eq, ":culture", "fac_culture_frank"), 
       (store_random_in_range, ":child_name", "str_child_name_109", "str_child_names_end"),
       (else_try), 
       (eq, ":culture", "fac_culture_irish"), 
       (store_random_in_range, ":child_name", "str_child_name_83", "str_child_name_109"),
       (else_try), 
       (eq, ":culture", "fac_culture_angle"), 
       (store_random_in_range, ":child_name", "str_child_name_41", "str_child_name_64"),
       (else_try),
       (this_or_next|eq, ":culture", "fac_culture_jute"), 
       (eq, ":culture", "fac_culture_saxon"), 
       (store_random_in_range, ":child_name", "str_child_name_63", "str_child_name_83"),
       (else_try), 
       (store_random_in_range, ":child_name", "str_child_name_1", "str_child_name_41"),
       (try_end), #4.4 end  
        
        
        (str_store_string, s6, ":child_name"),  
        
        #different cultures have different ways of showing father
            
        
        (try_begin), 
        (this_or_next|eq, ":culture", "fac_culture_britton"), 
        (this_or_next|eq, ":culture", "fac_culture_britton_rom"), 
        (eq, ":culture", "fac_culture_north_britton"), 
        (str_store_string, s7, "@{s6} ap {s5}"),
        (else_try), 
        (eq, ":culture", "fac_culture_frank"),          
        (str_store_string, s7, "@{s6} de {s5}"),
        (else_try),
        (this_or_next|eq, ":culture", "fac_culture_irish"),
        (this_or_next|eq, ":culture", "fac_culture_pic"),     
        (eq, ":culture", "fac_culture_scotti"),  
        (str_store_string, s7, "@{s6} mac {s5}"),
        (else_try),
        (str_store_string, s7, "@{s6}"),        
        (try_end), 
        
        (troop_set_name, ":male_child", "@{s7}"), 
        (troop_set_plural_name, ":male_child", "@{s7}"), 
        ##NAME ENDS
        
         ## now give them back there title
        (call_script, "script_troop_set_title_according_to_faction", ":child_father", ":faction"),
        
        ##MAKE CHILD LOOK LIKE FATHER...
         (str_store_troop_face_keys, s1, ":child_father"),
           (str_store_troop_face_keys, s2, ":male_child"),
           (face_keys_get_hair_color, ":hair_color", s1),
           (face_keys_set_hair_color, s2, ":hair_color"),
           (face_keys_set_age, s2, 0), 
          (try_for_range, ":key_no", 0, 8),
           (face_keys_get_morph_key, ":morph_key", s1, ":key_no"),
           (face_keys_set_morph_key, s2, ":key_no", ":morph_key"),
           (troop_set_face_keys, ":male_child", s2),
          (try_end),
          
          (face_keys_get_hair, ":hair", s2), 
          (store_random_in_range, ":hair", 1, 7), 
          (face_keys_set_hair, s2, ":hair"), 
          
           (str_store_troop_face_keys, s3, ":child_father", 2),
          (face_keys_get_hair_color, ":hair_color2", s3),
          (face_keys_set_hair_color, s2, ":hair_color2"),
          (troop_set_face_keys, ":male_child", s2),
          
          
          
        (call_script, "script_troop_change_relation_with_troop", ":child_father", ":male_child", 20),   
    
    (else_try), #female child
     (eq,  ":has_girl", 1),
     (gt, ":female_child", 0),  
     (troop_set_type, ":female_child", tf_child_f), 
     ##SET PARENTS  
     ##child father slot might not be male... need to check
    (troop_get_type, ":father_gender", ":child_father"), 
    (val_mod, ":father_gender", 2), 

    (try_begin), 
    (eq, ":father_gender", tf_male), ##is male    
    (troop_set_slot, ":female_child", slot_troop_father, ":child_father"),
    (troop_set_slot, ":female_child", slot_troop_mother, ":lords_wife"),
    (else_try), 
    (troop_set_slot, ":female_child", slot_troop_father, ":lords_wife"),
    (troop_set_slot, ":female_child", slot_troop_mother, ":child_father"),
    (try_end), 
    
    
    ##SET AGE / OCCUPATIONS
    (troop_set_slot, ":female_child", slot_troop_age, 8), 
    (troop_set_slot,  ":female_child", slot_troop_occupation, cam_slto_child),  
    
    
    #set faction
    (troop_set_faction, ":female_child", ":faction"),  
    
    ##set race
    (troop_set_slot, ":female_child", slot_troop_race, ":npc_race"),
    
    ###here we need to set girls personality early in order for add_lady_items to work properly. 
    
    ###SET PERSONALITY
    (try_begin), 
    (eq, ":wife_dead", 1), 
     (troop_get_slot, ":mothers_personality", ":lords_wife", remember_reputation_type),
    (else_try), 
     (troop_get_slot, ":mothers_personality", ":lords_wife", slot_lord_reputation_type), 
    (try_end), 
         (store_random_in_range, ":rand", 0,3),
        
      (try_begin), 
        (eq, ":mothers_personality", lrep_conventional), 
        (try_begin), 
        (eq, ":rand", 1), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_moralist), 
        (else_try), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type,lrep_conventional), 
        (try_end), 
      (else_try), 
      (eq, ":mothers_personality", lrep_adventurous),    
      (try_begin), 
        (eq, ":rand", 1), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_adventurous), 
        (else_try), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type,lrep_ambitious), 
        (try_end),     
      (else_try), 
      (eq, ":mothers_personality", lrep_otherworldly),
        (try_begin), 
        (eq, ":rand", 1), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_otherworldly), 
        (else_try), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type,lrep_adventurous), 
        (try_end),
      (else_try), 
       (eq, ":mothers_personality", lrep_ambitious),    
          (try_begin), 
        (eq, ":rand", 1), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_adventurous), 
        (else_try), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type,lrep_ambitious), 
        (try_end),    
      (else_try), 
         (eq, ":mothers_personality", lrep_moralist),
         (try_begin), 
        (eq, ":rand", 1), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_moralist), 
        (else_try), 
        (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_conventional), 
        (try_end),    
      (else_try), 
      (troop_set_slot, ":female_child", slot_lord_reputation_type, lrep_conventional), 
      (try_end),
    
     #(call_script, "script_add_lady_items", ":female_child"),  nope, moved back to child activation so they will use my new dresses

   ##SET NAME
    (str_clear, s5),
    (str_clear, s6),
     (str_clear, s7),
    
    
    ##remove mothers title
     # (str_store_troop_name, s0, ":lords_wife"),
     # (str_store_string, s1, "str_lord_name_no_title"),
     # (troop_set_name, ":lords_wife", s1),  
      # (str_store_troop_name, s5, ":lords_wife"),
      (call_script, "script_troop_set_title_according_to_faction", ":lords_wife", "fac_outlaws"),
      (str_store_troop_name, s5, ":lords_wife"),
      
            
    
    ##here we randomize childs name so different everytime...
        #(store_random_in_range, ":child_name", "str_child_female_name_1", "str_child_female_names_end"),
        
        
        
        #different cultures have different ways of showing mother
        (faction_get_slot, ":culture", ":faction", slot_faction_culture), 
       (try_begin), 
       (eq, ":culture", "fac_culture_frank"), 
       (store_random_in_range, ":child_name", "str_child_female_name_77", "str_child_names_end"),
       (else_try), 
       (this_or_next|eq, ":culture", "fac_culture_pic"),
       (eq, ":culture", "fac_culture_irish"), 
       (store_random_in_range, ":child_name", "str_child_female_name_56", "str_child_female_name_77"),
       (else_try),
       (this_or_next|eq, ":culture", "fac_culture_jute"), 
       (this_or_next|eq, ":culture", "fac_culture_angle"), 
       (eq, ":culture", "fac_culture_saxon"), 
       (store_random_in_range, ":child_name", "str_child_female_name_37", "str_child_female_name_56"),
       (else_try), 
       (store_random_in_range, ":child_name", "str_child_female_name_1", "str_child_female_name_37"),
       (try_end), #4.4 end    

        (str_store_string, s6, ":child_name"),  
        
        (try_begin), 
        (this_or_next|eq, ":culture", "fac_culture_britton"), 
        (this_or_next|eq, ":culture", "fac_culture_britton_rom"), 
        (eq, ":culture", "fac_culture_north_britton"), 
        (str_store_string, s7, "@{s6} verch {s5}"),
        (else_try), 
        (eq, ":culture", "fac_culture_frank"),          
        (str_store_string, s7, "@{s6} des {s5}"),
        (else_try),
        (this_or_next|eq, ":culture", "fac_culture_irish"),
        (this_or_next|eq, ":culture", "fac_culture_pic"),     
        (eq, ":culture", "fac_culture_scotti"),  
        (str_store_string, s7, "@{s6} Ingen {s5}"),
        (else_try),
        (str_store_string, s7, "@{s6}"),        
        (try_end), 
        
        (troop_set_name, ":female_child", "@{s7}"), 
        (troop_set_plural_name, ":female_child", "@{s7}"), 
        ##NAME ENDS    
        
        ## now give them back there title
        (call_script, "script_troop_set_title_according_to_faction", ":lords_wife", ":faction"),
        
        ##MAKE CHILD LOOK LIKE MOTHER...
         (str_store_troop_face_keys, s1, ":lords_wife"),
           (str_store_troop_face_keys, s2, ":female_child"),
           (face_keys_get_hair_color, ":hair_color", s1),
           (face_keys_set_hair_color, s2, ":hair_color"),
           (face_keys_set_age, s2, 0),
          (try_for_range, ":key_no", 0, 8),
           (face_keys_get_morph_key, ":morph_key", s1, ":key_no"),
           (face_keys_set_morph_key, s2, ":key_no", ":morph_key"),
           (troop_set_face_keys, ":female_child", s2),
          (try_end),
          
          (face_keys_get_hair, ":hair", s2), 
          (store_random_in_range, ":hair", 1, 7), 
          (face_keys_set_hair, s2, ":hair"), 
          
           (str_store_troop_face_keys, s3, ":lords_wife", 2),
          (face_keys_get_hair_color, ":hair_color2", s3),
          (face_keys_set_hair_color, s2, ":hair_color2"),
          
          (face_keys_get_face_texture, ":skin2", s3),
          (face_keys_set_face_texture, s2, ":skin2"),
          
          (troop_set_face_keys, ":female_child", s2),
          
          
         (call_script, "script_troop_change_relation_with_troop", ":child_father", ":female_child", 15),   
    
     (try_end),   
     
     (try_begin), 
     (eq, ":king_or_lord_child", 2),
     (gt, ":male_child", 0),  
     (call_script, "script_add_notification_menu", "mnu_notification_new_kings_child", ":male_child", ":child_father"), 
     (else_try), 
     (eq, ":king_or_lord_child", 2),
     (gt, ":female_child", 0), 
     (call_script, "script_add_notification_menu", "mnu_notification_new_kings_girl", ":female_child", ":child_father"), 
     (else_try), 
     (eq, ":king_or_lord_child", 1),
     (gt,  ":male_child", 0),  
     (display_log_message, "@ {s5}'s boy, {s7} has grown old enough to take a place at court, in a few more years they will be an adult.",color_hero_news),
     (else_try), 
     (eq, ":king_or_lord_child", 1),
     (gt,  ":female_child", 0),  
     (display_log_message, "@ {s5}'s girl, {s7} has grown old enough to take her place at court, in a few more years they will be an adult."),    
     (try_end), 
     
     (call_script, "script_update_all_notes"),
     (call_script, "script_update_faction_notes", ":faction"),
     (call_script, "script_update_troop_notes", ":child_father"),
     
     (try_begin), 
     (eq, ":has_boy", 1), 
     (gt, ":male_child", 0), 
     (troop_set_note_available, ":male_child", 1),
     (call_script, "script_update_troop_notes", ":male_child"),
     (else_try),
     (gt,  ":female_child", 0), 
     (troop_set_note_available, ":female_child", 1),
     (call_script, "script_update_troop_notes", ":female_child"),
     (try_end), 
  
  ]
  ), 
  
  
  ("name_bastard_bastard", 
  [
  
  (str_clear, s5),
     (str_clear, s7),
    (str_store_troop_name, s5, "trp_npc_bastard"), 
        
        (str_store_string, s7, "@{s5} the Bastard"),
       
        (troop_set_name, "trp_npc_bastard", "@{s7}"), 
        (troop_set_plural_name, "trp_npc_bastard", "@{s7}"), 
        
       
  ]),
  


  ##ashleys recycal_dead_lord TESTED
  #creates a "new" lord out of the dead
  ("recycal_dead_lord", 
  [
  
  (store_script_param, ":dead_lord", 1), 
  
  (assign, ":result", -1),
  
 
  
  
  ##first find a random faction to join...
  (try_begin), 
  (call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_no_faction"),  
     (assign, ":faction", reg0), 
    
    
    ##remove spouse
    (troop_get_slot, ":spouse", ":dead_lord", slot_troop_spouse), 
    (try_begin), 
    (neq, ":spouse", -1), 
    (troop_set_slot, ":dead_lord", slot_troop_spouse, -1), 
    (troop_set_slot, ":spouse", slot_troop_spouse, -1),
    (try_end), 
                                                

    ##we now need to build new family tree for old blood relations ...    
    (call_script, "script_build_new_family_tree", ":dead_lord"), 
    
    # ##remove any left over family relations    ##done in script above
    # (troop_set_slot, ":dead_lord", slot_troop_guardian, -1), 
    # (troop_set_slot, ":dead_lord", slot_troop_father, -1), 
    # (troop_set_slot, ":dead_lord", slot_troop_mother, -1), 
    
    ###this is probably useless, but it supports multi generational games
    ###create new parents
    ########
      (store_mul, ":new_old_father", "trp_heroes_end", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
      (val_add, ":new_old_father", DPLMC_VIRTUAL_RELATIVE_FATHER_OFFSET),#defined in module_constants.py
      (val_sub, ":new_old_father", "$grand_parents_created_since_game_start"), ##brand new troop!
      (troop_set_slot, ":dead_lord", slot_troop_father, ":new_old_father"),  

      (store_mul, ":new_old_mother", "trp_heroes_end", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
      (val_add, ":new_old_mother", DPLMC_VIRTUAL_RELATIVE_MOTHER_OFFSET),#defined in module_constants.py
      (val_sub, ":new_old_mother", "$grand_parents_created_since_game_start"), ##brand new troop!
      (troop_set_slot, ":dead_lord", slot_troop_mother, ":new_old_mother"),     
      
      (val_add, "$grand_parents_created_since_game_start", 1), 
    ###############
   
    
  ###activate lord...
  (try_begin), 
  (is_between, ":faction", kingdoms_begin, kingdoms_end), 
  (faction_slot_eq, ":faction", slot_faction_state, sfs_active), 
  (troop_set_faction, ":dead_lord", ":faction"), 
  (else_try),
  (troop_set_faction, ":dead_lord", "fac_adventurers"), 
  (assign, ":faction", "fac_adventurers"),
  (try_end), 
  
  (store_random_in_range, ":age", 18, 46), 
  (troop_set_slot, ":dead_lord", slot_troop_age, ":age"),
  (troop_get_type, ":is_female", ":dead_lord"), 
  (val_mod, ":is_female", 2), 
  
  (try_begin), 
  (eq, ":is_female", 1), 
  (troop_set_slot, ":dead_lord", slot_troop_occupation, slto_kingdom_lady), 
  (call_script, "script_cf_get_random_lord_except_king_with_faction", ":faction"), 
  (assign, ":result", reg0),
  (try_begin), 
  (gt, ":result", -1), 
  (is_between, ":result", active_npcs_begin, active_npcs_end),  
  (troop_set_slot, ":dead_lord", slot_troop_guardian, ":result"), 
  (else_try), 
  (faction_get_slot, ":faction_leader", ":faction", slot_faction_leader), 
  (ge, ":faction_leader", 0),  
  (troop_slot_eq, ":faction_leader", slot_troop_occupation, slto_kingdom_hero),  
  (is_between, ":faction_leader", heroes_begin, heroes_end),  
  (troop_set_slot, ":dead_lord", slot_troop_guardian, ":faction_leader"), 
  (else_try),
  (troop_set_slot, ":dead_lord", slot_troop_guardian, -1), 
  (try_end), 
  
  (else_try), 
  (eq, ":is_female", 0),
  (troop_set_slot, ":dead_lord", slot_troop_occupation, slto_kingdom_hero), 
  (try_end), 

  ##randomize personalities
  (try_begin), 
  (eq, ":is_female", 1),
  (store_random_in_range, ":lady_reputation", 20, 26),
        
        (try_begin),
          (eq, ":lady_reputation", 20),
          (assign, ":lady_reputation", lrep_moralist),
        (else_try),
          (eq, ":lady_reputation", 21),
          (assign, ":lady_reputation", lrep_ambitious),
        (else_try),
          (eq, ":lady_reputation", 22),
          (assign, ":lady_reputation", lrep_adventurous),
        (else_try),
          (eq, ":lady_reputation", 23),
          (assign, ":lady_reputation", lrep_otherworldly),
        (else_try),
          (eq, ":lady_reputation", 24),
          (assign, ":lady_reputation", lrep_ambitious),
        (else_try),
          
          (assign, ":lady_reputation", lrep_conventional),
          
        (try_end),
        (troop_set_slot, ":dead_lord", slot_lord_reputation_type, ":lady_reputation"),
        (troop_clear_inventory, ":dead_lord"), 
        (call_script, "script_add_lady_items", ":dead_lord"), 
    (else_try), 
      (eq, ":is_female", 0),
    
    (store_random_in_range, ":lord_reputation", 20, 27),
        (try_begin),
          (eq, ":lord_reputation", 20),
          (assign, ":lord_reputation", lrep_martial),
        (else_try),
          (eq, ":lord_reputation", 21),
          (assign, ":lord_reputation", lrep_quarrelsome),
        (else_try),
          (eq, ":lord_reputation", 22),
          (assign, ":lord_reputation", lrep_selfrighteous),
        (else_try),
          (eq, ":lord_reputation", 23),
          (assign, ":lord_reputation", lrep_cunning),
        (else_try),
          (eq, ":lord_reputation", 24),
          (assign, ":lord_reputation", lrep_upstanding),
        (else_try),
          
          (assign, ":lord_reputation", lrep_debauched),
          
        (try_end),
       
        (troop_set_slot, ":dead_lord", slot_lord_reputation_type, ":lord_reputation"),
    (try_end), 

    
   ##randomize appearance
   (try_begin),
   (eq, ":is_female", 0), 
   
     # (str_store_troop_face_keys, s1, "trp_your_uncle"), #piggy
     (store_random_in_range, ":troop_to_piggy", "trp_your_uncle", "trp_your_mother"), 
     (str_store_troop_face_keys, s1, ":troop_to_piggy"),
           (str_store_troop_face_keys, s2, ":dead_lord"),
          (try_for_range, ":key_no", 0, 8),
           (face_keys_get_morph_key, ":morph_key", s1, ":key_no"),
           (face_keys_set_morph_key, s2, ":key_no", ":morph_key"),
           (troop_set_face_keys, ":dead_lord", s2),
          (try_end), 
          
          (face_keys_get_hair, ":hair", s2), 
          (store_random_in_range, ":hair", 0, 20), 
          (face_keys_set_hair, s2, ":hair"), 
          
          (face_keys_get_beard, ":beard", s2), 
          (store_random_in_range, ":beard", 0, 12), 
          (face_keys_set_beard, s2, ":beard"), 
          
          (troop_set_face_keys, ":dead_lord", s2),
          
          (store_random_in_range, ":type", 0, 3), 
          (try_begin), 
          (eq, ":type", 0), 
          (troop_set_type, ":dead_lord", tf_male), 
          (else_try), 
          (eq, ":type", 1), 
          (troop_set_type, ":dead_lord", tf_tall_m),
          (else_try), 
          (troop_set_type, ":dead_lord", tf_short),
          (try_end), 
          
          (str_store_troop_face_keys, s2, ":dead_lord"),
          
          (face_keys_get_face_texture, ":texture", s2), 
          (store_random_in_range, ":texture", 1, 6), 
          (face_keys_set_face_texture, s2, ":texture"), 
          
          (face_keys_set_age, s2, ":age"), 
    
          (troop_set_face_keys, ":dead_lord", s2),
          
          (troop_set_age, ":dead_lord", ":age"), 
          (troop_set_slot, ":dead_lord", slot_troop_age_appearance, ":age"), 
          
          (troop_set_slot, ":dead_lord", slot_troop_wealth, 3000),
         
    (else_try), 
    
     #(str_store_troop_face_keys, s1, "trp_kingdom_1_lady_1"), #piggy
     (store_random_in_range, ":troop_to_piggy", "trp_knight_1_1_wife", "trp_kingdom_1_lady_4"), 
     (str_store_troop_face_keys, s1, ":troop_to_piggy"),
           (str_store_troop_face_keys, s2, ":dead_lord"),
          (try_for_range, ":key_no", 0, 8),
           (face_keys_get_morph_key, ":morph_key", s1, ":key_no"),
           (face_keys_set_morph_key, s2, ":key_no", ":morph_key"),
           (troop_set_face_keys, ":dead_lord", s2),
          (try_end), 
         
        (face_keys_get_hair, ":hair", s2), 
          (store_random_in_range, ":hair", 1, 20), 
          (face_keys_set_hair, s2, ":hair"),     
         (troop_set_face_keys, ":dead_lord", s2),
         
          (store_random_in_range, ":type", 0, 3), 
          (try_begin), 
          (eq, ":type", 0), 
          (troop_set_type, ":dead_lord", tf_female), 
          (else_try), 
          (eq, ":type", 1), 
          (troop_set_type, ":dead_lord", tf_tall_f),
          (else_try), 
          (troop_set_type, ":dead_lord", tf_short_f),
          (try_end), 
          
           (str_store_troop_face_keys, s2, ":dead_lord"),
          
          (face_keys_get_face_texture, ":texture", s2), 
          (store_random_in_range, ":texture", 1, 6), 
          (face_keys_set_face_texture, s2, ":texture"), 
          
          (face_keys_set_age, s2, ":age"), 
    
          (troop_set_face_keys, ":dead_lord", s2),
          
           (troop_set_slot, ":dead_lord", slot_troop_wealth, 3000),
           
           (troop_set_age, ":dead_lord", ":age"), 
          (troop_set_slot, ":dead_lord", slot_troop_age_appearance, ":age"), 
           
         (try_end),  
         
         
          
          
    ##randomize new name...
    (try_begin), 
    (eq, ":is_female", 0),
    #(store_random_in_range, ":name", names_begin, names_end), #old 4.4 use new child name list by culture
    (faction_get_slot, ":culture", ":faction", slot_faction_culture), 
       (try_begin), 
       (eq, ":culture", "fac_culture_frank"), 
       (store_random_in_range, ":name", "str_child_name_109", "str_child_names_end"),
       (else_try), 
       (eq, ":culture", "fac_culture_irish"), 
       (store_random_in_range, ":name", "str_child_name_83", "str_child_name_109"),
       (else_try), 
       (eq, ":culture", "fac_culture_angle"), 
       (store_random_in_range, ":name", "str_child_name_41", "str_child_name_64"),
       (else_try),
       (this_or_next|eq, ":culture", "fac_culture_jute"), 
       (eq, ":culture", "fac_culture_saxon"), 
       (store_random_in_range, ":name", "str_child_name_63", "str_child_name_83"),
       (else_try), 
       (store_random_in_range, ":name", "str_child_name_1", "str_child_name_41"),
       (try_end), #4.4 end
    (troop_set_name, ":dead_lord", ":name"), 
    (troop_set_plural_name, ":dead_lord", ":name"), 
    (else_try), 
    (eq, ":is_female", 1),
    #(store_random_in_range, ":name", "str_child_female_name_1", "str_child_female_names_end"), old 4.4 use culture ranges
    (faction_get_slot, ":culture", ":faction", slot_faction_culture), 
       (try_begin), 
       (eq, ":culture", "fac_culture_frank"), 
       (store_random_in_range, ":name", "str_child_female_name_77", "str_child_names_end"),
       (else_try), 
       (eq, ":culture", "fac_culture_irish"), 
       (store_random_in_range, ":name", "str_child_female_name_56", "str_child_female_name_77"),
       (else_try),
       (this_or_next|eq, ":culture", "fac_culture_jute"), 
       (this_or_next|eq, ":culture", "fac_culture_angle"), 
       (eq, ":culture", "fac_culture_saxon"), 
       (store_random_in_range, ":name", "str_child_female_name_37", "str_child_female_name_56"),
       (else_try), 
       (store_random_in_range, ":name", "str_child_female_name_1", "str_child_female_name_37"),
       (try_end), #4.4 end
    (troop_set_name, ":dead_lord", ":name"), 
    (troop_set_plural_name, ":dead_lord", ":name"),       
    
    ##give lady new protector and home center
    (try_begin),
    (neq, ":faction", "fac_adventurers"), 
    # (faction_get_slot, ":leader", ":faction", slot_faction_leader), ##already done above 
    # (troop_set_slot, ":dead_lord", slot_troop_guardian, ":leader"), 
    (call_script, "script_get_kingdom_lady_social_determinants", ":dead_lord"),
        (troop_set_slot, ":dead_lord", slot_troop_cur_center, reg1),
    (else_try),
    ##create lady adventurer?
   (troop_set_slot, ":dead_lord", slot_troop_home, "$g_starting_town"),
    (set_spawn_radius, 1),
     (spawn_around_party,"$g_starting_town","pt_adv_party"),
        (assign, ":party_no", reg(0)),
        (party_set_slot, ":party_no", slot_party_type, spt_kingdom_hero_party),
        (troop_set_slot, ":dead_lord", slot_troop_occupation, slto_kingdom_hero),
        (troop_set_slot, ":dead_lord", slot_troop_prisoner_of_party, -1),
        (party_set_faction, ":party_no", "fac_adventurers"),
        (troop_set_faction, ":dead_lord", "fac_adventurers"),
        (troop_set_slot, ":dead_lord", slot_troop_leaded_party, ":party_no"),
        (party_add_leader, ":party_no", ":dead_lord"),
        (store_random_in_range,":random_gold",1500,5000),
        (troop_get_slot, ":wealth", ":dead_lord", slot_troop_wealth),
        (val_add, ":wealth", ":random_gold"),
        (troop_set_slot, ":dead_lord", slot_troop_wealth, ":wealth"),
        (troop_get_slot, ":renown", ":dead_lord", slot_troop_renown),
        (val_add, ":renown", 40),
        (troop_set_slot, ":dead_lord", slot_troop_renown, ":renown"),
        (party_set_ai_behavior, ":party_no", ai_bhvr_hold),
        (str_store_troop_name, s40, ":dead_lord"),
        (party_set_name, ":party_no", s40),
        (display_message, "@{s40} has became an adventurer",color_hero_news),    
    (try_end), 
    
    (try_end), 
    
    (try_begin), 
    (neq, ":faction", "fac_adventurers"), 
        (call_script, "script_troop_set_title_according_to_faction", ":dead_lord", ":faction"), 
     (try_end),     
    
    ##give new renown
    (try_begin), 
    (eq, ":is_female", 0), ##male only??
    (troop_set_slot, ":dead_lord", slot_troop_renown, 0),
    (store_character_level, ":level", ":dead_lord"),
        (store_mul, ":renown", ":level", ":level"),
        (val_div, ":renown", 4), #for top lord, is about 400

        (troop_get_slot, ":age", ":dead_lord", slot_troop_age),
        (store_mul, ":age_addition", ":age", ":age"),
        (val_div, ":age_addition", 8), #for top lord, is about 400
        (val_add, ":renown", ":age_addition"),
        
         (store_random_in_range, ":random_renown", 0, 100),
       
        (val_add, ":renown", ":random_renown"),

        (troop_set_slot, ":dead_lord", slot_troop_renown, ":renown"),
        
        (troop_set_slot, ":dead_lord", slot_troop_leaded_party, -1), 
        
        ##new...banner
        (try_begin), 
        (neq, ":faction", "fac_adventurers"), 
        (faction_get_slot, ":cur_faction_banner", ":faction", slot_faction_banner),
        (val_sub, ":cur_faction_banner", banner_meshes_begin),
        (val_add, ":cur_faction_banner", banner_scene_props_begin),
        (try_begin), 
        (this_or_next|troop_slot_eq, ":dead_lord", slot_troop_father, ":faction_leader"), ##shouldn't be possible here
        (troop_slot_eq, ":dead_lord", slot_troop_mother, ":faction_leader"), 
        (val_add, ":cur_faction_banner", 2), ##special extra banner for king/queen children
        (else_try), 
        (val_add, ":cur_faction_banner", 1), ##lords banner
        (try_end), 
        (troop_set_slot, ":dead_lord", slot_troop_banner_scene_prop, ":cur_faction_banner"),
        (else_try), #adventurer
        (store_random_in_range,":cur_faction_banner", "mesh_banner_companions01", "mesh_banner_bandits01"),  
        (val_sub, ":cur_faction_banner", banner_meshes_begin),
        (val_add, ":cur_faction_banner", banner_scene_props_begin),
        (troop_set_slot, ":dead_lord", slot_troop_banner_scene_prop, ":cur_faction_banner"),
        
        # adventurer?
   (troop_set_slot, ":dead_lord", slot_troop_home, "$g_starting_town"),
    (set_spawn_radius, 1),
     (spawn_around_party,"$g_starting_town","pt_adv_party"),
        (assign, ":party_no", reg(0)),
        (party_set_slot, ":party_no", slot_party_type, spt_kingdom_hero_party),
        (troop_set_slot, ":dead_lord", slot_troop_occupation, slto_kingdom_hero),
        (troop_set_slot, ":dead_lord", slot_troop_prisoner_of_party, -1),
        (party_set_faction, ":party_no", "fac_adventurers"),
        (troop_set_faction, ":dead_lord", "fac_adventurers"),
        (troop_set_slot, ":dead_lord", slot_troop_leaded_party, ":party_no"),
        (party_add_leader, ":party_no", ":dead_lord"),
        (store_random_in_range,":random_gold",1500,5000),
        (troop_get_slot, ":wealth", ":dead_lord", slot_troop_wealth),
        (val_add, ":wealth", ":random_gold"),
        (troop_set_slot, ":dead_lord", slot_troop_wealth, ":wealth"),
        (troop_get_slot, ":renown", ":dead_lord", slot_troop_renown),
        (val_add, ":renown", 40),
        (troop_set_slot, ":dead_lord", slot_troop_renown, ":renown"),
        (party_set_ai_behavior, ":party_no", ai_bhvr_hold),
        (str_store_troop_name, s40, ":dead_lord"),
        (party_set_name, ":party_no", s40),
        (display_message, "@{s40} has became a new adventurer",color_hero_news),
        (try_end), 
        
        
        (troop_set_slot, ":dead_lord", slot_troop_wealth, 6000),
        
    (try_end), ##male only end    
    
    ##religion
    (store_random_in_range, ":rnd", 0, 2), 
    (try_begin), 
        (eq, ":rnd", 1), 
        (troop_set_slot, ":dead_lord", slot_troop_religion, 1),
        (else_try), 
         (troop_set_slot, ":dead_lord", slot_troop_religion, 2),
         (try_end), 
         
         (try_begin), 
         (eq, ":faction", "fac_adventurers"), 
         (eq, ":is_female", 1),
         (troop_slot_eq, ":dead_lord", slot_troop_occupation, slto_kingdom_hero), 
         (troop_clear_inventory, ":dead_lord"),
         (call_script, "script_equip_new_noble", ":dead_lord"), 
         (else_try), 
         (eq, ":is_female", 0),
         (troop_clear_inventory, ":dead_lord"),
          ##new 4.3 we need to ranomize this a bit more...
          (store_random_in_range, ":rnd", 0, 2), 
          (eq, ":rnd", 0), 
            (troop_get_slot, ":npc_race", ":dead_lord", slot_troop_race),
            (troop_get_inventory_slot,":cur_item1",":dead_lord",ek_body),
            (try_begin),
              (gt, ":cur_item1", 0),
              (troop_remove_item, ":dead_lord", ":cur_item1"),
            (try_end), 
             (troop_get_inventory_slot,":cur_item12",":dead_lord",ek_head),
            (try_begin),
              (gt, ":cur_item12", 0),
              (troop_remove_item, ":dead_lord", ":cur_item12"),
            (try_end),  
            (troop_get_inventory_slot,":cur_item13",":dead_lord",ek_foot),
            (try_begin),
              (gt, ":cur_item13", 0),
              (troop_remove_item, ":dead_lord", ":cur_item13"),
            (try_end), 
            (try_begin), 
            (eq, ":npc_race", cb7_foreigner),
            (troop_add_item, ":dead_lord", "itm_arabian_horse_a", 0),
            (store_random_in_range, ":new_shirt", "itm_roman_shirt", "itm_roman_scal_arm"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_roman_scal_arm", "itm_romanbreastplate"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_red_plum", "itm_briton_helm"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_rich_roman_sandal", "itm_saxon_boots"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_roman_long_sh", "itm_briton_long_sh"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_roman_long_sword", "itm_scimitar_b"),
            (troop_add_item, ":dead_lord", ":new_sword"),
            (troop_add_item, ":dead_lord", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_anglesaxon),
            (troop_add_item, ":dead_lord", "itm_sumpter_horse", 0),
            (store_random_in_range, ":new_shirt", "itm_saxon_shirt_red", "itm_saxon_padded"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_saxon_rich_jerkin", "itm_north_scotti_paint"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_saxon_warmask_main_b", "itm_frank_furcap"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_saxon_boots", "itm_common_roman_sandal"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_wood_medium_d", "itm_wood_small_a"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_saxon_long_seax", "itm_pic_sword"),
            (troop_add_item, ":dead_lord", ":new_sword"),
            (troop_add_item, ":dead_lord", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_scotopict),
            (store_random_in_range, ":new_horse", "itm_pic_saddle_feather", "itm_arrows"),
            (troop_add_item, ":dead_lord", ":new_horse"),
            (store_random_in_range, ":new_shirt", "itm_pic_shirt", "itm_pic_celtic"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_pic_padded", "itm_irish_shirt"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_pic_helmet", "itm_saxon_cap_a"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_nomad_boots", "itm_mail_chausses"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_new_pic_ssh", "itm_nordic_shield"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_pic_sword", "itm_north_brit_sword"),
            (troop_add_item, ":dead_lord", ":new_sword"),
            (troop_add_item, ":dead_lord", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_irish),
            (troop_add_item, ":dead_lord", "itm_steppe_horse", 0),
            (store_random_in_range, ":new_shirt", "itm_irish_shirt", "itm_irish_robed_b"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_irish_light_arm", "itm_frank_shirt"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_ev_coif_c", "itm_ev_cap_nas"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_ankle_boots", "itm_splinted_leather_greaves"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_new_irish_rsh", "itm_new_wood_medium"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_irish_celtic_sword", "itm_frank_basterd_sword"),
            (troop_add_item, ":dead_lord", ":new_sword"),
            (troop_add_item, ":dead_lord", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_frank),
            (store_random_in_range, ":new_horse", "itm_sumpter_horse2", "itm_mule"),
            (troop_add_item, ":dead_lord", ":new_horse"),
            (store_random_in_range, ":new_shirt", "itm_frank_shirt", "itm_frank_padded"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_frank_robed", "itm_frank_byrnie_b"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_frank_carol", "itm_frank_boar_cap"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_splinted_leather_greaves", "itm_sarranid_boots_a"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_wood_large_a", "itm_wood_medium_a"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_frank_basterd_sword", "itm_danes_two_handed_b"),
            (troop_add_item, ":dead_lord", ":new_sword"),
            (troop_add_item, ":dead_lord", "itm_heavy_francisca_axes", 0),
            (else_try), 
            (eq, ":npc_race", cb7_scot),
            (troop_add_item, ":dead_lord", "itm_n_briton_hunter", 0),
            (store_random_in_range, ":new_shirt", "itm_north_scotti_paint_cloth", "itm_scotti_light_padded"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_scotti_rich_padded", "itm_pic_naked"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_new_briton_helmm_b", "itm_pic_helmet_b"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_black_greaves", "itm_rich_roman_sandal"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_basic_sheild_leather", "itm_roman_long_sh"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (troop_add_item, ":dead_lord", "itm_north_brit_sword"),
            (troop_add_item, ":dead_lord", "itm_javelin", 0),
            (else_try), 
            (eq, ":npc_race", cb7_briton),
            (troop_add_item, ":dead_lord", "itm_courser", 0),
            (store_random_in_range, ":new_shirt", "itm_briton_shirt", "itm_briton_shirt_north_b"),
            (troop_add_item, ":dead_lord", ":new_shirt"),
            (store_random_in_range, ":new_armor", "itm_briton_lightarmor_a", "itm_briton_old_mail"),
            (troop_add_item, ":dead_lord", ":new_armor"),
            (store_random_in_range, ":new_helmet", "itm_briton_helm", "itm_pic_helmet"),
            (troop_add_item, ":dead_lord", ":new_helmet"),
            (store_random_in_range, ":new_boots", "itm_hunter_boots", "itm_splinted_leather_greaves"),
            (troop_add_item, ":dead_lord", ":new_boots"),
            (store_random_in_range, ":new_shield", "itm_wood_large_d", "itm_dragon_wood_sheild"),
            (troop_add_item, ":dead_lord", ":new_shield"),
            (store_random_in_range, ":new_sword", "itm_briton_celtic_sword", "itm_arthurs_sword"),
            (troop_add_item, ":dead_lord", ":new_sword"),
            (troop_add_item, ":dead_lord", "itm_javelin", 0),
            (else_try), 
            (call_script, "script_equip_new_noble", ":dead_lord"), 
            (try_end), 
            
        (troop_equip_items, ":dead_lord"),
        (else_try), 
         ###
         (call_script, "script_equip_new_noble", ":dead_lord"),
         (try_end), 
    
    ##notes / messages
    
    (str_clear, s6), 
    (str_clear, s7), 
    
    (str_store_troop_name, s6, ":dead_lord"), 
    (str_store_faction_name, s7, ":faction"), 
    
    (try_begin), 
    (eq, ":is_female", 1), 
    (neq, ":faction", "fac_adventurers"), 
    (display_log_message, "@Rumors say {s6} is a new lady in {s7}."), 
    (else_try), 
    (eq, ":is_female", 0),
    (neq, ":faction", "fac_adventurers"), 
    (display_log_message, "@New lord: {s6} has traveled from abroad and joined {s7}."),
    (try_end), 
    
     (call_script, "script_set_troop_race", ":dead_lord"), #new reset their race
    
    (troop_set_note_available, ":dead_lord", 1), 
    (call_script, "script_update_all_notes"), 
    (call_script, "script_update_troop_notes", ":dead_lord"),
    (call_script, "script_update_troop_location_notes", ":dead_lord", 0), ##was giving old name hopful this fixes it. 
    
  (try_end), 
  
  ]), 
  



  ("death_by_old_age", #TESTED
  [
  
  
  (assign, ":lord_to_kill", -1), 
  (assign, ":continue", 1), 
  (assign, ":block", 0), 
  
   
  ##ashley add, chance of old troops dieing of old age... 
  (try_begin), 
  (assign, ":end_cond", heroes_end), 
  (try_for_range, ":troop_no", heroes_begin, ":end_cond"),
  (neq, ":troop_no", "trp_player"),  
  (neg|is_between, ":troop_no", pretenders_begin, pretenders_end), 
  (this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero), 
  (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady), 
  
  (try_begin), 
  (eq, "$background_type", cb_knight),
  (neg|quest_slot_ge, "qst_avange_father2", slot_quest_current_state, 4), 
  (this_or_next|eq, ":troop_no", "trp_kingdom_15_lord"), 
  (eq, ":troop_no", "trp_kingdom_4_lord"),
  (assign, ":block", 1),
  (else_try),
  (assign, ":block", 0),
  (try_end), 
  
  (eq, ":block", 0), 

  (eq, ":lord_to_kill", -1), 
  
  (troop_get_slot, ":age", ":troop_no", slot_troop_age), 
  
  (try_begin), 
  (gt, ":age", 80),  #do the very old first
  (store_random_in_range, ":rand", 1, 101), ##highest 70% odds
  (ge, ":rand", 30), 
    (assign, ":lord_to_kill", ":troop_no"), 
    (assign, ":end_cond", ":troop_no"), 
    (try_end), 
    
    (try_end), #end loop
    
    (try_begin),  ##ash add don't kill ambros if player is knight as this will make quest noncollectable 
    (gt, ":lord_to_kill", 0), 
    (try_begin), 
    (eq, "$background_type", cb_knight),
    (neg|quest_slot_ge, "qst_avange_father2", slot_quest_current_state, 4), 
    (this_or_next|eq, ":lord_to_kill", "trp_kingdom_15_lord"), 
    (eq, ":lord_to_kill", "trp_kingdom_4_lord"), 
    (assign, ":lord_to_kill", -1), 
    (try_end),     
    (gt, ":lord_to_kill", 0), 
    (is_between, ":lord_to_kill", heroes_begin, heroes_end),  
    #(store_troop_faction, ":faction", ":troop_no"), 
    (call_script, "script_kill_lord", ":lord_to_kill"),  
    (str_store_troop_name, s6, ":lord_to_kill"), 
    (display_log_message, "@You hear {s6} passed peacefully in the night...death comes for us all",color_hero_news),
    (assign, ":continue", 0), 
    
    (else_try), ##do again for younger...
    (eq, ":continue", 1), 
     (assign, ":end_cond", heroes_end), 
     (try_for_range, ":troop_no", heroes_begin, ":end_cond"),
      (neq, ":troop_no", "trp_player"),  
  (neg|is_between, ":troop_no", pretenders_begin, pretenders_end), 
  (this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero), 
  (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),   
  
  (try_begin), 
  (eq, "$background_type", cb_knight),
  (neg|quest_slot_ge, "qst_avange_father2", slot_quest_current_state, 4), 
  (this_or_next|eq, ":troop_no", "trp_kingdom_15_lord"), 
  (eq, ":troop_no", "trp_kingdom_4_lord"),
  (assign, ":block", 1),
  (else_try),
  (assign, ":block", 0),
  (try_end), 
  
  (eq, ":block", 0),     
     (troop_get_slot, ":age", ":troop_no", slot_troop_age), 
     
    (is_between, ":age", 40, 80), 
  
    (try_begin), 
    (gt, ":age", 70),  #
    (store_random_in_range, ":rand", 1, 51), ##higher 50% odds
    (else_try), 
    (gt, ":age", 60),  ##people died young by todays stanards
    (store_random_in_range, ":rand", 1, 101), ##normal 25% odds
    (else_try), 
    (gt, ":age", 55),  ##people died young by todays stanards
    (store_random_in_range, ":rand", 1, 151), ##low 17% odds
    (else_try), 
    (gt, ":age", 45),  ##people died young by todays stanards
    (store_random_in_range, ":rand", 1, 501), ##lowest 5% odds
    (else_try), 
    (assign, ":rand", 1000), #no chance
    (try_end), 
    
    (try_begin), 
    (ge, 25, ":rand"), 
    (eq, ":lord_to_kill", -1), 
    (assign, ":lord_to_kill", ":troop_no"),  
    (assign, ":end_cond", ":troop_no"),  
    (try_end),
       
    (try_end), 
    (try_end), #end loop
     
    (try_begin),  
    (gt, ":lord_to_kill", 0), 
    (eq, ":continue", 1), 
    (try_begin), 
    (eq, "$background_type", cb_knight),
    (neg|quest_slot_ge, "qst_avange_father2", slot_quest_current_state, 4), 
    (this_or_next|eq, ":lord_to_kill", "trp_kingdom_15_lord"), 
    (eq, ":lord_to_kill", "trp_kingdom_4_lord"), 
    (assign, ":lord_to_kill", -1), 
    (try_end),     
    (gt, ":lord_to_kill", 0), 
    #(store_troop_faction, ":faction", ":troop_no"), 
    (is_between, ":lord_to_kill", heroes_begin, heroes_end),  
    (call_script, "script_kill_lord", ":lord_to_kill"),  
    (str_store_troop_name, s6, ":lord_to_kill"), 
    (display_log_message, "@You hear {s6} has passed peacefully in the night...death comes for us all",color_hero_news),
    (try_end), 
  (try_end), 
  
  ##new player can die of old age now too if they have a child to replace them...
  (try_begin), 
  (troop_get_slot, ":age", "trp_player", slot_troop_age), 
  (ge, ":age", 60), 
  (this_or_next|troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_kingdom_hero), 
  (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_hero), 
  (troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_lady), 
  (store_random_in_range, ":rand", 0, 100), 
  (le, ":rand", 20), 
  (assign, "$old_age_death", 1), 
  (jump_to_menu, "mnu_player_killed4"), 
  (else_try), 
  (ge, ":age", 100),
  (assign, "$old_age_death", 1), 
  (jump_to_menu, "mnu_player_killed4"),
  (else_try), 
  (ge, ":age", 55), #warn player death is possible 
  (display_message, "@You are getting old, make sure you have an heir ready to continue as if you die.", color_hero_news), 
  (try_end), 
  
  
  ]), 


  
  ("continue_as_offspring", [
  (store_script_param, ":child", 1),
  
  (assign, "$player_is_child", 1),
  (assign, "$parent_agetype", "$age_type"), 
  (assign, "$faith_conversion", 0), #reset now new leader
  
   (call_script, "script_troop_set_title_according_to_faction", ":child", "fac_outlaws"), #remove their titles
  #
  (try_begin), 
  (is_between, ":child", npc_children_male_begin, npc_children_female_end), ##this is a second generation
  (troop_get_type, ":is_female", ":child"), 
 # (val_mod, ":is_female", 1), 
  
  (troop_get_type, ":old_gender", "trp_player"), 
  (val_mod, ":old_gender", 2), 
  
  (try_begin), 
  (eq, ":old_gender", tf_male), 
  (assign, "$temp2", 0), 
  (troop_set_name, "trp_player_dead_saymotherfather", "@father"),
  (troop_set_plural_name, "trp_player_dead_saymotherfather", "@father"),  
  (else_try), 
  (assign, "$temp2", 1),
  (troop_set_name, "trp_player_dead_saymotherfather", "@mother"),  
  (troop_set_plural_name, "trp_player_dead_saymotherfather", "@mother"),  
  (try_end), 
  
  (troop_set_type, "trp_player", ":is_female"), 
  
  (try_begin), 
  (val_mod, ":is_female", 2), 
  (eq, ":is_female", tf_female),   
  (assign, "$character_gender", tf_female),
  (assign, reg59, tf_female),
  (else_try), 
  (assign, "$character_gender", tf_male),
  (assign, reg59, tf_male),
  (try_end), 
  
  (str_store_troop_face_keys, s1, ":child"), 
  (str_store_troop_face_keys, s2, ":child", 1),
  
  (troop_set_face_keys, "trp_player", s1),
  (troop_set_face_keys, "trp_player", s2,1),
  
  (str_store_troop_name, s6, "trp_player"), 
  (troop_set_name, "trp_temp_troop", "@{s6}"), 
  
  (str_store_troop_name, s3, ":child"),
  (troop_set_name, "trp_player", "@{s3}"), 
  
  (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse), 
  (troop_get_slot, ":daughter_spouse", ":child", slot_troop_spouse), 
  
  (store_troop_faction, ":faction", ":child"),
  
  (troop_get_slot, ":age", ":child", slot_troop_age), 
  (troop_get_slot, ":appearance", ":child", slot_troop_age_appearance), 
  
  
  (try_begin), 
            (is_between, ":age", 12, 24),
            (assign, "$age_type", cb4_young),
            (else_try),
            (is_between, ":age", 24, 42),
            (assign, "$age_type", cb4_adult),
            (else_try), 
            (ge, ":age", 42),
            (assign, "$age_type", cb4_elder),
            (try_end), 
            
    (troop_set_slot, "trp_player", slot_troop_age, ":age"), 
    (troop_set_slot, "trp_player", slot_troop_age_appearance, ":appearance"), 
    (troop_set_age, "trp_player", ":appearance"), 
        
    ##reset wounds
   (try_for_range, ":curr_slot", slot_quest_int_penalty_perma_points, slot_quest_end_penalty_perma_points),
        (quest_get_slot, reg1, "qst_vc_wounds", ":curr_slot"),
        (neq, reg1, 0),    
        (quest_set_slot, "qst_vc_wounds", ":curr_slot", 0), 
        (try_end), 
  
  #(store_random_in_range, ":rand", 0, 5), 
  (troop_get_slot, ":personality", ":child", slot_lord_reputation_type),
  (try_begin), 
  (this_or_next|eq, ":personality", lrep_goodnatured), 
  (eq, ":personality", lrep_otherworldly), 
  (assign, "$defect_type", cb6_temperance),
  (assign, "$player_honor", 10), 
  (else_try),    
  (this_or_next|eq, ":personality", lrep_martial),
  (this_or_next|eq, ":personality", lrep_quarrelsome),
  (eq, ":personality", lrep_adventurous), 
  (assign, "$defect_type", cb6_fortitude),
  (assign, "$player_honor", 0), 
  (else_try),
  (this_or_next|eq, ":personality", lrep_cunning),
  (eq, ":personality", lrep_ambitious), 
  (assign, "$defect_type", cb6_prudence),
  (assign, "$player_honor", -10), 
  (else_try),
  (eq, ":personality", lrep_debauched),
  (assign, "$defect_type", cb6_fortitude), #not really, but closest fit...todo make a new one for mentally ill? 
  (assign, "$player_honor", -20),
  (else_try), 
  (this_or_next|eq, ":personality", lrep_selfrighteous),
  (eq, ":personality", lrep_conventional), 
  (assign, "$defect_type", cb6_prudence),
  (assign, "$player_honor", 2), 
  (else_try),
  (assign, "$defect_type", cb6_justice),
  (assign, "$player_honor", 20), 
  (try_end), 
  
  (troop_get_slot, ":renown", ":child", slot_troop_renown), 
  (troop_set_slot, "trp_player", slot_troop_renown, ":renown"), 
  
##done appearance  

 #level 
 (troop_get_xp, ":exp", "trp_player"),
 
 (val_mul, ":exp", -1), 
 (add_xp_to_troop, ":exp", "trp_player"), ##reset to 0
 
 (try_for_range, ":skills", "skl_trade", "skl_reserved_16"),  
 (store_skill_level, ":level", ":skills", "trp_player"),
 (gt, ":level", 0), 
 (val_sub, ":level", 1), #leave them with at least one 
 (val_mul, ":level", -1), 
 (troop_raise_skill, "trp_player", ":skills", ":level"),
 (try_end), 
 
 (troop_get_xp, ":exp2", ":child"),
 (add_xp_to_troop, ":exp2", "trp_player"),
 
 (try_for_range, ":skills2", "skl_trade", "skl_reserved_16"),  
 (store_skill_level, ":level", ":skills2", ":child"),
 (gt, ":level", 0),   
 (troop_raise_skill, "trp_player", ":skills2", ":level"),
 (try_end), 
  
  (try_for_range, ":attru", ca_strength, wpt_one_handed_weapon), 
  (store_attribute_level, ":atlevel", "trp_player", ":attru"),
  (gt, ":atlevel", 0),
  (val_mul, ":atlevel", -1), 
  (troop_raise_attribute, "trp_player", ":attru", ":atlevel"),
  (try_end),
  
  (try_for_range, ":attru2", ca_strength, wpt_one_handed_weapon), 
  (store_attribute_level, ":atlevel", ":child", ":attru2"),
  (gt, ":atlevel", 0), 
  (troop_raise_attribute, "trp_player", ":attru2", ":atlevel"),
  (try_end),
  
  ##remove all player items
   (troop_clear_inventory, "trp_player"),
   (try_for_range, ":item", "itm_tutorial_spear", "itm_bear_meat"),
   (troop_has_item_equipped, "trp_player", ":item"),  
   (troop_remove_item, "trp_player", ":item"),       
   (try_end), 
   
   ##give player daughters items 
    (troop_get_inventory_slot,":cur_item1",":child",ek_body),
            (try_begin),
              (gt, ":cur_item1", 0),
              (troop_add_item, "trp_player", ":cur_item1"),
            (try_end),     
    (troop_get_inventory_slot,":cur_item2",":child",ek_foot),
            (try_begin),
              (gt, ":cur_item2", 0),
              (troop_add_item, "trp_player", ":cur_item2"),
            (try_end),             
            
             (troop_equip_items, "trp_player"),
              (troop_loot_troop, "trp_player", ":child", 100), 
   (troop_add_item, "trp_player", "itm_bread"), 
  
  
   
   ##handle family relations 
   (assign, ":do_once_mult_bro_father", 0),
   (try_for_range, ":children", npc_children_male_begin, players_children_end), 
   (this_or_next|troop_slot_eq, ":children", slot_troop_occupation, cam_slto_child),  
   (this_or_next|troop_slot_eq, ":children", slot_troop_occupation, slto_kingdom_hero),
   (troop_slot_eq, ":children", slot_troop_occupation, slto_kingdom_lady),
   
   ##new father / mother slots...
   (try_begin), 
   (eq, ":old_gender", tf_male), ##player was father
   (troop_slot_eq, ":children", slot_troop_father, "trp_player"),
   
    (try_begin), 
        (eq,  ":do_once_mult_bro_father", 0), ##avoid creating different new fathers, only one new father to be made.
        (store_mul, ":new_old_father", ":children", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
        (val_add, ":new_old_father", DPLMC_VIRTUAL_RELATIVE_FATHER_OFFSET),#defined in module_constants.py
        (val_sub, ":new_old_father", "$grand_parents_created_since_game_start"), ##brand new troop!
        (assign, ":do_once_mult_bro_father", 1), 
        (try_end), 
          
       (troop_set_slot, ":children", slot_troop_father, ":new_old_father"), 
   
   (else_try), ##player was mother...
    (troop_slot_eq, ":children", slot_troop_mother, "trp_player"),
    
   
   (try_begin), 
        (eq,  ":do_once_mult_bro_father", 0), ##avoid creating different new fathers, only one new father to be made.
        (store_mul, ":new_old_mother", ":children", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
        (val_add, ":new_old_mother", DPLMC_VIRTUAL_RELATIVE_MOTHER_OFFSET),#defined in module_constants.py
        (val_sub, ":new_old_mother", "$grand_parents_created_since_game_start"), ##brand new troop!
        (assign, ":do_once_mult_bro_father", 1), 
        (try_end), 
          
       (troop_set_slot, ":children", slot_troop_mother, ":new_old_mother"), 
       
     (try_end), 
    (try_end), #loop 
    
    (val_add, "$grand_parents_created_since_game_start", 1), 
    
    ##keep other parent if still alive...
    (try_begin), 
    (eq, ":old_gender", tf_male), ##player was father
     (troop_get_slot, ":mother", ":child", slot_troop_mother),    
        (troop_set_slot, "trp_player", slot_troop_mother, ":mother"),
        (try_begin), 
        (is_between, ":mother", heroes_begin, heroes_end), 
        (call_script, "script_change_player_relation_with_troop", ":mother", 15), 
       (try_end), 
       (troop_set_slot, "trp_player", slot_troop_father, ":new_old_father"),
       
       (try_begin), 
       (troop_slot_eq, "trp_npc_bastard", slot_troop_father, "trp_player"), 
       (troop_set_slot, "trp_npc_bastard", slot_troop_father, ":new_old_father"),
       (try_end), 
       
     (else_try),  #player was mother
      (troop_get_slot, ":father", ":child", slot_troop_father), 
       (troop_set_slot, "trp_player", slot_troop_father, ":father"),
       (try_begin), 
       (is_between, ":father", heroes_begin, heroes_end), 
        (call_script, "script_change_player_relation_with_troop", ":father", 15), 
       (try_end), 
       (troop_set_slot, "trp_player", slot_troop_mother, ":new_old_mother"),
       (try_begin), 
       (troop_slot_eq, "trp_npc_bastard", slot_troop_mother, "trp_player"), 
       (troop_set_slot, "trp_npc_bastard", slot_troop_mother, ":new_old_mother"),
       (try_end), 
     (try_end),   
  
    ##handle any children daughter had...
    (assign, "$total_children", 0), 
   (try_for_range, ":daughter_chidren", npc_children_male_begin, players_children_end), 
   (troop_slot_eq, ":daughter_chidren", slot_troop_mother, ":child"),    
   (troop_get_slot, ":mother_confirm", ":daughter_chidren", slot_troop_mother), 
   (try_begin), 
   (eq, ":mother_confirm", ":child"),      
   (val_add, "$total_children", 1), 
   (troop_set_slot, ":daughter_chidren", slot_troop_mother, "trp_player"),
  (try_end),  
   (try_end), 
   
   (try_for_range, ":daughter_chidren", npc_children_male_begin, players_children_end), 
   (troop_slot_eq, ":daughter_chidren", slot_troop_father, ":child"),    
   (troop_get_slot, ":father_confirm", ":daughter_chidren", slot_troop_father), 
   (try_begin), 
   (eq, ":father_confirm", ":child"),      
   (val_add, "$total_children", 1), 
   (troop_set_slot, ":daughter_chidren", slot_troop_father, "trp_player"),
  (try_end),  
   (try_end), 
   
    (try_begin), 
  (gt, ":spouse", 0), 
  (troop_set_slot, ":spouse", slot_troop_spouse, -1), 
  (troop_set_slot, "trp_player", slot_troop_spouse, -1),  
  (try_end), 
  
  (troop_get_slot, ":betrothed", "trp_player", slot_troop_betrothed), 
  (try_begin), 
  (gt, ":betrothed", 0), 
  (troop_set_slot, ":betrothed", slot_troop_betrothed, -1), 
  (troop_set_slot, "trp_player", slot_troop_betrothed, -1), 
  (try_end),  
   
   (try_begin), 
  (gt, ":daughter_spouse", 0), 
  (troop_set_slot, ":daughter_spouse", slot_troop_spouse, "trp_player"), 
  (troop_set_slot, "trp_player", slot_troop_spouse, ":daughter_spouse"), 
  (troop_set_slot, ":child", slot_troop_spouse, -1), 
  (else_try), 
  (troop_get_slot, ":daughter_betrothed", ":child", slot_troop_betrothed), 
  (gt, ":daughter_betrothed", 0),  
  (troop_set_slot, ":daughter_betrothed", slot_troop_betrothed, "trp_player"), 
  (troop_set_slot, "trp_player", slot_troop_betrothed, ":daughter_betrothed"), 
   (troop_set_slot, ":child", slot_troop_betrothed, -1), 
  (try_end),
  
   ##clear any non hero prisoners from main party
   (try_begin), 
   (neg|troop_slot_eq, ":child", slot_troop_occupation, slto_player_companion), #new don't do anything with main party if was with player party. 
   (party_get_num_prisoner_stacks, ":prisoners", "p_main_party"),
    (try_for_range_backwards, ":troop_iterator", 0, ":prisoners"),
              (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":troop_iterator"),
        (try_begin),         
        (neg|troop_is_hero, ":stack_troop"),
        (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":troop_iterator"),
        (party_remove_prisoners, "p_main_party", ":stack_troop", ":stack_size"),    
        (else_try), 
        (troop_is_hero, ":stack_troop"),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"), 
         (party_remove_prisoners, "p_main_party", ":stack_troop", 1), 
        (try_end), 
    (try_end),     
    
    ##move any prisoners daughter had to main party. 
     (troop_get_slot, ":cur_party", ":child", slot_troop_leaded_party),
   (try_begin), 
   (gt, ":cur_party", 0), 
   (party_is_active, ":cur_party"), 
   (party_get_num_prisoner_stacks, ":prisoners", ":cur_party"),
    (try_for_range, ":unused", 0, ":prisoners"),
              (party_prisoner_stack_get_troop_id, ":stack_troop", ":cur_party", ":unused"),
        (try_begin),         
        (neg|troop_is_hero, ":stack_troop"),
        (party_prisoner_stack_get_size, ":stack_size", ":cur_party", ":unused"),
        (party_add_prisoners, "p_main_party", ":stack_troop", ":stack_size"),
        (party_remove_prisoners, ":cur_party", ":stack_troop", ":stack_size"),    
        (else_try),
        (troop_is_hero, ":stack_troop"),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"),
        (party_remove_prisoners, ":cur_party", ":stack_troop", 1),
        (troop_join_as_prisoner, ":stack_troop"),    
        (troop_set_slot, ":stack_troop", slot_troop_prisoner_of_party, "p_main_party"),  
        (try_end), 
  (try_end), 
 (try_end),  
   ##clear player party... old
  # (party_get_num_companion_stacks,":companions", "p_main_party"),
  # (assign, ":num_men", 0), 
  # (try_for_range, ":unused", 0, ":companions"),
              # (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":companions"),
        # (neg|troop_is_hero, ":stack_troop"),
        # (neq, ":stack_troop", "trp_player"), 
        # (party_stack_get_size, ":stack_size", "p_main_party", ":companions"),
        # (val_add, ":num_men", ":stack_size"), 
      # #  (party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),    
         # (try_end),
     # (try_for_range, ":unused", 0, ":num_men"),
          # (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
        # (try_end),     
        
    ##new create a new deserter party of players men where player left off...
    (party_clear, "p_temp_party"),
    (party_get_num_companion_stacks,":companions", "p_main_party"),
    (try_for_range_backwards, ":unused", 0, ":companions"),
    (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
    (neg|troop_is_hero, ":stack_troop"),
    (party_stack_get_size, ":stack_size", "p_main_party", ":unused"),
    (party_add_members, "p_temp_party", ":stack_troop", ":stack_size"),
    (try_end), 
    
    (store_party_size_wo_prisoners, ":main_size", "p_temp_party"), 
    (try_begin), 
    (gt, ":main_size", 2), 
     (set_spawn_radius, 4),
     (spawn_around_party,"p_main_party","pt_deserters"),
     (assign, ":new_party", reg(0)),
            (call_script, "script_party_add_party", ":new_party", "p_temp_party"),
            (party_set_faction, ":new_party", "fac_deserters"),
            (party_get_position, pos0,  ":new_party"),
            (party_set_ai_behavior, ":new_party", ai_bhvr_patrol_location),
            (party_set_ai_patrol_radius, ":new_party", 40),
            (party_set_ai_target_position, ":new_party", pos0),
        (str_store_troop_name, s3, "trp_temp_troop"),     
        (str_store_string, s3, "@{s3}'s old party"), 
         (party_set_name,":new_party",s3),
    (try_end),      
         
    ##now clear main party...
  (party_get_num_companion_stacks,":companions", "p_main_party"),
  (assign, ":num_men", 0), 
  (try_for_range, ":unused", 0, ":companions"),
              (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
        (neg|troop_is_hero, ":stack_troop"),
        (neq, ":stack_troop", "trp_player"), 
        (party_stack_get_size, ":stack_size", "p_main_party", ":unused"),
        (val_add, ":num_men", ":stack_size"), 
      #  (party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),    
         (try_end),
     (try_for_range, ":unused", 0, ":num_men"),
          (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
        (try_end),    
        
        ##move party to where lady is
    (troop_get_slot, ":cur_residence", ":child", slot_troop_cur_center),
   (try_begin), 
   (is_between, ":cur_residence", centers_begin, centers_end), 
   (party_get_position, pos0, ":cur_residence"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (else_try), 
   (troop_get_slot, ":home", ":child", slot_troop_home), 
   (is_between, ":home", centers_begin, centers_end), 
   (party_get_position, pos0, ":home"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (else_try), 
   (call_script, "script_lord_get_home_center", ":child"),
    (assign, ":center", reg0),
    (is_between, ":center", centers_begin, centers_end), 
   (party_get_position, pos0, ":center"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (try_end), 
         
    ##handle if lady had party...
     (troop_get_slot, ":cur_party", ":child", slot_troop_leaded_party),
   (try_begin), 
   (gt, ":cur_party", 0), 
   (party_is_active, ":cur_party"), 
   (party_get_position, pos0, ":cur_party"),
   (assign, ":radius", 1),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),    
   (party_get_num_companion_stacks, ":num_stacks", ":cur_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":cur_party", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size", ":cur_party", ":i_stack"),
        (party_remove_members, ":cur_party", ":stack_troop", ":stack_size"),    
        (party_add_members, "p_main_party", ":stack_troop", ":stack_size"), 
        (try_end), 
        (remove_party, ":cur_party"),
   (try_end), 
   
   (else_try), 
   (troop_slot_eq, ":child", slot_troop_occupation, slto_player_companion),
   (main_party_has_troop, ":child"), 
   (remove_member_from_party, ":child"),
   (try_end), #new end don't do anything with parties if child was a companion
   
   #re-name player party 
   (str_store_troop_name, s2, "trp_player"), 
    (party_set_name,"p_main_party",s2),
   
   (troop_set_health, "trp_player", 100), 
   
   ##handle player old relations
   (try_for_range, ":lord", heroes_begin, heroes_end), 
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),  
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_lady),
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_inactive_pretender),
   (troop_slot_eq, ":lord", slot_troop_occupation, cam_slto_child),
   (neq, ":lord", ":child"),
  # (call_script, "script_reset_player_relation_with_troop", ":lord"), #
  (troop_get_slot, ":old_relation", ":lord", slot_troop_player_relation),
  (try_begin), 
  (ge, ":old_relation", 40), 
  (call_script, "script_add_log_entry", logent_player_kill_was_friend, "trp_player",  -1, ":lord", -1),  
  (else_try), #
  (le, ":old_relation", -40), 
  (call_script, "script_add_log_entry", logent_player_kill_was_enemy, "trp_player",  -1, ":lord", -1), 
  (try_end),
   (troop_set_slot, ":lord", slot_troop_player_relation, 0),
   (troop_set_slot, ":lord", slot_troop_met, 0),
   (call_script, "script_troop_get_relation_with_troop", ":lord", ":child"), 
   (assign, ":relation", reg0), 
   #(call_script, "script_change_player_relation_with_troop", ":lord", ":relation"),     
   (troop_set_slot, ":lord", slot_troop_player_relation, ":relation"),
   (try_begin), 
   (neq, ":relation", 0), 
   (troop_set_slot, ":lord", slot_troop_met, 1),
   (else_try),
   (is_between, ":lord", players_children_begin, players_children_end), 
   (troop_set_slot, ":lord", slot_troop_met, 1),
   (try_end), 
  (try_end),  
  
  ##faction issues for both genders
  (try_begin), 
  (is_between, "$supported_pretender", pretenders_begin, pretenders_end),
  ##handle give up cause...
  (troop_get_slot, ":original_faction", "$supported_pretender", slot_troop_original_faction),
  (call_script, "script_add_log_entry", logent_player_killed_supporting_pretender, "trp_player",  -1, "$supported_pretender", ":original_faction"),
  (try_for_range, ":cur_troop", heroes_begin, heroes_end),
       (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
       (neq, "$supported_pretender", ":cur_troop"),
       (store_troop_faction, ":cur_faction", ":cur_troop"),
       (eq, ":cur_faction", "fac_player_supporters_faction"),
       (call_script, "script_change_troop_faction", ":cur_troop", ":original_faction"),
     (try_end),
     (troop_set_faction, "$supported_pretender", ":original_faction"), ##return them so child can continue cause if desires
     (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
     (troop_set_slot, "$supported_pretender", slot_troop_occupation, slto_inactive_pretender), 
     (troop_set_slot, "$supported_pretender", slot_troop_cur_center, -1), 
     (try_for_range, ":cur_center", centers_begin, centers_end),
      (party_is_active, ":cur_center"),
       (store_faction_of_party, ":cur_faction", ":cur_center"),
       (eq, ":cur_faction", "fac_player_supporters_faction"),
       (party_set_faction, ":cur_center", ":original_faction"), 
       (party_set_slot, ":cur_center", slot_town_lord, stl_unassigned),
     (try_end),
     (party_remove_members, "p_main_party", "$supported_pretender", 1),
     (faction_set_slot, ":original_faction", slot_faction_has_rebellion_chance, 1),
     (assign, "$supported_pretender", 0),
     (call_script, "script_deactivate_player_faction"),
     (call_script, "script_end_quest", "qst_rebel_against_kingdom"),
     (assign, "$temp", ":child"), 
     (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  ##
  (else_try), 
  
  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), ##player was vessel
  (troop_slot_eq, ":child", slot_troop_occupation, slto_kingdom_hero), #daughter was hero
  
  
  (call_script, "script_player_leave_faction", 1),
  
  (try_begin), 
  (neq, ":faction", "fac_adventurers"),  
  (call_script, "script_player_join_faction", ":faction"), 
  (try_for_range, ":center", centers_begin, centers_end), 
  (party_slot_eq, ":center", slot_town_lord, ":child"), 
  (call_script, "script_give_center_to_lord", ":center", "trp_player", 0),  
  (try_end), 
  
  (else_try), 
  (eq, ":faction", "fac_adventurers"),
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (try_end), 
  
  (assign, "$temp", ":child"), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  
  (else_try), 
  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), ##player was vessel
  
  
  (call_script, "script_player_leave_faction", 1),
  
  (try_begin), 
  (neq, ":faction", "fac_adventurers"),  
  (call_script, "script_player_join_faction", ":faction"), 
  (else_try), 
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (try_end), 
  
  (assign, "$temp", ":child"), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (neq, "$players_kingdom", ":faction"), 
  (is_between, ":faction", npc_kingdoms_begin, npc_kingdoms_end), 
  (eq, ":is_female", tf_female), ##only for women
  (str_store_faction_name, s8, "$players_kingdom"), 
        (try_for_range, ":npc", heroes_begin, heroes_end),
            (store_faction_of_troop, ":npc_faction", ":npc"),
            (eq, ":npc_faction", "fac_player_supporters_faction"),
            (troop_slot_eq, ":npc", slot_troop_occupation, slto_kingdom_hero),
            (call_script, "script_change_troop_faction", ":npc", ":faction"),
            ##move dependents ladies
             (try_for_range, ":kingdom_lady", heroes_begin, heroes_end),
            (this_or_next|is_between, ":kingdom_lady", npc_children_female_begin, players_children_end), #new 3.0 line
            (is_between, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end), #new 3.0 line
            (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
     
        (call_script, "script_get_kingdom_lady_social_determinants", ":kingdom_lady"),
        (assign, ":closest_male_relative", reg0),
        (assign, ":new_center", reg1),
        
        (eq, ":closest_male_relative", ":npc"),
        
        (troop_set_faction, ":kingdom_lady", ":faction"),
        (troop_slot_eq, ":kingdom_lady", slot_troop_prisoner_of_party, -1),
        (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, ":new_center"),
         # Jrider + TITLES v0.0 change ladies title
         (neq, ":faction", "fac_adventurers"), 
          (call_script, "script_troop_set_title_according_to_faction", ":kingdom_lady", ":faction"),
          # Jrider -
      (try_end),
        (try_end),
        (try_for_range, ":center", centers_begin, centers_end),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "fac_player_supporters_faction"),
            (party_set_faction, ":center", ":faction"), 
    (try_end),
    
    ##now check for any left over ladies or kids...
         (try_for_range, ":kingdom_lady", heroes_begin, heroes_end),
     (this_or_next|is_between, ":kingdom_lady", npc_children_male_begin, players_children_end), #include all possible children
      (is_between, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end), #
      (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_occupation, cam_slto_child), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
      (store_troop_faction, ":old_fac", ":kingdom_lady"), 
      (eq, ":old_fac", "fac_player_supporters_faction"), 
      (try_begin), 
      (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_father, "trp_player"), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_mother, "trp_player"), 
      (troop_set_faction, ":kingdom_lady", ":faction"), 
      # (troop_join, ":kingdom_lady"), 
      # (troop_set_slot, ":kingdom_lady", slot_troop_occupation, slto_player_companion), 
      # (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (else_try), 
      (is_between, ":kingdom_lady", npc_children_male_begin, players_children_end), #special situation for children 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, cam_slto_child), 
      (troop_get_slot, ":father", ":kingdom_lady", slot_troop_father), 
      (assign, ":found_relative", 0), 
        (try_begin), 
        (is_between, ":father", heroes_begin, heroes_end), 
        (troop_slot_eq, ":father", slot_troop_occupation, slto_kingdom_hero), 
        (store_troop_faction, ":father_fac", ":father"), 
        (is_between, ":father_fac", npc_kingdoms_begin, npc_kingdoms_end),  #exclude player faction
        (faction_slot_eq, ":father_fac", slot_faction_state, sfs_active), 
        (troop_set_faction, ":kingdom_lady", ":father_fac"), 
         (assign, ":found_relative", 1),         
        (else_try), 
        (troop_get_slot, ":mother", ":kingdom_lady", slot_troop_mother), 
        (is_between, ":mother", heroes_begin, heroes_end),
        (this_or_next|troop_slot_eq, ":mother", slot_troop_occupation, slto_kingdom_lady), 
        (troop_slot_eq, ":mother", slot_troop_occupation, slto_kingdom_hero), 
        (store_troop_faction, ":mother_fac", ":mother"), 
        (is_between, ":mother_fac", npc_kingdoms_begin, npc_kingdoms_end),
        (faction_slot_eq, ":mother_fac", slot_faction_state, sfs_active), 
        (troop_set_faction, ":kingdom_lady", ":mother_fac"), 
         (assign, ":found_relative", 1),     
        (else_try), 
        (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_father, ":new_old_father"),     
        (troop_slot_eq, ":kingdom_lady", slot_troop_mother, ":new_old_mother"), ##they are brothers sisters of child_f, and above calls failed...other parent dead?
        (troop_set_faction, ":kingdom_lady", ":faction"), 
         (assign, ":found_relative", 1), 
        (try_end),  
      (eq, ":found_relative", 1),
      (else_try),
      (troop_slot_eq, ":kingdom_lady", slot_troop_spouse, "trp_player"),
      (neg|troop_slot_ge, ":kingdom_lady", slot_troop_prisoner_of_party, 1),
      (troop_set_faction, ":kingdom_lady", ":faction"), 
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (else_try),
      (troop_set_faction, ":kingdom_lady", "fac_no_faction"),     
      (troop_set_slot, ":kingdom_lady", slot_troop_occupation, dplmc_slto_dead),
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      # (str_store_troop_name, s7, ":kingdom_lady"), 
      # (display_log_message, "@You hear {s7} committed suicide rather then being taken hostage!", color_bad_news), 
            # (try_begin), 
            # (troop_slot_eq, ":kingdom_lady", slot_troop_spouse, "trp_player"),
            # (troop_set_slot, ":kingdom_lady", slot_troop_spouse, -1),  
            # (troop_set_slot, "trp_player", slot_troop_spouse, -1), 
            # (try_end), 
      (try_end), 
     (try_end),  
    (call_script, "script_deactivate_player_faction"),
  (call_script, "script_add_notification_menu", "mnu_yourdaughter_overpowered",0,0),
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (neq, "$players_kingdom", ":faction"), 
  (is_between, ":faction", npc_kingdoms_begin, npc_kingdoms_end), #male version
   (str_store_faction_name, s8, ":faction"), 
   (str_store_faction_name, s10, "$players_kingdom"), 
   (faction_get_slot, "$temp", ":faction", slot_faction_leader), 
   (assign, "$temp2", ":child"), # <---4.4 line
   (call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, "$temp", ":faction"),
  (call_script, "script_add_notification_menu", "mnu_yourson_king_byrenouce",":faction","$players_kingdom"),
  
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (eq, "$players_kingdom", ":faction"), 
  (eq, ":is_female", tf_male),
  (call_script, "script_add_notification_menu", "mnu_yourson_king","$players_kingdom",0),
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (eq, "$players_kingdom", ":faction"), 
  (call_script, "script_add_notification_menu", "mnu_yourdaughter_queen",0,0),
  (else_try), 
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (assign, "$temp", ":child"), 
  (assign, "$can_read", 0), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  (try_end), 
  
  (call_script, "script_kill_lord", ":child"), ##remove from play
  
  ##########ADD-ON NEXT GEN END
  (else_try), 
  (eq, ":child", "trp_child_f"), 
  
  ##change appearance
  (troop_get_type, ":is_female", "trp_child_f"), 
 # (val_mod, ":is_female", 1), 
  
  (troop_get_type, ":old_gender", "trp_player"), 
  (val_mod, ":old_gender", 2), 
  
  (try_begin), 
  (eq, ":old_gender", tf_male), 
  (assign, "$temp2", 0), 
  (troop_set_name, "trp_player_dead_saymotherfather", "@father"),
  (troop_set_plural_name, "trp_player_dead_saymotherfather", "@father"),  
  (else_try), 
  (assign, "$temp2", 1),
  (troop_set_name, "trp_player_dead_saymotherfather", "@mother"),  
  (troop_set_plural_name, "trp_player_dead_saymotherfather", "@mother"),  
  (try_end), 
  
  (troop_set_type, "trp_player", ":is_female"), 
  
  (assign, "$character_gender", tf_female),
  (assign, reg59, tf_female),
  
  (str_store_troop_face_keys, s1, "trp_child_f"), 
  (str_store_troop_face_keys, s2, "trp_child_f", 1),
  
  (troop_set_face_keys, "trp_player", s1),
  (troop_set_face_keys, "trp_player", s2,1),
  
  (str_store_troop_name, s6, "trp_player"), 
  (troop_set_name, "trp_temp_troop", "@{s6}"), 
  
  (str_store_troop_name, s3, "trp_child_f"),
  (troop_set_name, "trp_player", "@{s3}"), 
  
  (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse), 
  (troop_get_slot, ":daughter_spouse", "trp_child_f", slot_troop_spouse), 
  
  (store_troop_faction, ":faction", "trp_child_f"),
  
  (troop_get_slot, ":age", "trp_child_f", slot_troop_age), 
  (troop_get_slot, ":appearance", "trp_child_f", slot_troop_age_appearance), 
  
  
  (try_begin), 
            (is_between, ":age", 12, 24),
            (assign, "$age_type", cb4_young),
            (else_try),
            (is_between, ":age", 24, 42),
            (assign, "$age_type", cb4_adult),
            (else_try), 
            (ge, ":age", 42),
            (assign, "$age_type", cb4_elder),
            (try_end), 
            
    (troop_set_slot, "trp_player", slot_troop_age, ":age"), 
    (troop_set_slot, "trp_player", slot_troop_age_appearance, ":appearance"), 
    (troop_set_age, "trp_player", ":appearance"), 
        
    ##reset wounds
   (try_for_range, ":curr_slot", slot_quest_int_penalty_perma_points, slot_quest_end_penalty_perma_points),
        (quest_get_slot, reg1, "qst_vc_wounds", ":curr_slot"),
        (neq, reg1, 0),    
        (quest_set_slot, "qst_vc_wounds", ":curr_slot", 0), 
        (try_end), 
  
  #(store_random_in_range, ":rand", 0, 5), 
  (troop_get_slot, ":personality", "trp_child_f", slot_lord_reputation_type),
  (try_begin), 
  (eq, ":personality", lrep_otherworldly), 
  (assign, "$defect_type", cb6_temperance),
  (assign, "$player_honor", 10), 
  (else_try),    
  (eq, ":personality", lrep_adventurous), 
  (assign, "$defect_type", cb6_fortitude),
  (assign, "$player_honor", 0), 
  (else_try),
  (eq, ":personality", lrep_ambitious), 
  (assign, "$defect_type", cb6_prudence),
  (assign, "$player_honor", -10), 
  (else_try),
  (eq, ":personality", lrep_conventional), 
  (assign, "$defect_type", cb6_prudence),
  (assign, "$player_honor", 2), 
  (else_try),
  (assign, "$defect_type", cb6_justice),
  (assign, "$player_honor", 20), 
  (try_end), 
  
  (troop_get_slot, ":renown", "trp_child_f", slot_troop_renown), 
  (troop_set_slot, "trp_player", slot_troop_renown, ":renown"), 
  
##done appearance  

 #level 
 (troop_get_xp, ":exp", "trp_player"),
 (val_mul, ":exp", -1), 
 (add_xp_to_troop, ":exp", "trp_player"), ##reset to 0
 
 (try_for_range, ":skills", "skl_trade", "skl_reserved_16"),  
 (store_skill_level, ":level", ":skills", "trp_player"),
 (gt, ":level", 0),  
 (val_mul, ":level", -1), 
 (troop_raise_skill, "trp_player", ":skills", ":level"),
 (try_end), 
 
 (troop_get_xp, ":exp2", "trp_child_f"),
 (add_xp_to_troop, ":exp2", "trp_player"),
 
 (try_for_range, ":skills2", "skl_trade", "skl_reserved_16"),  
 (store_skill_level, ":level", ":skills2", "trp_child_f"),
 (gt, ":level", 0),   
 (troop_raise_skill, "trp_player", ":skills2", ":level"),
 (try_end), 
  
  (try_for_range, ":attru", ca_strength, wpt_one_handed_weapon), 
  (store_attribute_level, ":atlevel", "trp_player", ":attru"),
  (gt, ":atlevel", 0),
  (val_mul, ":atlevel", -1), 
  (troop_raise_attribute, "trp_player", ":attru", ":atlevel"),
  (try_end),
  
  (try_for_range, ":attru2", ca_strength, wpt_one_handed_weapon), 
  (store_attribute_level, ":atlevel", "trp_child_f", ":attru2"),
  (gt, ":atlevel", 0), 
  (troop_raise_attribute, "trp_player", ":attru2", ":atlevel"),
  (try_end),
  
  ##remove all player items
   (troop_clear_inventory, "trp_player"),
   (try_for_range, ":item", "itm_tutorial_spear", "itm_bear_meat"),
   (troop_has_item_equipped, "trp_player", ":item"),  
   (troop_remove_item, "trp_player", ":item"),       
   (try_end), 
   
   ##give player daughters items 
    (troop_get_inventory_slot,":cur_item1","trp_child_f",ek_body),
            (try_begin),
              (gt, ":cur_item1", 0),
              (troop_add_item, "trp_player", ":cur_item1"),
            (try_end),     
    (troop_get_inventory_slot,":cur_item2","trp_child_f",ek_foot),
            (try_begin),
              (gt, ":cur_item2", 0),
              (troop_add_item, "trp_player", ":cur_item2"),
            (try_end),             
            
             (troop_equip_items, "trp_player"),
              (troop_loot_troop, "trp_player", "trp_child_f", 100), 
   (troop_add_item, "trp_player", "itm_bread"), 
  
  
   
   ##handle family relations 
   (assign, ":do_once_mult_bro_father", 0),
   (try_for_range, ":children", npc_children_male_begin, players_children_end), 
   (this_or_next|troop_slot_eq, ":children", slot_troop_occupation, cam_slto_child),  
   (this_or_next|troop_slot_eq, ":children", slot_troop_occupation, slto_kingdom_hero),
   (troop_slot_eq, ":children", slot_troop_occupation, slto_kingdom_lady),
   
   ##new father / mother slots...
   (try_begin), 
   (eq, ":old_gender", tf_male), ##player was father
   (troop_slot_eq, ":children", slot_troop_father, "trp_player"),
   
    (try_begin), 
        (eq,  ":do_once_mult_bro_father", 0), ##avoid creating different new fathers, only one new father to be made.
        (store_mul, ":new_old_father", ":children", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
        (val_add, ":new_old_father", DPLMC_VIRTUAL_RELATIVE_FATHER_OFFSET),#defined in module_constants.py
        (val_sub, ":new_old_father", "$grand_parents_created_since_game_start"), ##brand new troop!
        (assign, ":do_once_mult_bro_father", 1), 
        (try_end), 
          
       (troop_set_slot, ":children", slot_troop_father, ":new_old_father"), 
   
   (else_try), ##player was mother...
    (troop_slot_eq, ":children", slot_troop_mother, "trp_player"),
    
   
   (try_begin), 
        (eq,  ":do_once_mult_bro_father", 0), ##avoid creating different new fathers, only one new father to be made.
        (store_mul, ":new_old_mother", ":children", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
        (val_add, ":new_old_mother", DPLMC_VIRTUAL_RELATIVE_MOTHER_OFFSET),#defined in module_constants.py
        (val_sub, ":new_old_mother", "$grand_parents_created_since_game_start"), ##brand new troop!
        (assign, ":do_once_mult_bro_father", 1), 
        (try_end), 
          
       (troop_set_slot, ":children", slot_troop_mother, ":new_old_mother"), 
       
     (try_end), 
    (try_end), #loop 
    
    (val_add, "$grand_parents_created_since_game_start", 1), ##brand new troop!
    
    ##keep other parent if still alive...
    (try_begin), 
    (eq, ":old_gender", tf_male), ##player was father
     (troop_get_slot, ":mother", "trp_child_f", slot_troop_mother), 
       
        (troop_set_slot, "trp_player", slot_troop_mother, ":mother"),
        (try_begin), 
        (is_between, ":mother", heroes_begin, heroes_end), 
        (call_script, "script_change_player_relation_with_troop", ":mother", 15), 
       (try_end), 
       (troop_set_slot, "trp_player", slot_troop_father, ":new_old_father"),
       
       (try_begin), 
       (troop_slot_eq, "trp_npc_bastard", slot_troop_father, "trp_player"), 
       (troop_set_slot, "trp_npc_bastard", slot_troop_father, ":new_old_father"),
       (try_end), 
       
     (else_try),  #player was mother
      (troop_get_slot, ":father", "trp_child_f", slot_troop_father), 
       (troop_set_slot, "trp_player", slot_troop_father, ":father"),
       (try_begin), 
       (is_between, ":father", heroes_begin, heroes_end), 
        (call_script, "script_change_player_relation_with_troop", ":father", 15), 
       (try_end), 
       (troop_set_slot, "trp_player", slot_troop_mother, ":new_old_mother"),
       (try_begin), 
       (troop_slot_eq, "trp_npc_bastard", slot_troop_mother, "trp_player"), 
       (troop_set_slot, "trp_npc_bastard", slot_troop_mother, ":new_old_mother"),
       (try_end), 
     (try_end),   
  
    ##handle any children daughter had...
    (assign, "$total_children", 0), 
   (try_for_range, ":daughter_chidren", npc_children_male_begin, npc_children_female_end), 
   (troop_slot_eq, ":daughter_chidren", slot_troop_mother, "trp_child_f"),    
   (troop_get_slot, ":mother_confirm", ":daughter_chidren", slot_troop_mother), 
   (try_begin), 
   (eq, ":mother_confirm", "trp_child_f"),      
   (val_add, "$total_children", 1), 
   (troop_set_slot, ":daughter_chidren", slot_troop_mother, "trp_player"),
  (try_end),  
   (try_end), 
   
    (try_begin), 
  (gt, ":spouse", 0), 
  (troop_set_slot, ":spouse", slot_troop_spouse, -1), 
  (troop_set_slot, "trp_player", slot_troop_spouse, -1),  
  (try_end), 
  
  (troop_get_slot, ":betrothed", "trp_player", slot_troop_betrothed), 
  (try_begin), 
  (gt, ":betrothed", 0), 
  (troop_set_slot, ":betrothed", slot_troop_betrothed, -1), 
  (troop_set_slot, "trp_player", slot_troop_betrothed, -1), 
  (try_end),  
   
   (try_begin), 
  (gt, ":daughter_spouse", 0), 
  (troop_set_slot, ":daughter_spouse", slot_troop_spouse, "trp_player"), 
  (troop_set_slot, "trp_player", slot_troop_spouse, ":daughter_spouse"), 
  (troop_set_slot, "trp_child_f", slot_troop_spouse, -1), 
  (else_try), 
  (troop_get_slot, ":daughter_betrothed", "trp_child_f", slot_troop_betrothed), 
  (gt, ":daughter_betrothed", 0),  
  (troop_set_slot, ":daughter_betrothed", slot_troop_betrothed, "trp_player"), 
  (troop_set_slot, "trp_player", slot_troop_betrothed, ":daughter_betrothed"), 
   (troop_set_slot, "trp_child_f", slot_troop_betrothed, -1), 
  (try_end),
  
   ##clear any non hero prisoners from main party
   (try_begin), 
   (neg|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_player_companion), #new don't do anything with main party if was with player party. 
   (party_get_num_prisoner_stacks, ":prisoners", "p_main_party"),
    (try_for_range_backwards, ":troop_iterator", 0, ":prisoners"),
              (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":troop_iterator"),
        (try_begin),         
        (neg|troop_is_hero, ":stack_troop"),
        (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":troop_iterator"),
        (party_remove_prisoners, "p_main_party", ":stack_troop", ":stack_size"),    
        (else_try), 
        (troop_is_hero, ":stack_troop"),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"), 
         (party_remove_prisoners, "p_main_party", ":stack_troop", 1), 
        (try_end), 
    (try_end),     
    
    ##move any prisoners daughter had to main party. 
     (troop_get_slot, ":cur_party", "trp_child_f", slot_troop_leaded_party),
   (try_begin), 
   (gt, ":cur_party", 0), 
   (party_is_active, ":cur_party"), 
   (party_get_num_prisoner_stacks, ":prisoners", ":cur_party"),
    (try_for_range, ":unused", 0, ":prisoners"),
              (party_prisoner_stack_get_troop_id, ":stack_troop", ":cur_party", ":unused"),
        (try_begin),         
        (neg|troop_is_hero, ":stack_troop"),
        (party_prisoner_stack_get_size, ":stack_size", ":cur_party", ":unused"),
        (party_add_prisoners, "p_main_party", ":stack_troop", ":stack_size"),
        (party_remove_prisoners, ":cur_party", ":stack_troop", ":stack_size"),    
        (else_try),
        (troop_is_hero, ":stack_troop"),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"),
        (party_remove_prisoners, ":cur_party", ":stack_troop", 1),
        (troop_join_as_prisoner, ":stack_troop"),    
        (troop_set_slot, ":stack_troop", slot_troop_prisoner_of_party, "p_main_party"),  
        (try_end), 
  (try_end), 
 (try_end),  
   ##clear player party... old
  # (party_get_num_companion_stacks,":companions", "p_main_party"),
  # (assign, ":num_men", 0), 
  # (try_for_range, ":unused", 0, ":companions"),
              # (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":companions"),
        # (neg|troop_is_hero, ":stack_troop"),
        # (neq, ":stack_troop", "trp_player"), 
        # (party_stack_get_size, ":stack_size", "p_main_party", ":companions"),
        # (val_add, ":num_men", ":stack_size"), 
      # #  (party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),    
         # (try_end),
     # (try_for_range, ":unused", 0, ":num_men"),
          # (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
        # (try_end),     
        
    ##new create a new deserter party of players men where player left off...
    (party_clear, "p_temp_party"),
    (party_get_num_companion_stacks,":companions", "p_main_party"),
    (try_for_range_backwards, ":unused", 0, ":companions"),
    (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
    (neg|troop_is_hero, ":stack_troop"),
    (party_stack_get_size, ":stack_size", "p_main_party", ":unused"),
    (party_add_members, "p_temp_party", ":stack_troop", ":stack_size"),
    (try_end), 
    
    (store_party_size_wo_prisoners, ":main_size", "p_temp_party"), 
    (try_begin), 
    (gt, ":main_size", 2), 
     (set_spawn_radius, 4),
     (spawn_around_party,"p_main_party","pt_deserters"),
     (assign, ":new_party", reg(0)),
            (call_script, "script_party_add_party", ":new_party", "p_temp_party"),
            (party_set_faction, ":new_party", "fac_deserters"),
            (party_get_position, pos0,  ":new_party"),
            (party_set_ai_behavior, ":new_party", ai_bhvr_patrol_location),
            (party_set_ai_patrol_radius, ":new_party", 40),
            (party_set_ai_target_position, ":new_party", pos0),
        (str_store_troop_name, s3, "trp_temp_troop"),     
        (str_store_string, s3, "@{s3}'s old party"), 
         (party_set_name,":new_party",s3),
    (try_end),      
         
    ##now clear main party...
  (party_get_num_companion_stacks,":companions", "p_main_party"),
  (assign, ":num_men", 0), 
  (try_for_range, ":unused", 0, ":companions"),
              (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
        (neg|troop_is_hero, ":stack_troop"),
        (neq, ":stack_troop", "trp_player"), 
        (party_stack_get_size, ":stack_size", "p_main_party", ":unused"),
        (val_add, ":num_men", ":stack_size"), 
      #  (party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),    
         (try_end),
     (try_for_range, ":unused", 0, ":num_men"),
          (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
        (try_end),    
        
        ##move party to where lady is
    (troop_get_slot, ":cur_residence", "trp_child_f", slot_troop_cur_center),
   (try_begin), 
   (is_between, ":cur_residence", centers_begin, centers_end), 
   (party_get_position, pos0, ":cur_residence"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (else_try), 
   (troop_get_slot, ":home", "trp_child_f", slot_troop_home), 
   (is_between, ":home", centers_begin, centers_end), 
   (party_get_position, pos0, ":home"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (else_try), 
   (call_script, "script_lord_get_home_center", "trp_child_f"),
    (assign, ":center", reg0),
    (is_between, ":center", centers_begin, centers_end), 
   (party_get_position, pos0, ":center"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (try_end), 
         
    ##handle if lady had party...
     (troop_get_slot, ":cur_party", "trp_child_f", slot_troop_leaded_party),
   (try_begin), 
   (gt, ":cur_party", 0), 
   (party_is_active, ":cur_party"), 
   (party_get_position, pos0, ":cur_party"),
   (assign, ":radius", 1),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),    
   (party_get_num_companion_stacks, ":num_stacks", ":cur_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":cur_party", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size", ":cur_party", ":i_stack"),
        (party_remove_members, ":cur_party", ":stack_troop", ":stack_size"),    
        (party_add_members, "p_main_party", ":stack_troop", ":stack_size"), 
        (try_end), 
        (remove_party, ":cur_party"),
   (try_end), 
   
   (else_try), 
   (troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_player_companion),
   (main_party_has_troop, "trp_child_f"), 
   (remove_member_from_party, "trp_child_f"),
   (try_end), #new end don't do anything with parties if child was a companion
   
   #re-name player party 
   (str_store_troop_name, s2, "trp_player"), 
    (party_set_name,"p_main_party",s2),
   
   (troop_set_health, "trp_player", 100), 
   
   ##handle player old relations
   (try_for_range, ":lord", heroes_begin, heroes_end), 
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),  
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_lady),
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_inactive_pretender),
   (troop_slot_eq, ":lord", slot_troop_occupation, cam_slto_child),
   (neq, ":lord", "trp_child_f"),
  # (call_script, "script_reset_player_relation_with_troop", ":lord"), #
  (troop_get_slot, ":old_relation", ":lord", slot_troop_player_relation),
  (try_begin), 
  (ge, ":old_relation", 40), 
  (call_script, "script_add_log_entry", logent_player_kill_was_friend, "trp_player",  -1, ":lord", -1),  
  (else_try), #
  (le, ":old_relation", -40), 
  (call_script, "script_add_log_entry", logent_player_kill_was_enemy, "trp_player",  -1, ":lord", -1), 
  (try_end),
   (troop_set_slot, ":lord", slot_troop_player_relation, 0),
   (troop_set_slot, ":lord", slot_troop_met, 0),
   (call_script, "script_troop_get_relation_with_troop", ":lord", "trp_child_f"), 
   (assign, ":relation", reg0), 
   #(call_script, "script_change_player_relation_with_troop", ":lord", ":relation"),     
   (troop_set_slot, ":lord", slot_troop_player_relation, ":relation"),
   (try_begin), 
   (neq, ":relation", 0), 
   (troop_set_slot, ":lord", slot_troop_met, 1),
   (else_try),
   (is_between, ":lord", players_children_begin, players_children_end), 
   (troop_set_slot, ":lord", slot_troop_met, 1),
   (try_end), 
  (try_end),  
   
    ###faction issues 
  (try_begin), 
  (is_between, "$supported_pretender", pretenders_begin, pretenders_end),
  ##handle give up cause...
  (troop_get_slot, ":original_faction", "$supported_pretender", slot_troop_original_faction),
  (call_script, "script_add_log_entry", logent_player_killed_supporting_pretender, "trp_player",  -1, "$supported_pretender", ":original_faction"),
  (try_for_range, ":cur_troop", heroes_begin, heroes_end),
       (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
       (neq, "$supported_pretender", ":cur_troop"),
       (store_troop_faction, ":cur_faction", ":cur_troop"),
       (eq, ":cur_faction", "fac_player_supporters_faction"),
       (call_script, "script_change_troop_faction", ":cur_troop", ":original_faction"),
     (try_end),
     (troop_set_faction, "$supported_pretender", ":original_faction"), ##return them so child can continue cause if desires
     (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
     (troop_set_slot, "$supported_pretender", slot_troop_occupation, slto_inactive_pretender), 
     (troop_set_slot, "$supported_pretender", slot_troop_cur_center, -1), 
     (try_for_range, ":cur_center", centers_begin, centers_end),
      (party_is_active, ":cur_center"),
       (store_faction_of_party, ":cur_faction", ":cur_center"),
       (eq, ":cur_faction", "fac_player_supporters_faction"),
       (party_set_faction, ":cur_center", ":original_faction"), 
       (party_set_slot, ":cur_center", slot_town_lord, stl_unassigned),
     (try_end),
     (party_remove_members, "p_main_party", "$supported_pretender", 1),
     (faction_set_slot, ":original_faction", slot_faction_has_rebellion_chance, 1),
     (assign, "$supported_pretender", 0),
     (call_script, "script_deactivate_player_faction"),
     (call_script, "script_end_quest", "qst_rebel_against_kingdom"),
     (assign, "$temp", "trp_child_f"), 
     (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  ##
  (else_try), 
  
  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), ##player was vessel
  (troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_hero), #daughter was hero
  
  
  (call_script, "script_player_leave_faction", 1),
  
  (try_begin), 
  (neq, ":faction", "fac_adventurers"),  
  (call_script, "script_player_join_faction", ":faction"), 
  (try_for_range, ":center", centers_begin, centers_end), 
  (party_slot_eq, ":center", slot_town_lord, "trp_child_f"), 
  (call_script, "script_give_center_to_lord", ":center", "trp_player", 0),  
  (try_end), 
  
  (else_try), 
  (eq, ":faction", "fac_adventurers"),
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (try_end), 
  
  (assign, "$temp", "trp_child_f"), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  
  (else_try), 
  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), ##player was vessel
  
  
  (call_script, "script_player_leave_faction", 1),
  
  (try_begin), 
  (neq, ":faction", "fac_adventurers"),  
  (call_script, "script_player_join_faction", ":faction"), 
  (else_try), 
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (try_end), 
  
  (assign, "$temp", "trp_child_f"), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (neq, "$players_kingdom", ":faction"), 
  (is_between, ":faction", npc_kingdoms_begin, npc_kingdoms_end), 
  (str_store_faction_name, s8, "$players_kingdom"), 
        (try_for_range, ":npc", heroes_begin, heroes_end),
            (store_faction_of_troop, ":npc_faction", ":npc"),
            (eq, ":npc_faction", "fac_player_supporters_faction"),
            (troop_slot_eq, ":npc", slot_troop_occupation, slto_kingdom_hero),
            (call_script, "script_change_troop_faction", ":npc", ":faction"),
            ##move dependents ladies
             (try_for_range, ":kingdom_lady", heroes_begin, heroes_end),
            (this_or_next|is_between, ":kingdom_lady", npc_children_female_begin, players_children_end), #new 3.0 line
            (is_between, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end), #new 3.0 line
            (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
     
        (call_script, "script_get_kingdom_lady_social_determinants", ":kingdom_lady"),
        (assign, ":closest_male_relative", reg0),
        (assign, ":new_center", reg1),
        
        (eq, ":closest_male_relative", ":npc"),
        
        (troop_set_faction, ":kingdom_lady", ":faction"),
        (troop_slot_eq, ":kingdom_lady", slot_troop_prisoner_of_party, -1),
        (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, ":new_center"),
         # Jrider + TITLES v0.0 change ladies title
         (neq, ":faction", "fac_adventurers"), 
          (call_script, "script_troop_set_title_according_to_faction", ":kingdom_lady", ":faction"),
          # Jrider -
      (try_end),
        (try_end),
        (try_for_range, ":center", centers_begin, centers_end),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "fac_player_supporters_faction"),
            (party_set_faction, ":center", ":faction"), 
    (try_end),
    
    ##now check for any left over ladies or kids...
         (try_for_range, ":kingdom_lady", heroes_begin, heroes_end),
     (this_or_next|is_between, ":kingdom_lady", npc_children_male_begin, players_children_end), #include all possible children
      (is_between, ":kingdom_lady", kingdom_ladies_begin, kingdom_ladies_end), #
      (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_occupation, cam_slto_child), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, slto_kingdom_lady), 
      (store_troop_faction, ":old_fac", ":kingdom_lady"), 
      (eq, ":old_fac", "fac_player_supporters_faction"), 
      (try_begin), 
      (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_father, "trp_player"), 
      (troop_slot_eq, ":kingdom_lady", slot_troop_mother, "trp_player"), 
      (troop_set_faction, ":kingdom_lady", ":faction"), 
      # (troop_join, ":kingdom_lady"), 
      # (troop_set_slot, ":kingdom_lady", slot_troop_occupation, slto_player_companion), 
      # (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (else_try), 
      (is_between, ":kingdom_lady", npc_children_male_begin, players_children_end), #special situation for children 
      (troop_slot_eq, ":kingdom_lady", slot_troop_occupation, cam_slto_child), 
      (troop_get_slot, ":father", ":kingdom_lady", slot_troop_father), 
      (assign, ":found_relative", 0), 
        (try_begin), 
        (is_between, ":father", heroes_begin, heroes_end), 
        (troop_slot_eq, ":father", slot_troop_occupation, slto_kingdom_hero), 
        (store_troop_faction, ":father_fac", ":father"), 
        (is_between, ":father_fac", npc_kingdoms_begin, npc_kingdoms_end),  #exclude player faction
        (faction_slot_eq, ":father_fac", slot_faction_state, sfs_active), 
        (troop_set_faction, ":kingdom_lady", ":father_fac"), 
         (assign, ":found_relative", 1),         
        (else_try), 
        (troop_get_slot, ":mother", ":kingdom_lady", slot_troop_mother), 
        (is_between, ":mother", heroes_begin, heroes_end),
        (this_or_next|troop_slot_eq, ":mother", slot_troop_occupation, slto_kingdom_lady), 
        (troop_slot_eq, ":mother", slot_troop_occupation, slto_kingdom_hero), 
        (store_troop_faction, ":mother_fac", ":mother"), 
        (is_between, ":mother_fac", npc_kingdoms_begin, npc_kingdoms_end),
        (faction_slot_eq, ":mother_fac", slot_faction_state, sfs_active), 
        (troop_set_faction, ":kingdom_lady", ":mother_fac"), 
         (assign, ":found_relative", 1),     
        (else_try), 
        (this_or_next|troop_slot_eq, ":kingdom_lady", slot_troop_father, ":new_old_father"),     
        (troop_slot_eq, ":kingdom_lady", slot_troop_mother, ":new_old_mother"), ##they are brothers sisters of child_f, and above calls failed...other parent dead?
        (troop_set_faction, ":kingdom_lady", ":faction"), 
         (assign, ":found_relative", 1), 
        (try_end),  
      (eq, ":found_relative", 1),
      (else_try),
      (troop_slot_eq, ":kingdom_lady", slot_troop_spouse, "trp_player"),
      (neg|troop_slot_ge, ":kingdom_lady", slot_troop_prisoner_of_party, 1),
      (troop_set_faction, ":kingdom_lady", ":faction"), 
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      (else_try),
      (troop_set_faction, ":kingdom_lady", "fac_no_faction"),     
      (troop_set_slot, ":kingdom_lady", slot_troop_occupation, dplmc_slto_dead),
      (troop_set_slot, ":kingdom_lady", slot_troop_cur_center, -1), 
      # (str_store_troop_name, s7, ":kingdom_lady"), 
      # (display_log_message, "@You hear {s7} committed suicide rather then being taken hostage!", color_bad_news), 
            # (try_begin), 
            # (troop_slot_eq, ":kingdom_lady", slot_troop_spouse, "trp_player"),
            # (troop_set_slot, ":kingdom_lady", slot_troop_spouse, -1),  
            # (troop_set_slot, "trp_player", slot_troop_spouse, -1), 
            # (try_end), 
      (try_end), 
     (try_end),  
    (call_script, "script_deactivate_player_faction"),
  (call_script, "script_add_notification_menu", "mnu_yourdaughter_overpowered",0,0),
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (eq, "$players_kingdom", ":faction"), 
  (call_script, "script_add_notification_menu", "mnu_yourdaughter_queen",0,0),
  (else_try), 
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (assign, "$temp", "trp_child_f"), 
  (assign, "$can_read", 0), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  (try_end), 
  
  (call_script, "script_kill_lord", "trp_child_f"), ##remove from play
   
   (else_try), ##trp_child_f end
   ##appearance
   (troop_get_type, ":is_female", "trp_child_m"), 
  
  
  (troop_get_type, ":old_gender", "trp_player"), 
  (val_mod, ":old_gender", 2), 
  
  (try_begin), 
  (eq, ":old_gender", tf_male), 
  (assign, "$temp2", 0), 
  (troop_set_name, "trp_player_dead_saymotherfather", "@father"), 
  (troop_set_plural_name, "trp_player_dead_saymotherfather", "@father"),
  (else_try), 
  (assign, "$temp2", 1), 
  (troop_set_name, "trp_player_dead_saymotherfather", "@mother"), 
   (troop_set_plural_name, "trp_player_dead_saymotherfather", "@mother"),
  (try_end), 
  
  (assign, "$character_gender", tf_male),
  (assign, reg59, tf_male),
  
  (troop_set_type, "trp_player", ":is_female"), 
  
  (str_store_troop_face_keys, s1, "trp_child_m"), 
  (str_store_troop_face_keys, s2, "trp_child_m", 1),
  
  (troop_set_face_keys, "trp_player", s1),
  (troop_set_face_keys, "trp_player", s2,1),
  
  (str_store_troop_name, s6, "trp_player"), 
  (troop_set_name, "trp_temp_troop", "@{s6}"), 
  
  (str_store_troop_name, s3, "trp_child_m"),
  (troop_set_name, "trp_player", "@{s3}"), 
  
  (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse), 
  (troop_get_slot, ":son_spouse", "trp_child_m", slot_troop_spouse), 
  
  (store_troop_faction, ":faction", "trp_child_m"),
  
  (troop_get_slot, ":age", "trp_child_m", slot_troop_age), 
  (troop_get_slot, ":appearance", "trp_child_m", slot_troop_age_appearance), 
  
  (try_begin), 
            (is_between, ":age", 12, 24),
            (assign, "$age_type", cb4_young),
            (else_try),
            (is_between, ":age", 24, 42),
            (assign, "$age_type", cb4_adult),
            (else_try), 
            (ge, ":age", 42),
            (assign, "$age_type", cb4_elder),
            (try_end), 
            
    (troop_set_slot, "trp_player", slot_troop_age, ":age"), 
    (troop_set_slot, "trp_player", slot_troop_age_appearance, ":appearance"),     
  
  (troop_get_slot, ":personality", "trp_child_m", slot_lord_reputation_type),
  (try_begin), 
  (this_or_next|eq, ":personality", lrep_selfrighteous), 
  (eq, ":personality", lrep_quarrelsome), 
  (assign, "$defect_type", cb6_prudence),
  (assign, "$player_honor", -5), 
  (else_try),
  (this_or_next|eq, ":personality", lrep_debauched),    
  (eq, ":personality", lrep_cunning), 
  (assign, "$defect_type", cb6_fortitude),
  (assign, "$player_honor", -20), 
  (else_try),
  (eq, ":personality", lrep_martial), 
  (assign, "$defect_type", cb6_temperance),
  (assign, "$player_honor", 15), 
  (else_try),
  (assign, "$defect_type", cb6_justice),
  (assign, "$player_honor", 20), 
  (try_end), 
  
   (troop_get_slot, ":renown", "trp_child_m", slot_troop_renown), 
  (troop_set_slot, "trp_player", slot_troop_renown, ":renown"), 
  
   #level 
 (troop_get_xp, ":exp", "trp_player"),
 (val_mul, ":exp", -1), 
 (add_xp_to_troop, ":exp", "trp_player"), ##reset to 0
 
 (try_for_range, ":skills", "skl_trade", "skl_reserved_16"),  
 (store_skill_level, ":level", ":skills", "trp_player"),
 (gt, ":level", 0),  
 (val_mul, ":level", -1), 
 (troop_raise_skill, "trp_player", ":skills", ":level"),
 (try_end), 
 
 (troop_get_xp, ":exp2", "trp_child_m"),
 (add_xp_to_troop, ":exp2", "trp_player"),
 
 (try_for_range, ":skills2", "skl_trade", "skl_reserved_16"),  
 (store_skill_level, ":level", ":skills2", "trp_child_m"),
 (gt, ":level", 0),   
 (troop_raise_skill, "trp_player", ":skills2", ":level"),
 (try_end), 
  
  (try_for_range, ":attru", ca_strength, wpt_one_handed_weapon), 
  (store_attribute_level, ":atlevel", "trp_player", ":attru"),
  (gt, ":atlevel", 0),
  (val_mul, ":atlevel", -1), 
  (troop_raise_attribute, "trp_player", ":attru", ":atlevel"),
  (try_end),
  
  (try_for_range, ":attru2", ca_strength, wpt_one_handed_weapon), 
  (store_attribute_level, ":atlevel", "trp_child_m", ":attru2"),
  (gt, ":atlevel", 0), 
  (troop_raise_attribute, "trp_player", ":attru2", ":atlevel"),
  (try_end),
  
  ##reset wounds
   (try_for_range, ":curr_slot", slot_quest_int_penalty_perma_points, slot_quest_end_penalty_perma_points),
        (quest_get_slot, reg1, "qst_vc_wounds", ":curr_slot"),
        (neq, reg1, 0),    
        (quest_set_slot, "qst_vc_wounds", ":curr_slot", 0), 
        (try_end), 
  
   ##remove all player items
   (troop_clear_inventory, "trp_player"),
   (try_for_range, ":item", "itm_tutorial_spear", "itm_bear_meat"),
   (troop_has_item_equipped, "trp_player", ":item"),  
   (troop_remove_item, "trp_player", ":item"),       
   (try_end), 
   
   ##give player sons items
   (troop_get_inventory_slot,":cur_item1","trp_child_m",ek_body),
            (try_begin),
              (gt, ":cur_item1", 0),
              (troop_add_item, "trp_player", ":cur_item1"),
            (try_end),     
            
    (troop_get_inventory_slot,":cur_item2","trp_child_m",ek_foot),
            (try_begin),
              (gt, ":cur_item2", 0),
              (troop_add_item, "trp_player", ":cur_item2"),
            (try_end),         
   
     (troop_get_inventory_slot,":cur_item3","trp_child_m",ek_item_0),
            (try_begin),
              (gt, ":cur_item3", 0),
              (troop_add_item, "trp_player", ":cur_item3"),
            (try_end),        
            
     (troop_get_inventory_slot,":cur_item4","trp_child_m",ek_item_1),
            (try_begin),
              (gt, ":cur_item4", 0),
              (troop_add_item, "trp_player", ":cur_item4"),
            (try_end),            

     (troop_get_inventory_slot,":cur_item5","trp_child_m",ek_horse),
            (try_begin),
              (gt, ":cur_item5", 0),
              (troop_add_item, "trp_player", ":cur_item5"),
            (try_end),                   
            
             (troop_equip_items, "trp_player"),
              (troop_loot_troop, "trp_player", "trp_child_m", 100), 
   (troop_add_item, "trp_player", "itm_bread"), 
   
  
  ##handle family relations 
   (assign, ":do_once_mult_bro_father", 0),
   
   (try_for_range, ":children", npc_children_male_begin, players_children_end), 
   (this_or_next|troop_slot_eq, ":children", slot_troop_occupation, cam_slto_child),  
   (this_or_next|troop_slot_eq, ":children", slot_troop_occupation, slto_kingdom_hero),
   (troop_slot_eq, ":children", slot_troop_occupation, slto_kingdom_lady),
   
   ##new father / mother slots...
   (try_begin), 
   (eq, ":old_gender", tf_male), ##player was father
   (troop_slot_eq, ":children", slot_troop_father, "trp_player"), 
   
   
    (try_begin), 
        (eq,  ":do_once_mult_bro_father", 0), ##avoid creating different new fathers, only one new father to be made.
        (store_mul, ":new_old_father", ":children", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
        (val_add, ":new_old_father", DPLMC_VIRTUAL_RELATIVE_FATHER_OFFSET),#defined in module_constants.py
        (val_sub, ":new_old_father", "$grand_parents_created_since_game_start"), ##brand new troop!
        (assign, ":do_once_mult_bro_father", 1), 
        (try_end), 
          
       (troop_set_slot, ":children", slot_troop_father, ":new_old_father"), 
   
   (else_try), ##player was mother...
    (troop_slot_eq, ":children", slot_troop_mother, "trp_player"), 
    
   
   (try_begin), 
        (eq,  ":do_once_mult_bro_father", 0), ##avoid creating different new fathers, only one new father to be made.
        (store_mul, ":new_old_mother", ":children", DPLMC_VIRTUAL_RELATIVE_MULTIPLIER),#defined in module_constants.py
        (val_add, ":new_old_mother", DPLMC_VIRTUAL_RELATIVE_MOTHER_OFFSET),#defined in module_constants.py
         (val_sub, ":new_old_mother", "$grand_parents_created_since_game_start"), ##brand new troop!
        (assign, ":do_once_mult_bro_father", 1), 
        (try_end), 
          
       (troop_set_slot, ":children", slot_troop_mother, ":new_old_mother"), 
       
     (try_end), 
    (try_end), #loop 
    
     (val_add, "$grand_parents_created_since_game_start", 1), ##brand new troop!
    
    ##keep other parent if still alive...
    (try_begin), 
    (eq, ":old_gender", tf_male), ##player was father
     (troop_get_slot, ":mother", "trp_child_m", slot_troop_mother), 
     (try_begin), 
        (is_between, ":mother", heroes_begin, heroes_end), 
        (call_script, "script_change_player_relation_with_troop", ":mother", 15), 
       (try_end), 
      
      (troop_set_slot, "trp_player", slot_troop_mother, ":mother"),
      (troop_set_slot, "trp_player", slot_troop_father, ":new_old_father"),       
     (else_try),  #player was mother
      (troop_get_slot, ":father", "trp_child_m", slot_troop_father), 
       (try_begin), 
        (is_between, ":father", heroes_begin, heroes_end), 
        (call_script, "script_change_player_relation_with_troop", ":father", 15), 
       (try_end), 
       (troop_set_slot, "trp_player", slot_troop_father, ":father"),
       (troop_set_slot, "trp_player", slot_troop_mother, ":new_old_mother"),
     (try_end),   
  
    ##handle any children son had...
    (assign, "$total_children", 0), 
   (try_for_range, ":son_chidren", npc_children_male_begin, players_children_end), 
   (troop_slot_eq, ":son_chidren", slot_troop_father, "trp_child_m"), 
    (troop_get_slot, ":father_confirm", ":son_chidren", slot_troop_father), 
    (try_begin),
   (eq, ":father_confirm", "trp_child_m"),         
   (val_add, "$total_children", 1), 
   (troop_set_slot, ":son_chidren", slot_troop_father, "trp_player"),
  (try_end),  
   (try_end), 
   
   (try_begin), 
  (gt, ":spouse", 0), 
  (troop_set_slot, ":spouse", slot_troop_spouse, -1), 
  (troop_set_slot, "trp_player", slot_troop_spouse, -1),  
  (try_end), 
  
   (troop_get_slot, ":betrothed", "trp_player", slot_troop_betrothed), 
  (try_begin), 
  (gt, ":betrothed", 0), 
  (troop_set_slot, ":betrothed", slot_troop_betrothed, -1), 
  (troop_set_slot, "trp_player", slot_troop_betrothed, -1),  
  (try_end), 
   
   (try_begin), 
  (gt, ":son_spouse", 0), 
  (troop_set_slot, ":son_spouse", slot_troop_spouse, "trp_player"), 
  (troop_set_slot, "trp_player", slot_troop_spouse, ":son_spouse"), 
  (troop_set_slot, "trp_child_m", slot_troop_spouse, -1), 
  (else_try), 
  (troop_get_slot, ":son_betrothed", "trp_child_m", slot_troop_betrothed), 
  (gt, ":son_betrothed", 0),  
  (troop_set_slot, ":son_betrothed", slot_troop_betrothed, "trp_player"), 
  (troop_set_slot, "trp_player", slot_troop_betrothed, ":son_betrothed"), 
   (troop_set_slot, "trp_child_m", slot_troop_betrothed, -1), 
  (try_end),
  
   
    ##clear any prisoners from main party
    (try_begin), 
   (neg|troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_player_companion), #new don't do anything with main party if son was with player party. 
 
   (party_get_num_prisoner_stacks, ":prisoners", "p_main_party"),
    (try_for_range, ":unused", 0, ":prisoners"),
              (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
        (try_begin),         
        (neg|troop_is_hero, ":stack_troop"),
        (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":unused"),
        (party_remove_prisoners, "p_main_party", ":stack_troop", ":stack_size"),    
        (else_try), 
        (troop_is_hero, ":stack_troop"),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"), 
        (party_remove_prisoners, "p_main_party", ":stack_troop", 1), 
        (try_end), 
    (try_end),     
    
    ##move any prisoners son had to main party. 
     (troop_get_slot, ":cur_party", "trp_child_m", slot_troop_leaded_party),
   (try_begin), 
   (gt, ":cur_party", 0), 
   (party_is_active, ":cur_party"), 
   (party_get_num_prisoner_stacks, ":prisoners", ":cur_party"),
    (try_for_range, ":unused", 0, ":prisoners"),
              (party_prisoner_stack_get_troop_id, ":stack_troop", ":cur_party", ":unused"),
        (try_begin),         
        (neg|troop_is_hero, ":stack_troop"),
        (party_prisoner_stack_get_size, ":stack_size", ":cur_party", ":unused"),
        (party_add_prisoners, "p_main_party", ":stack_troop", ":stack_size"),
        (party_remove_prisoners, ":cur_party", ":stack_troop", ":stack_size"),    
        (else_try),
        (troop_is_hero, ":stack_troop"),
        (call_script, "script_remove_troop_from_prison", ":stack_troop"),
        (party_remove_prisoners, ":cur_party", ":stack_troop", 1), 
        (troop_join_as_prisoner, ":stack_troop"),    
        (troop_set_slot, ":stack_troop", slot_troop_prisoner_of_party, "p_main_party"),  
        (try_end), 
  (try_end), 
 (try_end), 
  
    ##clear player party...
   ##clear player party... old
  # (party_get_num_companion_stacks,":companions", "p_main_party"),
  # (assign, ":num_men", 0), 
  # (try_for_range, ":unused", 0, ":companions"),
              # (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":companions"),
        # (neg|troop_is_hero, ":stack_troop"),
        # (neq, ":stack_troop", "trp_player"), 
        # (party_stack_get_size, ":stack_size", "p_main_party", ":companions"),
        # (val_add, ":num_men", ":stack_size"), 
      # #  (party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),    
         # (try_end),
     # (try_for_range, ":unused", 0, ":num_men"),
          # (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
        # (try_end),     
        
    ##new create a new deserter party of players men where player left off...
    (party_clear, "p_temp_party"),
    (party_get_num_companion_stacks,":companions", "p_main_party"),
    (try_for_range_backwards, ":unused", 0, ":companions"),
    (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
    (neg|troop_is_hero, ":stack_troop"),
    (party_stack_get_size, ":stack_size", "p_main_party", ":unused"),
    (party_add_members, "p_temp_party", ":stack_troop", ":stack_size"),
    (try_end), 
    
    (store_party_size_wo_prisoners, ":main_size", "p_temp_party"), 
    (try_begin), 
    (gt, ":main_size", 2), 
     (set_spawn_radius, 4),
     (spawn_around_party,"p_main_party","pt_deserters"),
     (assign, ":new_party", reg(0)),
            (call_script, "script_party_add_party", ":new_party", "p_temp_party"),
            (party_set_faction, ":new_party", "fac_deserters"),
            (party_get_position, pos0,  ":new_party"),
            (party_set_ai_behavior, ":new_party", ai_bhvr_patrol_location),
            (party_set_ai_patrol_radius, ":new_party", 40),
            (party_set_ai_target_position, ":new_party", pos0),
        (str_store_troop_name, s3, "trp_temp_troop"),     
        (str_store_string, s3, "@{s3}'s old party"), 
         (party_set_name,":new_party",s3),
    (try_end),      
         
    ##now clear main party...
  (party_get_num_companion_stacks,":companions", "p_main_party"),
  (assign, ":num_men", 0), 
  (try_for_range, ":unused", 0, ":companions"),
              (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":unused"),
        (neg|troop_is_hero, ":stack_troop"),
        (neq, ":stack_troop", "trp_player"), 
        (party_stack_get_size, ":stack_size", "p_main_party", ":unused"),
        (val_add, ":num_men", ":stack_size"), 
      #  (party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),    
         (try_end),
     (try_for_range, ":unused", 0, ":num_men"),
          (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
        (try_end),        
        
     ##move player party to where son is
  
    (troop_get_slot, ":cur_party", "trp_child_m", slot_troop_leaded_party),
   (try_begin), 
   (gt, ":cur_party", 0), 
   (party_is_active, ":cur_party"), 
   (party_get_position, pos0, ":cur_party"),
   (assign, ":radius", 1),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (else_try), 
   (troop_get_slot, ":home", "trp_child_m", slot_troop_home), 
   (is_between, ":home", centers_begin, centers_end), 
   (party_get_position, pos0, ":home"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (else_try), 
   (call_script, "script_lord_get_home_center", "trp_child_m"),
    (assign, ":center", reg0),
    (is_between, ":center", centers_begin, centers_end), 
   (party_get_position, pos0, ":center"),
   (assign, ":radius", 5),
   (call_script, "script_recurse_party_around_pos0", "p_main_party", ":radius", 0),
   (try_end),     
    
    ##transfer sons troops to main party
    (try_begin), 
   (gt, ":cur_party", 0), 
    (party_get_num_companion_stacks, ":num_stacks", ":cur_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":cur_party", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size", ":cur_party", ":i_stack"),
        (party_remove_members, ":cur_party", ":stack_troop", ":stack_size"),    
        (party_add_members, "p_main_party", ":stack_troop", ":stack_size"), 
        (try_end), 
        (remove_party, ":cur_party"),
   (try_end),
   
   (else_try), 
   (troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_player_companion), #new don't do anything with main party if was with player party. 
   (main_party_has_troop, "trp_child_m"), 
   (remove_member_from_party, "trp_child_m"), 
   (try_end), #new end
   
    #re-name player party 
   (str_store_troop_name, s2, "trp_player"), 
    (party_set_name,"p_main_party",s2),
    
    (troop_set_health, "trp_player", 100), 
    
    ##handle player old relations
   (try_for_range, ":lord", heroes_begin, heroes_end),
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),  
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_lady),
   (this_or_next|troop_slot_eq, ":lord", slot_troop_occupation, slto_inactive_pretender),
   (troop_slot_eq, ":lord", slot_troop_occupation, cam_slto_child),
   (neq, ":lord", "trp_child_m"),
   #(call_script, "script_reset_player_relation_with_troop", ":lord"), #
     (troop_get_slot, ":old_relation", ":lord", slot_troop_player_relation),
  (try_begin), 
  (ge, ":old_relation", 40), 
  (call_script, "script_add_log_entry", logent_player_kill_was_friend, "trp_player",  -1, ":lord", -1),  
  (else_try), #
  (le, ":old_relation", -40), 
  (call_script, "script_add_log_entry", logent_player_kill_was_enemy, "trp_player",  -1, ":lord", -1), 
  (try_end),
    (troop_set_slot, ":lord", slot_troop_player_relation, 0),
   (troop_set_slot, ":lord", slot_troop_met, 0),
   (call_script, "script_troop_get_relation_with_troop", ":lord", "trp_child_m"), 
   (assign, ":relation", reg0), 
   #(call_script, "script_change_player_relation_with_troop", ":lord", ":relation"),     
   (troop_set_slot, ":lord", slot_troop_player_relation, ":relation"),
    (try_begin), 
   (neq, ":relation", 0), 
   (troop_set_slot, ":lord", slot_troop_met, 1),
   (else_try),
   (is_between, ":lord", players_children_begin, players_children_end), 
   (troop_set_slot, ":lord", slot_troop_met, 1),
   (try_end), 
   (try_end), 
   
   #faction issues
    (try_begin), #DIED SUPPORTING PRETENDER
  (is_between, "$supported_pretender", pretenders_begin, pretenders_end),
  ##handle give up cause...
  (troop_get_slot, ":original_faction", "$supported_pretender", slot_troop_original_faction),
  (call_script, "script_add_log_entry", logent_player_killed_supporting_pretender, "trp_player",  -1, "$supported_pretender", ":original_faction"),
  
  (try_for_range, ":cur_troop", heroes_begin, heroes_end),
       (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
       (neq, "$supported_pretender", ":cur_troop"),
       (store_troop_faction, ":cur_faction", ":cur_troop"),
       (eq, ":cur_faction", "fac_player_supporters_faction"),
       (call_script, "script_change_troop_faction", ":cur_troop", ":original_faction"),
     (try_end),
     
     (troop_set_faction, "$supported_pretender", ":original_faction"),
     (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
     
     (try_for_range, ":cur_center", centers_begin, centers_end),
      (party_is_active, ":cur_center"),
       (store_faction_of_party, ":cur_faction", ":cur_center"),
       (eq, ":cur_faction", "fac_player_supporters_faction"),
       (party_set_faction, ":cur_center", ":original_faction"), 
       (party_set_slot, ":cur_center", slot_town_lord, stl_unassigned),
     (try_end),
     (party_remove_members, "p_main_party", "$supported_pretender", 1),
     (faction_set_slot, ":original_faction", slot_faction_has_rebellion_chance, 1),
      (troop_set_slot, "$supported_pretender", slot_troop_occupation, slto_inactive_pretender), 
     (troop_set_slot, "$supported_pretender", slot_troop_cur_center, -1), 
     (assign, "$supported_pretender", 0),
     (call_script, "script_deactivate_player_faction"),
     (call_script, "script_end_quest", "qst_rebel_against_kingdom"),
      (assign, "$temp", "trp_child_m"),
     (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  ##PLAY WAS LORD IN NPC FACTION
  (else_try),
  
  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), ##player was vessel
  
  
  (call_script, "script_player_leave_faction", 1),
  
  (try_begin), 
  (neq, ":faction", "fac_adventurers"),  
  (call_script, "script_player_join_faction", ":faction"), 
  
  (try_for_range, ":center", centers_begin, centers_end), 
  (party_slot_eq, ":center", slot_town_lord, "trp_child_m"), 
  (call_script, "script_give_center_to_lord", ":center", "trp_player", 0),  
  (try_end), 
  
  (else_try), 
  (eq, ":faction", "fac_adventurers"),
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (try_end), 
  
  (assign, "$temp", "trp_child_m"),
   (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
   
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (neq, "$players_kingdom", ":faction"), 
  (is_between, ":faction", npc_kingdoms_begin, npc_kingdoms_end), 
   #(call_script, "script_add_notification_menu", "mnu_notification_daughter_overpowered", 0, 0),
   (str_store_faction_name, s8, ":faction"), 
   (str_store_faction_name, s10, "$players_kingdom"), 
   (faction_get_slot, "$temp", ":faction", slot_faction_leader), 
   (call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, "$temp", ":faction"),
   (assign, "$temp2", "trp_child_m"), # <---4.4 line
  (call_script, "script_add_notification_menu", "mnu_yourson_king_byrenouce",":faction","$players_kingdom"),
  
  (else_try), 
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
  (eq, "$players_kingdom", ":faction"), 
  (call_script, "script_add_notification_menu", "mnu_yourson_king","$players_kingdom",0),
  
  (else_try), 
  #(troop_set_faction, "trp_player", "fac_player_faction"), 
  (assign, "$players_kingdom", 0), 
  (assign, "$temp", "trp_child_m"),
  (assign, "$can_read", 0), 
  (call_script, "script_add_notification_menu", "mnu_nowyourchild",0,0),
  (try_end), 
  
   (call_script, "script_kill_lord", "trp_child_m"),
   
   (try_end), 
  
  ##do this for both
  
  
   
   ##end all active quests...
   (try_for_range, ":quest", "qst_deliver_message", "qst_quests_end"), 
   (check_quest_active, ":quest"), 
   (call_script, "script_end_quest", ":quest"), 
   (try_end), 
   
   ##reset slots
   (try_for_range, ":heros", heroes_begin, heroes_end), 
   (troop_set_slot, ":heros", slot_lord_granted_courtship_permission, 0),  
   (troop_set_slot, ":heros", slot_troop_refused, 0),
   (troop_set_slot, ":heros", slot_troop_tortured, 0),
   (troop_set_slot, ":heros", slot_troop_intrigue_impatience, 0),
   (try_end), 
   
   
   (assign, "$with_child", 0),
      (assign, "$almost_due", 0),
      (assign, "$due", 0), 
      (assign, "$risk_child", 0),
      (assign, "$try_child", 0),
      (assign, "$wife_death", 0),
      (assign, "$with_mab", -2), #no more Mab missions
      (assign, "$had_affair", 0),
      (assign, "$enemy_son", 0), 
      (assign, "$has_bastard", 0),
      (assign, "$divorced", 0),
      (assign, "$hire_midwife", 0),
      (assign, "$child_stage2", 0),    
      (assign, "$do_once", 0), 
      
      ##4.4 new added player funeral...
      (try_begin), 
      #(neq,"$background_type",cb_knight),
      (this_or_next|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active), 
      (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end), 
      (try_begin), 
      (is_between, "$g_player_court", centers_begin, centers_end), 
      (party_get_position, pos0, "$g_player_court"),
      (assign, ":named_cent", "$g_player_court"),
      (else_try), 
      (troop_get_slot, ":home", "trp_player", slot_troop_home), 
      (is_between, ":home", centers_begin, centers_end), 
      (party_get_position, pos0, ":home"),
      (assign, ":named_cent", ":home"),
      (else_try), 
      (is_between, "$g_starting_town", centers_begin, centers_end), 
      (party_get_position, pos0, "$g_starting_town"),
      (assign, ":named_cent", "$g_starting_town"),
      (else_try), 
      (call_script, "script_get_closest_center_of_faction", "p_main_party", "$players_kingdom"), 
      (assign, ":center", reg0), 
      (party_get_position, pos0, ":center"),
      (assign, ":named_cent", ":center"),
      (try_end), 
      (assign, ":radius", 10),
      (enable_party, "p_player_funeral"),
      (call_script, "script_recurse_party_around_pos0", "p_player_funeral", ":radius", 0), 
      (str_store_troop_name, s6, "trp_temp_troop"), 
      (party_set_name, "p_player_funeral", "@{s6}'s funeral"), 
      
      (store_current_hours, ":cur_hours"),
      (str_store_date, s60, ":cur_hours"),
      (str_store_string, s60, "@Given on: {s60}"),
      (str_store_troop_name, s8, "trp_player_dead_saymotherfather"),
      (str_store_party_name_link, s9, ":named_cent"), 
      (str_store_string, s2, "@You receive word your {s8}'s funeral is being prepared near {s9}. You have 4 days to attend before its over."), 
      (quest_set_slot, "qst_mother_funeral", slot_quest_expiration_days, 4), #piggy
       (quest_set_slot, "qst_mother_funeral", slot_quest_target_party, "p_player_funeral"),
      (add_quest_note_from_sreg, "qst_mother_funeral", 0, s60, 0),
      (add_quest_note_from_sreg, "qst_mother_funeral", 2, s2, 0),
      (start_quest, "qst_mother_funeral", "trp_sacerdote_2"),
      (display_message, "@You receive word your {s8}'s funeral is being prepared. You have 4 days to attend before its over.", color_hero_news),
      (try_end), 
      
      
   (call_script, "script_update_troop_notes", "trp_player"),
   (faction_set_slot, "fac_player_supporters_faction", cam_slot_child_time, -1), 
   (faction_set_slot, "fac_player_supporters_faction", cam_slot_bastard_time, -1),
  ]),
################## MENUS

  (
    "permanent_damage",mnf_disable_all_keys,
    "{s2}",
    "none",
    [
    (str_clear, s2), 
    
    (try_begin), 
     (eq, "$g_player_dead_yn", 1),
     (str_store_string, s2, "@You fall on the ground with multiple injuries. Each time your heart beats more slowly and your vision fades away... This battle was too much for you, and death rides to meet you.^^" +
        "While life escapes, you hope that someone will just remember there was once a {reg59?lady:man} called {playername}."),
        (set_background_mesh, "mesh_pic_wales"), 
     (else_try), 
     (assign, "$g_player_dead_yn", 0),
      (assign, ":end_cond", 1),
      (try_for_range, ":unused", 0, ":end_cond"),
        (store_random_in_range, ":random_attribute", 0, 4),
        (store_attribute_level, ":attr_level", "trp_player", ":random_attribute"),
        (try_begin),
          (gt, ":attr_level", 3),
          (neq, ":random_attribute", ca_charisma),
          (try_begin),
            (eq, ":random_attribute", ca_strength),
            (str_store_string, s2, "@Some of your tendons have been damaged in the battle. You lose 1 strength."),
          (else_try),
            (eq, ":random_attribute", ca_agility),
            (str_store_string, s2, "@You took a nasty wound which will cause you to limp slightly even after it heals. You lose 1 agility."),
##          (else_try),
##            (eq, ":random_attribute", ca_charisma),
##            (str_store_string, s0, "@After the battle you are aghast to find that one of the terrible blows you suffered has left a deep, disfiguring scar on your face, horrifying those around you. Your charisma is reduced by 1."),
          (else_try),
          (store_random_in_range, ":rand_death", 0, 100), 
          (try_begin), 
          (eq, "$player_die_rate", 1), 
          (le, ":rand_death", 10),
          (assign, "$g_player_dead_yn", 1),
          (else_try), 
           (eq, "$player_die_rate", 2), 
          (le, ":rand_death", 25),
          (assign, "$g_player_dead_yn", 1),
          (else_try),
          (le, ":rand_death", 5),  
          (assign, "$g_player_dead_yn", 1),
          (try_end), 
          (eq, "$g_player_dead_yn", 1),
          
          (str_store_string, s2, "@You fall on the ground with multiple injuries. Each time your heart beats more slowly and your vision fades away... This battle was too much for you, and death rides to meet you.^^" +
        "While life escapes, you hope that someone will just remember that there was once a {reg59?lady:man} called {playername}."),
          (else_try), 
##            (eq, ":random_attribute", ca_intelligence),
            (str_store_string, s2, "@You have trouble thinking straight after the battle, perhaps from a particularly hard hit to your head, and frequent headaches now plague your existence. Your intelligence is reduced by 1."),
          (try_end),
        (else_try),
          (lt, ":end_cond", 200),
          (val_add, ":end_cond", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":end_cond", 200),
        (try_begin),
          (eq, "$g_next_menu", -1),
          (leave_encounter),
          (change_screen_return),
        (else_try),
          (jump_to_menu, "$g_next_menu"),
        (try_end),
      (else_try),
      (set_background_mesh, "mesh_pic_wales"), 
        (troop_raise_attribute, "trp_player", ":random_attribute", -1),
      (try_end),
       (try_end), 
      ],
    [
      ("s0",
       [ (eq, "$g_player_dead_yn", 0),
         (store_random_in_range, ":random_no", 0, 4),
         (try_begin),
           (eq, ":random_no", 0),
           (str_store_string, s3, "@Perhaps I'm getting unlucky..."),
         (else_try),
           (eq, ":random_no", 1),
           (str_store_string, s3, "@Retirement is starting to sound better and better."),
         (else_try),
           (eq, ":random_no", 2),
           (str_store_string, s3, "@No matter! I will persevere!"),
         (else_try),
           (eq, ":random_no", 3),
           (troop_get_type, ":is_female", "trp_player"),
            (val_mod, ":is_female", 2),
           (try_begin),
             (eq, ":is_female", 1),
             (str_store_string, s3, "@What did I do to deserve this?"),
           (else_try),
             (str_store_string, s3, "@I suppose it'll make for a good story, at least..."),
           (try_end),
         (try_end),
         ],
       "{s3}",
       [
         (try_begin),
           (eq, "$g_next_menu", -1),
           (leave_encounter),
           (change_screen_return),
         (else_try),
           (jump_to_menu, "$g_next_menu"),
         (try_end),
         ]),
         
         ("death",
       [ (eq, "$g_player_dead_yn", 1),
        
         ],
       "continue...",
       [
         (jump_to_menu, "mnu_player_killed4"), 
         ]),
      ]
  ),



   ("ative_child_choice_father",0,
    "Your child has grown old enough to take their place by your side. You have never been prouder to be a father",
    "none", [ (set_background_mesh, "mesh_pic_messenger1"),
    (assign, "$temp2", 0),
    ##second or more turn
    (try_begin), 
    (eq, "$kid_feith_talk", -2),
    (assign, "$kid_feith_talk", 0), 
    (jump_to_menu, "mnu_auto_return_to_map"), 
    (else_try), 
    (eq, "$kid_bye_talk", -2),
    (assign, "$kid_bye_talk", 0),
    (jump_to_menu, "mnu_auto_return_to_map"), 
    (else_try), 
    (eq, "$king_ask_kid", -2),
    (assign, "$king_ask_kid", 0), 
    (jump_to_menu, "mnu_auto_return_to_map"), 
    (try_end), 
    ],
    [("make_companion",[], "I wish they join me as a companion and learn how to rule.",
        [
          (call_script, "script_cf_activate_child", "$child_var", 2), 
          (change_screen_return),
      ]),
      ("make_lord",[ (this_or_next|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), 
                    (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"), 
      ],"I wish to grant them lands of their own",
        [ (assign, "$temp2", 1), 
          (call_script, "script_cf_activate_child", "$child_var", 3),
          (change_screen_map),
          (try_begin), 
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"), 
          (assign, "$kid_feith_talk", 1),
          (call_script, "script_setup_troop_meeting", "$child_var", -1),
          (else_try), 
          (faction_get_slot, ":players_king", "$players_kingdom", slot_faction_leader), 
          (gt, ":players_king", 0), 
          (assign, "$king_ask_kid", 1), 
          (call_script, "script_setup_troop_meeting", ":players_king", -1),
          (try_end), 
      ]),
      ("off_on_own", [], "I wish them to journey on their own - learn the world as I have.",
      [ (assign, "$temp2", 2),
       (call_script, "script_cf_activate_child", "$child_var", 3), 
       (change_screen_map),
       (assign, "$kid_bye_talk", 1),
       (call_script, "script_setup_troop_meeting", "$child_var", -1),
      ]),  
      ("spec_lady", [(troop_get_type, ":is_female", "$child_var"), 
       (val_mod, ":is_female", 2), 
       (eq, ":is_female", 1), 
      ], "I wish my daughter to take her place at court.",
      [ (assign, "$temp2", 3),
       (call_script, "script_cf_activate_child", "$child_var", 3), 
       (change_screen_return),
      ]), 
      
    ]
  ),
  
  ("ative_child_choice_mother",0,
    "Your child has grown old enough to take their place at your side. You have never been prouder to be a mother",
    "none", [ (set_background_mesh, "mesh_pic_messenger1"),
    (assign, "$temp2", 0),
    
    ##second or more turn
    (try_begin), 
    (eq, "$kid_feith_talk", -2),
    (assign, "$kid_feith_talk", 0), 
    (jump_to_menu, "mnu_auto_return_to_map"), 
    (else_try), 
    (eq, "$kid_bye_talk", -2),
    (assign, "$kid_bye_talk", 0),
    (jump_to_menu, "mnu_auto_return_to_map"), 
    (else_try), 
    (eq, "$king_ask_kid", -2),
    (assign, "$king_ask_kid", 0), 
    (jump_to_menu, "mnu_auto_return_to_map"), 
    (try_end), 
    
    ],
    [("make_companion",[], "I wish they join me as a companion and learn how to rule.",
        [
          (call_script, "script_cf_activate_child", "$child_var", 2), 
          (change_screen_return),
      ]),
      ("make_lord",[(this_or_next|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end), 
                    (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"), 
        ],"I wish to grant them lands of their own",
        [ (assign, "$temp2", 1), 
          (call_script, "script_cf_activate_child", "$child_var", 3),
          (change_screen_map),
           (try_begin), 
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"), 
          (assign, "$kid_feith_talk", 1),
          (call_script, "script_setup_troop_meeting", "$child_var", -1),
          (else_try), 
          (faction_get_slot, ":players_king", "$players_kingdom", slot_faction_leader), 
          (gt, ":players_king", 0), 
          (assign, "$king_ask_kid", 1), 
          (call_script, "script_setup_troop_meeting", ":players_king", -1),
          (try_end), 
      ]),
       ("off_on_own", [], "I wish them to journey on their own - learn the world as I have.",
      [ (assign, "$temp2", 2), 
       (call_script, "script_cf_activate_child", "$child_var", 3), 
       (change_screen_map),
        (assign, "$kid_bye_talk", 1),
       (call_script, "script_setup_troop_meeting", "$child_var", -1),
      ]),  
       ("spec_lady", [(troop_get_type, ":is_female", "$child_var"), 
       (val_mod, ":is_female", 2), 
       (eq, ":is_female", 1), 
      ], "I wish my daughter to take her place at court.",
      [ (assign, "$temp2", 3),
       (call_script, "script_cf_activate_child", "$child_var", 3), 
       (change_screen_return),
      ]), 
    ]
  ),
  
  ##ashley finish later
  ("notification_new_lord",0,
    "You receive word that a new noble has reached maturity in {s1}.^^ {s2} has finally grown up and can now be called an adult by the standard of the times. -^^ Only time will tell what kind of leader they will be...",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_emptybook"),  
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
  ("notification_new_kings_child",0,
    "You receive word a new noble has reached maturity in {s3}. Not just any noble, but a Monarch's child! {s2}'s boy {s1} has grown old enough to take his place at court, however it will be a few more years before they lead armies...",
    "none", 
    
    [(set_background_mesh, "mesh_pic_messenger1"),  
    (str_store_troop_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (store_troop_faction, ":faction", "$g_notification_menu_var2"), 
      (str_store_faction_name, s3, ":faction"), 
      
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
  ("notification_new_kings_girl",0,
    "You receive word a new noble has reached maturity in {s3}. Not just any noble, but a Monarch's child! {s2}'s girl {s1} has grown old enough to take her place at court, however it will be a few more years before she courts suitors...",
    "none", 
    
    [(set_background_mesh, "mesh_pic_messenger1"),  
    (str_store_troop_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (store_troop_faction, ":faction", "$g_notification_menu_var2"), 
      (str_store_faction_name, s3, ":faction"), 
      
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   
   #ash add this one after size testing...
  ("notification_new_riot",0,
    "You receive word the peasants of the {s5} are rioting! The skies above {s6} are black with smoke, and cries of death fill the air \
    only time will tell if this is the beginning of open revolt...",
    "none", 
    
    [ 
    (str_store_faction_name, s5, "$g_notification_menu_var1"),
    (str_store_party_name, s6, "$g_notification_menu_var2"),
    
     (str_clear,s1),
          (str_store_string,s1,"@You receive word the peasants of the {s5} are rioting! The skies above {s6} are black with smoke, and cries of death fill the air. Only time will tell if this is the beginning of open revolt...."),
         # (display_message, "@{s1}"),
          (jump_to_menu, "mnu_riot_event"),
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("notification_player_riot",0,
    "You receive word the peasants of the {s1} are rioting! The skies above {s1} are black with smoke, and cries of death fill the air \
    only time will tell if this is the beginning of open revolt...",
    "none", 
    
    [(set_background_mesh, "mesh_pic_messenger1"), 
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      #(str_store_troop_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
  
   ("notification_riot_stoped",0,
    "You receive word the peasants of the {s1} have stopped rioting. Only time will tell if this new peace will hold...",
    "none", 
    
    [ (str_store_party_name, s1, "$g_notification_menu_var1"),
       (set_background_mesh, "mesh_pic_messenger1"),
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
 
    
    ("notification_new_revolt",0,
    "You receive word the peasants of the {s1} are revolting! Black smoke fill the Kingdom's sky's, and death is in the air. \
    Surely {s2} will be praying to whatever God they believe in....",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_villageriot"),  
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
    
       
    ],
    [("continue",[], "Continue...",
        [
         # (call_script, "script_kill_lord", "$g_notification_menu_var2"),  
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
  ##
  
  ("notification_revolt_success",0,
    "You receive ghastly news! The rebels in {s1} have overthrown the government and {s12} has been beheaded in the public square! This should be a lesson to all monarchs \
    on the importance of kingdom moral...",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_beheaded"),  
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
     # (str_store_troop_name, s2, "$g_notification_menu_var2"),
    
       
    ],
    [("continue",[], "Continue...",
        [
         # (call_script, "script_kill_lord", "$g_notification_menu_var2"),  
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("notification_revolt_ended",0,
    "You receive news the rebels in {s1} have been put down, and {s2} can again sleep peacefully. This should still be a lesson to all monarchs \
    on the importance of kingdom moral.",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_emptybook"), 
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("notification_civil_war",0,
    "You receive strange news, it seems a number of lords in {s1} are trying to overthrown the government! And {s2} seems to have sights on the thrown itself! \
    Worse, they have convinced others to join in this betrayal. It is a dark day for all true Monarchs.",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_messenger1"),  
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
     
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("notification_civil_war_lost",0,
    "You receive word the nobles of the {s1} have successfully overthrown their one true King! \
    rumors abound if the former Monarch is really dead or simply in hiding, but for now, {s1} has a new leader...",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_crown"), 
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      #(str_store_troop_name, s2, "$g_notification_menu_var2"),
     
       
    ],
    [("continue",[], "Continue...",
        [
          
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("notification_civil_war_over",0,
    "You receive word the noble lords in {s1} have successfully been put down, {s2} was beheaded in a public square, and their co-conspirators have been exiled, such is the price for breaking their oath.",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_defeat1"),  
    (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
       
    ],
    [("continue",[], "Continue...",
        [
            
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("lords_revange",0,
    "You receive word that {s1} has declared their intention to bring you down! As the oldest son of {s2} they are determined to see justice done!",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_raven"),  
    (str_store_troop_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
     
     
       
    ],
    [("continue",[], "Continue...",
        [
        
            (troop_get_slot, ":led_party", "$g_notification_menu_var1", slot_troop_leaded_party),
            
        (try_begin),
        (party_is_active, ":led_party"),
            
        (party_force_add_members, ":led_party", "trp_mercenary_swordsman", 25), 
        (party_force_add_members, ":led_party", "trp_hired_blade", 6),
        (party_force_add_members, ":led_party", "trp_hired_assassin", 2),
    
        (troop_get_slot, ":personality", "$g_notification_menu_var1", slot_lord_reputation_type), 
        (store_troop_faction, ":faction", "$g_notification_menu_var1"), 
        
        (try_begin), 
        (this_or_next|eq, ":personality", lrep_cunning), 
        (eq, ":personality", lrep_debauched), 
        (call_script, "script_send_assasin", ":led_party", "p_main_party", ":faction"),
        (try_end), 
        
        (call_script, "script_party_set_ai_state", ":led_party", spai_engaging_army, "p_main_party"),
        # (party_set_ai_target_position, ":led_party", "p_main_party"), 
        # (party_set_ai_object, ":led_party", "p_main_party"), 
        # (party_set_slot,  ":led_party", slot_party_ai_state, spai_engaging_army),
        (party_set_extra_text, ":led_party", "str_mortal_enemy"),
        
        (try_end), 
        
        (troop_set_slot, "$g_notification_menu_var1", slot_troop_mission_revange, 1), 
           
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("bastard_rises",0,
    "You receive word {s1} has claimed to be the bastard son of {s2}. They have declared their intention to bring you down! As the only son of their now slain father, they are determined to see justice done!",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_raven"),  
    (str_store_troop_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
   (play_sound, "snd_raven"),  
    
       
    ],
    [("continue",[], "Continue...",
        [
           (troop_get_slot, ":led_party", "$g_notification_menu_var1", slot_troop_leaded_party),
           
        (try_begin),
        (party_is_active, ":led_party"),
            
        (party_force_add_members, ":led_party", "trp_mercenary_swordsman", 25), 
        (party_force_add_members, ":led_party", "trp_hired_blade", 6),
        (party_force_add_members, ":led_party", "trp_hired_assassin", 2),
    
        (troop_get_slot, ":personality", "$g_notification_menu_var1", slot_lord_reputation_type), 
        (store_troop_faction, ":faction", "$g_notification_menu_var1"), 
        
        (try_begin), 
        (this_or_next|eq, ":personality", lrep_cunning), 
        (eq, ":personality", lrep_debauched), 
        (call_script, "script_send_assasin", ":led_party", "p_main_party", ":faction"),
        (try_end), 
        
        (call_script, "script_party_set_ai_state", ":led_party", spai_engaging_army, "p_main_party"),
        # (party_set_ai_target_position, ":led_party", "p_main_party"), 
        # (party_set_ai_behavior, ":led_party", ai_bhvr_attack_party),
        # (party_set_ai_object, ":led_party", "p_main_party"), 
        # (party_set_slot,  ":led_party", slot_party_ai_state, spai_engaging_army),
        (party_set_extra_text, ":led_party", "str_mortal_enemy"),
        
        (try_end), 
        
        (troop_set_slot, "$g_notification_menu_var1", slot_troop_mission_revange, 1), 
           
          (change_screen_return),
      ]),
      
       
    ]
  ),
  
   ("son_killed",0,
    "Searching the battle field's dead you find your son, bloody and dieing. As his tired eyes look onto yours one last time, you know you'll never see such sadness again, and as his gaze " +
    "drifts towards the heavens, tears run down both your faces.",
    "none", 
    
    [ 
      (set_background_mesh, "mesh_pic_raven"), 
       (play_sound, "snd_raven"),
    ],
    [("continue",[], "Continue...",
        [
           
           (troop_set_slot, "trp_enemy_son", slot_troop_occupation, dplmc_slto_dead), 
           
           (troop_get_slot, ":leaded_party", "trp_enemy_son", slot_troop_leaded_party), 
           (try_begin), 
              (party_is_active, ":leaded_party"),
        (neq, ":leaded_party", "p_main_party"),
        (remove_party, ":leaded_party"),
        (troop_set_slot, "trp_enemy_son", slot_troop_leaded_party, -1),
    (try_end),
    
    (troop_set_note_available, "trp_enemy_son", 0), 
    (call_script, "script_change_player_relation_with_faction", "fac_adventurers", 60), ##reset relations   
    
    (leave_encounter),
    
    (jump_to_menu, "mnu_auto_return_to_map"), 
            
           
          
      ]),
      
       
    ]
  ),
  
   ("player_killed",0,
    "In the night, assassins entered your tent - they slit your throat while you slept! ^^ Your journey is over...",
    "none", 
    
    [ (set_background_mesh, "mesh_pic_raven"), 
       (play_sound, "snd_raven"),
    ],
    [("continue",[], "Continue...",
        [
           
        
          #(change_screen_quit),
          (jump_to_menu, "mnu_player_killed4"), ##new support if player has children
      ]),
      
       
    ]
  ),
  
   ("player_killed2",0,
    "You awake from the battle to find your hands bound behind your back, and {s6}'s smug smile looking down at you - the blinding sun against their back...",
    "none", 
    
    [ 
      (set_background_mesh, "mesh_pic_raven"), 
     (str_store_troop_name, s6, "$temp"), 
       
    ],
    [("continue",[], "Continue...",
        [
           
           (troop_set_health, "$temp", 100), 
           
           (call_script, "script_setup_troop_meeting", "$temp", -1),
            (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
                                (modify_visitors_at_site,":meeting_scene"),(reset_visitors),
                                (set_visitor,0,"trp_player"),
                               
                                (set_visitor,17,"$temp"),
                                (set_jump_mission,"mt_conversation_encounter"),
                                (jump_to_scene,":meeting_scene"),
                                (assign, "$talk_context", tc_kill_player),
                                (change_screen_map_conversation, "$temp"),
           
          
      ]),
      
       
    ]
  ),
  
  # 
  
  ("player_killed4",0,
    "{s6}.",
    "none", 
    
    [ 
     (str_clear, s6), 
     
       (assign, "$temp", 0), 
       ##new 3.0 player children can take over...
       (try_begin), 
       (eq, "$g_start_hired_assassin_fight", 3),
       (str_store_string, s6, "@The assassin plunges their dagger into your heart - then, only darkness. Your journey has ended here."), 
        (try_begin), 
       (this_or_next|troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_player_companion), 
       (troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_kingdom_hero), 
       (str_store_string, s6, "@The assassin plunges their dagger into your heart - then, only darkness. Although {playername}'s journey ends here, you have children to carry on your legacy. Do you wish to keep playing as one of them?"), 
       (assign, "$temp", 1),
       (else_try), 
       (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_player_companion),
       (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_hero), 
       (troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_lady), 
       (str_store_string, s6, "@The assassin plunges their dagger into your heart - then, only darkness. Although {playername}'s journey ends here, you have children to carry on your legacy. Do you wish to keep playing as one of them?"), 
       (assign, "$temp", 2),
       (try_end), 
       (else_try),
        (eq, "$old_age_death", 1),
        (str_store_string, s6, "@In the middle of the night you awake, coughing and sore. Your chest wrenching with pain - then, only darkness. You have passed in the night an old warlord, yet if you still have children to carry on your legacy you may wish to continue as one of them."), 
       (assign, "$temp", 1),
       (else_try), 
       (gt, "$total_children", 0),
       (try_begin), 
       (this_or_next|troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_player_companion), #new support companions
       (troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_kingdom_hero), 
       (str_store_string, s6, "@Although {playername}'s journey ends here, you have children to carry on your legacy. Do you wish to keep playing as one of them?"), 
       (assign, "$temp", 1),
       (else_try), 
       (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_player_companion),
       (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_hero), 
       (troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_lady), 
       (str_store_string, s6, "@Although {playername}'s journey ends here, you have children to carry on your legacy. Do you wish to keep playing as one of them?"), 
       (assign, "$temp", 2),
       (else_try), 
       (eq, "$player_is_child", 1), 
       (assign, ":result", -1), 
       (assign, ":oldest_age", -1), 
       (try_for_range, ":child_of_child", npc_children_male_begin, npc_children_female_end), 
       (this_or_next|troop_slot_eq, ":child_of_child", slot_troop_occupation, slto_player_companion),
       (this_or_next|troop_slot_eq, ":child_of_child", slot_troop_occupation, slto_kingdom_hero), 
       (troop_slot_eq, ":child_of_child", slot_troop_occupation, slto_kingdom_lady), 
       (try_begin), 
       (this_or_next|troop_slot_eq, ":child_of_child", slot_troop_mother, "trp_player"), 
       (troop_slot_eq, ":child_of_child", slot_troop_father, "trp_player"), 
       (troop_get_slot, ":age", ":child_of_child", slot_troop_age), 
       (ge, ":age", 12), 
       (gt, ":age", ":oldest_age"), 
       (assign, ":oldest_age", ":age"), 
       (assign, ":result", ":child_of_child"), 
       (try_end), 
       (try_end), #loop
       (gt, ":result", 0), 
       (assign, "$temp2", ":result"), 
       (assign, "$temp", 3),
       (str_store_troop_name, s20, "trp_player_dead_saymotherfather"), 
       (str_store_string, s6, "@Like your {s20} before you, your journey ends, yet you have children to carry on your families legacy. Do you wish to keep playing as your oldest child?"), 
       (else_try), 
       (str_store_string, s6, "@Your journey is over."), 
       (try_end), 
       (else_try), 
        (str_store_string, s6, "@Your journey is over."), 
        (try_end), 
        
      (set_background_mesh, "mesh_pic_raven"), 
       (play_sound, "snd_raven"),
       
    ],
    [
    ("continue",[(eq,"$temp", 0),], "Continue...",
        [
           
          (change_screen_quit),
      ]),
      
      ("choose_son",[(gt,"$temp", 0),
      (neq,"$temp", 3),
      (this_or_next|troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_player_companion),
      (troop_slot_eq, "trp_child_m", slot_troop_occupation, slto_kingdom_hero), 
      (str_store_troop_name, s7, "trp_child_m"), 
      ], "Yes, I wish to continue as my son {s7}",
        [ #(change_screen_map), 
        #(call_script, "script_continue_as_offspring", "trp_child_m"),  
        (assign, "$temp", "trp_child_m"), 
        (jump_to_menu, "mnu_continue_as_child"), 
      ]),
      
      ("choose_daughter",[(gt,"$temp", 0),
      (neq,"$temp", 3),
      (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_player_companion),
      (this_or_next|troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_hero), 
      (troop_slot_eq, "trp_child_f", slot_troop_occupation, slto_kingdom_lady), 
      (str_store_troop_name, s8, "trp_child_f"), 
      ], "Yes, I wish to continue as my daughter {s8}",
        [#(change_screen_map), 
        #(call_script, "script_continue_as_offspring", "trp_child_f"),  
        (assign, "$temp", "trp_child_f"), 
        (jump_to_menu, "mnu_continue_as_child"), 
      ]),
      
       ("choose_next_gen",[(eq,"$temp", 3),
       (is_between, "$temp2", heroes_begin, heroes_end),  
      (this_or_next|troop_slot_eq, "$temp2", slot_troop_occupation, slto_player_companion),
      (this_or_next|troop_slot_eq, "$temp2", slot_troop_occupation, slto_kingdom_hero), 
      (troop_slot_eq, "$temp2", slot_troop_occupation, slto_kingdom_lady), 
      (str_store_troop_name, s8, "$temp2"), 
      ], "Yes, I wish to continue as my oldest child, {s8}",
        [#(change_screen_map), 
        #(call_script, "script_continue_as_offspring", "trp_child_f"),  
        (assign, "$temp", "$temp2"), 
        (jump_to_menu, "mnu_continue_as_child"), 
      ]),
      
      ("no_cont",[(gt,"$temp", 0),
      
      ], "No, I rest in peace",
        [
          (change_screen_quit),
      ]),
      
    ]
  ),


  (
    "assasin_on_map",menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "While resting at camp you hear strange sounds outside your tent...",
    "none",
    [(set_background_mesh, "mesh_pic_raven"),
    
      
    ],
    [
      ("choice_35_1no",[],"Investigate...",
        [
          (call_script, "script_change_troop_renown", "trp_player", 1),
         
        (set_jump_mission,"mt_assasin"),
          (modify_visitors_at_site,"scn_assasin_camp"),
          (reset_visitors),
           (party_stack_get_troop_id, ":stack_troop","p_main_party",1),
           (party_stack_get_troop_id, ":stack_troop2","p_main_party",2),
        
          (set_visitor,1,"trp_plyr_hired_assasin"),
      
          (set_visitor,3,":stack_troop"),
          (set_visitor,4,":stack_troop2"), 
         
         
          (set_jump_entry, 0),
          (scene_set_slot, "scn_assasin_camp", slot_scene_visited, 1),
          (assign, "$g_next_menu", "mnu_auto_return_to_map"), 
          (jump_to_scene,"scn_assasin_camp"),
          (change_screen_mission),    
          #########
        ]
      ),
    ]
  ),
  
 
  ( "continue_as_child",0,"stub","none",
    [ (leave_encounter), 
    (change_screen_map), 
        (call_script, "script_continue_as_offspring", "$temp"), 
    ],
    []
 ),      

